
KF32A156_DEMO_PMSM_FOC_V1_1.elf:     file format elf32-kungfu32-little


Disassembly of section .text:

00000000 <_start>:
__vector_entry__:
       0:	00 00 01 10 88 57 00 00 c0 48 00 00 c4 48 00 00     .....W...H...H..
      10:	00 00 00 00 c8 48 00 00 00 00 00 00 2c ce fd ef     .....H......,...
	...
      2c:	cc 48 00 00 00 00 00 00 00 00 00 00 d0 48 00 00     .H...........H..
      3c:	d4 48 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .H..............
	...
      6c:	d8 48 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .H..............
	...
      84:	dc 48 00 00 38 49 00 00 00 00 00 00 00 00 00 00     .H..8I..........
      94:	3c 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00     <I..............
	...

00000200 <SFR_Config>:
SFR_Config():
KF32A9K1XXX.h:13916
   -- 函数定义
   ---------------------------------------------------------------------------- */
/* 写特殊功能寄存器 */
static inline uint32_t
SFR_Config (uint32_t SfrMem, uint32_t SfrMask, uint32_t WriteVal)
{
     200:	ec 30       	SUB       SP, #12
     202:	e0 85       	ST.W      [SP], R0
     204:	01 21       	ST.W      [SP + #1], R1
     206:	02 22       	ST.W      [SP + #2], R2
KF32A9K1XXX.h:13917
    return ((SfrMem & SfrMask) | (WriteVal));
     208:	5e 82       	LD.W      R5, [SP]
     20a:	01 0c       	LD.W      R4, [SP + #1]
     20c:	25 d5       	ANL       R4, R5, R4
     20e:	02 0d       	LD.W      R5, [SP + #2]
     210:	6c d7       	ORL       R5, R4, R5
KF32A9K1XXX.h:13918
}
     212:	05 58       	MOV       R0, R5
     214:	ec 28       	ADD       SP, #12
     216:	1d 5c       	JMP       LR

00000218 <ADC_Reset>:
ADC_Reset():
..\src\kf32a9k1xxx_adc.c:55
  * 输入  ADCx: 指向ADC内存结构的指针，取值为ADC0_SFR~ADC2_SFR。
  * 返回  无。
  */
void
ADC_Reset (ADC_SFRmap* ADCx)
{
     218:	2d 5d       	PUSH      LR
     21a:	e4 30       	SUB       SP, #4
     21c:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_adc.c:57
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     21e:	5e 82       	LD.W      R5, [SP]
     220:	28 44       	LD        R4, [PC + #40]        ;->0x2c0  :=0x40000580
     222:	54 70       	CMP       R5, R4
     224:	09 f0       	JZ        $+9                   ;->0x236
     226:	5e 82       	LD.W      R5, [SP]
     228:	27 44       	LD        R4, [PC + #39]        ;->0x2c4  :=0x40000600
     22a:	54 70       	CMP       R5, R4
     22c:	05 f0       	JZ        $+5                   ;->0x236
     22e:	5e 82       	LD.W      R5, [SP]
     230:	26 44       	LD        R4, [PC + #38]        ;->0x2c8  :=0x40000680
     232:	54 70       	CMP       R5, R4
     234:	03 f1       	JNZ       $+3                   ;->0x23a
     236:	51 10       	MOV       R5, #1
     238:	02 04       	SJMP      $+2                   ;->0x23c
     23a:	50 10       	MOV       R5, #0
     23c:	05 58       	MOV       R0, R5
     23e:	24 45       	LD        R5, [PC + #36]        ;->0x2cc  :=0x4ba6
     240:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:59

    if (ADCx == ADC0_SFR)
     242:	5e 82       	LD.W      R5, [SP]
     244:	1f 44       	LD        R4, [PC + #31]        ;->0x2c0  :=0x40000580
     246:	54 70       	CMP       R5, R4
     248:	11 f1       	JNZ       $+17                  ;->0x26a
..\src\kf32a9k1xxx_adc.c:61
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC0RST, TRUE);
     24a:	01 10       	MOV       R0, #1
     24c:	83 7a       	LSL       R0, #11
     24e:	11 10       	MOV       R1, #1
     250:	20 45       	LD        R5, [PC + #32]        ;->0x2d0  :=0x3144
     252:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:62
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC0RST, FALSE);
     254:	01 10       	MOV       R0, #1
     256:	83 7a       	LSL       R0, #11
     258:	10 10       	MOV       R1, #0
     25a:	1e 45       	LD        R5, [PC + #30]        ;->0x2d0  :=0x3144
     25c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:63
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_ADC0CLKEN, TRUE);
     25e:	01 10       	MOV       R0, #1
     260:	83 7a       	LSL       R0, #11
     262:	11 10       	MOV       R1, #1
     264:	1c 45       	LD        R5, [PC + #28]        ;->0x2d4  :=0x2fb8
     266:	05 5c       	LJMP      R5
     268:	28 04       	SJMP      $+40                  ;->0x2b8
..\src\kf32a9k1xxx_adc.c:65
    }
    else if (ADCx == ADC1_SFR)
     26a:	5e 82       	LD.W      R5, [SP]
     26c:	16 44       	LD        R4, [PC + #22]        ;->0x2c4  :=0x40000600
     26e:	54 70       	CMP       R5, R4
     270:	11 f1       	JNZ       $+17                  ;->0x292
..\src\kf32a9k1xxx_adc.c:67
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC1RST, TRUE);
     272:	01 10       	MOV       R0, #1
     274:	84 7a       	LSL       R0, #12
     276:	11 10       	MOV       R1, #1
     278:	16 45       	LD        R5, [PC + #22]        ;->0x2d0  :=0x3144
     27a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:68
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC1RST, FALSE);
     27c:	01 10       	MOV       R0, #1
     27e:	84 7a       	LSL       R0, #12
     280:	10 10       	MOV       R1, #0
     282:	14 45       	LD        R5, [PC + #20]        ;->0x2d0  :=0x3144
     284:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:69
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_ADC1CLKEN, TRUE);
     286:	01 10       	MOV       R0, #1
     288:	84 7a       	LSL       R0, #12
     28a:	11 10       	MOV       R1, #1
     28c:	12 45       	LD        R5, [PC + #18]        ;->0x2d4  :=0x2fb8
     28e:	05 5c       	LJMP      R5
     290:	14 04       	SJMP      $+20                  ;->0x2b8
..\src\kf32a9k1xxx_adc.c:71
    }
    else if (ADCx == ADC2_SFR)
     292:	5e 82       	LD.W      R5, [SP]
     294:	0d 44       	LD        R4, [PC + #13]        ;->0x2c8  :=0x40000680
     296:	54 70       	CMP       R5, R4
     298:	10 f1       	JNZ       $+16                  ;->0x2b8
..\src\kf32a9k1xxx_adc.c:73
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC2RST, TRUE);
     29a:	01 10       	MOV       R0, #1
     29c:	85 7a       	LSL       R0, #13
     29e:	11 10       	MOV       R1, #1
     2a0:	0c 45       	LD        R5, [PC + #12]        ;->0x2d0  :=0x3144
     2a2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:74
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC2RST, FALSE);
     2a4:	01 10       	MOV       R0, #1
     2a6:	85 7a       	LSL       R0, #13
     2a8:	10 10       	MOV       R1, #0
     2aa:	0a 45       	LD        R5, [PC + #10]        ;->0x2d0  :=0x3144
     2ac:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:75
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_ADC2CLKEN, TRUE);
     2ae:	01 10       	MOV       R0, #1
     2b0:	85 7a       	LSL       R0, #13
     2b2:	11 10       	MOV       R1, #1
     2b4:	08 45       	LD        R5, [PC + #8]         ;->0x2d4  :=0x2fb8
     2b6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:81
    }
    else
    {
        ;
    }
}
     2b8:	e4 28       	ADD       SP, #4
     2ba:	0d 5d       	POP       LR
     2bc:	1d 5c       	JMP       LR
     2be:	00 00       	NOP      NOP      
     2c0:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x5c0	@@: LD        R0, [PC + #0]         ;->0x2c0  :=0x40000580
     2c4:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0xfffffec4	@@: LD        R0, [PC + #0]         ;->0x2c4  :=0x40000600
     2c8:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0xffffffc8	@@: LD        R0, [PC + #0]         ;->0x2c8  :=0x40000680
     2cc:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
     2d0:	44 31 00 00 	.long     0x00003144 ->000012612  [!!!@2@:SUB       R4, #20	@@: NOP      
     2d4:	b8 2f 00 00 	.long     0x00002fb8 ->000012216  [!!!@2@:ADD       R11, #120	@@: NOP      

000002d8 <ADC_Configuration>:
ADC_Configuration():
..\src\kf32a9k1xxx_adc.c:91
  *       adcInitStruct: ADC模块配置信息结构体指针。
  * 返回  无。
  */
void
ADC_Configuration (ADC_SFRmap* ADCx, ADC_InitTypeDef* adcInitStruct)
{
     2d8:	2d 5d       	PUSH      LR
     2da:	ec 30       	SUB       SP, #12
     2dc:	01 20       	ST.W      [SP + #1], R0
     2de:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_adc.c:92
    uint32_t tmpreg = 0;
     2e0:	50 10       	MOV       R5, #0
     2e2:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:95

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     2e4:	01 0c       	LD.W      R4, [SP + #1]
     2e6:	9f 45       	LD        R5, [PC + #159]       ;->0x560  :=0x40000580
     2e8:	45 70       	CMP       R4, R5
     2ea:	09 f0       	JZ        $+9                   ;->0x2fc
     2ec:	01 0c       	LD.W      R4, [SP + #1]
     2ee:	9e 45       	LD        R5, [PC + #158]       ;->0x564  :=0x40000600
     2f0:	45 70       	CMP       R4, R5
     2f2:	05 f0       	JZ        $+5                   ;->0x2fc
     2f4:	01 0c       	LD.W      R4, [SP + #1]
     2f6:	9d 45       	LD        R5, [PC + #157]       ;->0x568  :=0x40000680
     2f8:	45 70       	CMP       R4, R5
     2fa:	03 f1       	JNZ       $+3                   ;->0x300
     2fc:	51 10       	MOV       R5, #1
     2fe:	02 04       	SJMP      $+2                   ;->0x302
     300:	50 10       	MOV       R5, #0
     302:	05 58       	MOV       R0, R5
     304:	9a 45       	LD        R5, [PC + #154]       ;->0x56c  :=0x4ba6
     306:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:96
    CHECK_RESTRICTION(CHECK_ADC_CLK(adcInitStruct->m_Clock));
     308:	02 0d       	LD.W      R5, [SP + #2]
     30a:	55 82       	LD.W      R5, [R5]
     30c:	50 38       	CMP       R5, #0
     30e:	09 f0       	JZ        $+9                   ;->0x320
     310:	02 0d       	LD.W      R5, [SP + #2]
     312:	55 82       	LD.W      R5, [R5]
     314:	52 38       	CMP       R5, #2
     316:	05 f0       	JZ        $+5                   ;->0x320
     318:	02 0d       	LD.W      R5, [SP + #2]
     31a:	55 82       	LD.W      R5, [R5]
     31c:	54 38       	CMP       R5, #4
     31e:	03 f1       	JNZ       $+3                   ;->0x324
     320:	51 10       	MOV       R5, #1
     322:	02 04       	SJMP      $+2                   ;->0x326
     324:	50 10       	MOV       R5, #0
     326:	05 58       	MOV       R0, R5
     328:	91 45       	LD        R5, [PC + #145]       ;->0x56c  :=0x4ba6
     32a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:97
    CHECK_RESTRICTION(CHECK_ADC_CLK_DIV(adcInitStruct->m_ClockDiv));
     32c:	02 0d       	LD.W      R5, [SP + #2]
     32e:	6d 98       	LD.W      R5, [R5 + #1]
     330:	50 38       	CMP       R5, #0
     332:	1d f0       	JZ        $+29                  ;->0x36c
     334:	02 0d       	LD.W      R5, [SP + #2]
     336:	65 98       	LD.W      R4, [R5 + #1]
     338:	5f 1f       	MOV       R5, #255
     33a:	6d c0       	ADD       R5, R5, #1
     33c:	45 70       	CMP       R4, R5
     33e:	17 f0       	JZ        $+23                  ;->0x36c
     340:	02 0d       	LD.W      R5, [SP + #2]
     342:	65 98       	LD.W      R4, [R5 + #1]
     344:	51 10       	MOV       R5, #1
     346:	a9 7a       	LSL       R5, #9
     348:	45 70       	CMP       R4, R5
     34a:	11 f0       	JZ        $+17                  ;->0x36c
     34c:	02 0d       	LD.W      R5, [SP + #2]
     34e:	65 98       	LD.W      R4, [R5 + #1]
     350:	88 45       	LD        R5, [PC + #136]       ;->0x570  :=0x300
     352:	45 70       	CMP       R4, R5
     354:	0c f0       	JZ        $+12                  ;->0x36c
     356:	02 0d       	LD.W      R5, [SP + #2]
     358:	65 98       	LD.W      R4, [R5 + #1]
     35a:	51 10       	MOV       R5, #1
     35c:	aa 7a       	LSL       R5, #10
     35e:	45 70       	CMP       R4, R5
     360:	06 f0       	JZ        $+6                   ;->0x36c
     362:	02 0d       	LD.W      R5, [SP + #2]
     364:	65 98       	LD.W      R4, [R5 + #1]
     366:	84 45       	LD        R5, [PC + #132]       ;->0x574  :=0x500
     368:	45 70       	CMP       R4, R5
     36a:	03 f1       	JNZ       $+3                   ;->0x370
     36c:	51 10       	MOV       R5, #1
     36e:	02 04       	SJMP      $+2                   ;->0x372
     370:	50 10       	MOV       R5, #0
     372:	05 58       	MOV       R0, R5
     374:	7e 45       	LD        R5, [PC + #126]       ;->0x56c  :=0x4ba6
     376:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:98
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_ScanMode));
     378:	02 0d       	LD.W      R5, [SP + #2]
     37a:	ad 98       	LD.W      R5, [R5 + #2]
     37c:	50 38       	CMP       R5, #0
     37e:	05 f0       	JZ        $+5                   ;->0x388
     380:	02 0d       	LD.W      R5, [SP + #2]
     382:	ad 98       	LD.W      R5, [R5 + #2]
     384:	51 38       	CMP       R5, #1
     386:	03 f1       	JNZ       $+3                   ;->0x38c
     388:	51 10       	MOV       R5, #1
     38a:	02 04       	SJMP      $+2                   ;->0x38e
     38c:	50 10       	MOV       R5, #0
     38e:	05 58       	MOV       R0, R5
     390:	77 45       	LD        R5, [PC + #119]       ;->0x56c  :=0x4ba6
     392:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:99
    CHECK_RESTRICTION(CHECK_ADC_CONV_MODE(adcInitStruct->m_ContinuousMode));
     394:	02 0d       	LD.W      R5, [SP + #2]
     396:	e5 98       	LD.W      R4, [R5 + #3]
     398:	51 10       	MOV       R5, #1
     39a:	2a 7b       	LSL       R5, #18
     39c:	45 70       	CMP       R4, R5
     39e:	05 f0       	JZ        $+5                   ;->0x3a8
     3a0:	02 0d       	LD.W      R5, [SP + #2]
     3a2:	ed 98       	LD.W      R5, [R5 + #3]
     3a4:	50 38       	CMP       R5, #0
     3a6:	03 f1       	JNZ       $+3                   ;->0x3ac
     3a8:	51 10       	MOV       R5, #1
     3aa:	02 04       	SJMP      $+2                   ;->0x3ae
     3ac:	50 10       	MOV       R5, #0
     3ae:	05 58       	MOV       R0, R5
     3b0:	6f 45       	LD        R5, [PC + #111]       ;->0x56c  :=0x4ba6
     3b2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:100
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_ExternalTrig_EN));
     3b4:	02 0d       	LD.W      R5, [SP + #2]
     3b6:	6d 99       	LD.W      R5, [R5 + #5]
     3b8:	50 38       	CMP       R5, #0
     3ba:	05 f0       	JZ        $+5                   ;->0x3c4
     3bc:	02 0d       	LD.W      R5, [SP + #2]
     3be:	6d 99       	LD.W      R5, [R5 + #5]
     3c0:	51 38       	CMP       R5, #1
     3c2:	03 f1       	JNZ       $+3                   ;->0x3c8
     3c4:	51 10       	MOV       R5, #1
     3c6:	02 04       	SJMP      $+2                   ;->0x3ca
     3c8:	50 10       	MOV       R5, #0
     3ca:	05 58       	MOV       R0, R5
     3cc:	68 45       	LD        R5, [PC + #104]       ;->0x56c  :=0x4ba6
     3ce:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:101
    CHECK_RESTRICTION(CHECK_ADC_EXT_TRIG(adcInitStruct->m_ExternalTrig));
     3d0:	02 0d       	LD.W      R5, [SP + #2]
     3d2:	ad 99       	LD.W      R5, [R5 + #6]
     3d4:	2c 7c       	LSR       R5, #4
     3d6:	57 3c       	CMP       R5, #71
     3d8:	08 f8       	JHI       $+8                   ;->0x3e8
     3da:	02 0d       	LD.W      R5, [SP + #2]
     3dc:	ad 99       	LD.W      R5, [R5 + #6]
     3de:	ac 7b       	LSL       R5, #28
     3e0:	50 38       	CMP       R5, #0
     3e2:	03 f1       	JNZ       $+3                   ;->0x3e8
     3e4:	51 10       	MOV       R5, #1
     3e6:	02 04       	SJMP      $+2                   ;->0x3ea
     3e8:	50 10       	MOV       R5, #0
     3ea:	05 58       	MOV       R0, R5
     3ec:	60 45       	LD        R5, [PC + #96]        ;->0x56c  :=0x4ba6
     3ee:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:102
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_HPExternalTrig_EN));
     3f0:	02 0d       	LD.W      R5, [SP + #2]
     3f2:	ed 99       	LD.W      R5, [R5 + #7]
     3f4:	50 38       	CMP       R5, #0
     3f6:	05 f0       	JZ        $+5                   ;->0x400
     3f8:	02 0d       	LD.W      R5, [SP + #2]
     3fa:	ed 99       	LD.W      R5, [R5 + #7]
     3fc:	51 38       	CMP       R5, #1
     3fe:	03 f1       	JNZ       $+3                   ;->0x404
     400:	51 10       	MOV       R5, #1
     402:	02 04       	SJMP      $+2                   ;->0x406
     404:	50 10       	MOV       R5, #0
     406:	05 58       	MOV       R0, R5
     408:	59 45       	LD        R5, [PC + #89]        ;->0x56c  :=0x4ba6
     40a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:103
    CHECK_RESTRICTION(CHECK_ADC_HPEXT_TRIG(adcInitStruct->m_HPExternalTrig));
     40c:	02 0d       	LD.W      R5, [SP + #2]
     40e:	2d 9a       	LD.W      R5, [R5 + #8]
     410:	2c 7d       	LSR       R5, #20
     412:	57 3c       	CMP       R5, #71
     414:	08 f8       	JHI       $+8                   ;->0x424
     416:	02 0d       	LD.W      R5, [SP + #2]
     418:	2d 9a       	LD.W      R5, [R5 + #8]
     41a:	ac 7a       	LSL       R5, #12
     41c:	50 38       	CMP       R5, #0
     41e:	03 f1       	JNZ       $+3                   ;->0x424
     420:	51 10       	MOV       R5, #1
     422:	02 04       	SJMP      $+2                   ;->0x426
     424:	50 10       	MOV       R5, #0
     426:	05 58       	MOV       R0, R5
     428:	51 45       	LD        R5, [PC + #81]        ;->0x56c  :=0x4ba6
     42a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:104
    CHECK_RESTRICTION(CHECK_ADC_DATA_ALIGN(adcInitStruct->m_DataAlign));
     42c:	02 0d       	LD.W      R5, [SP + #2]
     42e:	2d 99       	LD.W      R5, [R5 + #4]
     430:	58 38       	CMP       R5, #8
     432:	05 f0       	JZ        $+5                   ;->0x43c
     434:	02 0d       	LD.W      R5, [SP + #2]
     436:	2d 99       	LD.W      R5, [R5 + #4]
     438:	50 38       	CMP       R5, #0
     43a:	03 f1       	JNZ       $+3                   ;->0x440
     43c:	51 10       	MOV       R5, #1
     43e:	02 04       	SJMP      $+2                   ;->0x442
     440:	50 10       	MOV       R5, #0
     442:	05 58       	MOV       R0, R5
     444:	4a 45       	LD        R5, [PC + #74]        ;->0x56c  :=0x4ba6
     446:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:105
    CHECK_RESTRICTION(CHECK_ADC_REF(adcInitStruct->m_VoltageRef));
     448:	02 0d       	LD.W      R5, [SP + #2]
     44a:	65 9a       	LD.W      R4, [R5 + #9]
     44c:	51 10       	MOV       R5, #1
     44e:	2b 7b       	LSL       R5, #19
     450:	45 70       	CMP       R4, R5
     452:	0d f0       	JZ        $+13                  ;->0x46c
     454:	02 0d       	LD.W      R5, [SP + #2]
     456:	65 9a       	LD.W      R4, [R5 + #9]
     458:	51 10       	MOV       R5, #1
     45a:	2a 7b       	LSL       R5, #18
     45c:	45 70       	CMP       R4, R5
     45e:	07 f0       	JZ        $+7                   ;->0x46c
     460:	02 0d       	LD.W      R5, [SP + #2]
     462:	65 9a       	LD.W      R4, [R5 + #9]
     464:	51 10       	MOV       R5, #1
     466:	29 7b       	LSL       R5, #17
     468:	45 70       	CMP       R4, R5
     46a:	03 f1       	JNZ       $+3                   ;->0x470
     46c:	51 10       	MOV       R5, #1
     46e:	02 04       	SJMP      $+2                   ;->0x472
     470:	50 10       	MOV       R5, #0
     472:	05 58       	MOV       R0, R5
     474:	3e 45       	LD        R5, [PC + #62]        ;->0x56c  :=0x4ba6
     476:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:106
    CHECK_RESTRICTION(CHECK_ADC_REGULAR_LENGTH(adcInitStruct->m_NumOfConv));
     478:	02 0d       	LD.W      R5, [SP + #2]
     47a:	ad 9a       	LD.W      R5, [R5 + #10]
     47c:	50 38       	CMP       R5, #0
     47e:	07 f0       	JZ        $+7                   ;->0x48c
     480:	02 0d       	LD.W      R5, [SP + #2]
     482:	ad 9a       	LD.W      R5, [R5 + #10]
     484:	50 39       	CMP       R5, #16
     486:	03 f8       	JHI       $+3                   ;->0x48c
     488:	51 10       	MOV       R5, #1
     48a:	02 04       	SJMP      $+2                   ;->0x48e
     48c:	50 10       	MOV       R5, #0
     48e:	05 58       	MOV       R0, R5
     490:	37 45       	LD        R5, [PC + #55]        ;->0x56c  :=0x4ba6
     492:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:107
    CHECK_RESTRICTION(CHECK_ADC_HIGH_PRIORITY_LENGTH(adcInitStruct->m_NumOfHPConv));
     494:	02 0d       	LD.W      R5, [SP + #2]
     496:	ed 9a       	LD.W      R5, [R5 + #11]
     498:	50 38       	CMP       R5, #0
     49a:	07 f0       	JZ        $+7                   ;->0x4a8
     49c:	02 0d       	LD.W      R5, [SP + #2]
     49e:	ed 9a       	LD.W      R5, [R5 + #11]
     4a0:	54 38       	CMP       R5, #4
     4a2:	03 f8       	JHI       $+3                   ;->0x4a8
     4a4:	51 10       	MOV       R5, #1
     4a6:	02 04       	SJMP      $+2                   ;->0x4aa
     4a8:	50 10       	MOV       R5, #0
     4aa:	05 58       	MOV       R0, R5
     4ac:	30 45       	LD        R5, [PC + #48]        ;->0x56c  :=0x4ba6
     4ae:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:115
    /* 根据结构体成员m_Clock，设置CLKS位域 */
    /* 根据结构体成员m_ClockDiv，设置ADCCLKS位域 */
    /* 根据结构体成员m_ScanMode，设置SCANEN位域 */
    /* 根据结构体成员m_ContinuousMode，设置CONT位域 */
    /* 根据结构体成员m_DataAlign，设置LR位域 */
    tmpreg = (uint32_t)(adcInitStruct->m_Clock | \
     4b0:	02 0d       	LD.W      R5, [SP + #2]
     4b2:	55 82       	LD.W      R5, [R5]
..\src\kf32a9k1xxx_adc.c:116
                        adcInitStruct->m_ClockDiv | \
     4b4:	02 0c       	LD.W      R4, [SP + #2]
     4b6:	64 98       	LD.W      R4, [R4 + #1]
..\src\kf32a9k1xxx_adc.c:115
    /* 根据结构体成员m_Clock，设置CLKS位域 */
    /* 根据结构体成员m_ClockDiv，设置ADCCLKS位域 */
    /* 根据结构体成员m_ScanMode，设置SCANEN位域 */
    /* 根据结构体成员m_ContinuousMode，设置CONT位域 */
    /* 根据结构体成员m_DataAlign，设置LR位域 */
    tmpreg = (uint32_t)(adcInitStruct->m_Clock | \
     4b8:	25 d7       	ORL       R4, R5, R4
..\src\kf32a9k1xxx_adc.c:117
                        adcInitStruct->m_ClockDiv | \
                        ((uint32_t)adcInitStruct->m_ScanMode << 17) | \
     4ba:	02 0d       	LD.W      R5, [SP + #2]
     4bc:	ad 98       	LD.W      R5, [R5 + #2]
     4be:	29 7b       	LSL       R5, #17
..\src\kf32a9k1xxx_adc.c:116
    /* 根据结构体成员m_ClockDiv，设置ADCCLKS位域 */
    /* 根据结构体成员m_ScanMode，设置SCANEN位域 */
    /* 根据结构体成员m_ContinuousMode，设置CONT位域 */
    /* 根据结构体成员m_DataAlign，设置LR位域 */
    tmpreg = (uint32_t)(adcInitStruct->m_Clock | \
                        adcInitStruct->m_ClockDiv | \
     4c0:	64 d7       	ORL       R4, R4, R5
..\src\kf32a9k1xxx_adc.c:118
                        ((uint32_t)adcInitStruct->m_ScanMode << 17) | \
                        adcInitStruct->m_ContinuousMode | \
     4c2:	02 0d       	LD.W      R5, [SP + #2]
     4c4:	ed 98       	LD.W      R5, [R5 + #3]
..\src\kf32a9k1xxx_adc.c:117
    /* 根据结构体成员m_ScanMode，设置SCANEN位域 */
    /* 根据结构体成员m_ContinuousMode，设置CONT位域 */
    /* 根据结构体成员m_DataAlign，设置LR位域 */
    tmpreg = (uint32_t)(adcInitStruct->m_Clock | \
                        adcInitStruct->m_ClockDiv | \
                        ((uint32_t)adcInitStruct->m_ScanMode << 17) | \
     4c6:	64 d7       	ORL       R4, R4, R5
..\src\kf32a9k1xxx_adc.c:119
                        adcInitStruct->m_ContinuousMode | \
                        adcInitStruct->m_DataAlign
     4c8:	02 0d       	LD.W      R5, [SP + #2]
     4ca:	2d 99       	LD.W      R5, [R5 + #4]
..\src\kf32a9k1xxx_adc.c:115
    /* 根据结构体成员m_Clock，设置CLKS位域 */
    /* 根据结构体成员m_ClockDiv，设置ADCCLKS位域 */
    /* 根据结构体成员m_ScanMode，设置SCANEN位域 */
    /* 根据结构体成员m_ContinuousMode，设置CONT位域 */
    /* 根据结构体成员m_DataAlign，设置LR位域 */
    tmpreg = (uint32_t)(adcInitStruct->m_Clock | \
     4cc:	6c d7       	ORL       R5, R4, R5
     4ce:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:121
                        adcInitStruct->m_ClockDiv | \
                        ((uint32_t)adcInitStruct->m_ScanMode << 17) | \
                        adcInitStruct->m_ContinuousMode | \
                        adcInitStruct->m_DataAlign
                        );
    ADCx->CTL0 = SFR_Config (ADCx->CTL0, ~ADC_CTL0_INIT_MASK, tmpreg);
     4d0:	01 0d       	LD.W      R5, [SP + #1]
     4d2:	55 82       	LD.W      R5, [R5]
     4d4:	05 58       	MOV       R0, R5
     4d6:	29 41       	LD        R1, [PC + #41]        ;->0x578  :=0xfff9f8f1
     4d8:	2e 82       	LD.W      R2, [SP]
     4da:	29 45       	LD        R5, [PC + #41]        ;->0x57c  :=0x200
     4dc:	05 5c       	LJMP      R5
     4de:	a0 58       	MOV       R5, R0
     4e0:	01 0c       	LD.W      R4, [SP + #1]
     4e2:	45 85       	ST.W      [R4], R5
..\src\kf32a9k1xxx_adc.c:129
    /* 根据结构体成员m_ExternalTrig_EN，设置EXTEN位域 */
    /* 根据结构体成员m_HPExternalTrig_EN，设置HPEXTEN位域 */
    /* 根据结构体成员m_ExternalTrig，设置NCH位域 */
    /* 根据结构体成员m_HPExternalTrig，设置HCH位域 */
    /* 根据结构体成员m_VoltageRef，设置REF位域 */
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
     4e4:	02 0d       	LD.W      R5, [SP + #2]
     4e6:	6d 99       	LD.W      R5, [R5 + #5]
     4e8:	3b 10       	MOV       R3, #11
     4ea:	e5 da       	LSL       R4, R5, R3
..\src\kf32a9k1xxx_adc.c:130
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
     4ec:	02 0d       	LD.W      R5, [SP + #2]
     4ee:	ed 99       	LD.W      R5, [R5 + #7]
     4f0:	ab 7b       	LSL       R5, #27
..\src\kf32a9k1xxx_adc.c:129
    /* 根据结构体成员m_ExternalTrig_EN，设置EXTEN位域 */
    /* 根据结构体成员m_HPExternalTrig_EN，设置HPEXTEN位域 */
    /* 根据结构体成员m_ExternalTrig，设置NCH位域 */
    /* 根据结构体成员m_HPExternalTrig，设置HCH位域 */
    /* 根据结构体成员m_VoltageRef，设置REF位域 */
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
     4f2:	64 d7       	ORL       R4, R4, R5
..\src\kf32a9k1xxx_adc.c:131
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
                         adcInitStruct->m_ExternalTrig | \
     4f4:	02 0d       	LD.W      R5, [SP + #2]
     4f6:	ad 99       	LD.W      R5, [R5 + #6]
..\src\kf32a9k1xxx_adc.c:130
    /* 根据结构体成员m_HPExternalTrig_EN，设置HPEXTEN位域 */
    /* 根据结构体成员m_ExternalTrig，设置NCH位域 */
    /* 根据结构体成员m_HPExternalTrig，设置HCH位域 */
    /* 根据结构体成员m_VoltageRef，设置REF位域 */
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
     4f8:	64 d7       	ORL       R4, R4, R5
..\src\kf32a9k1xxx_adc.c:132
                         adcInitStruct->m_ExternalTrig | \
                         adcInitStruct->m_HPExternalTrig | \
     4fa:	02 0d       	LD.W      R5, [SP + #2]
     4fc:	2d 9a       	LD.W      R5, [R5 + #8]
..\src\kf32a9k1xxx_adc.c:131
    /* 根据结构体成员m_ExternalTrig，设置NCH位域 */
    /* 根据结构体成员m_HPExternalTrig，设置HCH位域 */
    /* 根据结构体成员m_VoltageRef，设置REF位域 */
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
                         adcInitStruct->m_ExternalTrig | \
     4fe:	64 d7       	ORL       R4, R4, R5
..\src\kf32a9k1xxx_adc.c:133
                         adcInitStruct->m_HPExternalTrig | \
                         adcInitStruct->m_VoltageRef);
     500:	02 0d       	LD.W      R5, [SP + #2]
     502:	6d 9a       	LD.W      R5, [R5 + #9]
..\src\kf32a9k1xxx_adc.c:129
    /* 根据结构体成员m_ExternalTrig_EN，设置EXTEN位域 */
    /* 根据结构体成员m_HPExternalTrig_EN，设置HPEXTEN位域 */
    /* 根据结构体成员m_ExternalTrig，设置NCH位域 */
    /* 根据结构体成员m_HPExternalTrig，设置HCH位域 */
    /* 根据结构体成员m_VoltageRef，设置REF位域 */
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
     504:	6c d7       	ORL       R5, R4, R5
     506:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:134
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
                         adcInitStruct->m_ExternalTrig | \
                         adcInitStruct->m_HPExternalTrig | \
                         adcInitStruct->m_VoltageRef);
    ADCx->CTL1 = SFR_Config (ADCx->CTL1, ~ADC_CTL1_INIT_MASK, tmpreg);
     508:	01 0d       	LD.W      R5, [SP + #1]
     50a:	6d 98       	LD.W      R5, [R5 + #1]
     50c:	05 58       	MOV       R0, R5
     50e:	1d 41       	LD        R1, [PC + #29]        ;->0x580  :=0xf001f00f
     510:	2e 82       	LD.W      R2, [SP]
     512:	1b 45       	LD        R5, [PC + #27]        ;->0x57c  :=0x200
     514:	05 5c       	LJMP      R5
     516:	80 58       	MOV       R4, R0
     518:	01 0d       	LD.W      R5, [SP + #1]
     51a:	6c a0       	ST.W      [R5 + #1], R4
..\src\kf32a9k1xxx_adc.c:138

    /*---------------- 设置SCANCTL寄存器 ----------------*/
    /* 根据结构体成员m_NumOfConv，设置SLEN位域 */
    tmpreg = adcInitStruct->m_NumOfConv - 1;
     51c:	02 0d       	LD.W      R5, [SP + #2]
     51e:	ad 9a       	LD.W      R5, [R5 + #10]
     520:	6d cc       	SUB       R5, R5, #1
     522:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:139
    ADCx->SCANCTL = SFR_Config (ADCx->SCANCTL,
     524:	01 0d       	LD.W      R5, [SP + #1]
     526:	ad 9d       	LD.W      R5, [R5 + #22]
     528:	05 58       	MOV       R0, R5
     52a:	1f 10       	MOV       R1, #15
     52c:	11 68       	NOT       R1, R1
     52e:	2e 82       	LD.W      R2, [SP]
     530:	13 45       	LD        R5, [PC + #19]        ;->0x57c  :=0x200
     532:	05 5c       	LJMP      R5
     534:	80 58       	MOV       R4, R0
     536:	01 0d       	LD.W      R5, [SP + #1]
     538:	ac a5       	ST.W      [R5 + #22], R4
..\src\kf32a9k1xxx_adc.c:145
                                  ~ADC_SCANCTL_SLEN,
                                  tmpreg);

    /*---------------- 设置ADC_HSCANSQ寄存器 ----------------*/
    /* 根据结构体成员m_NumOfHPConv，设置HSLEN位域 */
    tmpreg = (adcInitStruct->m_NumOfHPConv - 1) << ADC_SCANCTL_HSLEN0_POS;
     53a:	02 0d       	LD.W      R5, [SP + #2]
     53c:	ed 9a       	LD.W      R5, [R5 + #11]
     53e:	6d cc       	SUB       R5, R5, #1
     540:	2c 7a       	LSL       R5, #4
     542:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:146
    ADCx->SCANCTL = SFR_Config (ADCx->SCANCTL,
     544:	01 0d       	LD.W      R5, [SP + #1]
     546:	ad 9d       	LD.W      R5, [R5 + #22]
     548:	05 58       	MOV       R0, R5
     54a:	10 13       	MOV       R1, #48
     54c:	11 68       	NOT       R1, R1
     54e:	2e 82       	LD.W      R2, [SP]
     550:	0b 45       	LD        R5, [PC + #11]        ;->0x57c  :=0x200
     552:	05 5c       	LJMP      R5
     554:	80 58       	MOV       R4, R0
     556:	01 0d       	LD.W      R5, [SP + #1]
     558:	ac a5       	ST.W      [R5 + #22], R4
..\src\kf32a9k1xxx_adc.c:149
                                  ~ADC_SCANCTL_HSLEN,
                                  tmpreg);
}
     55a:	ec 28       	ADD       SP, #12
     55c:	0d 5d       	POP       LR
     55e:	1d 5c       	JMP       LR
     560:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x860	@@: LD        R0, [PC + #0]         ;->0x560  :=0x40000580
     564:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x164	@@: LD        R0, [PC + #0]         ;->0x564  :=0x40000600
     568:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x268	@@: LD        R0, [PC + #0]         ;->0x568  :=0x40000680
     56c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
     570:	00 03 00 00 	.long     0x00000300 ->000000768  [!!!@4@:JMP       $+0                   ;->0x570
     574:	00 05 00 00 	.long     0x00000500 ->000001280  [!!!@2@:SJMP      $+256                 ;->0x774	@@: NOP      
     578:	f1 f8 f9 ff 	.long     0xfff9f8f1 ->-00395023 
     57c:	00 02 00 00 	.long     0x00000200 ->000000512  [!!!@2@:SVC      	@@: NOP      
     580:	0f f0 01 f0 	.long     0xf001f00f ->-268308465  [!!!@2@:JZ        $+15                  ;->0x59e	@@: JZ        $+1                   ;->0x582

00000584 <ADC_Struct_Init>:
ADC_Struct_Init():
..\src\kf32a9k1xxx_adc.c:158
  * 输入  adcInitStruct: 指向待初始化的结构体指针。
  * 返回  无。
  */
void
ADC_Struct_Init (ADC_InitTypeDef* adcInitStruct)
{
     584:	e4 30       	SUB       SP, #4
     586:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_adc.c:160
    /* 初始化 ADC时钟源选择 */
    adcInitStruct->m_Clock = ADC_SCLK;
     588:	5e 82       	LD.W      R5, [SP]
     58a:	40 10       	MOV       R4, #0
     58c:	54 85       	ST.W      [R5], R4
..\src\kf32a9k1xxx_adc.c:163

    /* 初始化 ADC时钟分频 */
    adcInitStruct->m_ClockDiv = ADC_CLK_DIV_2;
     58e:	5e 82       	LD.W      R5, [SP]
     590:	40 10       	MOV       R4, #0
     592:	6c a0       	ST.W      [R5 + #1], R4
..\src\kf32a9k1xxx_adc.c:166

    /* 初始化 ADC扫描模式使能 */
    adcInitStruct->m_ScanMode = FALSE;
     594:	5e 82       	LD.W      R5, [SP]
     596:	40 10       	MOV       R4, #0
     598:	ac a0       	ST.W      [R5 + #2], R4
..\src\kf32a9k1xxx_adc.c:169

    /* 初始化 ADC连续转换模式 */
    adcInitStruct->m_ContinuousMode = ADC_SINGLE_MODE;
     59a:	5e 82       	LD.W      R5, [SP]
     59c:	40 10       	MOV       R4, #0
     59e:	ec a0       	ST.W      [R5 + #3], R4
..\src\kf32a9k1xxx_adc.c:172

    /* 初始化 ADC转换结果输出格式 */
    adcInitStruct->m_DataAlign = ADC_DATAALIGN_LEFT;
     5a0:	5e 82       	LD.W      R5, [SP]
     5a2:	40 10       	MOV       R4, #0
     5a4:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_adc.c:175

    /* 初始化 ADC常规通道外部触发转换模式使能 */
    adcInitStruct->m_ExternalTrig_EN = FALSE;
     5a6:	5e 82       	LD.W      R5, [SP]
     5a8:	40 10       	MOV       R4, #0
     5aa:	6c a1       	ST.W      [R5 + #5], R4
..\src\kf32a9k1xxx_adc.c:178

    /* 初始化 ADC常规通道外部触发事件 */
    adcInitStruct->m_ExternalTrig = ADC_EXTERNALTRIG_CCP1_CH1;
     5ac:	5e 82       	LD.W      R5, [SP]
     5ae:	40 10       	MOV       R4, #0
     5b0:	ac a1       	ST.W      [R5 + #6], R4
..\src\kf32a9k1xxx_adc.c:181

    /* 初始化 ADC高优先级通道外部触发转换模式使能 */
    adcInitStruct->m_HPExternalTrig_EN = FALSE;
     5b2:	5e 82       	LD.W      R5, [SP]
     5b4:	40 10       	MOV       R4, #0
     5b6:	ec a1       	ST.W      [R5 + #7], R4
..\src\kf32a9k1xxx_adc.c:184

    /* 初始化 高优先级通道外部触发事件 */
    adcInitStruct->m_HPExternalTrig = ADC_HPEXTERNALTRIG_CCP1_CH1;
     5b8:	5e 82       	LD.W      R5, [SP]
     5ba:	40 10       	MOV       R4, #0
     5bc:	2c a2       	ST.W      [R5 + #8], R4
..\src\kf32a9k1xxx_adc.c:187

    /* 初始化 ADC参考电压选择 */
    adcInitStruct->m_VoltageRef = ADC_REF_AVDD;
     5be:	4e 82       	LD.W      R4, [SP]
     5c0:	51 10       	MOV       R5, #1
     5c2:	29 7b       	LSL       R5, #17
     5c4:	65 a2       	ST.W      [R4 + #9], R5
..\src\kf32a9k1xxx_adc.c:190

    /* 初始化 ADC常规通道扫描长度 */
    adcInitStruct->m_NumOfConv = 1;
     5c6:	5e 82       	LD.W      R5, [SP]
     5c8:	41 10       	MOV       R4, #1
     5ca:	ac a2       	ST.W      [R5 + #10], R4
..\src\kf32a9k1xxx_adc.c:193

    /* 初始化 ADC高优先级通道扫描长度 */
    adcInitStruct->m_NumOfHPConv = 1;
     5cc:	5e 82       	LD.W      R5, [SP]
     5ce:	41 10       	MOV       R4, #1
     5d0:	ec a2       	ST.W      [R5 + #11], R4
..\src\kf32a9k1xxx_adc.c:194
}
     5d2:	e4 28       	ADD       SP, #4
     5d4:	1d 5c       	JMP       LR
	...

000005d8 <ADC_Cmd>:
ADC_Cmd():
..\src\kf32a9k1xxx_adc.c:241
  *       NewState: ADC工作使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
ADC_Cmd (ADC_SFRmap* ADCx, FunctionalState NewState)
{
     5d8:	2d 5d       	PUSH      LR
     5da:	e8 30       	SUB       SP, #8
     5dc:	e0 85       	ST.W      [SP], R0
     5de:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_adc.c:243
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     5e0:	5e 82       	LD.W      R5, [SP]
     5e2:	15 44       	LD        R4, [PC + #21]        ;->0x634  :=0x40000580
     5e4:	54 70       	CMP       R5, R4
     5e6:	09 f0       	JZ        $+9                   ;->0x5f8
     5e8:	5e 82       	LD.W      R5, [SP]
     5ea:	14 44       	LD        R4, [PC + #20]        ;->0x638  :=0x40000600
     5ec:	54 70       	CMP       R5, R4
     5ee:	05 f0       	JZ        $+5                   ;->0x5f8
     5f0:	5e 82       	LD.W      R5, [SP]
     5f2:	13 44       	LD        R4, [PC + #19]        ;->0x63c  :=0x40000680
     5f4:	54 70       	CMP       R5, R4
     5f6:	03 f1       	JNZ       $+3                   ;->0x5fc
     5f8:	51 10       	MOV       R5, #1
     5fa:	02 04       	SJMP      $+2                   ;->0x5fe
     5fc:	50 10       	MOV       R5, #0
     5fe:	05 58       	MOV       R0, R5
     600:	10 45       	LD        R5, [PC + #16]        ;->0x640  :=0x4ba6
     602:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:244
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     604:	01 0d       	LD.W      R5, [SP + #1]
     606:	50 38       	CMP       R5, #0
     608:	04 f0       	JZ        $+4                   ;->0x610
     60a:	01 0d       	LD.W      R5, [SP + #1]
     60c:	51 38       	CMP       R5, #1
     60e:	03 f1       	JNZ       $+3                   ;->0x614
     610:	51 10       	MOV       R5, #1
     612:	02 04       	SJMP      $+2                   ;->0x616
     614:	50 10       	MOV       R5, #0
     616:	05 58       	MOV       R0, R5
     618:	0a 45       	LD        R5, [PC + #10]        ;->0x640  :=0x4ba6
     61a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:246

    if (NewState != FALSE)
     61c:	01 0d       	LD.W      R5, [SP + #1]
     61e:	50 38       	CMP       R5, #0
     620:	04 f0       	JZ        $+4                   ;->0x628
..\src\kf32a9k1xxx_adc.c:249
    {
        /* 使能A/D转换模块 */
        SFR_SET_BIT_ASM(ADCx->CTL0, ADC_CTL0_EN_POS);
     622:	5e 82       	LD.W      R5, [SP]
     624:	28 4c       	SET       [R5], #0
     626:	03 04       	SJMP      $+3                   ;->0x62c
..\src\kf32a9k1xxx_adc.c:254
    }
    else
    {
        /* A/D转换器关闭且不消耗工作电流 */
        SFR_CLR_BIT_ASM(ADCx->CTL0, ADC_CTL0_EN_POS);
     628:	5e 82       	LD.W      R5, [SP]
     62a:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_adc.c:256
    }
}
     62c:	e8 28       	ADD       SP, #8
     62e:	0d 5d       	POP       LR
     630:	1d 5c       	JMP       LR
     632:	00 00       	NOP      NOP      
     634:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x934	@@: LD        R0, [PC + #0]         ;->0x634  :=0x40000580
     638:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x238	@@: LD        R0, [PC + #0]         ;->0x638  :=0x40000600
     63c:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x33c	@@: LD        R0, [PC + #0]         ;->0x63c  :=0x40000680
     640:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00000644 <ADC_High_Priority_Channel_Config>:
ADC_High_Priority_Channel_Config():
..\src\kf32a9k1xxx_adc.c:1144
  * 返回  无。
  */
void
ADC_High_Priority_Channel_Config (ADC_SFRmap* ADCx,
                    uint32_t Channel, uint32_t Rank)
{
     644:	2d 5d       	PUSH      LR
     646:	e4 31       	SUB       SP, #20
     648:	02 20       	ST.W      [SP + #2], R0
     64a:	03 21       	ST.W      [SP + #3], R1
     64c:	04 22       	ST.W      [SP + #4], R2
..\src\kf32a9k1xxx_adc.c:1145
    uint32_t tmpreg = 0;
     64e:	50 10       	MOV       R5, #0
     650:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:1146
    uint32_t tmpmask = 0;
     652:	50 10       	MOV       R5, #0
     654:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_adc.c:1149

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     656:	02 0c       	LD.W      R4, [SP + #2]
     658:	c6 45       	LD        R5, [PC + #198]       ;->0x970  :=0x40000580
     65a:	45 70       	CMP       R4, R5
     65c:	09 f0       	JZ        $+9                   ;->0x66e
     65e:	02 0c       	LD.W      R4, [SP + #2]
     660:	c5 45       	LD        R5, [PC + #197]       ;->0x974  :=0x40000600
     662:	45 70       	CMP       R4, R5
     664:	05 f0       	JZ        $+5                   ;->0x66e
     666:	02 0c       	LD.W      R4, [SP + #2]
     668:	c4 45       	LD        R5, [PC + #196]       ;->0x978  :=0x40000680
     66a:	45 70       	CMP       R4, R5
     66c:	03 f1       	JNZ       $+3                   ;->0x672
     66e:	51 10       	MOV       R5, #1
     670:	02 04       	SJMP      $+2                   ;->0x674
     672:	50 10       	MOV       R5, #0
     674:	05 58       	MOV       R0, R5
     676:	c2 45       	LD        R5, [PC + #194]       ;->0x97c  :=0x4ba6
     678:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:1150
    CHECK_RESTRICTION(CHECK_ADC_HP_CHANNEL(Channel));
     67a:	03 0d       	LD.W      R5, [SP + #3]
     67c:	50 38       	CMP       R5, #0
     67e:	02 f1       	JNZ       $+2                   ;->0x682
     680:	e0 05       	SJMP      $+480                 ;->0xa40
     682:	03 0d       	LD.W      R5, [SP + #3]
     684:	51 38       	CMP       R5, #1
     686:	02 f1       	JNZ       $+2                   ;->0x68a
     688:	dc 05       	SJMP      $+476                 ;->0xa40
     68a:	03 0d       	LD.W      R5, [SP + #3]
     68c:	52 38       	CMP       R5, #2
     68e:	02 f1       	JNZ       $+2                   ;->0x692
     690:	d8 05       	SJMP      $+472                 ;->0xa40
     692:	03 0d       	LD.W      R5, [SP + #3]
     694:	53 38       	CMP       R5, #3
     696:	02 f1       	JNZ       $+2                   ;->0x69a
     698:	d4 05       	SJMP      $+468                 ;->0xa40
     69a:	03 0d       	LD.W      R5, [SP + #3]
     69c:	54 38       	CMP       R5, #4
     69e:	02 f1       	JNZ       $+2                   ;->0x6a2
     6a0:	d0 05       	SJMP      $+464                 ;->0xa40
     6a2:	03 0d       	LD.W      R5, [SP + #3]
     6a4:	55 38       	CMP       R5, #5
     6a6:	02 f1       	JNZ       $+2                   ;->0x6aa
     6a8:	cc 05       	SJMP      $+460                 ;->0xa40
     6aa:	03 0d       	LD.W      R5, [SP + #3]
     6ac:	56 38       	CMP       R5, #6
     6ae:	02 f1       	JNZ       $+2                   ;->0x6b2
     6b0:	c8 05       	SJMP      $+456                 ;->0xa40
     6b2:	03 0d       	LD.W      R5, [SP + #3]
     6b4:	57 38       	CMP       R5, #7
     6b6:	02 f1       	JNZ       $+2                   ;->0x6ba
     6b8:	c4 05       	SJMP      $+452                 ;->0xa40
     6ba:	03 0d       	LD.W      R5, [SP + #3]
     6bc:	58 38       	CMP       R5, #8
     6be:	02 f1       	JNZ       $+2                   ;->0x6c2
     6c0:	c0 05       	SJMP      $+448                 ;->0xa40
     6c2:	03 0d       	LD.W      R5, [SP + #3]
     6c4:	59 38       	CMP       R5, #9
     6c6:	02 f1       	JNZ       $+2                   ;->0x6ca
     6c8:	bc 05       	SJMP      $+444                 ;->0xa40
     6ca:	03 0d       	LD.W      R5, [SP + #3]
     6cc:	5a 38       	CMP       R5, #10
     6ce:	02 f1       	JNZ       $+2                   ;->0x6d2
     6d0:	b8 05       	SJMP      $+440                 ;->0xa40
     6d2:	03 0d       	LD.W      R5, [SP + #3]
     6d4:	5b 38       	CMP       R5, #11
     6d6:	02 f1       	JNZ       $+2                   ;->0x6da
     6d8:	b4 05       	SJMP      $+436                 ;->0xa40
     6da:	03 0d       	LD.W      R5, [SP + #3]
     6dc:	5c 38       	CMP       R5, #12
     6de:	02 f1       	JNZ       $+2                   ;->0x6e2
     6e0:	b0 05       	SJMP      $+432                 ;->0xa40
     6e2:	03 0d       	LD.W      R5, [SP + #3]
     6e4:	5d 38       	CMP       R5, #13
     6e6:	02 f1       	JNZ       $+2                   ;->0x6ea
     6e8:	ac 05       	SJMP      $+428                 ;->0xa40
     6ea:	03 0d       	LD.W      R5, [SP + #3]
     6ec:	5e 38       	CMP       R5, #14
     6ee:	02 f1       	JNZ       $+2                   ;->0x6f2
     6f0:	a8 05       	SJMP      $+424                 ;->0xa40
     6f2:	03 0d       	LD.W      R5, [SP + #3]
     6f4:	5f 38       	CMP       R5, #15
     6f6:	02 f1       	JNZ       $+2                   ;->0x6fa
     6f8:	a4 05       	SJMP      $+420                 ;->0xa40
     6fa:	03 0d       	LD.W      R5, [SP + #3]
     6fc:	50 39       	CMP       R5, #16
     6fe:	02 f1       	JNZ       $+2                   ;->0x702
     700:	a0 05       	SJMP      $+416                 ;->0xa40
     702:	03 0d       	LD.W      R5, [SP + #3]
     704:	51 39       	CMP       R5, #17
     706:	02 f1       	JNZ       $+2                   ;->0x70a
     708:	9c 05       	SJMP      $+412                 ;->0xa40
     70a:	03 0d       	LD.W      R5, [SP + #3]
     70c:	52 39       	CMP       R5, #18
     70e:	02 f1       	JNZ       $+2                   ;->0x712
     710:	98 05       	SJMP      $+408                 ;->0xa40
     712:	03 0d       	LD.W      R5, [SP + #3]
     714:	53 39       	CMP       R5, #19
     716:	02 f1       	JNZ       $+2                   ;->0x71a
     718:	94 05       	SJMP      $+404                 ;->0xa40
     71a:	03 0d       	LD.W      R5, [SP + #3]
     71c:	54 39       	CMP       R5, #20
     71e:	02 f1       	JNZ       $+2                   ;->0x722
     720:	90 05       	SJMP      $+400                 ;->0xa40
     722:	03 0d       	LD.W      R5, [SP + #3]
     724:	55 39       	CMP       R5, #21
     726:	02 f1       	JNZ       $+2                   ;->0x72a
     728:	8c 05       	SJMP      $+396                 ;->0xa40
     72a:	03 0d       	LD.W      R5, [SP + #3]
     72c:	56 39       	CMP       R5, #22
     72e:	02 f1       	JNZ       $+2                   ;->0x732
     730:	88 05       	SJMP      $+392                 ;->0xa40
     732:	03 0d       	LD.W      R5, [SP + #3]
     734:	57 39       	CMP       R5, #23
     736:	02 f1       	JNZ       $+2                   ;->0x73a
     738:	84 05       	SJMP      $+388                 ;->0xa40
     73a:	03 0d       	LD.W      R5, [SP + #3]
     73c:	58 39       	CMP       R5, #24
     73e:	02 f1       	JNZ       $+2                   ;->0x742
     740:	80 05       	SJMP      $+384                 ;->0xa40
     742:	03 0d       	LD.W      R5, [SP + #3]
     744:	59 39       	CMP       R5, #25
     746:	02 f1       	JNZ       $+2                   ;->0x74a
     748:	7c 05       	SJMP      $+380                 ;->0xa40
     74a:	03 0d       	LD.W      R5, [SP + #3]
     74c:	5a 39       	CMP       R5, #26
     74e:	02 f1       	JNZ       $+2                   ;->0x752
     750:	78 05       	SJMP      $+376                 ;->0xa40
     752:	03 0d       	LD.W      R5, [SP + #3]
     754:	5b 39       	CMP       R5, #27
     756:	02 f1       	JNZ       $+2                   ;->0x75a
     758:	74 05       	SJMP      $+372                 ;->0xa40
     75a:	03 0d       	LD.W      R5, [SP + #3]
     75c:	5c 39       	CMP       R5, #28
     75e:	02 f1       	JNZ       $+2                   ;->0x762
     760:	70 05       	SJMP      $+368                 ;->0xa40
     762:	03 0d       	LD.W      R5, [SP + #3]
     764:	5d 39       	CMP       R5, #29
     766:	02 f1       	JNZ       $+2                   ;->0x76a
     768:	6c 05       	SJMP      $+364                 ;->0xa40
     76a:	03 0d       	LD.W      R5, [SP + #3]
     76c:	5e 39       	CMP       R5, #30
     76e:	02 f1       	JNZ       $+2                   ;->0x772
     770:	68 05       	SJMP      $+360                 ;->0xa40
     772:	03 0d       	LD.W      R5, [SP + #3]
     774:	5f 39       	CMP       R5, #31
     776:	02 f1       	JNZ       $+2                   ;->0x77a
     778:	64 05       	SJMP      $+356                 ;->0xa40
     77a:	03 0d       	LD.W      R5, [SP + #3]
     77c:	50 3a       	CMP       R5, #32
     77e:	02 f1       	JNZ       $+2                   ;->0x782
     780:	60 05       	SJMP      $+352                 ;->0xa40
     782:	03 0d       	LD.W      R5, [SP + #3]
     784:	51 3a       	CMP       R5, #33
     786:	02 f1       	JNZ       $+2                   ;->0x78a
     788:	5c 05       	SJMP      $+348                 ;->0xa40
     78a:	03 0d       	LD.W      R5, [SP + #3]
     78c:	52 3a       	CMP       R5, #34
     78e:	02 f1       	JNZ       $+2                   ;->0x792
     790:	58 05       	SJMP      $+344                 ;->0xa40
     792:	03 0d       	LD.W      R5, [SP + #3]
     794:	53 3a       	CMP       R5, #35
     796:	02 f1       	JNZ       $+2                   ;->0x79a
     798:	54 05       	SJMP      $+340                 ;->0xa40
     79a:	03 0d       	LD.W      R5, [SP + #3]
     79c:	54 3a       	CMP       R5, #36
     79e:	02 f1       	JNZ       $+2                   ;->0x7a2
     7a0:	50 05       	SJMP      $+336                 ;->0xa40
     7a2:	03 0d       	LD.W      R5, [SP + #3]
     7a4:	55 3a       	CMP       R5, #37
     7a6:	02 f1       	JNZ       $+2                   ;->0x7aa
     7a8:	4c 05       	SJMP      $+332                 ;->0xa40
     7aa:	03 0d       	LD.W      R5, [SP + #3]
     7ac:	56 3a       	CMP       R5, #38
     7ae:	02 f1       	JNZ       $+2                   ;->0x7b2
     7b0:	48 05       	SJMP      $+328                 ;->0xa40
     7b2:	03 0d       	LD.W      R5, [SP + #3]
     7b4:	57 3a       	CMP       R5, #39
     7b6:	02 f1       	JNZ       $+2                   ;->0x7ba
     7b8:	44 05       	SJMP      $+324                 ;->0xa40
     7ba:	03 0d       	LD.W      R5, [SP + #3]
     7bc:	58 3a       	CMP       R5, #40
     7be:	02 f1       	JNZ       $+2                   ;->0x7c2
     7c0:	40 05       	SJMP      $+320                 ;->0xa40
     7c2:	03 0d       	LD.W      R5, [SP + #3]
     7c4:	59 3a       	CMP       R5, #41
     7c6:	02 f1       	JNZ       $+2                   ;->0x7ca
     7c8:	3c 05       	SJMP      $+316                 ;->0xa40
     7ca:	03 0d       	LD.W      R5, [SP + #3]
     7cc:	5a 3a       	CMP       R5, #42
     7ce:	02 f1       	JNZ       $+2                   ;->0x7d2
     7d0:	38 05       	SJMP      $+312                 ;->0xa40
     7d2:	03 0d       	LD.W      R5, [SP + #3]
     7d4:	5b 3a       	CMP       R5, #43
     7d6:	02 f1       	JNZ       $+2                   ;->0x7da
     7d8:	34 05       	SJMP      $+308                 ;->0xa40
     7da:	03 0d       	LD.W      R5, [SP + #3]
     7dc:	5c 3a       	CMP       R5, #44
     7de:	02 f1       	JNZ       $+2                   ;->0x7e2
     7e0:	30 05       	SJMP      $+304                 ;->0xa40
     7e2:	03 0d       	LD.W      R5, [SP + #3]
     7e4:	5d 3a       	CMP       R5, #45
     7e6:	02 f1       	JNZ       $+2                   ;->0x7ea
     7e8:	2c 05       	SJMP      $+300                 ;->0xa40
     7ea:	03 0d       	LD.W      R5, [SP + #3]
     7ec:	5e 3a       	CMP       R5, #46
     7ee:	02 f1       	JNZ       $+2                   ;->0x7f2
     7f0:	28 05       	SJMP      $+296                 ;->0xa40
     7f2:	03 0d       	LD.W      R5, [SP + #3]
     7f4:	5f 3a       	CMP       R5, #47
     7f6:	02 f1       	JNZ       $+2                   ;->0x7fa
     7f8:	24 05       	SJMP      $+292                 ;->0xa40
     7fa:	03 0d       	LD.W      R5, [SP + #3]
     7fc:	50 3b       	CMP       R5, #48
     7fe:	02 f1       	JNZ       $+2                   ;->0x802
     800:	20 05       	SJMP      $+288                 ;->0xa40
     802:	03 0d       	LD.W      R5, [SP + #3]
     804:	51 3b       	CMP       R5, #49
     806:	02 f1       	JNZ       $+2                   ;->0x80a
     808:	1c 05       	SJMP      $+284                 ;->0xa40
     80a:	03 0d       	LD.W      R5, [SP + #3]
     80c:	52 3b       	CMP       R5, #50
     80e:	02 f1       	JNZ       $+2                   ;->0x812
     810:	18 05       	SJMP      $+280                 ;->0xa40
     812:	03 0d       	LD.W      R5, [SP + #3]
     814:	53 3b       	CMP       R5, #51
     816:	02 f1       	JNZ       $+2                   ;->0x81a
     818:	14 05       	SJMP      $+276                 ;->0xa40
     81a:	03 0d       	LD.W      R5, [SP + #3]
     81c:	54 3b       	CMP       R5, #52
     81e:	02 f1       	JNZ       $+2                   ;->0x822
     820:	10 05       	SJMP      $+272                 ;->0xa40
     822:	03 0d       	LD.W      R5, [SP + #3]
     824:	55 3b       	CMP       R5, #53
     826:	02 f1       	JNZ       $+2                   ;->0x82a
     828:	0c 05       	SJMP      $+268                 ;->0xa40
     82a:	03 0d       	LD.W      R5, [SP + #3]
     82c:	56 3b       	CMP       R5, #54
     82e:	02 f1       	JNZ       $+2                   ;->0x832
     830:	08 05       	SJMP      $+264                 ;->0xa40
     832:	03 0d       	LD.W      R5, [SP + #3]
     834:	57 3b       	CMP       R5, #55
     836:	02 f1       	JNZ       $+2                   ;->0x83a
     838:	04 05       	SJMP      $+260                 ;->0xa40
     83a:	03 0d       	LD.W      R5, [SP + #3]
     83c:	58 3b       	CMP       R5, #56
     83e:	02 f1       	JNZ       $+2                   ;->0x842
     840:	00 05       	SJMP      $+256                 ;->0xa40
     842:	03 0d       	LD.W      R5, [SP + #3]
     844:	59 3b       	CMP       R5, #57
     846:	02 f1       	JNZ       $+2                   ;->0x84a
     848:	fc 04       	SJMP      $+252                 ;->0xa40
     84a:	03 0d       	LD.W      R5, [SP + #3]
     84c:	5a 3b       	CMP       R5, #58
     84e:	02 f1       	JNZ       $+2                   ;->0x852
     850:	f8 04       	SJMP      $+248                 ;->0xa40
     852:	03 0d       	LD.W      R5, [SP + #3]
     854:	5b 3b       	CMP       R5, #59
     856:	02 f1       	JNZ       $+2                   ;->0x85a
     858:	f4 04       	SJMP      $+244                 ;->0xa40
     85a:	03 0d       	LD.W      R5, [SP + #3]
     85c:	5c 3b       	CMP       R5, #60
     85e:	02 f1       	JNZ       $+2                   ;->0x862
     860:	f0 04       	SJMP      $+240                 ;->0xa40
     862:	03 0d       	LD.W      R5, [SP + #3]
     864:	5d 3b       	CMP       R5, #61
     866:	02 f1       	JNZ       $+2                   ;->0x86a
     868:	ec 04       	SJMP      $+236                 ;->0xa40
     86a:	03 0d       	LD.W      R5, [SP + #3]
     86c:	5e 3b       	CMP       R5, #62
     86e:	02 f1       	JNZ       $+2                   ;->0x872
     870:	e8 04       	SJMP      $+232                 ;->0xa40
     872:	03 0d       	LD.W      R5, [SP + #3]
     874:	5f 3b       	CMP       R5, #63
     876:	02 f1       	JNZ       $+2                   ;->0x87a
     878:	e4 04       	SJMP      $+228                 ;->0xa40
     87a:	03 0d       	LD.W      R5, [SP + #3]
     87c:	50 3c       	CMP       R5, #64
     87e:	02 f1       	JNZ       $+2                   ;->0x882
     880:	e0 04       	SJMP      $+224                 ;->0xa40
     882:	03 0d       	LD.W      R5, [SP + #3]
     884:	51 3c       	CMP       R5, #65
     886:	02 f1       	JNZ       $+2                   ;->0x88a
     888:	dc 04       	SJMP      $+220                 ;->0xa40
     88a:	03 0d       	LD.W      R5, [SP + #3]
     88c:	52 3c       	CMP       R5, #66
     88e:	02 f1       	JNZ       $+2                   ;->0x892
     890:	d8 04       	SJMP      $+216                 ;->0xa40
     892:	03 0d       	LD.W      R5, [SP + #3]
     894:	53 3c       	CMP       R5, #67
     896:	02 f1       	JNZ       $+2                   ;->0x89a
     898:	d4 04       	SJMP      $+212                 ;->0xa40
     89a:	03 0d       	LD.W      R5, [SP + #3]
     89c:	54 3c       	CMP       R5, #68
     89e:	02 f1       	JNZ       $+2                   ;->0x8a2
     8a0:	d0 04       	SJMP      $+208                 ;->0xa40
     8a2:	03 0d       	LD.W      R5, [SP + #3]
     8a4:	55 3c       	CMP       R5, #69
     8a6:	02 f1       	JNZ       $+2                   ;->0x8aa
     8a8:	cc 04       	SJMP      $+204                 ;->0xa40
     8aa:	03 0d       	LD.W      R5, [SP + #3]
     8ac:	56 3c       	CMP       R5, #70
     8ae:	02 f1       	JNZ       $+2                   ;->0x8b2
     8b0:	c8 04       	SJMP      $+200                 ;->0xa40
     8b2:	03 0d       	LD.W      R5, [SP + #3]
     8b4:	57 3c       	CMP       R5, #71
     8b6:	02 f1       	JNZ       $+2                   ;->0x8ba
     8b8:	c4 04       	SJMP      $+196                 ;->0xa40
     8ba:	03 0d       	LD.W      R5, [SP + #3]
     8bc:	58 3c       	CMP       R5, #72
     8be:	02 f1       	JNZ       $+2                   ;->0x8c2
     8c0:	c0 04       	SJMP      $+192                 ;->0xa40
     8c2:	03 0d       	LD.W      R5, [SP + #3]
     8c4:	59 3c       	CMP       R5, #73
     8c6:	02 f1       	JNZ       $+2                   ;->0x8ca
     8c8:	bc 04       	SJMP      $+188                 ;->0xa40
     8ca:	03 0d       	LD.W      R5, [SP + #3]
     8cc:	5a 3c       	CMP       R5, #74
     8ce:	02 f1       	JNZ       $+2                   ;->0x8d2
     8d0:	b8 04       	SJMP      $+184                 ;->0xa40
     8d2:	03 0d       	LD.W      R5, [SP + #3]
     8d4:	5b 3c       	CMP       R5, #75
     8d6:	02 f1       	JNZ       $+2                   ;->0x8da
     8d8:	b4 04       	SJMP      $+180                 ;->0xa40
     8da:	03 0d       	LD.W      R5, [SP + #3]
     8dc:	5c 3c       	CMP       R5, #76
     8de:	02 f1       	JNZ       $+2                   ;->0x8e2
     8e0:	b0 04       	SJMP      $+176                 ;->0xa40
     8e2:	03 0d       	LD.W      R5, [SP + #3]
     8e4:	5d 3c       	CMP       R5, #77
     8e6:	02 f1       	JNZ       $+2                   ;->0x8ea
     8e8:	ac 04       	SJMP      $+172                 ;->0xa40
     8ea:	03 0d       	LD.W      R5, [SP + #3]
     8ec:	5e 3c       	CMP       R5, #78
     8ee:	02 f1       	JNZ       $+2                   ;->0x8f2
     8f0:	a8 04       	SJMP      $+168                 ;->0xa40
     8f2:	03 0d       	LD.W      R5, [SP + #3]
     8f4:	5f 3c       	CMP       R5, #79
     8f6:	02 f1       	JNZ       $+2                   ;->0x8fa
     8f8:	a4 04       	SJMP      $+164                 ;->0xa40
     8fa:	03 0d       	LD.W      R5, [SP + #3]
     8fc:	50 3d       	CMP       R5, #80
     8fe:	02 f1       	JNZ       $+2                   ;->0x902
     900:	a0 04       	SJMP      $+160                 ;->0xa40
     902:	03 0d       	LD.W      R5, [SP + #3]
     904:	51 3d       	CMP       R5, #81
     906:	02 f1       	JNZ       $+2                   ;->0x90a
     908:	9c 04       	SJMP      $+156                 ;->0xa40
     90a:	03 0d       	LD.W      R5, [SP + #3]
     90c:	52 3d       	CMP       R5, #82
     90e:	02 f1       	JNZ       $+2                   ;->0x912
     910:	98 04       	SJMP      $+152                 ;->0xa40
     912:	03 0d       	LD.W      R5, [SP + #3]
     914:	53 3d       	CMP       R5, #83
     916:	02 f1       	JNZ       $+2                   ;->0x91a
     918:	94 04       	SJMP      $+148                 ;->0xa40
     91a:	03 0d       	LD.W      R5, [SP + #3]
     91c:	54 3d       	CMP       R5, #84
     91e:	02 f1       	JNZ       $+2                   ;->0x922
     920:	90 04       	SJMP      $+144                 ;->0xa40
     922:	03 0d       	LD.W      R5, [SP + #3]
     924:	55 3d       	CMP       R5, #85
     926:	02 f1       	JNZ       $+2                   ;->0x92a
     928:	8c 04       	SJMP      $+140                 ;->0xa40
     92a:	03 0d       	LD.W      R5, [SP + #3]
     92c:	56 3d       	CMP       R5, #86
     92e:	02 f1       	JNZ       $+2                   ;->0x932
     930:	88 04       	SJMP      $+136                 ;->0xa40
     932:	03 0d       	LD.W      R5, [SP + #3]
     934:	57 3d       	CMP       R5, #87
     936:	02 f1       	JNZ       $+2                   ;->0x93a
     938:	84 04       	SJMP      $+132                 ;->0xa40
     93a:	03 0d       	LD.W      R5, [SP + #3]
     93c:	58 3d       	CMP       R5, #88
     93e:	02 f1       	JNZ       $+2                   ;->0x942
     940:	80 04       	SJMP      $+128                 ;->0xa40
     942:	03 0d       	LD.W      R5, [SP + #3]
     944:	59 3d       	CMP       R5, #89
     946:	7d f0       	JZ        $+125                 ;->0xa40
     948:	03 0d       	LD.W      R5, [SP + #3]
     94a:	5a 3d       	CMP       R5, #90
     94c:	7a f0       	JZ        $+122                 ;->0xa40
     94e:	03 0d       	LD.W      R5, [SP + #3]
     950:	5b 3d       	CMP       R5, #91
     952:	77 f0       	JZ        $+119                 ;->0xa40
     954:	03 0d       	LD.W      R5, [SP + #3]
     956:	5c 3d       	CMP       R5, #92
     958:	74 f0       	JZ        $+116                 ;->0xa40
     95a:	03 0d       	LD.W      R5, [SP + #3]
     95c:	5d 3d       	CMP       R5, #93
     95e:	71 f0       	JZ        $+113                 ;->0xa40
     960:	03 0d       	LD.W      R5, [SP + #3]
     962:	5e 3d       	CMP       R5, #94
     964:	6e f0       	JZ        $+110                 ;->0xa40
     966:	03 0d       	LD.W      R5, [SP + #3]
     968:	5f 3d       	CMP       R5, #95
     96a:	6b f0       	JZ        $+107                 ;->0xa40
     96c:	0a 04       	SJMP      $+10                  ;->0x980
     96e:	00 00       	NOP      NOP      
     970:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0xc70	@@: LD        R0, [PC + #0]         ;->0x970  :=0x40000580
     974:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x574	@@: LD        R0, [PC + #0]         ;->0x974  :=0x40000600
     978:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x678	@@: LD        R0, [PC + #0]         ;->0x978  :=0x40000680
     97c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
     980:	03 0d       	LD.W      R5, [SP + #3]
     982:	50 3e       	CMP       R5, #96
     984:	5e f0       	JZ        $+94                  ;->0xa40
     986:	03 0d       	LD.W      R5, [SP + #3]
     988:	51 3e       	CMP       R5, #97
     98a:	5b f0       	JZ        $+91                  ;->0xa40
     98c:	03 0d       	LD.W      R5, [SP + #3]
     98e:	52 3e       	CMP       R5, #98
     990:	58 f0       	JZ        $+88                  ;->0xa40
     992:	03 0d       	LD.W      R5, [SP + #3]
     994:	53 3e       	CMP       R5, #99
     996:	55 f0       	JZ        $+85                  ;->0xa40
     998:	03 0d       	LD.W      R5, [SP + #3]
     99a:	54 3e       	CMP       R5, #100
     99c:	52 f0       	JZ        $+82                  ;->0xa40
     99e:	03 0d       	LD.W      R5, [SP + #3]
     9a0:	55 3e       	CMP       R5, #101
     9a2:	4f f0       	JZ        $+79                  ;->0xa40
     9a4:	03 0d       	LD.W      R5, [SP + #3]
     9a6:	56 3e       	CMP       R5, #102
     9a8:	4c f0       	JZ        $+76                  ;->0xa40
     9aa:	03 0d       	LD.W      R5, [SP + #3]
     9ac:	57 3e       	CMP       R5, #103
     9ae:	49 f0       	JZ        $+73                  ;->0xa40
     9b0:	03 0d       	LD.W      R5, [SP + #3]
     9b2:	58 3e       	CMP       R5, #104
     9b4:	46 f0       	JZ        $+70                  ;->0xa40
     9b6:	03 0d       	LD.W      R5, [SP + #3]
     9b8:	59 3e       	CMP       R5, #105
     9ba:	43 f0       	JZ        $+67                  ;->0xa40
     9bc:	03 0d       	LD.W      R5, [SP + #3]
     9be:	5a 3e       	CMP       R5, #106
     9c0:	40 f0       	JZ        $+64                  ;->0xa40
     9c2:	03 0d       	LD.W      R5, [SP + #3]
     9c4:	5b 3e       	CMP       R5, #107
     9c6:	3d f0       	JZ        $+61                  ;->0xa40
     9c8:	03 0d       	LD.W      R5, [SP + #3]
     9ca:	5c 3e       	CMP       R5, #108
     9cc:	3a f0       	JZ        $+58                  ;->0xa40
     9ce:	03 0d       	LD.W      R5, [SP + #3]
     9d0:	5d 3e       	CMP       R5, #109
     9d2:	37 f0       	JZ        $+55                  ;->0xa40
     9d4:	03 0d       	LD.W      R5, [SP + #3]
     9d6:	5e 3e       	CMP       R5, #110
     9d8:	34 f0       	JZ        $+52                  ;->0xa40
     9da:	03 0d       	LD.W      R5, [SP + #3]
     9dc:	5f 3e       	CMP       R5, #111
     9de:	31 f0       	JZ        $+49                  ;->0xa40
     9e0:	03 0d       	LD.W      R5, [SP + #3]
     9e2:	50 3f       	CMP       R5, #112
     9e4:	2e f0       	JZ        $+46                  ;->0xa40
     9e6:	03 0d       	LD.W      R5, [SP + #3]
     9e8:	51 3f       	CMP       R5, #113
     9ea:	2b f0       	JZ        $+43                  ;->0xa40
     9ec:	03 0d       	LD.W      R5, [SP + #3]
     9ee:	52 3f       	CMP       R5, #114
     9f0:	28 f0       	JZ        $+40                  ;->0xa40
     9f2:	03 0d       	LD.W      R5, [SP + #3]
     9f4:	53 3f       	CMP       R5, #115
     9f6:	25 f0       	JZ        $+37                  ;->0xa40
     9f8:	03 0d       	LD.W      R5, [SP + #3]
     9fa:	54 3f       	CMP       R5, #116
     9fc:	22 f0       	JZ        $+34                  ;->0xa40
     9fe:	03 0d       	LD.W      R5, [SP + #3]
     a00:	55 3f       	CMP       R5, #117
     a02:	1f f0       	JZ        $+31                  ;->0xa40
     a04:	03 0d       	LD.W      R5, [SP + #3]
     a06:	56 3f       	CMP       R5, #118
     a08:	1c f0       	JZ        $+28                  ;->0xa40
     a0a:	03 0d       	LD.W      R5, [SP + #3]
     a0c:	57 3f       	CMP       R5, #119
     a0e:	19 f0       	JZ        $+25                  ;->0xa40
     a10:	03 0d       	LD.W      R5, [SP + #3]
     a12:	58 3f       	CMP       R5, #120
     a14:	16 f0       	JZ        $+22                  ;->0xa40
     a16:	03 0d       	LD.W      R5, [SP + #3]
     a18:	59 3f       	CMP       R5, #121
     a1a:	13 f0       	JZ        $+19                  ;->0xa40
     a1c:	03 0d       	LD.W      R5, [SP + #3]
     a1e:	5a 3f       	CMP       R5, #122
     a20:	10 f0       	JZ        $+16                  ;->0xa40
     a22:	03 0d       	LD.W      R5, [SP + #3]
     a24:	5b 3f       	CMP       R5, #123
     a26:	0d f0       	JZ        $+13                  ;->0xa40
     a28:	03 0d       	LD.W      R5, [SP + #3]
     a2a:	5c 3f       	CMP       R5, #124
     a2c:	0a f0       	JZ        $+10                  ;->0xa40
     a2e:	03 0d       	LD.W      R5, [SP + #3]
     a30:	5d 3f       	CMP       R5, #125
     a32:	07 f0       	JZ        $+7                   ;->0xa40
     a34:	03 0d       	LD.W      R5, [SP + #3]
     a36:	5e 3f       	CMP       R5, #126
     a38:	04 f0       	JZ        $+4                   ;->0xa40
     a3a:	03 0d       	LD.W      R5, [SP + #3]
     a3c:	5f 3f       	CMP       R5, #127
     a3e:	03 f1       	JNZ       $+3                   ;->0xa44
     a40:	51 10       	MOV       R5, #1
     a42:	02 04       	SJMP      $+2                   ;->0xa46
     a44:	50 10       	MOV       R5, #0
     a46:	05 58       	MOV       R0, R5
     a48:	15 45       	LD        R5, [PC + #21]        ;->0xa9c  :=0x4ba6
     a4a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:1151
    CHECK_RESTRICTION(CHECK_ADC_HP_RANK(Rank));
     a4c:	04 0d       	LD.W      R5, [SP + #4]
     a4e:	50 38       	CMP       R5, #0
     a50:	06 f0       	JZ        $+6                   ;->0xa5c
     a52:	04 0d       	LD.W      R5, [SP + #4]
     a54:	54 38       	CMP       R5, #4
     a56:	03 f8       	JHI       $+3                   ;->0xa5c
     a58:	51 10       	MOV       R5, #1
     a5a:	02 04       	SJMP      $+2                   ;->0xa5e
     a5c:	50 10       	MOV       R5, #0
     a5e:	05 58       	MOV       R0, R5
     a60:	0f 45       	LD        R5, [PC + #15]        ;->0xa9c  :=0x4ba6
     a62:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:1156

    /* 配置第1次转换~第4次转换 */

    /*------------- 设置ADCx_HSCANSQ寄存器HSSQx位 -------------*/
    tmpreg = (uint32_t)Channel << (8 * (Rank - 1));
     a64:	04 0d       	LD.W      R5, [SP + #4]
     a66:	2b 7a       	LSL       R5, #3
     a68:	58 30       	SUB       R5, #8
     a6a:	03 0c       	LD.W      R4, [SP + #3]
     a6c:	6c db       	LSL       R5, R4, R5
     a6e:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:1157
    tmpmask = ADC_HSCANSQ_HSSQ0 << (8 * (Rank - 1));
     a70:	04 0d       	LD.W      R5, [SP + #4]
     a72:	2b 7a       	LSL       R5, #3
     a74:	58 30       	SUB       R5, #8
     a76:	4f 1f       	MOV       R4, #255
     a78:	6c db       	LSL       R5, R4, R5
     a7a:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_adc.c:1158
    ADCx->HSCANSQ = SFR_Config (ADCx->HSCANSQ,
     a7c:	02 0d       	LD.W      R5, [SP + #2]
     a7e:	65 99       	LD.W      R4, [R5 + #5]
     a80:	01 0d       	LD.W      R5, [SP + #1]
     a82:	55 68       	NOT       R5, R5
     a84:	04 58       	MOV       R0, R4
     a86:	25 58       	MOV       R1, R5
     a88:	2e 82       	LD.W      R2, [SP]
     a8a:	06 45       	LD        R5, [PC + #6]         ;->0xaa0  :=0x200
     a8c:	05 5c       	LJMP      R5
     a8e:	80 58       	MOV       R4, R0
     a90:	02 0d       	LD.W      R5, [SP + #2]
     a92:	6c a1       	ST.W      [R5 + #5], R4
..\src\kf32a9k1xxx_adc.c:1161
                          ~tmpmask,
                          tmpreg);
}
     a94:	e4 29       	ADD       SP, #20
     a96:	0d 5d       	POP       LR
     a98:	1d 5c       	JMP       LR
     a9a:	00 00       	NOP      NOP      
     a9c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
     aa0:	00 02 00 00 	.long     0x00000200 ->000000512  [!!!@2@:SVC      	@@: NOP      

00000aa4 <ADC_Set_INT_Enable>:
ADC_Set_INT_Enable():
..\src\kf32a9k1xxx_adc.c:1519
  * 返回  无。
  */
void
ADC_Set_INT_Enable (ADC_SFRmap* ADCx,
                    uint32_t InterruptType, FunctionalState NewState)
{
     aa4:	2d 5d       	PUSH      LR
     aa6:	e0 31       	SUB       SP, #16
     aa8:	01 20       	ST.W      [SP + #1], R0
     aaa:	02 21       	ST.W      [SP + #2], R1
     aac:	03 22       	ST.W      [SP + #3], R2
..\src\kf32a9k1xxx_adc.c:1520
    uint32_t tmpreg = 0;
     aae:	50 10       	MOV       R5, #0
     ab0:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:1523

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     ab2:	01 0c       	LD.W      R4, [SP + #1]
     ab4:	28 45       	LD        R5, [PC + #40]        ;->0xb54  :=0x40000580
     ab6:	45 70       	CMP       R4, R5
     ab8:	09 f0       	JZ        $+9                   ;->0xaca
     aba:	01 0c       	LD.W      R4, [SP + #1]
     abc:	27 45       	LD        R5, [PC + #39]        ;->0xb58  :=0x40000600
     abe:	45 70       	CMP       R4, R5
     ac0:	05 f0       	JZ        $+5                   ;->0xaca
     ac2:	01 0c       	LD.W      R4, [SP + #1]
     ac4:	26 45       	LD        R5, [PC + #38]        ;->0xb5c  :=0x40000680
     ac6:	45 70       	CMP       R4, R5
     ac8:	03 f1       	JNZ       $+3                   ;->0xace
     aca:	51 10       	MOV       R5, #1
     acc:	02 04       	SJMP      $+2                   ;->0xad0
     ace:	50 10       	MOV       R5, #0
     ad0:	05 58       	MOV       R0, R5
     ad2:	24 45       	LD        R5, [PC + #36]        ;->0xb60  :=0x4ba6
     ad4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:1524
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     ad6:	03 0d       	LD.W      R5, [SP + #3]
     ad8:	50 38       	CMP       R5, #0
     ada:	04 f0       	JZ        $+4                   ;->0xae2
     adc:	03 0d       	LD.W      R5, [SP + #3]
     ade:	51 38       	CMP       R5, #1
     ae0:	03 f1       	JNZ       $+3                   ;->0xae6
     ae2:	51 10       	MOV       R5, #1
     ae4:	02 04       	SJMP      $+2                   ;->0xae8
     ae6:	50 10       	MOV       R5, #0
     ae8:	05 58       	MOV       R0, R5
     aea:	1e 45       	LD        R5, [PC + #30]        ;->0xb60  :=0x4ba6
     aec:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:1525
    CHECK_RESTRICTION(CHECK_ADC_INT(InterruptType));
     aee:	02 0c       	LD.W      R4, [SP + #2]
     af0:	1d 45       	LD        R5, [PC + #29]        ;->0xb64  :=0xc0b0d
     af2:	45 70       	CMP       R4, R5
     af4:	0d f0       	JZ        $+13                  ;->0xb0e
     af6:	02 0c       	LD.W      R4, [SP + #2]
     af8:	1c 45       	LD        R5, [PC + #28]        ;->0xb68  :=0x7040a
     afa:	45 70       	CMP       R4, R5
     afc:	09 f0       	JZ        $+9                   ;->0xb0e
     afe:	02 0c       	LD.W      R4, [SP + #2]
     b00:	1b 45       	LD        R5, [PC + #27]        ;->0xb6c  :=0x60309
     b02:	45 70       	CMP       R4, R5
     b04:	05 f0       	JZ        $+5                   ;->0xb0e
     b06:	02 0c       	LD.W      R4, [SP + #2]
     b08:	1a 45       	LD        R5, [PC + #26]        ;->0xb70  :=0x50208
     b0a:	45 70       	CMP       R4, R5
     b0c:	03 f1       	JNZ       $+3                   ;->0xb12
     b0e:	51 10       	MOV       R5, #1
     b10:	02 04       	SJMP      $+2                   ;->0xb14
     b12:	50 10       	MOV       R5, #0
     b14:	05 58       	MOV       R0, R5
     b16:	13 45       	LD        R5, [PC + #19]        ;->0xb60  :=0x4ba6
     b18:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:1528

    /* 获取中断类型掩码 */
    tmpreg = (InterruptType & 0x0F);
     b1a:	02 0c       	LD.W      R4, [SP + #2]
     b1c:	5f 10       	MOV       R5, #15
     b1e:	6c d5       	ANL       R5, R4, R5
     b20:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:1529
    tmpreg = (uint32_t)0x01 << tmpreg;
     b22:	5e 82       	LD.W      R5, [SP]
     b24:	41 10       	MOV       R4, #1
     b26:	6c db       	LSL       R5, R4, R5
     b28:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_adc.c:1531

    if (NewState != FALSE)
     b2a:	03 0d       	LD.W      R5, [SP + #3]
     b2c:	50 38       	CMP       R5, #0
     b2e:	08 f0       	JZ        $+8                   ;->0xb3e
..\src\kf32a9k1xxx_adc.c:1534
    {
        /* 使能中断 */
        ADCx->STATE |= tmpreg;
     b30:	01 0d       	LD.W      R5, [SP + #1]
     b32:	25 9d       	LD.W      R4, [R5 + #20]
     b34:	5e 82       	LD.W      R5, [SP]
     b36:	64 d7       	ORL       R4, R4, R5
     b38:	01 0d       	LD.W      R5, [SP + #1]
     b3a:	2c a5       	ST.W      [R5 + #20], R4
     b3c:	08 04       	SJMP      $+8                   ;->0xb4c
..\src\kf32a9k1xxx_adc.c:1539
    }
    else
    {
        /* 禁止中断 */
        ADCx->STATE &= (~tmpreg);
     b3e:	01 0d       	LD.W      R5, [SP + #1]
     b40:	25 9d       	LD.W      R4, [R5 + #20]
     b42:	5e 82       	LD.W      R5, [SP]
     b44:	55 68       	NOT       R5, R5
     b46:	64 d5       	ANL       R4, R4, R5
     b48:	01 0d       	LD.W      R5, [SP + #1]
     b4a:	2c a5       	ST.W      [R5 + #20], R4
..\src\kf32a9k1xxx_adc.c:1541
    }
}
     b4c:	e0 29       	ADD       SP, #16
     b4e:	0d 5d       	POP       LR
     b50:	1d 5c       	JMP       LR
     b52:	00 00       	NOP      NOP      
     b54:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0xe54	@@: LD        R0, [PC + #0]         ;->0xb54  :=0x40000580
     b58:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x758	@@: LD        R0, [PC + #0]         ;->0xb58  :=0x40000600
     b5c:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x85c	@@: LD        R0, [PC + #0]         ;->0xb5c  :=0x40000680
     b60:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
     b64:	0d 0b 0c 00 	.long     0x000c0b0d ->000789261 
     b68:	0a 04 07 00 	.long     0x0007040a ->000459786  [!!!@2@:SJMP      $+10                  ;->0xb7c	@@: BREAK    
     b6c:	09 03 06 00 	.long     0x00060309 ->000393993  [!!!@4@:JMP       $+589830              ;->0x120b78
     b70:	08 02 05 00 	.long     0x00050208 ->000328200  [!!!@2@:SVC      	@@: RESET    

00000b74 <SFR_Config>:
SFR_Config():
KF32A9K1XXX.h:13916
   -- 函数定义
   ---------------------------------------------------------------------------- */
/* 写特殊功能寄存器 */
static inline uint32_t
SFR_Config (uint32_t SfrMem, uint32_t SfrMask, uint32_t WriteVal)
{
     b74:	ec 30       	SUB       SP, #12
     b76:	e0 85       	ST.W      [SP], R0
     b78:	01 21       	ST.W      [SP + #1], R1
     b7a:	02 22       	ST.W      [SP + #2], R2
KF32A9K1XXX.h:13917
    return ((SfrMem & SfrMask) | (WriteVal));
     b7c:	5e 82       	LD.W      R5, [SP]
     b7e:	01 0c       	LD.W      R4, [SP + #1]
     b80:	25 d5       	ANL       R4, R5, R4
     b82:	02 0d       	LD.W      R5, [SP + #2]
     b84:	6c d7       	ORL       R5, R4, R5
KF32A9K1XXX.h:13918
}
     b86:	05 58       	MOV       R0, R5
     b88:	ec 28       	ADD       SP, #12
     b8a:	1d 5c       	JMP       LR

00000b8c <TIM_Reset>:
TIM_Reset():
..\src\kf32a9k1xxx_btim.c:42
  * 输入  TIMx: 定时器内存结构指针，取值为 T0_SFR/T1_SFR/T2_SFR/T3_SFR/T4_SFR/
  *           T5_SFR/T6_SFR/T14_SFR/T18_SFR/T19_SFR/T21_SFR。
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
     b8c:	2d 5d       	PUSH      LR
     b8e:	e4 30       	SUB       SP, #4
     b90:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_btim.c:44
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     b92:	5e 82       	LD.W      R5, [SP]
     b94:	7f 44       	LD        R4, [PC + #127]       ;->0xd90  :=0x40000880
     b96:	54 70       	CMP       R5, R4
     b98:	29 f0       	JZ        $+41                  ;->0xbea
     b9a:	5e 82       	LD.W      R5, [SP]
     b9c:	7e 44       	LD        R4, [PC + #126]       ;->0xd94  :=0x40000100
     b9e:	54 70       	CMP       R5, R4
     ba0:	25 f0       	JZ        $+37                  ;->0xbea
     ba2:	5e 82       	LD.W      R5, [SP]
     ba4:	7d 44       	LD        R4, [PC + #125]       ;->0xd98  :=0x40000180
     ba6:	54 70       	CMP       R5, R4
     ba8:	21 f0       	JZ        $+33                  ;->0xbea
     baa:	5e 82       	LD.W      R5, [SP]
     bac:	7c 44       	LD        R4, [PC + #124]       ;->0xd9c  :=0x40000200
     bae:	54 70       	CMP       R5, R4
     bb0:	1d f0       	JZ        $+29                  ;->0xbea
     bb2:	5e 82       	LD.W      R5, [SP]
     bb4:	7b 44       	LD        R4, [PC + #123]       ;->0xda0  :=0x40000280
     bb6:	54 70       	CMP       R5, R4
     bb8:	19 f0       	JZ        $+25                  ;->0xbea
     bba:	5e 82       	LD.W      R5, [SP]
     bbc:	7a 44       	LD        R4, [PC + #122]       ;->0xda4  :=0x40000300
     bbe:	54 70       	CMP       R5, R4
     bc0:	15 f0       	JZ        $+21                  ;->0xbea
     bc2:	5e 82       	LD.W      R5, [SP]
     bc4:	78 44       	LD        R4, [PC + #120]       ;->0xda4  :=0x40000300
     bc6:	54 70       	CMP       R5, R4
     bc8:	11 f0       	JZ        $+17                  ;->0xbea
     bca:	5e 82       	LD.W      R5, [SP]
     bcc:	77 44       	LD        R4, [PC + #119]       ;->0xda8  :=0x40001800
     bce:	54 70       	CMP       R5, R4
     bd0:	0d f0       	JZ        $+13                  ;->0xbea
     bd2:	5e 82       	LD.W      R5, [SP]
     bd4:	76 44       	LD        R4, [PC + #118]       ;->0xdac  :=0x40001a80
     bd6:	54 70       	CMP       R5, R4
     bd8:	09 f0       	JZ        $+9                   ;->0xbea
     bda:	5e 82       	LD.W      R5, [SP]
     bdc:	75 44       	LD        R4, [PC + #117]       ;->0xdb0  :=0x40001b00
     bde:	54 70       	CMP       R5, R4
     be0:	05 f0       	JZ        $+5                   ;->0xbea
     be2:	5e 82       	LD.W      R5, [SP]
     be4:	74 44       	LD        R4, [PC + #116]       ;->0xdb4  :=0x40001c00
     be6:	54 70       	CMP       R5, R4
     be8:	03 f1       	JNZ       $+3                   ;->0xbee
     bea:	51 10       	MOV       R5, #1
     bec:	02 04       	SJMP      $+2                   ;->0xbf0
     bee:	50 10       	MOV       R5, #0
     bf0:	05 58       	MOV       R0, R5
     bf2:	72 45       	LD        R5, [PC + #114]       ;->0xdb8  :=0x4ba6
     bf4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:46

    if ((uint32_t)TIMx == T0_ADDR)
     bf6:	5e 82       	LD.W      R5, [SP]
     bf8:	66 44       	LD        R4, [PC + #102]       ;->0xd90  :=0x40000880
     bfa:	54 70       	CMP       R5, R4
     bfc:	11 f1       	JNZ       $+17                  ;->0xc1e
..\src\kf32a9k1xxx_btim.c:48
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T0RST, TRUE);
     bfe:	01 10       	MOV       R0, #1
     c00:	01 7b       	LSL       R0, #17
     c02:	11 10       	MOV       R1, #1
     c04:	6e 45       	LD        R5, [PC + #110]       ;->0xdbc  :=0x3144
     c06:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:49
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T0RST, FALSE);
     c08:	01 10       	MOV       R0, #1
     c0a:	01 7b       	LSL       R0, #17
     c0c:	10 10       	MOV       R1, #0
     c0e:	6c 45       	LD        R5, [PC + #108]       ;->0xdbc  :=0x3144
     c10:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:50
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T0CLKEN, TRUE);
     c12:	01 10       	MOV       R0, #1
     c14:	01 7b       	LSL       R0, #17
     c16:	11 10       	MOV       R1, #1
     c18:	6a 45       	LD        R5, [PC + #106]       ;->0xdc0  :=0x2fb8
     c1a:	05 5c       	LJMP      R5
     c1c:	b6 04       	SJMP      $+182                 ;->0xd88
..\src\kf32a9k1xxx_btim.c:52
    }
    else if ((uint32_t)TIMx == T1_ADDR)
     c1e:	5e 82       	LD.W      R5, [SP]
     c20:	5d 44       	LD        R4, [PC + #93]        ;->0xd94  :=0x40000100
     c22:	54 70       	CMP       R5, R4
     c24:	0e f1       	JNZ       $+14                  ;->0xc40
..\src\kf32a9k1xxx_btim.c:54
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T1RST, TRUE);
     c26:	04 10       	MOV       R0, #4
     c28:	11 10       	MOV       R1, #1
     c2a:	65 45       	LD        R5, [PC + #101]       ;->0xdbc  :=0x3144
     c2c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:55
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T1RST, FALSE);
     c2e:	04 10       	MOV       R0, #4
     c30:	10 10       	MOV       R1, #0
     c32:	63 45       	LD        R5, [PC + #99]        ;->0xdbc  :=0x3144
     c34:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:56
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T1CLKEN, TRUE);
     c36:	04 10       	MOV       R0, #4
     c38:	11 10       	MOV       R1, #1
     c3a:	62 45       	LD        R5, [PC + #98]        ;->0xdc0  :=0x2fb8
     c3c:	05 5c       	LJMP      R5
     c3e:	a5 04       	SJMP      $+165                 ;->0xd88
..\src\kf32a9k1xxx_btim.c:58
    }
    else if ((uint32_t)TIMx == T2_ADDR)
     c40:	5e 82       	LD.W      R5, [SP]
     c42:	56 44       	LD        R4, [PC + #86]        ;->0xd98  :=0x40000180
     c44:	54 70       	CMP       R5, R4
     c46:	0e f1       	JNZ       $+14                  ;->0xc62
..\src\kf32a9k1xxx_btim.c:60
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T2RST, TRUE);
     c48:	08 10       	MOV       R0, #8
     c4a:	11 10       	MOV       R1, #1
     c4c:	5c 45       	LD        R5, [PC + #92]        ;->0xdbc  :=0x3144
     c4e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:61
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T2RST, FALSE);
     c50:	08 10       	MOV       R0, #8
     c52:	10 10       	MOV       R1, #0
     c54:	5a 45       	LD        R5, [PC + #90]        ;->0xdbc  :=0x3144
     c56:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:62
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T2CLKEN, TRUE);
     c58:	08 10       	MOV       R0, #8
     c5a:	11 10       	MOV       R1, #1
     c5c:	59 45       	LD        R5, [PC + #89]        ;->0xdc0  :=0x2fb8
     c5e:	05 5c       	LJMP      R5
     c60:	94 04       	SJMP      $+148                 ;->0xd88
..\src\kf32a9k1xxx_btim.c:64
    }
    else if ((uint32_t)TIMx == T3_ADDR)
     c62:	5e 82       	LD.W      R5, [SP]
     c64:	4e 44       	LD        R4, [PC + #78]        ;->0xd9c  :=0x40000200
     c66:	54 70       	CMP       R5, R4
     c68:	0e f1       	JNZ       $+14                  ;->0xc84
..\src\kf32a9k1xxx_btim.c:66
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T3RST, TRUE);
     c6a:	00 11       	MOV       R0, #16
     c6c:	11 10       	MOV       R1, #1
     c6e:	54 45       	LD        R5, [PC + #84]        ;->0xdbc  :=0x3144
     c70:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:67
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T3RST, FALSE);
     c72:	00 11       	MOV       R0, #16
     c74:	10 10       	MOV       R1, #0
     c76:	52 45       	LD        R5, [PC + #82]        ;->0xdbc  :=0x3144
     c78:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:68
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T3CLKEN, TRUE);
     c7a:	00 11       	MOV       R0, #16
     c7c:	11 10       	MOV       R1, #1
     c7e:	51 45       	LD        R5, [PC + #81]        ;->0xdc0  :=0x2fb8
     c80:	05 5c       	LJMP      R5
     c82:	83 04       	SJMP      $+131                 ;->0xd88
..\src\kf32a9k1xxx_btim.c:70
    }
    else if ((uint32_t)TIMx == T4_ADDR)
     c84:	5e 82       	LD.W      R5, [SP]
     c86:	47 44       	LD        R4, [PC + #71]        ;->0xda0  :=0x40000280
     c88:	54 70       	CMP       R5, R4
     c8a:	0e f1       	JNZ       $+14                  ;->0xca6
..\src\kf32a9k1xxx_btim.c:72
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T4RST, TRUE);
     c8c:	00 12       	MOV       R0, #32
     c8e:	11 10       	MOV       R1, #1
     c90:	4b 45       	LD        R5, [PC + #75]        ;->0xdbc  :=0x3144
     c92:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:73
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T4RST, FALSE);
     c94:	00 12       	MOV       R0, #32
     c96:	10 10       	MOV       R1, #0
     c98:	49 45       	LD        R5, [PC + #73]        ;->0xdbc  :=0x3144
     c9a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:74
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T4CLKEN, TRUE);
     c9c:	00 12       	MOV       R0, #32
     c9e:	11 10       	MOV       R1, #1
     ca0:	48 45       	LD        R5, [PC + #72]        ;->0xdc0  :=0x2fb8
     ca2:	05 5c       	LJMP      R5
     ca4:	72 04       	SJMP      $+114                 ;->0xd88
..\src\kf32a9k1xxx_btim.c:76
    }
    else if ((uint32_t)TIMx == T5_ADDR)
     ca6:	5e 82       	LD.W      R5, [SP]
     ca8:	3f 44       	LD        R4, [PC + #63]        ;->0xda4  :=0x40000300
     caa:	54 70       	CMP       R5, R4
     cac:	0e f1       	JNZ       $+14                  ;->0xcc8
..\src\kf32a9k1xxx_btim.c:78
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T5T6RST, TRUE);
     cae:	00 14       	MOV       R0, #64
     cb0:	11 10       	MOV       R1, #1
     cb2:	43 45       	LD        R5, [PC + #67]        ;->0xdbc  :=0x3144
     cb4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:79
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T5T6RST, FALSE);
     cb6:	00 14       	MOV       R0, #64
     cb8:	10 10       	MOV       R1, #0
     cba:	41 45       	LD        R5, [PC + #65]        ;->0xdbc  :=0x3144
     cbc:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:80
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T5T6CLKEN, TRUE);
     cbe:	00 14       	MOV       R0, #64
     cc0:	11 10       	MOV       R1, #1
     cc2:	40 45       	LD        R5, [PC + #64]        ;->0xdc0  :=0x2fb8
     cc4:	05 5c       	LJMP      R5
     cc6:	61 04       	SJMP      $+97                  ;->0xd88
..\src\kf32a9k1xxx_btim.c:82
    }
    else if ((uint32_t)TIMx == T6_ADDR)
     cc8:	5e 82       	LD.W      R5, [SP]
     cca:	37 44       	LD        R4, [PC + #55]        ;->0xda4  :=0x40000300
     ccc:	54 70       	CMP       R5, R4
     cce:	0e f1       	JNZ       $+14                  ;->0xcea
..\src\kf32a9k1xxx_btim.c:84
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T5T6RST, TRUE);
     cd0:	00 14       	MOV       R0, #64
     cd2:	11 10       	MOV       R1, #1
     cd4:	3a 45       	LD        R5, [PC + #58]        ;->0xdbc  :=0x3144
     cd6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:85
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T5T6RST, FALSE);
     cd8:	00 14       	MOV       R0, #64
     cda:	10 10       	MOV       R1, #0
     cdc:	38 45       	LD        R5, [PC + #56]        ;->0xdbc  :=0x3144
     cde:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:86
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T5T6CLKEN, TRUE);
     ce0:	00 14       	MOV       R0, #64
     ce2:	11 10       	MOV       R1, #1
     ce4:	37 45       	LD        R5, [PC + #55]        ;->0xdc0  :=0x2fb8
     ce6:	05 5c       	LJMP      R5
     ce8:	50 04       	SJMP      $+80                  ;->0xd88
..\src\kf32a9k1xxx_btim.c:88
    }
    else if ((uint32_t)TIMx == T14_ADDR)
     cea:	5e 82       	LD.W      R5, [SP]
     cec:	2f 44       	LD        R4, [PC + #47]        ;->0xda8  :=0x40001800
     cee:	54 70       	CMP       R5, R4
     cf0:	11 f1       	JNZ       $+17                  ;->0xd12
..\src\kf32a9k1xxx_btim.c:90
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T14RST, TRUE);
     cf2:	01 10       	MOV       R0, #1
     cf4:	00 7b       	LSL       R0, #16
     cf6:	11 10       	MOV       R1, #1
     cf8:	33 45       	LD        R5, [PC + #51]        ;->0xdc4  :=0x31b4
     cfa:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:91
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T14RST, FALSE);
     cfc:	01 10       	MOV       R0, #1
     cfe:	00 7b       	LSL       R0, #16
     d00:	10 10       	MOV       R1, #0
     d02:	31 45       	LD        R5, [PC + #49]        ;->0xdc4  :=0x31b4
     d04:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:92
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T14CLKEN, TRUE);
     d06:	01 10       	MOV       R0, #1
     d08:	00 7b       	LSL       R0, #16
     d0a:	11 10       	MOV       R1, #1
     d0c:	2f 45       	LD        R5, [PC + #47]        ;->0xdc8  :=0x3028
     d0e:	05 5c       	LJMP      R5
     d10:	3c 04       	SJMP      $+60                  ;->0xd88
..\src\kf32a9k1xxx_btim.c:95
    }

    else if ((uint32_t)TIMx == T18_ADDR)
     d12:	5e 82       	LD.W      R5, [SP]
     d14:	26 44       	LD        R4, [PC + #38]        ;->0xdac  :=0x40001a80
     d16:	54 70       	CMP       R5, R4
     d18:	11 f1       	JNZ       $+17                  ;->0xd3a
..\src\kf32a9k1xxx_btim.c:97
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T18RST, TRUE);
     d1a:	01 10       	MOV       R0, #1
     d1c:	05 7b       	LSL       R0, #21
     d1e:	11 10       	MOV       R1, #1
     d20:	29 45       	LD        R5, [PC + #41]        ;->0xdc4  :=0x31b4
     d22:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:98
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T18RST, FALSE);
     d24:	01 10       	MOV       R0, #1
     d26:	05 7b       	LSL       R0, #21
     d28:	10 10       	MOV       R1, #0
     d2a:	27 45       	LD        R5, [PC + #39]        ;->0xdc4  :=0x31b4
     d2c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:99
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T18CLKEN, TRUE);
     d2e:	01 10       	MOV       R0, #1
     d30:	05 7b       	LSL       R0, #21
     d32:	11 10       	MOV       R1, #1
     d34:	25 45       	LD        R5, [PC + #37]        ;->0xdc8  :=0x3028
     d36:	05 5c       	LJMP      R5
     d38:	28 04       	SJMP      $+40                  ;->0xd88
..\src\kf32a9k1xxx_btim.c:101
    }
    else if ((uint32_t)TIMx == T19_ADDR)
     d3a:	5e 82       	LD.W      R5, [SP]
     d3c:	1d 44       	LD        R4, [PC + #29]        ;->0xdb0  :=0x40001b00
     d3e:	54 70       	CMP       R5, R4
     d40:	11 f1       	JNZ       $+17                  ;->0xd62
..\src\kf32a9k1xxx_btim.c:103
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T19RST, TRUE);
     d42:	01 10       	MOV       R0, #1
     d44:	06 7b       	LSL       R0, #22
     d46:	11 10       	MOV       R1, #1
     d48:	1f 45       	LD        R5, [PC + #31]        ;->0xdc4  :=0x31b4
     d4a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:104
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T19RST, FALSE);
     d4c:	01 10       	MOV       R0, #1
     d4e:	06 7b       	LSL       R0, #22
     d50:	10 10       	MOV       R1, #0
     d52:	1d 45       	LD        R5, [PC + #29]        ;->0xdc4  :=0x31b4
     d54:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:105
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T19CLKEN, TRUE);
     d56:	01 10       	MOV       R0, #1
     d58:	06 7b       	LSL       R0, #22
     d5a:	11 10       	MOV       R1, #1
     d5c:	1b 45       	LD        R5, [PC + #27]        ;->0xdc8  :=0x3028
     d5e:	05 5c       	LJMP      R5
     d60:	14 04       	SJMP      $+20                  ;->0xd88
..\src\kf32a9k1xxx_btim.c:107
    }
    else if ((uint32_t)TIMx == T21_ADDR)
     d62:	5e 82       	LD.W      R5, [SP]
     d64:	14 44       	LD        R4, [PC + #20]        ;->0xdb4  :=0x40001c00
     d66:	54 70       	CMP       R5, R4
     d68:	10 f1       	JNZ       $+16                  ;->0xd88
..\src\kf32a9k1xxx_btim.c:109
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T21RST, TRUE);
     d6a:	01 10       	MOV       R0, #1
     d6c:	80 7b       	LSL       R0, #24
     d6e:	11 10       	MOV       R1, #1
     d70:	15 45       	LD        R5, [PC + #21]        ;->0xdc4  :=0x31b4
     d72:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:110
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T21RST, FALSE);
     d74:	01 10       	MOV       R0, #1
     d76:	80 7b       	LSL       R0, #24
     d78:	10 10       	MOV       R1, #0
     d7a:	13 45       	LD        R5, [PC + #19]        ;->0xdc4  :=0x31b4
     d7c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:111
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T21CLKEN, TRUE);
     d7e:	01 10       	MOV       R0, #1
     d80:	80 7b       	LSL       R0, #24
     d82:	11 10       	MOV       R1, #1
     d84:	11 45       	LD        R5, [PC + #17]        ;->0xdc8  :=0x3028
     d86:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:117
    }
    else
    {
        ;
    }
}
     d88:	e4 28       	ADD       SP, #4
     d8a:	0d 5d       	POP       LR
     d8c:	1d 5c       	JMP       LR
     d8e:	00 00       	NOP      NOP      
     d90:	80 08 00 40 	.long     0x40000880 ->1073744000  [!!!@2@:LD.W      R0, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0xd90  :=0x40000880
     d94:	00 01 00 40 	.long     0x40000100 ->1073742080  [!!!@2@:CMN       R0, R0	@@: LD        R0, [PC + #0]         ;->0xd94  :=0x40000100
     d98:	80 01 00 40 	.long     0x40000180 ->1073742208  [!!!@2@:CMN       R8, R0	@@: LD        R0, [PC + #0]         ;->0xd98  :=0x40000180
     d9c:	00 02 00 40 	.long     0x40000200 ->1073742336  [!!!@2@:SVC      	@@: LD        R0, [PC + #0]         ;->0xd9c  :=0x40000200
     da0:	80 02 00 40 	.long     0x40000280 ->1073742464  [!!!@2@:SVC      	@@: LD        R0, [PC + #0]         ;->0xda0  :=0x40000280
     da4:	00 03 00 40 	.long     0x40000300 ->1073742592  [!!!@4@:JMP       $+16384               ;->0x8da4
     da8:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xda8  :=0x40001800
     dac:	80 1a 00 40 	.long     0x40001a80 ->1073748608  [!!!@2@:MOV       R8, #160	@@: LD        R0, [PC + #0]         ;->0xdac  :=0x40001a80
     db0:	00 1b 00 40 	.long     0x40001b00 ->1073748736  [!!!@2@:MOV       R0, #176	@@: LD        R0, [PC + #0]         ;->0xdb0  :=0x40001b00
     db4:	00 1c 00 40 	.long     0x40001c00 ->1073748992  [!!!@2@:MOV       R0, #192	@@: LD        R0, [PC + #0]         ;->0xdb4  :=0x40001c00
     db8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
     dbc:	44 31 00 00 	.long     0x00003144 ->000012612  [!!!@2@:SUB       R4, #20	@@: NOP      
     dc0:	b8 2f 00 00 	.long     0x00002fb8 ->000012216  [!!!@2@:ADD       R11, #120	@@: NOP      
     dc4:	b4 31 00 00 	.long     0x000031b4 ->000012724  [!!!@2@:SUB       R11, #20	@@: NOP      
     dc8:	28 30 00 00 	.long     0x00003028 ->000012328  [!!!@2@:SUB       R2, #8	@@: NOP      

00000dcc <BTIM_Cmd>:
BTIM_Cmd():
..\src\kf32a9k1xxx_btim.c:251
  *                 取值范围为：TRUE 或 FALSE
  * 返回  无
  */
void
BTIM_Cmd (BTIM_SFRmap* BTIMx, FunctionalState NewState)
{
     dcc:	2d 5d       	PUSH      LR
     dce:	e8 30       	SUB       SP, #8
     dd0:	e0 85       	ST.W      [SP], R0
     dd2:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_btim.c:253
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     dd4:	51 10       	MOV       R5, #1
     dd6:	4e 82       	LD.W      R4, [SP]
     dd8:	11 43       	LD        R3, [PC + #17]        ;->0xe1c  :=0x40001800
     dda:	43 70       	CMP       R4, R3
     ddc:	02 f0       	JZ        $+2                   ;->0xde0
     dde:	50 10       	MOV       R5, #0
     de0:	55 d1       	ZXT.B     R5, R5
     de2:	05 58       	MOV       R0, R5
     de4:	0f 45       	LD        R5, [PC + #15]        ;->0xe20  :=0x4ba6
     de6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:254
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     de8:	01 0d       	LD.W      R5, [SP + #1]
     dea:	50 38       	CMP       R5, #0
     dec:	04 f0       	JZ        $+4                   ;->0xdf4
     dee:	01 0d       	LD.W      R5, [SP + #1]
     df0:	51 38       	CMP       R5, #1
     df2:	03 f1       	JNZ       $+3                   ;->0xdf8
     df4:	51 10       	MOV       R5, #1
     df6:	02 04       	SJMP      $+2                   ;->0xdfa
     df8:	50 10       	MOV       R5, #0
     dfa:	05 58       	MOV       R0, R5
     dfc:	09 45       	LD        R5, [PC + #9]         ;->0xe20  :=0x4ba6
     dfe:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:257

    /*-------------------- 设置TXCTL1寄存器TXEN位 --------------------*/
    if (NewState != FALSE)
     e00:	01 0d       	LD.W      R5, [SP + #1]
     e02:	50 38       	CMP       R5, #0
     e04:	05 f0       	JZ        $+5                   ;->0xe0e
..\src\kf32a9k1xxx_btim.c:260
    {
        /* 计数模式 */
        SFR_SET_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXEN_POS);
     e06:	5e 82       	LD.W      R5, [SP]
     e08:	2d c1       	ADD       R5, R5, #4
     e0a:	28 4c       	SET       [R5], #0
     e0c:	04 04       	SJMP      $+4                   ;->0xe14
..\src\kf32a9k1xxx_btim.c:265
    }
    else
    {
        /* 定时模式 */
        SFR_CLR_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXEN_POS);
     e0e:	5e 82       	LD.W      R5, [SP]
     e10:	2d c1       	ADD       R5, R5, #4
     e12:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_btim.c:267
    }
}
     e14:	e8 28       	ADD       SP, #8
     e16:	0d 5d       	POP       LR
     e18:	1d 5c       	JMP       LR
     e1a:	00 00       	NOP      NOP      
     e1c:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xe1c  :=0x40001800
     e20:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00000e24 <BTIM_Set_Counter>:
BTIM_Set_Counter():
..\src\kf32a9k1xxx_btim.c:277
  *       Counter: 新的计数值，取值16位数据。
  * 返回  无
  */
void
BTIM_Set_Counter (BTIM_SFRmap* BTIMx, uint16_t Counter)
{
     e24:	2d 5d       	PUSH      LR
     e26:	e8 30       	SUB       SP, #8
     e28:	e0 85       	ST.W      [SP], R0
     e2a:	a1 58       	MOV       R5, R1
     e2c:	a2 e2       	ST.H      [SP + #2], R5
..\src\kf32a9k1xxx_btim.c:279
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     e2e:	51 10       	MOV       R5, #1
     e30:	4e 82       	LD.W      R4, [SP]
     e32:	08 43       	LD        R3, [PC + #8]         ;->0xe50  :=0x40001800
     e34:	43 70       	CMP       R4, R3
     e36:	02 f0       	JZ        $+2                   ;->0xe3a
     e38:	50 10       	MOV       R5, #0
     e3a:	55 d1       	ZXT.B     R5, R5
     e3c:	05 58       	MOV       R0, R5
     e3e:	06 45       	LD        R5, [PC + #6]         ;->0xe54  :=0x4ba6
     e40:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:282

    /* 更新定时器计数值 */
    BTIMx->CNT = Counter;
     e42:	82 e0       	LD.H      R4, [SP + #2]
     e44:	5e 82       	LD.W      R5, [SP]
     e46:	54 85       	ST.W      [R5], R4
..\src\kf32a9k1xxx_btim.c:283
}
     e48:	e8 28       	ADD       SP, #8
     e4a:	0d 5d       	POP       LR
     e4c:	1d 5c       	JMP       LR
     e4e:	00 00       	NOP      NOP      
     e50:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xe50  :=0x40001800
     e54:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00000e58 <BTIM_Set_Period>:
BTIM_Set_Period():
..\src\kf32a9k1xxx_btim.c:293
  *       Period: 新的周期值，取值16位数据。
  * 返回  无
  */
void
BTIM_Set_Period (BTIM_SFRmap* BTIMx, uint16_t Period)
{
     e58:	2d 5d       	PUSH      LR
     e5a:	e8 30       	SUB       SP, #8
     e5c:	e0 85       	ST.W      [SP], R0
     e5e:	a1 58       	MOV       R5, R1
     e60:	a2 e2       	ST.H      [SP + #2], R5
..\src\kf32a9k1xxx_btim.c:295
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     e62:	51 10       	MOV       R5, #1
     e64:	4e 82       	LD.W      R4, [SP]
     e66:	08 43       	LD        R3, [PC + #8]         ;->0xe84  :=0x40001800
     e68:	43 70       	CMP       R4, R3
     e6a:	02 f0       	JZ        $+2                   ;->0xe6e
     e6c:	50 10       	MOV       R5, #0
     e6e:	55 d1       	ZXT.B     R5, R5
     e70:	05 58       	MOV       R0, R5
     e72:	06 45       	LD        R5, [PC + #6]         ;->0xe88  :=0x4ba6
     e74:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:298

    /* 更新定时器计数值 */
    BTIMx->PPX = Period;
     e76:	82 e0       	LD.H      R4, [SP + #2]
     e78:	5e 82       	LD.W      R5, [SP]
     e7a:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_btim.c:299
}
     e7c:	e8 28       	ADD       SP, #8
     e7e:	0d 5d       	POP       LR
     e80:	1d 5c       	JMP       LR
     e82:	00 00       	NOP      NOP      
     e84:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xe84  :=0x40001800
     e88:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00000e8c <BTIM_Set_Prescaler>:
BTIM_Set_Prescaler():
..\src\kf32a9k1xxx_btim.c:309
  *       Prescaler: 新的预分频，取值16位数据。
  * 返回  无
  */
void
BTIM_Set_Prescaler (BTIM_SFRmap* BTIMx, uint16_t Prescaler)
{
     e8c:	2d 5d       	PUSH      LR
     e8e:	e8 30       	SUB       SP, #8
     e90:	e0 85       	ST.W      [SP], R0
     e92:	a1 58       	MOV       R5, R1
     e94:	a2 e2       	ST.H      [SP + #2], R5
..\src\kf32a9k1xxx_btim.c:311
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     e96:	51 10       	MOV       R5, #1
     e98:	4e 82       	LD.W      R4, [SP]
     e9a:	08 43       	LD        R3, [PC + #8]         ;->0xeb8  :=0x40001800
     e9c:	43 70       	CMP       R4, R3
     e9e:	02 f0       	JZ        $+2                   ;->0xea2
     ea0:	50 10       	MOV       R5, #0
     ea2:	55 d1       	ZXT.B     R5, R5
     ea4:	05 58       	MOV       R0, R5
     ea6:	06 45       	LD        R5, [PC + #6]         ;->0xebc  :=0x4ba6
     ea8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:314

    /* 更新定时器计数值 */
    BTIMx->PRSC = Prescaler;
     eaa:	82 e0       	LD.H      R4, [SP + #2]
     eac:	5e 82       	LD.W      R5, [SP]
     eae:	ec a0       	ST.W      [R5 + #3], R4
..\src\kf32a9k1xxx_btim.c:315
}
     eb0:	e8 28       	ADD       SP, #8
     eb2:	0d 5d       	POP       LR
     eb4:	1d 5c       	JMP       LR
     eb6:	00 00       	NOP      NOP      
     eb8:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xeb8  :=0x40001800
     ebc:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00000ec0 <BTIM_Counter_Mode_Config>:
BTIM_Counter_Mode_Config():
..\src\kf32a9k1xxx_btim.c:331
  *                      BTIM_COUNT_UP_DOWN_OUF: 向上-向下计数,上溢和下溢产生中断标志
  * 返回  无
  */
void
BTIM_Counter_Mode_Config (BTIM_SFRmap* BTIMx, uint32_t CounterMode)
{
     ec0:	2d 5d       	PUSH      LR
     ec2:	e8 30       	SUB       SP, #8
     ec4:	e0 85       	ST.W      [SP], R0
     ec6:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_btim.c:333
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     ec8:	51 10       	MOV       R5, #1
     eca:	4e 82       	LD.W      R4, [SP]
     ecc:	12 43       	LD        R3, [PC + #18]        ;->0xf14  :=0x40001800
     ece:	43 70       	CMP       R4, R3
     ed0:	02 f0       	JZ        $+2                   ;->0xed4
     ed2:	50 10       	MOV       R5, #0
     ed4:	55 d1       	ZXT.B     R5, R5
     ed6:	05 58       	MOV       R0, R5
     ed8:	10 45       	LD        R5, [PC + #16]        ;->0xf18  :=0x4ba6
     eda:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:334
    CHECK_RESTRICTION(CHECK_BTIM_COUNTER_MODE(CounterMode));
     edc:	01 0c       	LD.W      R4, [SP + #1]
     ede:	5f 13       	MOV       R5, #63
     ee0:	6c d5       	ANL       R5, R4, R5
     ee2:	50 38       	CMP       R5, #0
     ee4:	07 f1       	JNZ       $+7                   ;->0xef2
     ee6:	01 0d       	LD.W      R5, [SP + #1]
     ee8:	a9 7c       	LSR       R5, #9
     eea:	50 38       	CMP       R5, #0
     eec:	03 f1       	JNZ       $+3                   ;->0xef2
     eee:	51 10       	MOV       R5, #1
     ef0:	02 04       	SJMP      $+2                   ;->0xef4
     ef2:	50 10       	MOV       R5, #0
     ef4:	05 58       	MOV       R0, R5
     ef6:	09 45       	LD        R5, [PC + #9]         ;->0xf18  :=0x4ba6
     ef8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:337

    /*-------------------- 设置TXCTL1寄存器TXCMS位 --------------------*/
    BTIMx->CTL1 = SFR_Config (BTIMx->CTL1,
     efa:	5e 82       	LD.W      R5, [SP]
     efc:	6d 98       	LD.W      R5, [R5 + #1]
     efe:	05 58       	MOV       R0, R5
     f00:	07 41       	LD        R1, [PC + #7]         ;->0xf1c  :=0xfffffe3f
     f02:	01 0a       	LD.W      R2, [SP + #1]
     f04:	07 45       	LD        R5, [PC + #7]         ;->0xf20  :=0xb74
     f06:	05 5c       	LJMP      R5
     f08:	80 58       	MOV       R4, R0
     f0a:	5e 82       	LD.W      R5, [SP]
     f0c:	6c a0       	ST.W      [R5 + #1], R4
..\src\kf32a9k1xxx_btim.c:340
                          ~BTIM_CTL1_TXCMS,
                          CounterMode);
}
     f0e:	e8 28       	ADD       SP, #8
     f10:	0d 5d       	POP       LR
     f12:	1d 5c       	JMP       LR
     f14:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xf14  :=0x40001800
     f18:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
     f1c:	3f fe ff ff 	.long     0xfffffe3f ->-00000449 
     f20:	74 0b 00 00 	.long     0x00000b74 ->000002932  [!!!@2@:LD.W      R3, [SP + #116]	@@: NOP      

00000f24 <BTIM_Clock_Config>:
BTIM_Clock_Config():
..\src\kf32a9k1xxx_btim.c:354
  *                   BTIM_LFCLK: 选用LFCLK时钟
  * 返回  无
  */
void
BTIM_Clock_Config (BTIM_SFRmap* BTIMx, uint32_t NewClock)
{
     f24:	2d 5d       	PUSH      LR
     f26:	e8 30       	SUB       SP, #8
     f28:	e0 85       	ST.W      [SP], R0
     f2a:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_btim.c:356
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     f2c:	51 10       	MOV       R5, #1
     f2e:	4e 82       	LD.W      R4, [SP]
     f30:	13 43       	LD        R3, [PC + #19]        ;->0xf7c  :=0x40001800
     f32:	43 70       	CMP       R4, R3
     f34:	02 f0       	JZ        $+2                   ;->0xf38
     f36:	50 10       	MOV       R5, #0
     f38:	55 d1       	ZXT.B     R5, R5
     f3a:	05 58       	MOV       R0, R5
     f3c:	11 45       	LD        R5, [PC + #17]        ;->0xf80  :=0x4ba6
     f3e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:357
    CHECK_RESTRICTION(CHECK_BTIM_CLOCK_CONFIG(NewClock));
     f40:	01 0c       	LD.W      R4, [SP + #1]
     f42:	57 10       	MOV       R5, #7
     f44:	6c d5       	ANL       R5, R4, R5
     f46:	50 38       	CMP       R5, #0
     f48:	07 f1       	JNZ       $+7                   ;->0xf56
     f4a:	01 0d       	LD.W      R5, [SP + #1]
     f4c:	2d 7c       	LSR       R5, #5
     f4e:	50 38       	CMP       R5, #0
     f50:	03 f1       	JNZ       $+3                   ;->0xf56
     f52:	51 10       	MOV       R5, #1
     f54:	02 04       	SJMP      $+2                   ;->0xf58
     f56:	50 10       	MOV       R5, #0
     f58:	05 58       	MOV       R0, R5
     f5a:	0a 45       	LD        R5, [PC + #10]        ;->0xf80  :=0x4ba6
     f5c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:360

    /*-------------------- 设置TXCTL1寄存器TXCLK位 --------------------*/
    BTIMx->CTL1 = SFR_Config (BTIMx->CTL1,
     f5e:	5e 82       	LD.W      R5, [SP]
     f60:	6d 98       	LD.W      R5, [R5 + #1]
     f62:	05 58       	MOV       R0, R5
     f64:	18 11       	MOV       R1, #24
     f66:	11 68       	NOT       R1, R1
     f68:	01 0a       	LD.W      R2, [SP + #1]
     f6a:	07 45       	LD        R5, [PC + #7]         ;->0xf84  :=0xb74
     f6c:	05 5c       	LJMP      R5
     f6e:	80 58       	MOV       R4, R0
     f70:	5e 82       	LD.W      R5, [SP]
     f72:	6c a0       	ST.W      [R5 + #1], R4
..\src\kf32a9k1xxx_btim.c:363
                          ~BTIM_CTL1_TXCLK,
                          NewClock);
}
     f74:	e8 28       	ADD       SP, #8
     f76:	0d 5d       	POP       LR
     f78:	1d 5c       	JMP       LR
     f7a:	00 00       	NOP      NOP      
     f7c:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xf7c  :=0x40001800
     f80:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
     f84:	74 0b 00 00 	.long     0x00000b74 ->000002932  [!!!@2@:LD.W      R3, [SP + #116]	@@: NOP      

00000f88 <BTIM_Work_Mode_Config>:
BTIM_Work_Mode_Config():
..\src\kf32a9k1xxx_btim.c:405
  *                   BTIM_COUNTER_MODE: 计数模式
  * 返回  无
  */
void
BTIM_Work_Mode_Config (BTIM_SFRmap* BTIMx, uint32_t NewState)
{
     f88:	2d 5d       	PUSH      LR
     f8a:	e8 30       	SUB       SP, #8
     f8c:	e0 85       	ST.W      [SP], R0
     f8e:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_btim.c:407
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     f90:	51 10       	MOV       R5, #1
     f92:	4e 82       	LD.W      R4, [SP]
     f94:	11 43       	LD        R3, [PC + #17]        ;->0xfd8  :=0x40001800
     f96:	43 70       	CMP       R4, R3
     f98:	02 f0       	JZ        $+2                   ;->0xf9c
     f9a:	50 10       	MOV       R5, #0
     f9c:	55 d1       	ZXT.B     R5, R5
     f9e:	05 58       	MOV       R0, R5
     fa0:	0f 45       	LD        R5, [PC + #15]        ;->0xfdc  :=0x4ba6
     fa2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:408
    CHECK_RESTRICTION(CHECK_BTIM_WORK_MODE(NewState));
     fa4:	01 0d       	LD.W      R5, [SP + #1]
     fa6:	50 38       	CMP       R5, #0
     fa8:	04 f0       	JZ        $+4                   ;->0xfb0
     faa:	01 0d       	LD.W      R5, [SP + #1]
     fac:	52 38       	CMP       R5, #2
     fae:	03 f1       	JNZ       $+3                   ;->0xfb4
     fb0:	51 10       	MOV       R5, #1
     fb2:	02 04       	SJMP      $+2                   ;->0xfb6
     fb4:	50 10       	MOV       R5, #0
     fb6:	05 58       	MOV       R0, R5
     fb8:	09 45       	LD        R5, [PC + #9]         ;->0xfdc  :=0x4ba6
     fba:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:411

    /*-------------------- 设置TXCTL1寄存器TXCS位 --------------------*/
    if (NewState != BTIM_TIMER_MODE)
     fbc:	01 0d       	LD.W      R5, [SP + #1]
     fbe:	50 38       	CMP       R5, #0
     fc0:	05 f0       	JZ        $+5                   ;->0xfca
..\src\kf32a9k1xxx_btim.c:414
    {
        /* 计数模式 */
        SFR_SET_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXCS_POS);
     fc2:	5e 82       	LD.W      R5, [SP]
     fc4:	2d c1       	ADD       R5, R5, #4
     fc6:	29 4c       	SET       [R5], #1
     fc8:	04 04       	SJMP      $+4                   ;->0xfd0
..\src\kf32a9k1xxx_btim.c:419
    }
    else
    {
        /* 定时模式 */
        SFR_CLR_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXCS_POS);
     fca:	5e 82       	LD.W      R5, [SP]
     fcc:	2d c1       	ADD       R5, R5, #4
     fce:	29 4e       	CLR       [R5], #1
..\src\kf32a9k1xxx_btim.c:421
    }
}
     fd0:	e8 28       	ADD       SP, #8
     fd2:	0d 5d       	POP       LR
     fd4:	1d 5c       	JMP       LR
     fd6:	00 00       	NOP      NOP      
     fd8:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xfd8  :=0x40001800
     fdc:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00000fe0 <BTIM_Updata_Immediately_Config>:
BTIM_Updata_Immediately_Config():
..\src\kf32a9k1xxx_btim.c:515
  * 返回  无
  */
void
BTIM_Updata_Immediately_Config (BTIM_SFRmap* BTIMx,
                    FunctionalState NewState)
{
     fe0:	2d 5d       	PUSH      LR
     fe2:	e8 30       	SUB       SP, #8
     fe4:	e0 85       	ST.W      [SP], R0
     fe6:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_btim.c:517
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     fe8:	51 10       	MOV       R5, #1
     fea:	4e 82       	LD.W      R4, [SP]
     fec:	11 43       	LD        R3, [PC + #17]        ;->0x1030  :=0x40001800
     fee:	43 70       	CMP       R4, R3
     ff0:	02 f0       	JZ        $+2                   ;->0xff4
     ff2:	50 10       	MOV       R5, #0
     ff4:	55 d1       	ZXT.B     R5, R5
     ff6:	05 58       	MOV       R0, R5
     ff8:	0f 45       	LD        R5, [PC + #15]        ;->0x1034  :=0x4ba6
     ffa:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:518
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     ffc:	01 0d       	LD.W      R5, [SP + #1]
     ffe:	50 38       	CMP       R5, #0
    1000:	04 f0       	JZ        $+4                   ;->0x1008
    1002:	01 0d       	LD.W      R5, [SP + #1]
    1004:	51 38       	CMP       R5, #1
    1006:	03 f1       	JNZ       $+3                   ;->0x100c
    1008:	51 10       	MOV       R5, #1
    100a:	02 04       	SJMP      $+2                   ;->0x100e
    100c:	50 10       	MOV       R5, #0
    100e:	05 58       	MOV       R0, R5
    1010:	09 45       	LD        R5, [PC + #9]         ;->0x1034  :=0x4ba6
    1012:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:521

    /*-------------------- 设置TXCTL2寄存器TXUR位 --------------------*/
    if (NewState != FALSE)
    1014:	01 0d       	LD.W      R5, [SP + #1]
    1016:	50 38       	CMP       R5, #0
    1018:	05 f0       	JZ        $+5                   ;->0x1022
..\src\kf32a9k1xxx_btim.c:524
    {
        /* 立即更新使能 */
        SFR_SET_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUR_POS);
    101a:	5e 82       	LD.W      R5, [SP]
    101c:	58 28       	ADD       R5, #8
    101e:	ac 4c       	SET       [R5], #12
    1020:	04 04       	SJMP      $+4                   ;->0x1028
..\src\kf32a9k1xxx_btim.c:529
    }
    else
    {
        /* 立即更新未使能 */
        SFR_CLR_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUR_POS);
    1022:	5e 82       	LD.W      R5, [SP]
    1024:	58 28       	ADD       R5, #8
    1026:	ac 4e       	CLR       [R5], #12
..\src\kf32a9k1xxx_btim.c:531
    }
}
    1028:	e8 28       	ADD       SP, #8
    102a:	0d 5d       	POP       LR
    102c:	1d 5c       	JMP       LR
    102e:	00 00       	NOP      NOP      
    1030:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x1030  :=0x40001800
    1034:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00001038 <BTIM_Updata_Enable>:
BTIM_Updata_Enable():
..\src\kf32a9k1xxx_btim.c:687
  * 返回  无
  */
void
BTIM_Updata_Enable (BTIM_SFRmap* BTIMx,
                    FunctionalState NewState)
{
    1038:	2d 5d       	PUSH      LR
    103a:	e8 30       	SUB       SP, #8
    103c:	e0 85       	ST.W      [SP], R0
    103e:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_btim.c:689
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
    1040:	51 10       	MOV       R5, #1
    1042:	4e 82       	LD.W      R4, [SP]
    1044:	11 43       	LD        R3, [PC + #17]        ;->0x1088  :=0x40001800
    1046:	43 70       	CMP       R4, R3
    1048:	02 f0       	JZ        $+2                   ;->0x104c
    104a:	50 10       	MOV       R5, #0
    104c:	55 d1       	ZXT.B     R5, R5
    104e:	05 58       	MOV       R0, R5
    1050:	0f 45       	LD        R5, [PC + #15]        ;->0x108c  :=0x4ba6
    1052:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:690
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1054:	01 0d       	LD.W      R5, [SP + #1]
    1056:	50 38       	CMP       R5, #0
    1058:	04 f0       	JZ        $+4                   ;->0x1060
    105a:	01 0d       	LD.W      R5, [SP + #1]
    105c:	51 38       	CMP       R5, #1
    105e:	03 f1       	JNZ       $+3                   ;->0x1064
    1060:	51 10       	MOV       R5, #1
    1062:	02 04       	SJMP      $+2                   ;->0x1066
    1064:	50 10       	MOV       R5, #0
    1066:	05 58       	MOV       R0, R5
    1068:	09 45       	LD        R5, [PC + #9]         ;->0x108c  :=0x4ba6
    106a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:693

    /*-------------------- 设置TXCTL2寄存器TXUDEN位 --------------------*/
    if (NewState != FALSE)
    106c:	01 0d       	LD.W      R5, [SP + #1]
    106e:	50 38       	CMP       R5, #0
    1070:	05 f0       	JZ        $+5                   ;->0x107a
..\src\kf32a9k1xxx_btim.c:696
    {
        /* 上升沿立即更新 */
        SFR_SET_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUDEN_POS);
    1072:	5e 82       	LD.W      R5, [SP]
    1074:	58 28       	ADD       R5, #8
    1076:	28 4c       	SET       [R5], #0
    1078:	04 04       	SJMP      $+4                   ;->0x1080
..\src\kf32a9k1xxx_btim.c:701
    }
    else
    {
        /* 每周期更新 */
        SFR_CLR_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUDEN_POS);
    107a:	5e 82       	LD.W      R5, [SP]
    107c:	58 28       	ADD       R5, #8
    107e:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_btim.c:703
    }
}
    1080:	e8 28       	ADD       SP, #8
    1082:	0d 5d       	POP       LR
    1084:	1d 5c       	JMP       LR
    1086:	00 00       	NOP      NOP      
    1088:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x1088  :=0x40001800
    108c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00001090 <BTIM_Overflow_INT_Enable>:
BTIM_Overflow_INT_Enable():
..\src\kf32a9k1xxx_btim.c:848
  * 返回  无
  */
void
BTIM_Overflow_INT_Enable (BTIM_SFRmap* BTIMx,
                    FunctionalState NewState)
{
    1090:	2d 5d       	PUSH      LR
    1092:	e8 30       	SUB       SP, #8
    1094:	e0 85       	ST.W      [SP], R0
    1096:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_btim.c:850
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
    1098:	51 10       	MOV       R5, #1
    109a:	4e 82       	LD.W      R4, [SP]
    109c:	11 43       	LD        R3, [PC + #17]        ;->0x10e0  :=0x40001800
    109e:	43 70       	CMP       R4, R3
    10a0:	02 f0       	JZ        $+2                   ;->0x10a4
    10a2:	50 10       	MOV       R5, #0
    10a4:	55 d1       	ZXT.B     R5, R5
    10a6:	05 58       	MOV       R0, R5
    10a8:	0f 45       	LD        R5, [PC + #15]        ;->0x10e4  :=0x4ba6
    10aa:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:851
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    10ac:	01 0d       	LD.W      R5, [SP + #1]
    10ae:	50 38       	CMP       R5, #0
    10b0:	04 f0       	JZ        $+4                   ;->0x10b8
    10b2:	01 0d       	LD.W      R5, [SP + #1]
    10b4:	51 38       	CMP       R5, #1
    10b6:	03 f1       	JNZ       $+3                   ;->0x10bc
    10b8:	51 10       	MOV       R5, #1
    10ba:	02 04       	SJMP      $+2                   ;->0x10be
    10bc:	50 10       	MOV       R5, #0
    10be:	05 58       	MOV       R0, R5
    10c0:	09 45       	LD        R5, [PC + #9]         ;->0x10e4  :=0x4ba6
    10c2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:854

    /*-------------------- 设置TXDIER寄存器TXIE位 --------------------*/
    if (NewState != FALSE)
    10c4:	01 0d       	LD.W      R5, [SP + #1]
    10c6:	50 38       	CMP       R5, #0
    10c8:	05 f0       	JZ        $+5                   ;->0x10d2
..\src\kf32a9k1xxx_btim.c:857
    {
        /* 允许Tx计数溢出引起中断 */
        SFR_SET_BIT_ASM(BTIMx->DIER, BTIM_DIER_TXIE_POS);
    10ca:	5e 82       	LD.W      R5, [SP]
    10cc:	54 29       	ADD       R5, #20
    10ce:	2a 4c       	SET       [R5], #2
    10d0:	04 04       	SJMP      $+4                   ;->0x10d8
..\src\kf32a9k1xxx_btim.c:862
    }
    else
    {
        /* 禁止Tx计数溢出引起中断 */
        SFR_CLR_BIT_ASM(BTIMx->DIER, BTIM_DIER_TXIE_POS);
    10d2:	5e 82       	LD.W      R5, [SP]
    10d4:	54 29       	ADD       R5, #20
    10d6:	2a 4e       	CLR       [R5], #2
..\src\kf32a9k1xxx_btim.c:864
    }
}
    10d8:	e8 28       	ADD       SP, #8
    10da:	0d 5d       	POP       LR
    10dc:	1d 5c       	JMP       LR
    10de:	00 00       	NOP      NOP      
    10e0:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x10e0  :=0x40001800
    10e4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

000010e8 <SFR_Config>:
SFR_Config():
KF32A9K1XXX.h:13916
   -- 函数定义
   ---------------------------------------------------------------------------- */
/* 写特殊功能寄存器 */
static inline uint32_t
SFR_Config (uint32_t SfrMem, uint32_t SfrMask, uint32_t WriteVal)
{
    10e8:	ec 30       	SUB       SP, #12
    10ea:	e0 85       	ST.W      [SP], R0
    10ec:	01 21       	ST.W      [SP + #1], R1
    10ee:	02 22       	ST.W      [SP + #2], R2
KF32A9K1XXX.h:13917
    return ((SfrMem & SfrMask) | (WriteVal));
    10f0:	5e 82       	LD.W      R5, [SP]
    10f2:	01 0c       	LD.W      R4, [SP + #1]
    10f4:	25 d5       	ANL       R4, R5, R4
    10f6:	02 0d       	LD.W      R5, [SP + #2]
    10f8:	6c d7       	ORL       R5, R4, R5
KF32A9K1XXX.h:13918
}
    10fa:	05 58       	MOV       R0, R5
    10fc:	ec 28       	ADD       SP, #12
    10fe:	1d 5c       	JMP       LR

00001100 <EPWM_Reset>:
EPWM_Reset():
..\src\kf32a9k1xxx_epwm.c:24
  * 输入  EPWMx: 指向EPWM内存结构的指针，取值为EPWM11_SFR、EPWM12_SFR、EPWM13_SFR、EPWM16_SFR。
  * 返回  无。
  */
void
EPWM_Reset (EPWM_SFRmap* EPWMx)
{
    1100:	2d 5d       	PUSH      LR
    1102:	e4 30       	SUB       SP, #4
    1104:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_epwm.c:26
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1106:	5e 82       	LD.W      R5, [SP]
    1108:	34 44       	LD        R4, [PC + #52]        ;->0x11d8  :=0x40001a00
    110a:	54 70       	CMP       R5, R4
    110c:	0d f0       	JZ        $+13                  ;->0x1126
    110e:	5e 82       	LD.W      R5, [SP]
    1110:	33 44       	LD        R4, [PC + #51]        ;->0x11dc  :=0x40001300
    1112:	54 70       	CMP       R5, R4
    1114:	09 f0       	JZ        $+9                   ;->0x1126
    1116:	5e 82       	LD.W      R5, [SP]
    1118:	32 44       	LD        R4, [PC + #50]        ;->0x11e0  :=0x40001380
    111a:	54 70       	CMP       R5, R4
    111c:	05 f0       	JZ        $+5                   ;->0x1126
    111e:	5e 82       	LD.W      R5, [SP]
    1120:	31 44       	LD        R4, [PC + #49]        ;->0x11e4  :=0x40002e00
    1122:	54 70       	CMP       R5, R4
    1124:	03 f1       	JNZ       $+3                   ;->0x112a
    1126:	51 10       	MOV       R5, #1
    1128:	02 04       	SJMP      $+2                   ;->0x112c
    112a:	50 10       	MOV       R5, #0
    112c:	05 58       	MOV       R0, R5
    112e:	2f 45       	LD        R5, [PC + #47]        ;->0x11e8  :=0x4ba6
    1130:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:28

    if (EPWMx == EPWM11_SFR)
    1132:	5e 82       	LD.W      R5, [SP]
    1134:	29 44       	LD        R4, [PC + #41]        ;->0x11d8  :=0x40001a00
    1136:	54 70       	CMP       R5, R4
    1138:	11 f1       	JNZ       $+17                  ;->0x115a
..\src\kf32a9k1xxx_epwm.c:30
    {
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM11TRST, TRUE);
    113a:	0f 1f       	MOV       R0, #255
    113c:	40 c0       	ADD       R0, R0, #1
    113e:	11 10       	MOV       R1, #1
    1140:	2b 45       	LD        R5, [PC + #43]        ;->0x11ec  :=0x31b4
    1142:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:31
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM11TRST, FALSE);
    1144:	0f 1f       	MOV       R0, #255
    1146:	40 c0       	ADD       R0, R0, #1
    1148:	10 10       	MOV       R1, #0
    114a:	29 45       	LD        R5, [PC + #41]        ;->0x11ec  :=0x31b4
    114c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:32
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM11CLKEN, TRUE);
    114e:	0f 1f       	MOV       R0, #255
    1150:	40 c0       	ADD       R0, R0, #1
    1152:	11 10       	MOV       R1, #1
    1154:	27 45       	LD        R5, [PC + #39]        ;->0x11f0  :=0x3028
    1156:	05 5c       	LJMP      R5
    1158:	3c 04       	SJMP      $+60                  ;->0x11d0
..\src\kf32a9k1xxx_epwm.c:34
    }
    else if (EPWMx == EPWM12_SFR)
    115a:	5e 82       	LD.W      R5, [SP]
    115c:	20 44       	LD        R4, [PC + #32]        ;->0x11dc  :=0x40001300
    115e:	54 70       	CMP       R5, R4
    1160:	11 f1       	JNZ       $+17                  ;->0x1182
..\src\kf32a9k1xxx_epwm.c:36
    {
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM12TRST, TRUE);
    1162:	01 10       	MOV       R0, #1
    1164:	81 7a       	LSL       R0, #9
    1166:	11 10       	MOV       R1, #1
    1168:	21 45       	LD        R5, [PC + #33]        ;->0x11ec  :=0x31b4
    116a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:37
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM12TRST, FALSE);
    116c:	01 10       	MOV       R0, #1
    116e:	81 7a       	LSL       R0, #9
    1170:	10 10       	MOV       R1, #0
    1172:	1f 45       	LD        R5, [PC + #31]        ;->0x11ec  :=0x31b4
    1174:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:38
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM12CLKEN, TRUE);
    1176:	01 10       	MOV       R0, #1
    1178:	81 7a       	LSL       R0, #9
    117a:	11 10       	MOV       R1, #1
    117c:	1d 45       	LD        R5, [PC + #29]        ;->0x11f0  :=0x3028
    117e:	05 5c       	LJMP      R5
    1180:	28 04       	SJMP      $+40                  ;->0x11d0
..\src\kf32a9k1xxx_epwm.c:40
    }
    else if (EPWMx == EPWM13_SFR)
    1182:	5e 82       	LD.W      R5, [SP]
    1184:	17 44       	LD        R4, [PC + #23]        ;->0x11e0  :=0x40001380
    1186:	54 70       	CMP       R5, R4
    1188:	11 f1       	JNZ       $+17                  ;->0x11aa
..\src\kf32a9k1xxx_epwm.c:42
    {
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM13TRST, TRUE);
    118a:	01 10       	MOV       R0, #1
    118c:	82 7a       	LSL       R0, #10
    118e:	11 10       	MOV       R1, #1
    1190:	17 45       	LD        R5, [PC + #23]        ;->0x11ec  :=0x31b4
    1192:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:43
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM13TRST, FALSE);
    1194:	01 10       	MOV       R0, #1
    1196:	82 7a       	LSL       R0, #10
    1198:	10 10       	MOV       R1, #0
    119a:	15 45       	LD        R5, [PC + #21]        ;->0x11ec  :=0x31b4
    119c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:44
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM13CLKEN, TRUE);
    119e:	01 10       	MOV       R0, #1
    11a0:	82 7a       	LSL       R0, #10
    11a2:	11 10       	MOV       R1, #1
    11a4:	13 45       	LD        R5, [PC + #19]        ;->0x11f0  :=0x3028
    11a6:	05 5c       	LJMP      R5
    11a8:	14 04       	SJMP      $+20                  ;->0x11d0
..\src\kf32a9k1xxx_epwm.c:46
    }
    else if (EPWMx == EPWM16_SFR)
    11aa:	5e 82       	LD.W      R5, [SP]
    11ac:	0e 44       	LD        R4, [PC + #14]        ;->0x11e4  :=0x40002e00
    11ae:	54 70       	CMP       R5, R4
    11b0:	10 f1       	JNZ       $+16                  ;->0x11d0
..\src\kf32a9k1xxx_epwm.c:48
    {
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM16TRST, TRUE);
    11b2:	01 10       	MOV       R0, #1
    11b4:	83 7a       	LSL       R0, #11
    11b6:	11 10       	MOV       R1, #1
    11b8:	0d 45       	LD        R5, [PC + #13]        ;->0x11ec  :=0x31b4
    11ba:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:49
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM16TRST, FALSE);
    11bc:	01 10       	MOV       R0, #1
    11be:	83 7a       	LSL       R0, #11
    11c0:	10 10       	MOV       R1, #0
    11c2:	0b 45       	LD        R5, [PC + #11]        ;->0x11ec  :=0x31b4
    11c4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:50
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM16CLKEN, TRUE);
    11c6:	01 10       	MOV       R0, #1
    11c8:	83 7a       	LSL       R0, #11
    11ca:	11 10       	MOV       R1, #1
    11cc:	09 45       	LD        R5, [PC + #9]         ;->0x11f0  :=0x3028
    11ce:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:56
    }
    else
    {
    	;
    }
}
    11d0:	e4 28       	ADD       SP, #4
    11d2:	0d 5d       	POP       LR
    11d4:	1d 5c       	JMP       LR
    11d6:	00 00       	NOP      NOP      
    11d8:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x11d8  :=0x40001a00
    11dc:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x11dc  :=0x40001300
    11e0:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x11e0  :=0x40001380
    11e4:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x11e4  :=0x40002e00
    11e8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    11ec:	b4 31 00 00 	.long     0x000031b4 ->000012724  [!!!@2@:SUB       R11, #20	@@: NOP      
    11f0:	28 30 00 00 	.long     0x00003028 ->000012328  [!!!@2@:SUB       R2, #8	@@: NOP      

000011f4 <EPWM_TxPHS_Value_Config>:
EPWM_TxPHS_Value_Config():
..\src\kf32a9k1xxx_epwm.c:93
  * 	 Value ： Value <= 0xFFFFFFFF;
  * 返回  无。
  */
void
EPWM_TxPHS_Value_Config(EPWM_SFRmap* EPWMx, uint32_t Value)
{
    11f4:	2d 5d       	PUSH      LR
    11f6:	e8 30       	SUB       SP, #8
    11f8:	e0 85       	ST.W      [SP], R0
    11fa:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_epwm.c:95
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    11fc:	5e 82       	LD.W      R5, [SP]
    11fe:	10 44       	LD        R4, [PC + #16]        ;->0x123c  :=0x40001a00
    1200:	54 70       	CMP       R5, R4
    1202:	0d f0       	JZ        $+13                  ;->0x121c
    1204:	5e 82       	LD.W      R5, [SP]
    1206:	0f 44       	LD        R4, [PC + #15]        ;->0x1240  :=0x40001300
    1208:	54 70       	CMP       R5, R4
    120a:	09 f0       	JZ        $+9                   ;->0x121c
    120c:	5e 82       	LD.W      R5, [SP]
    120e:	0e 44       	LD        R4, [PC + #14]        ;->0x1244  :=0x40001380
    1210:	54 70       	CMP       R5, R4
    1212:	05 f0       	JZ        $+5                   ;->0x121c
    1214:	5e 82       	LD.W      R5, [SP]
    1216:	0d 44       	LD        R4, [PC + #13]        ;->0x1248  :=0x40002e00
    1218:	54 70       	CMP       R5, R4
    121a:	03 f1       	JNZ       $+3                   ;->0x1220
    121c:	51 10       	MOV       R5, #1
    121e:	02 04       	SJMP      $+2                   ;->0x1222
    1220:	50 10       	MOV       R5, #0
    1222:	05 58       	MOV       R0, R5
    1224:	0a 45       	LD        R5, [PC + #10]        ;->0x124c  :=0x4ba6
    1226:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:96
    CHECK_RESTRICTION(CHECK_EPWM_32BIT_LIMIT(Value));
    1228:	01 10       	MOV       R0, #1
    122a:	09 45       	LD        R5, [PC + #9]         ;->0x124c  :=0x4ba6
    122c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:98

    EPWMx->PHS = Value;
    122e:	5e 82       	LD.W      R5, [SP]
    1230:	01 0c       	LD.W      R4, [SP + #1]
    1232:	6c a0       	ST.W      [R5 + #1], R4
..\src\kf32a9k1xxx_epwm.c:99
}
    1234:	e8 28       	ADD       SP, #8
    1236:	0d 5d       	POP       LR
    1238:	1d 5c       	JMP       LR
    123a:	00 00       	NOP      NOP      
    123c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x123c  :=0x40001a00
    1240:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1240  :=0x40001300
    1244:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1244  :=0x40001380
    1248:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1248  :=0x40002e00
    124c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00001250 <EPWM_TxPRSC_Value_Config>:
EPWM_TxPRSC_Value_Config():
..\src\kf32a9k1xxx_epwm.c:150
  * 返回  无。
  * 注：分频值 = Value + 1;
  */
void
EPWM_TxPRSC_Value_Config(EPWM_SFRmap* EPWMx, uint32_t Value)
{
    1250:	2d 5d       	PUSH      LR
    1252:	e8 30       	SUB       SP, #8
    1254:	e0 85       	ST.W      [SP], R0
    1256:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_epwm.c:152
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1258:	5e 82       	LD.W      R5, [SP]
    125a:	10 44       	LD        R4, [PC + #16]        ;->0x1298  :=0x40001a00
    125c:	54 70       	CMP       R5, R4
    125e:	0d f0       	JZ        $+13                  ;->0x1278
    1260:	5e 82       	LD.W      R5, [SP]
    1262:	0f 44       	LD        R4, [PC + #15]        ;->0x129c  :=0x40001300
    1264:	54 70       	CMP       R5, R4
    1266:	09 f0       	JZ        $+9                   ;->0x1278
    1268:	5e 82       	LD.W      R5, [SP]
    126a:	0e 44       	LD        R4, [PC + #14]        ;->0x12a0  :=0x40001380
    126c:	54 70       	CMP       R5, R4
    126e:	05 f0       	JZ        $+5                   ;->0x1278
    1270:	5e 82       	LD.W      R5, [SP]
    1272:	0d 44       	LD        R4, [PC + #13]        ;->0x12a4  :=0x40002e00
    1274:	54 70       	CMP       R5, R4
    1276:	03 f1       	JNZ       $+3                   ;->0x127c
    1278:	51 10       	MOV       R5, #1
    127a:	02 04       	SJMP      $+2                   ;->0x127e
    127c:	50 10       	MOV       R5, #0
    127e:	05 58       	MOV       R0, R5
    1280:	0a 45       	LD        R5, [PC + #10]        ;->0x12a8  :=0x4ba6
    1282:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:153
    CHECK_RESTRICTION(CHECK_EPWM_32BIT_LIMIT(Value));
    1284:	01 10       	MOV       R0, #1
    1286:	09 45       	LD        R5, [PC + #9]         ;->0x12a8  :=0x4ba6
    1288:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:155

    EPWMx->PRSC = Value;
    128a:	5e 82       	LD.W      R5, [SP]
    128c:	01 0c       	LD.W      R4, [SP + #1]
    128e:	ec a0       	ST.W      [R5 + #3], R4
..\src\kf32a9k1xxx_epwm.c:156
}
    1290:	e8 28       	ADD       SP, #8
    1292:	0d 5d       	POP       LR
    1294:	1d 5c       	JMP       LR
    1296:	00 00       	NOP      NOP      
    1298:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1298  :=0x40001a00
    129c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x129c  :=0x40001300
    12a0:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x12a0  :=0x40001380
    12a4:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x12a4  :=0x40002e00
    12a8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

000012ac <EPWM_Phase_Direction_Config>:
EPWM_Phase_Direction_Config():
..\src\kf32a9k1xxx_epwm.c:339
  * 	 				EPWM_SYNC_TRIGGER_UP : 同步事件触发后向上计数
  * 返回  无。
  */
void
EPWM_Phase_Direction_Config(EPWM_SFRmap* EPWMx, uint32_t Direction)
{
    12ac:	2d 5d       	PUSH      LR
    12ae:	ec 30       	SUB       SP, #12
    12b0:	01 20       	ST.W      [SP + #1], R0
    12b2:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:340
	uint32_t tmpreg = 0;
    12b4:	50 10       	MOV       R5, #0
    12b6:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:343

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    12b8:	01 0c       	LD.W      R4, [SP + #1]
    12ba:	18 45       	LD        R5, [PC + #24]        ;->0x1318  :=0x40001a00
    12bc:	45 70       	CMP       R4, R5
    12be:	0d f0       	JZ        $+13                  ;->0x12d8
    12c0:	01 0c       	LD.W      R4, [SP + #1]
    12c2:	17 45       	LD        R5, [PC + #23]        ;->0x131c  :=0x40001300
    12c4:	45 70       	CMP       R4, R5
    12c6:	09 f0       	JZ        $+9                   ;->0x12d8
    12c8:	01 0c       	LD.W      R4, [SP + #1]
    12ca:	16 45       	LD        R5, [PC + #22]        ;->0x1320  :=0x40001380
    12cc:	45 70       	CMP       R4, R5
    12ce:	05 f0       	JZ        $+5                   ;->0x12d8
    12d0:	01 0c       	LD.W      R4, [SP + #1]
    12d2:	15 45       	LD        R5, [PC + #21]        ;->0x1324  :=0x40002e00
    12d4:	45 70       	CMP       R4, R5
    12d6:	03 f1       	JNZ       $+3                   ;->0x12dc
    12d8:	51 10       	MOV       R5, #1
    12da:	02 04       	SJMP      $+2                   ;->0x12de
    12dc:	50 10       	MOV       R5, #0
    12de:	05 58       	MOV       R0, R5
    12e0:	12 45       	LD        R5, [PC + #18]        ;->0x1328  :=0x4ba6
    12e2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:344
	CHECK_RESTRICTION(CHECK_EPWM_SYNC_TRIGGER_DIRECTION(Direction));
    12e4:	51 10       	MOV       R5, #1
    12e6:	02 0c       	LD.W      R4, [SP + #2]
    12e8:	41 38       	CMP       R4, #1
    12ea:	02 f9       	JLS       $+2                   ;->0x12ee
    12ec:	50 10       	MOV       R5, #0
    12ee:	55 d1       	ZXT.B     R5, R5
    12f0:	05 58       	MOV       R0, R5
    12f2:	0e 45       	LD        R5, [PC + #14]        ;->0x1328  :=0x4ba6
    12f4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:346

	tmpreg = Direction << EPWM_CTL_PHSDIR_POS;
    12f6:	02 0d       	LD.W      R5, [SP + #2]
    12f8:	2a 7b       	LSL       R5, #18
    12fa:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:347
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_PHSDIR, tmpreg);
    12fc:	01 0d       	LD.W      R5, [SP + #1]
    12fe:	2d 99       	LD.W      R5, [R5 + #4]
    1300:	05 58       	MOV       R0, R5
    1302:	0b 41       	LD        R1, [PC + #11]        ;->0x132c  :=0xfffbffff
    1304:	2e 82       	LD.W      R2, [SP]
    1306:	0b 45       	LD        R5, [PC + #11]        ;->0x1330  :=0x10e8
    1308:	05 5c       	LJMP      R5
    130a:	80 58       	MOV       R4, R0
    130c:	01 0d       	LD.W      R5, [SP + #1]
    130e:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_epwm.c:348
}
    1310:	ec 28       	ADD       SP, #12
    1312:	0d 5d       	POP       LR
    1314:	1d 5c       	JMP       LR
    1316:	00 00       	NOP      NOP      
    1318:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1318  :=0x40001a00
    131c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x131c  :=0x40001300
    1320:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1320  :=0x40001380
    1324:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1324  :=0x40002e00
    1328:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    132c:	ff ff fb ff 	.long     0xfffbffff ->-00262145 
    1330:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001334 <EPWM_SYNC_Event_Out_Select>:
EPWM_SYNC_Event_Out_Select():
..\src\kf32a9k1xxx_epwm.c:373
  * 	 			EPWM_SYNC_EVENT_OUT_DISABLE  : 禁止EPWMxSYNCO输出
  * 返回  无。
  */
void
EPWM_SYNC_Event_Out_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    1334:	2d 5d       	PUSH      LR
    1336:	ec 30       	SUB       SP, #12
    1338:	01 20       	ST.W      [SP + #1], R0
    133a:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:374
	uint32_t tmpreg = 0;
    133c:	50 10       	MOV       R5, #0
    133e:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:377

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1340:	01 0c       	LD.W      R4, [SP + #1]
    1342:	18 45       	LD        R5, [PC + #24]        ;->0x13a0  :=0x40001a00
    1344:	45 70       	CMP       R4, R5
    1346:	0d f0       	JZ        $+13                  ;->0x1360
    1348:	01 0c       	LD.W      R4, [SP + #1]
    134a:	17 45       	LD        R5, [PC + #23]        ;->0x13a4  :=0x40001300
    134c:	45 70       	CMP       R4, R5
    134e:	09 f0       	JZ        $+9                   ;->0x1360
    1350:	01 0c       	LD.W      R4, [SP + #1]
    1352:	16 45       	LD        R5, [PC + #22]        ;->0x13a8  :=0x40001380
    1354:	45 70       	CMP       R4, R5
    1356:	05 f0       	JZ        $+5                   ;->0x1360
    1358:	01 0c       	LD.W      R4, [SP + #1]
    135a:	15 45       	LD        R5, [PC + #21]        ;->0x13ac  :=0x40002e00
    135c:	45 70       	CMP       R4, R5
    135e:	03 f1       	JNZ       $+3                   ;->0x1364
    1360:	51 10       	MOV       R5, #1
    1362:	02 04       	SJMP      $+2                   ;->0x1366
    1364:	50 10       	MOV       R5, #0
    1366:	05 58       	MOV       R0, R5
    1368:	12 45       	LD        R5, [PC + #18]        ;->0x13b0  :=0x4ba6
    136a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:378
	CHECK_RESTRICTION(CHECK_EPWM_SYNC_EVENT_OUT(Select));
    136c:	51 10       	MOV       R5, #1
    136e:	02 0c       	LD.W      R4, [SP + #2]
    1370:	43 38       	CMP       R4, #3
    1372:	02 f9       	JLS       $+2                   ;->0x1376
    1374:	50 10       	MOV       R5, #0
    1376:	55 d1       	ZXT.B     R5, R5
    1378:	05 58       	MOV       R0, R5
    137a:	0e 45       	LD        R5, [PC + #14]        ;->0x13b0  :=0x4ba6
    137c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:380

	tmpreg = Select << EPWM_CTL_SYNCOSEL0_POS;
    137e:	02 0d       	LD.W      R5, [SP + #2]
    1380:	af 7a       	LSL       R5, #15
    1382:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:381
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_SYNCOSEL, tmpreg);
    1384:	01 0d       	LD.W      R5, [SP + #1]
    1386:	2d 99       	LD.W      R5, [R5 + #4]
    1388:	05 58       	MOV       R0, R5
    138a:	0b 41       	LD        R1, [PC + #11]        ;->0x13b4  :=0xfffe7fff
    138c:	2e 82       	LD.W      R2, [SP]
    138e:	0b 45       	LD        R5, [PC + #11]        ;->0x13b8  :=0x10e8
    1390:	05 5c       	LJMP      R5
    1392:	80 58       	MOV       R4, R0
    1394:	01 0d       	LD.W      R5, [SP + #1]
    1396:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_epwm.c:382
}
    1398:	ec 28       	ADD       SP, #12
    139a:	0d 5d       	POP       LR
    139c:	1d 5c       	JMP       LR
    139e:	00 00       	NOP      NOP      
    13a0:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x13a0  :=0x40001a00
    13a4:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x13a4  :=0x40001300
    13a8:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x13a8  :=0x40001380
    13ac:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x13ac  :=0x40002e00
    13b0:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    13b4:	ff 7f fe ff 	.long     0xfffe7fff ->-00098305 
    13b8:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

000013bc <EPWM_Phase_Register_Loading_Enable>:
EPWM_Phase_Register_Loading_Enable():
..\src\kf32a9k1xxx_epwm.c:392
  * 	 				FALSE : 不将相位寄存器TXPHS载入定时器
  * 返回  无。
  */
void
EPWM_Phase_Register_Loading_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
    13bc:	2d 5d       	PUSH      LR
    13be:	ec 30       	SUB       SP, #12
    13c0:	01 20       	ST.W      [SP + #1], R0
    13c2:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:393
	uint32_t tmpreg = 0;
    13c4:	50 10       	MOV       R5, #0
    13c6:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:396

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    13c8:	01 0c       	LD.W      R4, [SP + #1]
    13ca:	19 45       	LD        R5, [PC + #25]        ;->0x142c  :=0x40001a00
    13cc:	45 70       	CMP       R4, R5
    13ce:	0d f0       	JZ        $+13                  ;->0x13e8
    13d0:	01 0c       	LD.W      R4, [SP + #1]
    13d2:	18 45       	LD        R5, [PC + #24]        ;->0x1430  :=0x40001300
    13d4:	45 70       	CMP       R4, R5
    13d6:	09 f0       	JZ        $+9                   ;->0x13e8
    13d8:	01 0c       	LD.W      R4, [SP + #1]
    13da:	17 45       	LD        R5, [PC + #23]        ;->0x1434  :=0x40001380
    13dc:	45 70       	CMP       R4, R5
    13de:	05 f0       	JZ        $+5                   ;->0x13e8
    13e0:	01 0c       	LD.W      R4, [SP + #1]
    13e2:	16 45       	LD        R5, [PC + #22]        ;->0x1438  :=0x40002e00
    13e4:	45 70       	CMP       R4, R5
    13e6:	03 f1       	JNZ       $+3                   ;->0x13ec
    13e8:	51 10       	MOV       R5, #1
    13ea:	02 04       	SJMP      $+2                   ;->0x13ee
    13ec:	50 10       	MOV       R5, #0
    13ee:	05 58       	MOV       R0, R5
    13f0:	13 45       	LD        R5, [PC + #19]        ;->0x143c  :=0x4ba6
    13f2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:397
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    13f4:	02 0d       	LD.W      R5, [SP + #2]
    13f6:	50 38       	CMP       R5, #0
    13f8:	04 f0       	JZ        $+4                   ;->0x1400
    13fa:	02 0d       	LD.W      R5, [SP + #2]
    13fc:	51 38       	CMP       R5, #1
    13fe:	03 f1       	JNZ       $+3                   ;->0x1404
    1400:	51 10       	MOV       R5, #1
    1402:	02 04       	SJMP      $+2                   ;->0x1406
    1404:	50 10       	MOV       R5, #0
    1406:	05 58       	MOV       R0, R5
    1408:	0d 45       	LD        R5, [PC + #13]        ;->0x143c  :=0x4ba6
    140a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:399

	tmpreg = NewState << EPWM_CTL_PHSEN_POS;
    140c:	02 0d       	LD.W      R5, [SP + #2]
    140e:	ae 7a       	LSL       R5, #14
    1410:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:400
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_PHSEN, tmpreg);
    1412:	01 0d       	LD.W      R5, [SP + #1]
    1414:	2d 99       	LD.W      R5, [R5 + #4]
    1416:	05 58       	MOV       R0, R5
    1418:	0a 41       	LD        R1, [PC + #10]        ;->0x1440  :=0xffffbfff
    141a:	2e 82       	LD.W      R2, [SP]
    141c:	0a 45       	LD        R5, [PC + #10]        ;->0x1444  :=0x10e8
    141e:	05 5c       	LJMP      R5
    1420:	80 58       	MOV       R4, R0
    1422:	01 0d       	LD.W      R5, [SP + #1]
    1424:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_epwm.c:401
}
    1426:	ec 28       	ADD       SP, #12
    1428:	0d 5d       	POP       LR
    142a:	1d 5c       	JMP       LR
    142c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x142c  :=0x40001a00
    1430:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1430  :=0x40001300
    1434:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1434  :=0x40001380
    1438:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1438  :=0x40002e00
    143c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1440:	ff bf ff ff 	.long     0xffffbfff ->-00016385 
    1444:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001448 <EPWM_Updata_Event_Generate_Enable>:
EPWM_Updata_Event_Generate_Enable():
..\src\kf32a9k1xxx_epwm.c:438
  * 	 			FALSE ： 未使能
  * 返回  无。
  */
void
EPWM_Updata_Event_Generate_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
    1448:	2d 5d       	PUSH      LR
    144a:	ec 30       	SUB       SP, #12
    144c:	01 20       	ST.W      [SP + #1], R0
    144e:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:439
	uint32_t tmpreg = 0;
    1450:	50 10       	MOV       R5, #0
    1452:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:442

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1454:	01 0c       	LD.W      R4, [SP + #1]
    1456:	19 45       	LD        R5, [PC + #25]        ;->0x14b8  :=0x40001a00
    1458:	45 70       	CMP       R4, R5
    145a:	0d f0       	JZ        $+13                  ;->0x1474
    145c:	01 0c       	LD.W      R4, [SP + #1]
    145e:	18 45       	LD        R5, [PC + #24]        ;->0x14bc  :=0x40001300
    1460:	45 70       	CMP       R4, R5
    1462:	09 f0       	JZ        $+9                   ;->0x1474
    1464:	01 0c       	LD.W      R4, [SP + #1]
    1466:	17 45       	LD        R5, [PC + #23]        ;->0x14c0  :=0x40001380
    1468:	45 70       	CMP       R4, R5
    146a:	05 f0       	JZ        $+5                   ;->0x1474
    146c:	01 0c       	LD.W      R4, [SP + #1]
    146e:	16 45       	LD        R5, [PC + #22]        ;->0x14c4  :=0x40002e00
    1470:	45 70       	CMP       R4, R5
    1472:	03 f1       	JNZ       $+3                   ;->0x1478
    1474:	51 10       	MOV       R5, #1
    1476:	02 04       	SJMP      $+2                   ;->0x147a
    1478:	50 10       	MOV       R5, #0
    147a:	05 58       	MOV       R0, R5
    147c:	13 45       	LD        R5, [PC + #19]        ;->0x14c8  :=0x4ba6
    147e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:443
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1480:	02 0d       	LD.W      R5, [SP + #2]
    1482:	50 38       	CMP       R5, #0
    1484:	04 f0       	JZ        $+4                   ;->0x148c
    1486:	02 0d       	LD.W      R5, [SP + #2]
    1488:	51 38       	CMP       R5, #1
    148a:	03 f1       	JNZ       $+3                   ;->0x1490
    148c:	51 10       	MOV       R5, #1
    148e:	02 04       	SJMP      $+2                   ;->0x1492
    1490:	50 10       	MOV       R5, #0
    1492:	05 58       	MOV       R0, R5
    1494:	0d 45       	LD        R5, [PC + #13]        ;->0x14c8  :=0x4ba6
    1496:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:445

	tmpreg = NewState << EPWM_CTL_TXUR_POS;
    1498:	02 0d       	LD.W      R5, [SP + #2]
    149a:	ac 7a       	LSL       R5, #12
    149c:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:446
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXUR, tmpreg);
    149e:	01 0d       	LD.W      R5, [SP + #1]
    14a0:	2d 99       	LD.W      R5, [R5 + #4]
    14a2:	05 58       	MOV       R0, R5
    14a4:	0a 41       	LD        R1, [PC + #10]        ;->0x14cc  :=0xffffefff
    14a6:	2e 82       	LD.W      R2, [SP]
    14a8:	0a 45       	LD        R5, [PC + #10]        ;->0x14d0  :=0x10e8
    14aa:	05 5c       	LJMP      R5
    14ac:	80 58       	MOV       R4, R0
    14ae:	01 0d       	LD.W      R5, [SP + #1]
    14b0:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_epwm.c:447
}
    14b2:	ec 28       	ADD       SP, #12
    14b4:	0d 5d       	POP       LR
    14b6:	1d 5c       	JMP       LR
    14b8:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x14b8  :=0x40001a00
    14bc:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x14bc  :=0x40001300
    14c0:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x14c0  :=0x40001380
    14c4:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x14c4  :=0x40002e00
    14c8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    14cc:	ff ef ff ff 	.long     0xffffefff ->-00004097 
    14d0:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

000014d4 <EPWM_Updata_Event_Enable>:
EPWM_Updata_Event_Enable():
..\src\kf32a9k1xxx_epwm.c:478
  * 	 			FALSE ： 禁止以Tx为时基占空比、周期、输出控制、预分频寄存器更新
  * 返回  无。
  */
void
EPWM_Updata_Event_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
    14d4:	2d 5d       	PUSH      LR
    14d6:	ec 30       	SUB       SP, #12
    14d8:	01 20       	ST.W      [SP + #1], R0
    14da:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:479
	uint32_t tmpreg = 0;
    14dc:	50 10       	MOV       R5, #0
    14de:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:482

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    14e0:	01 0c       	LD.W      R4, [SP + #1]
    14e2:	19 45       	LD        R5, [PC + #25]        ;->0x1544  :=0x40001a00
    14e4:	45 70       	CMP       R4, R5
    14e6:	0d f0       	JZ        $+13                  ;->0x1500
    14e8:	01 0c       	LD.W      R4, [SP + #1]
    14ea:	18 45       	LD        R5, [PC + #24]        ;->0x1548  :=0x40001300
    14ec:	45 70       	CMP       R4, R5
    14ee:	09 f0       	JZ        $+9                   ;->0x1500
    14f0:	01 0c       	LD.W      R4, [SP + #1]
    14f2:	17 45       	LD        R5, [PC + #23]        ;->0x154c  :=0x40001380
    14f4:	45 70       	CMP       R4, R5
    14f6:	05 f0       	JZ        $+5                   ;->0x1500
    14f8:	01 0c       	LD.W      R4, [SP + #1]
    14fa:	16 45       	LD        R5, [PC + #22]        ;->0x1550  :=0x40002e00
    14fc:	45 70       	CMP       R4, R5
    14fe:	03 f1       	JNZ       $+3                   ;->0x1504
    1500:	51 10       	MOV       R5, #1
    1502:	02 04       	SJMP      $+2                   ;->0x1506
    1504:	50 10       	MOV       R5, #0
    1506:	05 58       	MOV       R0, R5
    1508:	13 45       	LD        R5, [PC + #19]        ;->0x1554  :=0x4ba6
    150a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:483
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    150c:	02 0d       	LD.W      R5, [SP + #2]
    150e:	50 38       	CMP       R5, #0
    1510:	04 f0       	JZ        $+4                   ;->0x1518
    1512:	02 0d       	LD.W      R5, [SP + #2]
    1514:	51 38       	CMP       R5, #1
    1516:	03 f1       	JNZ       $+3                   ;->0x151c
    1518:	51 10       	MOV       R5, #1
    151a:	02 04       	SJMP      $+2                   ;->0x151e
    151c:	50 10       	MOV       R5, #0
    151e:	05 58       	MOV       R0, R5
    1520:	0d 45       	LD        R5, [PC + #13]        ;->0x1554  :=0x4ba6
    1522:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:485

	tmpreg = NewState << EPWM_CTL_TXUDEN_POS;
    1524:	02 0d       	LD.W      R5, [SP + #2]
    1526:	aa 7a       	LSL       R5, #10
    1528:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:486
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXUDEN, tmpreg);
    152a:	01 0d       	LD.W      R5, [SP + #1]
    152c:	2d 99       	LD.W      R5, [R5 + #4]
    152e:	05 58       	MOV       R0, R5
    1530:	0a 41       	LD        R1, [PC + #10]        ;->0x1558  :=0xfffffbff
    1532:	2e 82       	LD.W      R2, [SP]
    1534:	0a 45       	LD        R5, [PC + #10]        ;->0x155c  :=0x10e8
    1536:	05 5c       	LJMP      R5
    1538:	80 58       	MOV       R4, R0
    153a:	01 0d       	LD.W      R5, [SP + #1]
    153c:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_epwm.c:487
}
    153e:	ec 28       	ADD       SP, #12
    1540:	0d 5d       	POP       LR
    1542:	1d 5c       	JMP       LR
    1544:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1544  :=0x40001a00
    1548:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1548  :=0x40001300
    154c:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x154c  :=0x40001380
    1550:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1550  :=0x40002e00
    1554:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1558:	ff fb ff ff 	.long     0xfffffbff ->-00001025 
    155c:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001560 <EPWM_Counter_Mode_Select>:
EPWM_Counter_Mode_Select():
..\src\kf32a9k1xxx_epwm.c:500
  * 	 			EPWM_COUNT_UP_DOWM_OUF ： 向上-向下计数，上溢和下溢时都产生中断标志
  * 返回  无。
  */
void
EPWM_Counter_Mode_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    1560:	2d 5d       	PUSH      LR
    1562:	ec 30       	SUB       SP, #12
    1564:	01 20       	ST.W      [SP + #1], R0
    1566:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:501
	uint32_t tmpreg = 0;
    1568:	50 10       	MOV       R5, #0
    156a:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:504

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    156c:	01 0c       	LD.W      R4, [SP + #1]
    156e:	1e 45       	LD        R5, [PC + #30]        ;->0x15e4  :=0x40001a00
    1570:	45 70       	CMP       R4, R5
    1572:	0d f0       	JZ        $+13                  ;->0x158c
    1574:	01 0c       	LD.W      R4, [SP + #1]
    1576:	1d 45       	LD        R5, [PC + #29]        ;->0x15e8  :=0x40001300
    1578:	45 70       	CMP       R4, R5
    157a:	09 f0       	JZ        $+9                   ;->0x158c
    157c:	01 0c       	LD.W      R4, [SP + #1]
    157e:	1c 45       	LD        R5, [PC + #28]        ;->0x15ec  :=0x40001380
    1580:	45 70       	CMP       R4, R5
    1582:	05 f0       	JZ        $+5                   ;->0x158c
    1584:	01 0c       	LD.W      R4, [SP + #1]
    1586:	1b 45       	LD        R5, [PC + #27]        ;->0x15f0  :=0x40002e00
    1588:	45 70       	CMP       R4, R5
    158a:	03 f1       	JNZ       $+3                   ;->0x1590
    158c:	51 10       	MOV       R5, #1
    158e:	02 04       	SJMP      $+2                   ;->0x1592
    1590:	50 10       	MOV       R5, #0
    1592:	05 58       	MOV       R0, R5
    1594:	18 45       	LD        R5, [PC + #24]        ;->0x15f4  :=0x4ba6
    1596:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:505
	CHECK_RESTRICTION(CHECK_EPWM_COUNT_MODE(Select));
    1598:	02 0d       	LD.W      R5, [SP + #2]
    159a:	50 38       	CMP       R5, #0
    159c:	0d f0       	JZ        $+13                  ;->0x15b6
    159e:	02 0d       	LD.W      R5, [SP + #2]
    15a0:	54 38       	CMP       R5, #4
    15a2:	0a f0       	JZ        $+10                  ;->0x15b6
    15a4:	02 0d       	LD.W      R5, [SP + #2]
    15a6:	55 38       	CMP       R5, #5
    15a8:	07 f0       	JZ        $+7                   ;->0x15b6
    15aa:	02 0d       	LD.W      R5, [SP + #2]
    15ac:	56 38       	CMP       R5, #6
    15ae:	04 f0       	JZ        $+4                   ;->0x15b6
    15b0:	02 0d       	LD.W      R5, [SP + #2]
    15b2:	57 38       	CMP       R5, #7
    15b4:	03 f1       	JNZ       $+3                   ;->0x15ba
    15b6:	51 10       	MOV       R5, #1
    15b8:	02 04       	SJMP      $+2                   ;->0x15bc
    15ba:	50 10       	MOV       R5, #0
    15bc:	05 58       	MOV       R0, R5
    15be:	0e 45       	LD        R5, [PC + #14]        ;->0x15f4  :=0x4ba6
    15c0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:507

	tmpreg = Select << EPWM_CTL_TXCMS0_POS;
    15c2:	02 0d       	LD.W      R5, [SP + #2]
    15c4:	2f 7a       	LSL       R5, #7
    15c6:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:508
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXCMS, tmpreg);
    15c8:	01 0d       	LD.W      R5, [SP + #1]
    15ca:	2d 99       	LD.W      R5, [R5 + #4]
    15cc:	05 58       	MOV       R0, R5
    15ce:	0b 41       	LD        R1, [PC + #11]        ;->0x15f8  :=0xfffffc7f
    15d0:	2e 82       	LD.W      R2, [SP]
    15d2:	0b 45       	LD        R5, [PC + #11]        ;->0x15fc  :=0x10e8
    15d4:	05 5c       	LJMP      R5
    15d6:	80 58       	MOV       R4, R0
    15d8:	01 0d       	LD.W      R5, [SP + #1]
    15da:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_epwm.c:509
}
    15dc:	ec 28       	ADD       SP, #12
    15de:	0d 5d       	POP       LR
    15e0:	1d 5c       	JMP       LR
    15e2:	00 00       	NOP      NOP      
    15e4:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x15e4  :=0x40001a00
    15e8:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x15e8  :=0x40001300
    15ec:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x15ec  :=0x40001380
    15f0:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x15f0  :=0x40002e00
    15f4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    15f8:	7f fc ff ff 	.long     0xfffffc7f ->-00000897 
    15fc:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001600 <EPWM_Work_Clock_Select>:
EPWM_Work_Clock_Select():
..\src\kf32a9k1xxx_epwm.c:534
  * 	 		EPWM_CLK_LFCLK : 选用LFCLK时钟为Tx工作时钟
  * 返回  无。
  */
void
EPWM_Work_Clock_Select(EPWM_SFRmap* EPWMx, uint32_t CLK)
{
    1600:	2d 5d       	PUSH      LR
    1602:	ec 30       	SUB       SP, #12
    1604:	01 20       	ST.W      [SP + #1], R0
    1606:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:535
	uint32_t tmpreg = 0;
    1608:	50 10       	MOV       R5, #0
    160a:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:538

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    160c:	01 0c       	LD.W      R4, [SP + #1]
    160e:	18 45       	LD        R5, [PC + #24]        ;->0x166c  :=0x40001a00
    1610:	45 70       	CMP       R4, R5
    1612:	0d f0       	JZ        $+13                  ;->0x162c
    1614:	01 0c       	LD.W      R4, [SP + #1]
    1616:	17 45       	LD        R5, [PC + #23]        ;->0x1670  :=0x40001300
    1618:	45 70       	CMP       R4, R5
    161a:	09 f0       	JZ        $+9                   ;->0x162c
    161c:	01 0c       	LD.W      R4, [SP + #1]
    161e:	16 45       	LD        R5, [PC + #22]        ;->0x1674  :=0x40001380
    1620:	45 70       	CMP       R4, R5
    1622:	05 f0       	JZ        $+5                   ;->0x162c
    1624:	01 0c       	LD.W      R4, [SP + #1]
    1626:	15 45       	LD        R5, [PC + #21]        ;->0x1678  :=0x40002e00
    1628:	45 70       	CMP       R4, R5
    162a:	03 f1       	JNZ       $+3                   ;->0x1630
    162c:	51 10       	MOV       R5, #1
    162e:	02 04       	SJMP      $+2                   ;->0x1632
    1630:	50 10       	MOV       R5, #0
    1632:	05 58       	MOV       R0, R5
    1634:	12 45       	LD        R5, [PC + #18]        ;->0x167c  :=0x4ba6
    1636:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:539
	CHECK_RESTRICTION(CHECK_EPWM_CLK(CLK));
    1638:	51 10       	MOV       R5, #1
    163a:	02 0c       	LD.W      R4, [SP + #2]
    163c:	43 38       	CMP       R4, #3
    163e:	02 f9       	JLS       $+2                   ;->0x1642
    1640:	50 10       	MOV       R5, #0
    1642:	55 d1       	ZXT.B     R5, R5
    1644:	05 58       	MOV       R0, R5
    1646:	0e 45       	LD        R5, [PC + #14]        ;->0x167c  :=0x4ba6
    1648:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:541

	tmpreg = CLK << EPWM_CTL_TXCLK0_POS;
    164a:	02 0d       	LD.W      R5, [SP + #2]
    164c:	2c 7a       	LSL       R5, #4
    164e:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:542
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXCLK, tmpreg);
    1650:	01 0d       	LD.W      R5, [SP + #1]
    1652:	2d 99       	LD.W      R5, [R5 + #4]
    1654:	05 58       	MOV       R0, R5
    1656:	10 13       	MOV       R1, #48
    1658:	11 68       	NOT       R1, R1
    165a:	2e 82       	LD.W      R2, [SP]
    165c:	09 45       	LD        R5, [PC + #9]         ;->0x1680  :=0x10e8
    165e:	05 5c       	LJMP      R5
    1660:	80 58       	MOV       R4, R0
    1662:	01 0d       	LD.W      R5, [SP + #1]
    1664:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_epwm.c:543
}
    1666:	ec 28       	ADD       SP, #12
    1668:	0d 5d       	POP       LR
    166a:	1d 5c       	JMP       LR
    166c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x166c  :=0x40001a00
    1670:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1670  :=0x40001300
    1674:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1674  :=0x40001380
    1678:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1678  :=0x40002e00
    167c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1680:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001684 <EPWM_Work_Mode_Config>:
EPWM_Work_Mode_Config():
..\src\kf32a9k1xxx_epwm.c:593
  *                EPWM_COUNTER_MODE: 计数模式
  * 返回  无。
  */
void
EPWM_Work_Mode_Config(EPWM_SFRmap* EPWMx, uint32_t Mode)
{
    1684:	2d 5d       	PUSH      LR
    1686:	ec 30       	SUB       SP, #12
    1688:	01 20       	ST.W      [SP + #1], R0
    168a:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:594
	uint32_t tmpreg = 0;
    168c:	50 10       	MOV       R5, #0
    168e:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:597

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1690:	01 0c       	LD.W      R4, [SP + #1]
    1692:	18 45       	LD        R5, [PC + #24]        ;->0x16f0  :=0x40001a00
    1694:	45 70       	CMP       R4, R5
    1696:	0d f0       	JZ        $+13                  ;->0x16b0
    1698:	01 0c       	LD.W      R4, [SP + #1]
    169a:	17 45       	LD        R5, [PC + #23]        ;->0x16f4  :=0x40001300
    169c:	45 70       	CMP       R4, R5
    169e:	09 f0       	JZ        $+9                   ;->0x16b0
    16a0:	01 0c       	LD.W      R4, [SP + #1]
    16a2:	16 45       	LD        R5, [PC + #22]        ;->0x16f8  :=0x40001380
    16a4:	45 70       	CMP       R4, R5
    16a6:	05 f0       	JZ        $+5                   ;->0x16b0
    16a8:	01 0c       	LD.W      R4, [SP + #1]
    16aa:	15 45       	LD        R5, [PC + #21]        ;->0x16fc  :=0x40002e00
    16ac:	45 70       	CMP       R4, R5
    16ae:	03 f1       	JNZ       $+3                   ;->0x16b4
    16b0:	51 10       	MOV       R5, #1
    16b2:	02 04       	SJMP      $+2                   ;->0x16b6
    16b4:	50 10       	MOV       R5, #0
    16b6:	05 58       	MOV       R0, R5
    16b8:	12 45       	LD        R5, [PC + #18]        ;->0x1700  :=0x4ba6
    16ba:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:598
	CHECK_RESTRICTION(CHECK_EPWM_MODE(Mode));
    16bc:	51 10       	MOV       R5, #1
    16be:	02 0c       	LD.W      R4, [SP + #2]
    16c0:	41 38       	CMP       R4, #1
    16c2:	02 f9       	JLS       $+2                   ;->0x16c6
    16c4:	50 10       	MOV       R5, #0
    16c6:	55 d1       	ZXT.B     R5, R5
    16c8:	05 58       	MOV       R0, R5
    16ca:	0e 45       	LD        R5, [PC + #14]        ;->0x1700  :=0x4ba6
    16cc:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:600

	tmpreg = Mode << EPWM_CTL_TXCS_POS;
    16ce:	02 0d       	LD.W      R5, [SP + #2]
    16d0:	6d c3       	ADD       R5, R5, R5
    16d2:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:601
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXCS, tmpreg);
    16d4:	01 0d       	LD.W      R5, [SP + #1]
    16d6:	2d 99       	LD.W      R5, [R5 + #4]
    16d8:	05 58       	MOV       R0, R5
    16da:	12 10       	MOV       R1, #2
    16dc:	11 68       	NOT       R1, R1
    16de:	2e 82       	LD.W      R2, [SP]
    16e0:	09 45       	LD        R5, [PC + #9]         ;->0x1704  :=0x10e8
    16e2:	05 5c       	LJMP      R5
    16e4:	80 58       	MOV       R4, R0
    16e6:	01 0d       	LD.W      R5, [SP + #1]
    16e8:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_epwm.c:602
}
    16ea:	ec 28       	ADD       SP, #12
    16ec:	0d 5d       	POP       LR
    16ee:	1d 5c       	JMP       LR
    16f0:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x16f0  :=0x40001a00
    16f4:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x16f4  :=0x40001300
    16f8:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x16f8  :=0x40001380
    16fc:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x16fc  :=0x40002e00
    1700:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1704:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001708 <EPWM_Enable>:
EPWM_Enable():
..\src\kf32a9k1xxx_epwm.c:612
  *      			FALSE : 禁止Tx
  * 返回  无。
  */
void
EPWM_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
    1708:	2d 5d       	PUSH      LR
    170a:	e8 30       	SUB       SP, #8
    170c:	e0 85       	ST.W      [SP], R0
    170e:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_epwm.c:614
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1710:	5e 82       	LD.W      R5, [SP]
    1712:	18 44       	LD        R4, [PC + #24]        ;->0x1770  :=0x40001a00
    1714:	54 70       	CMP       R5, R4
    1716:	0d f0       	JZ        $+13                  ;->0x1730
    1718:	5e 82       	LD.W      R5, [SP]
    171a:	17 44       	LD        R4, [PC + #23]        ;->0x1774  :=0x40001300
    171c:	54 70       	CMP       R5, R4
    171e:	09 f0       	JZ        $+9                   ;->0x1730
    1720:	5e 82       	LD.W      R5, [SP]
    1722:	16 44       	LD        R4, [PC + #22]        ;->0x1778  :=0x40001380
    1724:	54 70       	CMP       R5, R4
    1726:	05 f0       	JZ        $+5                   ;->0x1730
    1728:	5e 82       	LD.W      R5, [SP]
    172a:	15 44       	LD        R4, [PC + #21]        ;->0x177c  :=0x40002e00
    172c:	54 70       	CMP       R5, R4
    172e:	03 f1       	JNZ       $+3                   ;->0x1734
    1730:	51 10       	MOV       R5, #1
    1732:	02 04       	SJMP      $+2                   ;->0x1736
    1734:	50 10       	MOV       R5, #0
    1736:	05 58       	MOV       R0, R5
    1738:	12 45       	LD        R5, [PC + #18]        ;->0x1780  :=0x4ba6
    173a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:615
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    173c:	01 0d       	LD.W      R5, [SP + #1]
    173e:	50 38       	CMP       R5, #0
    1740:	04 f0       	JZ        $+4                   ;->0x1748
    1742:	01 0d       	LD.W      R5, [SP + #1]
    1744:	51 38       	CMP       R5, #1
    1746:	03 f1       	JNZ       $+3                   ;->0x174c
    1748:	51 10       	MOV       R5, #1
    174a:	02 04       	SJMP      $+2                   ;->0x174e
    174c:	50 10       	MOV       R5, #0
    174e:	05 58       	MOV       R0, R5
    1750:	0c 45       	LD        R5, [PC + #12]        ;->0x1780  :=0x4ba6
    1752:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:617

	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXEN, NewState);
    1754:	5e 82       	LD.W      R5, [SP]
    1756:	2d 99       	LD.W      R5, [R5 + #4]
    1758:	05 58       	MOV       R0, R5
    175a:	11 10       	MOV       R1, #1
    175c:	11 68       	NOT       R1, R1
    175e:	01 0a       	LD.W      R2, [SP + #1]
    1760:	09 45       	LD        R5, [PC + #9]         ;->0x1784  :=0x10e8
    1762:	05 5c       	LJMP      R5
    1764:	80 58       	MOV       R4, R0
    1766:	5e 82       	LD.W      R5, [SP]
    1768:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_epwm.c:618
}
    176a:	e8 28       	ADD       SP, #8
    176c:	0d 5d       	POP       LR
    176e:	1d 5c       	JMP       LR
    1770:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1770  :=0x40001a00
    1774:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1774  :=0x40001300
    1778:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1778  :=0x40001380
    177c:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x177c  :=0x40002e00
    1780:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1784:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001788 <EPWM_Continuous_Mandatory_Output_Config>:
EPWM_Continuous_Mandatory_Output_Config():
..\src\kf32a9k1xxx_epwm.c:765
 *      			EPWM_OUT_PROHIBIT : 禁止
 * 返回  无。
 */
void
EPWM_Continuous_Mandatory_Output_Config(EPWM_SFRmap* EPWMx, uint32_t Register, uint32_t Select)
{
    1788:	2d 5d       	PUSH      LR
    178a:	e0 31       	SUB       SP, #16
    178c:	01 20       	ST.W      [SP + #1], R0
    178e:	02 21       	ST.W      [SP + #2], R1
    1790:	03 22       	ST.W      [SP + #3], R2
..\src\kf32a9k1xxx_epwm.c:766
	uint32_t tmpreg = 0;
    1792:	50 10       	MOV       R5, #0
    1794:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:769

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1796:	01 0c       	LD.W      R4, [SP + #1]
    1798:	24 45       	LD        R5, [PC + #36]        ;->0x1828  :=0x40001a00
    179a:	45 70       	CMP       R4, R5
    179c:	0d f0       	JZ        $+13                  ;->0x17b6
    179e:	01 0c       	LD.W      R4, [SP + #1]
    17a0:	23 45       	LD        R5, [PC + #35]        ;->0x182c  :=0x40001300
    17a2:	45 70       	CMP       R4, R5
    17a4:	09 f0       	JZ        $+9                   ;->0x17b6
    17a6:	01 0c       	LD.W      R4, [SP + #1]
    17a8:	22 45       	LD        R5, [PC + #34]        ;->0x1830  :=0x40001380
    17aa:	45 70       	CMP       R4, R5
    17ac:	05 f0       	JZ        $+5                   ;->0x17b6
    17ae:	01 0c       	LD.W      R4, [SP + #1]
    17b0:	21 45       	LD        R5, [PC + #33]        ;->0x1834  :=0x40002e00
    17b2:	45 70       	CMP       R4, R5
    17b4:	03 f1       	JNZ       $+3                   ;->0x17ba
    17b6:	51 10       	MOV       R5, #1
    17b8:	02 04       	SJMP      $+2                   ;->0x17bc
    17ba:	50 10       	MOV       R5, #0
    17bc:	05 58       	MOV       R0, R5
    17be:	1f 45       	LD        R5, [PC + #31]        ;->0x1838  :=0x4ba6
    17c0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:770
	CHECK_RESTRICTION(CHECK_EPWM_REGISTER_AB(Register));
    17c2:	51 10       	MOV       R5, #1
    17c4:	02 0c       	LD.W      R4, [SP + #2]
    17c6:	43 38       	CMP       R4, #3
    17c8:	02 f9       	JLS       $+2                   ;->0x17cc
    17ca:	50 10       	MOV       R5, #0
    17cc:	55 d1       	ZXT.B     R5, R5
    17ce:	05 58       	MOV       R0, R5
    17d0:	1a 45       	LD        R5, [PC + #26]        ;->0x1838  :=0x4ba6
    17d2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:771
	CHECK_RESTRICTION(CHECK_EPWM_MANDATORY_OUT(Select));
    17d4:	51 10       	MOV       R5, #1
    17d6:	03 0c       	LD.W      R4, [SP + #3]
    17d8:	43 38       	CMP       R4, #3
    17da:	02 f9       	JLS       $+2                   ;->0x17de
    17dc:	50 10       	MOV       R5, #0
    17de:	55 d1       	ZXT.B     R5, R5
    17e0:	05 58       	MOV       R0, R5
    17e2:	16 45       	LD        R5, [PC + #22]        ;->0x1838  :=0x4ba6
    17e4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:773

	tmpreg = Select << EPWM_CTLA_CSFA0_POS;
    17e6:	03 0d       	LD.W      R5, [SP + #3]
    17e8:	ac 7a       	LSL       R5, #12
    17ea:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:774
	if(Register == EPWM_REGISTER_A)
    17ec:	02 0d       	LD.W      R5, [SP + #2]
    17ee:	50 38       	CMP       R5, #0
    17f0:	0c f1       	JNZ       $+12                  ;->0x1808
..\src\kf32a9k1xxx_epwm.c:776
	{
		EPWMx->CTLA = SFR_Config(EPWMx->CTLA, ~EPWM_CTLA_CSFA, tmpreg);
    17f2:	01 0d       	LD.W      R5, [SP + #1]
    17f4:	ed 99       	LD.W      R5, [R5 + #7]
    17f6:	05 58       	MOV       R0, R5
    17f8:	11 41       	LD        R1, [PC + #17]        ;->0x183c  :=0xffffcfff
    17fa:	2e 82       	LD.W      R2, [SP]
    17fc:	11 45       	LD        R5, [PC + #17]        ;->0x1840  :=0x10e8
    17fe:	05 5c       	LJMP      R5
    1800:	80 58       	MOV       R4, R0
    1802:	01 0d       	LD.W      R5, [SP + #1]
    1804:	ec a1       	ST.W      [R5 + #7], R4
    1806:	0e 04       	SJMP      $+14                  ;->0x1822
..\src\kf32a9k1xxx_epwm.c:778
	}
	else if(Register == EPWM_REGISTER_B)
    1808:	02 0d       	LD.W      R5, [SP + #2]
    180a:	51 38       	CMP       R5, #1
    180c:	0b f1       	JNZ       $+11                  ;->0x1822
..\src\kf32a9k1xxx_epwm.c:780
	{
		EPWMx->CTLB = SFR_Config(EPWMx->CTLB, ~EPWM_CTLA_CSFA, tmpreg);
    180e:	01 0d       	LD.W      R5, [SP + #1]
    1810:	2d 9a       	LD.W      R5, [R5 + #8]
    1812:	05 58       	MOV       R0, R5
    1814:	0a 41       	LD        R1, [PC + #10]        ;->0x183c  :=0xffffcfff
    1816:	2e 82       	LD.W      R2, [SP]
    1818:	0a 45       	LD        R5, [PC + #10]        ;->0x1840  :=0x10e8
    181a:	05 5c       	LJMP      R5
    181c:	80 58       	MOV       R4, R0
    181e:	01 0d       	LD.W      R5, [SP + #1]
    1820:	2c a2       	ST.W      [R5 + #8], R4
..\src\kf32a9k1xxx_epwm.c:782
	}
}
    1822:	e0 29       	ADD       SP, #16
    1824:	0d 5d       	POP       LR
    1826:	1d 5c       	JMP       LR
    1828:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1828  :=0x40001a00
    182c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x182c  :=0x40001300
    1830:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1830  :=0x40001380
    1834:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1834  :=0x40002e00
    1838:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    183c:	ff cf ff ff 	.long     0xffffcfff ->-00012289 
    1840:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001844 <EPWM_EPWMxAB_OUTPUT_Select>:
EPWM_EPWMxAB_OUTPUT_Select():
..\src\kf32a9k1xxx_epwm.c:803
 * 返回  无。
 */
void
EPWM_EPWMxAB_OUTPUT_Select(EPWM_SFRmap* EPWMx,
			uint32_t Register, uint32_t Event, uint32_t Select)
{
    1844:	2d 5d       	PUSH      LR
    1846:	e8 31       	SUB       SP, #24
    1848:	02 20       	ST.W      [SP + #2], R0
    184a:	03 21       	ST.W      [SP + #3], R1
    184c:	04 22       	ST.W      [SP + #4], R2
    184e:	05 23       	ST.W      [SP + #5], R3
..\src\kf32a9k1xxx_epwm.c:804
	uint32_t tmpreg = 0;
    1850:	50 10       	MOV       R5, #0
    1852:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:805
	uint32_t tmask = 0;
    1854:	50 10       	MOV       R5, #0
    1856:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_epwm.c:808

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1858:	02 0c       	LD.W      R4, [SP + #2]
    185a:	2f 45       	LD        R5, [PC + #47]        ;->0x1914  :=0x40001a00
    185c:	45 70       	CMP       R4, R5
    185e:	0d f0       	JZ        $+13                  ;->0x1878
    1860:	02 0c       	LD.W      R4, [SP + #2]
    1862:	2e 45       	LD        R5, [PC + #46]        ;->0x1918  :=0x40001300
    1864:	45 70       	CMP       R4, R5
    1866:	09 f0       	JZ        $+9                   ;->0x1878
    1868:	02 0c       	LD.W      R4, [SP + #2]
    186a:	2d 45       	LD        R5, [PC + #45]        ;->0x191c  :=0x40001380
    186c:	45 70       	CMP       R4, R5
    186e:	05 f0       	JZ        $+5                   ;->0x1878
    1870:	02 0c       	LD.W      R4, [SP + #2]
    1872:	2c 45       	LD        R5, [PC + #44]        ;->0x1920  :=0x40002e00
    1874:	45 70       	CMP       R4, R5
    1876:	03 f1       	JNZ       $+3                   ;->0x187c
    1878:	51 10       	MOV       R5, #1
    187a:	02 04       	SJMP      $+2                   ;->0x187e
    187c:	50 10       	MOV       R5, #0
    187e:	05 58       	MOV       R0, R5
    1880:	29 45       	LD        R5, [PC + #41]        ;->0x1924  :=0x4ba6
    1882:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:809
	CHECK_RESTRICTION(CHECK_EPWM_REGISTER_AB(Register));
    1884:	51 10       	MOV       R5, #1
    1886:	03 0c       	LD.W      R4, [SP + #3]
    1888:	43 38       	CMP       R4, #3
    188a:	02 f9       	JLS       $+2                   ;->0x188e
    188c:	50 10       	MOV       R5, #0
    188e:	55 d1       	ZXT.B     R5, R5
    1890:	05 58       	MOV       R0, R5
    1892:	25 45       	LD        R5, [PC + #37]        ;->0x1924  :=0x4ba6
    1894:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:810
	CHECK_RESTRICTION(CHECK_EPWM_TXCOUNT_EQUAL_XX_EPWMAB_OUT(Event));
    1896:	51 10       	MOV       R5, #1
    1898:	04 0c       	LD.W      R4, [SP + #4]
    189a:	45 38       	CMP       R4, #5
    189c:	02 f9       	JLS       $+2                   ;->0x18a0
    189e:	50 10       	MOV       R5, #0
    18a0:	55 d1       	ZXT.B     R5, R5
    18a2:	05 58       	MOV       R0, R5
    18a4:	20 45       	LD        R5, [PC + #32]        ;->0x1924  :=0x4ba6
    18a6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:811
	CHECK_RESTRICTION(CHECK_EPWM_MANDATORY_OUT(Select));
    18a8:	51 10       	MOV       R5, #1
    18aa:	05 0c       	LD.W      R4, [SP + #5]
    18ac:	43 38       	CMP       R4, #3
    18ae:	02 f9       	JLS       $+2                   ;->0x18b2
    18b0:	50 10       	MOV       R5, #0
    18b2:	55 d1       	ZXT.B     R5, R5
    18b4:	05 58       	MOV       R0, R5
    18b6:	1c 45       	LD        R5, [PC + #28]        ;->0x1924  :=0x4ba6
    18b8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:813

	tmpreg = Select << (Event*2);
    18ba:	04 0d       	LD.W      R5, [SP + #4]
    18bc:	6d c3       	ADD       R5, R5, R5
    18be:	05 0c       	LD.W      R4, [SP + #5]
    18c0:	6c db       	LSL       R5, R4, R5
    18c2:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:814
	tmask = 0x03 << (Event*2);
    18c4:	04 0d       	LD.W      R5, [SP + #4]
    18c6:	6d c3       	ADD       R5, R5, R5
    18c8:	43 10       	MOV       R4, #3
    18ca:	6c db       	LSL       R5, R4, R5
    18cc:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_epwm.c:815
	if(Register == EPWM_REGISTER_A)
    18ce:	03 0d       	LD.W      R5, [SP + #3]
    18d0:	50 38       	CMP       R5, #0
    18d2:	0e f1       	JNZ       $+14                  ;->0x18ee
..\src\kf32a9k1xxx_epwm.c:817
	{
		EPWMx->CTLA = SFR_Config(EPWMx->CTLA, ~tmask, tmpreg);
    18d4:	02 0d       	LD.W      R5, [SP + #2]
    18d6:	e5 99       	LD.W      R4, [R5 + #7]
    18d8:	01 0d       	LD.W      R5, [SP + #1]
    18da:	55 68       	NOT       R5, R5
    18dc:	04 58       	MOV       R0, R4
    18de:	25 58       	MOV       R1, R5
    18e0:	2e 82       	LD.W      R2, [SP]
    18e2:	12 45       	LD        R5, [PC + #18]        ;->0x1928  :=0x10e8
    18e4:	05 5c       	LJMP      R5
    18e6:	80 58       	MOV       R4, R0
    18e8:	02 0d       	LD.W      R5, [SP + #2]
    18ea:	ec a1       	ST.W      [R5 + #7], R4
    18ec:	10 04       	SJMP      $+16                  ;->0x190c
..\src\kf32a9k1xxx_epwm.c:819
	}
	else if(Register == EPWM_REGISTER_B)
    18ee:	03 0d       	LD.W      R5, [SP + #3]
    18f0:	51 38       	CMP       R5, #1
    18f2:	0d f1       	JNZ       $+13                  ;->0x190c
..\src\kf32a9k1xxx_epwm.c:821
	{
		EPWMx->CTLB = SFR_Config(EPWMx->CTLB, ~tmask, tmpreg);
    18f4:	02 0d       	LD.W      R5, [SP + #2]
    18f6:	25 9a       	LD.W      R4, [R5 + #8]
    18f8:	01 0d       	LD.W      R5, [SP + #1]
    18fa:	55 68       	NOT       R5, R5
    18fc:	04 58       	MOV       R0, R4
    18fe:	25 58       	MOV       R1, R5
    1900:	2e 82       	LD.W      R2, [SP]
    1902:	0a 45       	LD        R5, [PC + #10]        ;->0x1928  :=0x10e8
    1904:	05 5c       	LJMP      R5
    1906:	80 58       	MOV       R4, R0
    1908:	02 0d       	LD.W      R5, [SP + #2]
    190a:	2c a2       	ST.W      [R5 + #8], R4
..\src\kf32a9k1xxx_epwm.c:823
	}
}
    190c:	e8 29       	ADD       SP, #24
    190e:	0d 5d       	POP       LR
    1910:	1d 5c       	JMP       LR
    1912:	00 00       	NOP      NOP      
    1914:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1914  :=0x40001a00
    1918:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1918  :=0x40001300
    191c:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x191c  :=0x40001380
    1920:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1920  :=0x40002e00
    1924:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1928:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

0000192c <EPWM_Dead_Zone_Input_Select>:
EPWM_Dead_Zone_Input_Select():
..\src\kf32a9k1xxx_epwm.c:839
 *      			EPWM_EPWMB_UP_EPWMB_DOWM : 	（来自波形发生模块）作为上升/下降沿死区模块的输入
 * 返回  无。
 */
void
EPWM_Dead_Zone_Input_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    192c:	2d 5d       	PUSH      LR
    192e:	ec 30       	SUB       SP, #12
    1930:	01 20       	ST.W      [SP + #1], R0
    1932:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:840
	uint32_t tmpreg = 0;
    1934:	50 10       	MOV       R5, #0
    1936:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:843

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1938:	01 0c       	LD.W      R4, [SP + #1]
    193a:	18 45       	LD        R5, [PC + #24]        ;->0x1998  :=0x40001a00
    193c:	45 70       	CMP       R4, R5
    193e:	0d f0       	JZ        $+13                  ;->0x1958
    1940:	01 0c       	LD.W      R4, [SP + #1]
    1942:	17 45       	LD        R5, [PC + #23]        ;->0x199c  :=0x40001300
    1944:	45 70       	CMP       R4, R5
    1946:	09 f0       	JZ        $+9                   ;->0x1958
    1948:	01 0c       	LD.W      R4, [SP + #1]
    194a:	16 45       	LD        R5, [PC + #22]        ;->0x19a0  :=0x40001380
    194c:	45 70       	CMP       R4, R5
    194e:	05 f0       	JZ        $+5                   ;->0x1958
    1950:	01 0c       	LD.W      R4, [SP + #1]
    1952:	15 45       	LD        R5, [PC + #21]        ;->0x19a4  :=0x40002e00
    1954:	45 70       	CMP       R4, R5
    1956:	03 f1       	JNZ       $+3                   ;->0x195c
    1958:	51 10       	MOV       R5, #1
    195a:	02 04       	SJMP      $+2                   ;->0x195e
    195c:	50 10       	MOV       R5, #0
    195e:	05 58       	MOV       R0, R5
    1960:	12 45       	LD        R5, [PC + #18]        ;->0x19a8  :=0x4ba6
    1962:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:844
	CHECK_RESTRICTION(CHECK_EPWM_DEAD_ZONE(Select));
    1964:	51 10       	MOV       R5, #1
    1966:	02 0c       	LD.W      R4, [SP + #2]
    1968:	43 38       	CMP       R4, #3
    196a:	02 f9       	JLS       $+2                   ;->0x196e
    196c:	50 10       	MOV       R5, #0
    196e:	55 d1       	ZXT.B     R5, R5
    1970:	05 58       	MOV       R0, R5
    1972:	0e 45       	LD        R5, [PC + #14]        ;->0x19a8  :=0x4ba6
    1974:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:846

	tmpreg = Select << EPWM_DBCTL_INMODE0_POS;
    1976:	02 0d       	LD.W      R5, [SP + #2]
    1978:	2c 7a       	LSL       R5, #4
    197a:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:847
	EPWMx->DBCTL = SFR_Config(EPWMx->DBCTL, ~EPWM_DBCTL_INMODE, tmpreg);
    197c:	01 0d       	LD.W      R5, [SP + #1]
    197e:	6d 9a       	LD.W      R5, [R5 + #9]
    1980:	05 58       	MOV       R0, R5
    1982:	10 13       	MOV       R1, #48
    1984:	11 68       	NOT       R1, R1
    1986:	2e 82       	LD.W      R2, [SP]
    1988:	09 45       	LD        R5, [PC + #9]         ;->0x19ac  :=0x10e8
    198a:	05 5c       	LJMP      R5
    198c:	80 58       	MOV       R4, R0
    198e:	01 0d       	LD.W      R5, [SP + #1]
    1990:	6c a2       	ST.W      [R5 + #9], R4
..\src\kf32a9k1xxx_epwm.c:848
}
    1992:	ec 28       	ADD       SP, #12
    1994:	0d 5d       	POP       LR
    1996:	1d 5c       	JMP       LR
    1998:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1998  :=0x40001a00
    199c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x199c  :=0x40001300
    19a0:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x19a0  :=0x40001380
    19a4:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x19a4  :=0x40002e00
    19a8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    19ac:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

000019b0 <EPWM_Dead_Zone_Output_Polarity_Select>:
EPWM_Dead_Zone_Output_Polarity_Select():
..\src\kf32a9k1xxx_epwm.c:860
 *      			EPWM_EPWMA_TOGGLE_EPWMB_TOGGLE : 	EPWMxA和EPWMxB（来自上升/下降沿死区模块）都翻转
 * 返回  无。
 */
void
EPWM_Dead_Zone_Output_Polarity_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    19b0:	2d 5d       	PUSH      LR
    19b2:	ec 30       	SUB       SP, #12
    19b4:	01 20       	ST.W      [SP + #1], R0
    19b6:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:861
	uint32_t tmpreg = 0;
    19b8:	50 10       	MOV       R5, #0
    19ba:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:864

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    19bc:	01 0c       	LD.W      R4, [SP + #1]
    19be:	18 45       	LD        R5, [PC + #24]        ;->0x1a1c  :=0x40001a00
    19c0:	45 70       	CMP       R4, R5
    19c2:	0d f0       	JZ        $+13                  ;->0x19dc
    19c4:	01 0c       	LD.W      R4, [SP + #1]
    19c6:	17 45       	LD        R5, [PC + #23]        ;->0x1a20  :=0x40001300
    19c8:	45 70       	CMP       R4, R5
    19ca:	09 f0       	JZ        $+9                   ;->0x19dc
    19cc:	01 0c       	LD.W      R4, [SP + #1]
    19ce:	16 45       	LD        R5, [PC + #22]        ;->0x1a24  :=0x40001380
    19d0:	45 70       	CMP       R4, R5
    19d2:	05 f0       	JZ        $+5                   ;->0x19dc
    19d4:	01 0c       	LD.W      R4, [SP + #1]
    19d6:	15 45       	LD        R5, [PC + #21]        ;->0x1a28  :=0x40002e00
    19d8:	45 70       	CMP       R4, R5
    19da:	03 f1       	JNZ       $+3                   ;->0x19e0
    19dc:	51 10       	MOV       R5, #1
    19de:	02 04       	SJMP      $+2                   ;->0x19e2
    19e0:	50 10       	MOV       R5, #0
    19e2:	05 58       	MOV       R0, R5
    19e4:	12 45       	LD        R5, [PC + #18]        ;->0x1a2c  :=0x4ba6
    19e6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:865
	CHECK_RESTRICTION(CHECK_EPWM_DEAD_ZONE_OUT_POLARITY(Select));
    19e8:	51 10       	MOV       R5, #1
    19ea:	02 0c       	LD.W      R4, [SP + #2]
    19ec:	43 38       	CMP       R4, #3
    19ee:	02 f9       	JLS       $+2                   ;->0x19f2
    19f0:	50 10       	MOV       R5, #0
    19f2:	55 d1       	ZXT.B     R5, R5
    19f4:	05 58       	MOV       R0, R5
    19f6:	0e 45       	LD        R5, [PC + #14]        ;->0x1a2c  :=0x4ba6
    19f8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:867

	tmpreg = Select << EPWM_DBCTL_POLSEL0_POS;
    19fa:	02 0d       	LD.W      R5, [SP + #2]
    19fc:	2a 7a       	LSL       R5, #2
    19fe:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:868
	EPWMx->DBCTL = SFR_Config(EPWMx->DBCTL, ~EPWM_DBCTL_POLSEL, tmpreg);
    1a00:	01 0d       	LD.W      R5, [SP + #1]
    1a02:	6d 9a       	LD.W      R5, [R5 + #9]
    1a04:	05 58       	MOV       R0, R5
    1a06:	1c 10       	MOV       R1, #12
    1a08:	11 68       	NOT       R1, R1
    1a0a:	2e 82       	LD.W      R2, [SP]
    1a0c:	09 45       	LD        R5, [PC + #9]         ;->0x1a30  :=0x10e8
    1a0e:	05 5c       	LJMP      R5
    1a10:	80 58       	MOV       R4, R0
    1a12:	01 0d       	LD.W      R5, [SP + #1]
    1a14:	6c a2       	ST.W      [R5 + #9], R4
..\src\kf32a9k1xxx_epwm.c:869
}
    1a16:	ec 28       	ADD       SP, #12
    1a18:	0d 5d       	POP       LR
    1a1a:	1d 5c       	JMP       LR
    1a1c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1a1c  :=0x40001a00
    1a20:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1a20  :=0x40001300
    1a24:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1a24  :=0x40001380
    1a28:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1a28  :=0x40002e00
    1a2c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1a30:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001a34 <EPWM_Dead_Zone_Output_Select>:
EPWM_Dead_Zone_Output_Select():
..\src\kf32a9k1xxx_epwm.c:881
 *      			EPWM_UP_ENABLE_DOWN_ENABLE : 	上升/下降沿死区模块都使能
 * 返回  无。
 */
void
EPWM_Dead_Zone_Output_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    1a34:	2d 5d       	PUSH      LR
    1a36:	ec 30       	SUB       SP, #12
    1a38:	01 20       	ST.W      [SP + #1], R0
    1a3a:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:882
	uint32_t tmpreg = 0;
    1a3c:	50 10       	MOV       R5, #0
    1a3e:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:885

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1a40:	01 0c       	LD.W      R4, [SP + #1]
    1a42:	18 45       	LD        R5, [PC + #24]        ;->0x1aa0  :=0x40001a00
    1a44:	45 70       	CMP       R4, R5
    1a46:	0d f0       	JZ        $+13                  ;->0x1a60
    1a48:	01 0c       	LD.W      R4, [SP + #1]
    1a4a:	17 45       	LD        R5, [PC + #23]        ;->0x1aa4  :=0x40001300
    1a4c:	45 70       	CMP       R4, R5
    1a4e:	09 f0       	JZ        $+9                   ;->0x1a60
    1a50:	01 0c       	LD.W      R4, [SP + #1]
    1a52:	16 45       	LD        R5, [PC + #22]        ;->0x1aa8  :=0x40001380
    1a54:	45 70       	CMP       R4, R5
    1a56:	05 f0       	JZ        $+5                   ;->0x1a60
    1a58:	01 0c       	LD.W      R4, [SP + #1]
    1a5a:	15 45       	LD        R5, [PC + #21]        ;->0x1aac  :=0x40002e00
    1a5c:	45 70       	CMP       R4, R5
    1a5e:	03 f1       	JNZ       $+3                   ;->0x1a64
    1a60:	51 10       	MOV       R5, #1
    1a62:	02 04       	SJMP      $+2                   ;->0x1a66
    1a64:	50 10       	MOV       R5, #0
    1a66:	05 58       	MOV       R0, R5
    1a68:	12 45       	LD        R5, [PC + #18]        ;->0x1ab0  :=0x4ba6
    1a6a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:886
	CHECK_RESTRICTION(CHECK_EPWM_DEAD_ZONE_OUT(Select));
    1a6c:	51 10       	MOV       R5, #1
    1a6e:	02 0c       	LD.W      R4, [SP + #2]
    1a70:	43 38       	CMP       R4, #3
    1a72:	02 f9       	JLS       $+2                   ;->0x1a76
    1a74:	50 10       	MOV       R5, #0
    1a76:	55 d1       	ZXT.B     R5, R5
    1a78:	05 58       	MOV       R0, R5
    1a7a:	0e 45       	LD        R5, [PC + #14]        ;->0x1ab0  :=0x4ba6
    1a7c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:888

	tmpreg = Select << EPWM_DBCTL_OUTMODE0_POS;
    1a7e:	02 0d       	LD.W      R5, [SP + #2]
    1a80:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:889
	EPWMx->DBCTL = SFR_Config(EPWMx->DBCTL, ~EPWM_DBCTL_OUTMODE, tmpreg);
    1a82:	01 0d       	LD.W      R5, [SP + #1]
    1a84:	6d 9a       	LD.W      R5, [R5 + #9]
    1a86:	05 58       	MOV       R0, R5
    1a88:	13 10       	MOV       R1, #3
    1a8a:	11 68       	NOT       R1, R1
    1a8c:	2e 82       	LD.W      R2, [SP]
    1a8e:	0a 45       	LD        R5, [PC + #10]        ;->0x1ab4  :=0x10e8
    1a90:	05 5c       	LJMP      R5
    1a92:	80 58       	MOV       R4, R0
    1a94:	01 0d       	LD.W      R5, [SP + #1]
    1a96:	6c a2       	ST.W      [R5 + #9], R4
..\src\kf32a9k1xxx_epwm.c:890
}
    1a98:	ec 28       	ADD       SP, #12
    1a9a:	0d 5d       	POP       LR
    1a9c:	1d 5c       	JMP       LR
    1a9e:	00 00       	NOP      NOP      
    1aa0:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1aa0  :=0x40001a00
    1aa4:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1aa4  :=0x40001300
    1aa8:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1aa8  :=0x40001380
    1aac:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1aac  :=0x40002e00
    1ab0:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1ab4:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001ab8 <EPWM_Dead_Zone_Time_Config>:
EPWM_Dead_Zone_Time_Config():
..\src\kf32a9k1xxx_epwm.c:901
 *      Value : 死区时间 Value <= 0xFFFF
 * 返回  无。
 */
void
EPWM_Dead_Zone_Time_Config(EPWM_SFRmap* EPWMx, uint32_t Select, uint32_t Value)
{
    1ab8:	2d 5d       	PUSH      LR
    1aba:	e0 31       	SUB       SP, #16
    1abc:	01 20       	ST.W      [SP + #1], R0
    1abe:	02 21       	ST.W      [SP + #2], R1
    1ac0:	03 22       	ST.W      [SP + #3], R2
..\src\kf32a9k1xxx_epwm.c:902
	uint32_t tmpreg = 0;
    1ac2:	50 10       	MOV       R5, #0
    1ac4:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:905

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1ac6:	01 0c       	LD.W      R4, [SP + #1]
    1ac8:	24 45       	LD        R5, [PC + #36]        ;->0x1b58  :=0x40001a00
    1aca:	45 70       	CMP       R4, R5
    1acc:	0d f0       	JZ        $+13                  ;->0x1ae6
    1ace:	01 0c       	LD.W      R4, [SP + #1]
    1ad0:	23 45       	LD        R5, [PC + #35]        ;->0x1b5c  :=0x40001300
    1ad2:	45 70       	CMP       R4, R5
    1ad4:	09 f0       	JZ        $+9                   ;->0x1ae6
    1ad6:	01 0c       	LD.W      R4, [SP + #1]
    1ad8:	22 45       	LD        R5, [PC + #34]        ;->0x1b60  :=0x40001380
    1ada:	45 70       	CMP       R4, R5
    1adc:	05 f0       	JZ        $+5                   ;->0x1ae6
    1ade:	01 0c       	LD.W      R4, [SP + #1]
    1ae0:	21 45       	LD        R5, [PC + #33]        ;->0x1b64  :=0x40002e00
    1ae2:	45 70       	CMP       R4, R5
    1ae4:	03 f1       	JNZ       $+3                   ;->0x1aea
    1ae6:	51 10       	MOV       R5, #1
    1ae8:	02 04       	SJMP      $+2                   ;->0x1aec
    1aea:	50 10       	MOV       R5, #0
    1aec:	05 58       	MOV       R0, R5
    1aee:	1f 45       	LD        R5, [PC + #31]        ;->0x1b68  :=0x4ba6
    1af0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:906
	CHECK_RESTRICTION(CHECK_EPWM_UP_DOWN_EDGE_DEAD_ZONE(Select));
    1af2:	51 10       	MOV       R5, #1
    1af4:	02 0c       	LD.W      R4, [SP + #2]
    1af6:	41 38       	CMP       R4, #1
    1af8:	02 f9       	JLS       $+2                   ;->0x1afc
    1afa:	50 10       	MOV       R5, #0
    1afc:	55 d1       	ZXT.B     R5, R5
    1afe:	05 58       	MOV       R0, R5
    1b00:	1a 45       	LD        R5, [PC + #26]        ;->0x1b68  :=0x4ba6
    1b02:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:907
	CHECK_RESTRICTION(CHECK_EPWM_16BIT_LIMIT(Value));
    1b04:	51 10       	MOV       R5, #1
    1b06:	03 0b       	LD.W      R3, [SP + #3]
    1b08:	19 44       	LD        R4, [PC + #25]        ;->0x1b6c  :=0xffff
    1b0a:	34 70       	CMP       R3, R4
    1b0c:	02 f9       	JLS       $+2                   ;->0x1b10
    1b0e:	50 10       	MOV       R5, #0
    1b10:	55 d1       	ZXT.B     R5, R5
    1b12:	05 58       	MOV       R0, R5
    1b14:	15 45       	LD        R5, [PC + #21]        ;->0x1b68  :=0x4ba6
    1b16:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:909

	if(Select == EPWM_UP_EDGE_DEAD_ZONE)
    1b18:	02 0d       	LD.W      R5, [SP + #2]
    1b1a:	51 38       	CMP       R5, #1
    1b1c:	0e f1       	JNZ       $+14                  ;->0x1b38
..\src\kf32a9k1xxx_epwm.c:911
	{
		EPWMx->DBT = SFR_Config(EPWMx->DBT, ~EPWM_DBT_RDBT, Value << EPWM_DBT_RDBT0_POS);
    1b1e:	01 0d       	LD.W      R5, [SP + #1]
    1b20:	a5 9a       	LD.W      R4, [R5 + #10]
    1b22:	03 0d       	LD.W      R5, [SP + #3]
    1b24:	28 7b       	LSL       R5, #16
    1b26:	04 58       	MOV       R0, R4
    1b28:	11 41       	LD        R1, [PC + #17]        ;->0x1b6c  :=0xffff
    1b2a:	45 58       	MOV       R2, R5
    1b2c:	11 45       	LD        R5, [PC + #17]        ;->0x1b70  :=0x10e8
    1b2e:	05 5c       	LJMP      R5
    1b30:	80 58       	MOV       R4, R0
    1b32:	01 0d       	LD.W      R5, [SP + #1]
    1b34:	ac a2       	ST.W      [R5 + #10], R4
    1b36:	0e 04       	SJMP      $+14                  ;->0x1b52
..\src\kf32a9k1xxx_epwm.c:913
	}
	else if(Select == EPWM_DOWM_EDGE_DEAD_ZONE)
    1b38:	02 0d       	LD.W      R5, [SP + #2]
    1b3a:	50 38       	CMP       R5, #0
    1b3c:	0b f1       	JNZ       $+11                  ;->0x1b52
..\src\kf32a9k1xxx_epwm.c:915
	{
		EPWMx->DBT = SFR_Config(EPWMx->DBT, ~EPWM_DBT_FDBT, Value);
    1b3e:	01 0d       	LD.W      R5, [SP + #1]
    1b40:	ad 9a       	LD.W      R5, [R5 + #10]
    1b42:	05 58       	MOV       R0, R5
    1b44:	0c 41       	LD        R1, [PC + #12]        ;->0x1b74  :=0xffff0000
    1b46:	03 0a       	LD.W      R2, [SP + #3]
    1b48:	0a 45       	LD        R5, [PC + #10]        ;->0x1b70  :=0x10e8
    1b4a:	05 5c       	LJMP      R5
    1b4c:	80 58       	MOV       R4, R0
    1b4e:	01 0d       	LD.W      R5, [SP + #1]
    1b50:	ac a2       	ST.W      [R5 + #10], R4
..\src\kf32a9k1xxx_epwm.c:917
	}
}
    1b52:	e0 29       	ADD       SP, #16
    1b54:	0d 5d       	POP       LR
    1b56:	1d 5c       	JMP       LR
    1b58:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1b58  :=0x40001a00
    1b5c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1b5c  :=0x40001300
    1b60:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1b60  :=0x40001380
    1b64:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1b64  :=0x40002e00
    1b68:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1b6c:	ff ff 00 00 	.long     0x0000ffff ->000065535 
    1b70:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      
    1b74:	00 00 ff ff 	.long     0xffff0000 ->-00065536 

00001b78 <EPWM_Auto_ShowDown_Source_Select>:
EPWM_Auto_ShowDown_Source_Select():
..\src\kf32a9k1xxx_epwm.c:1120
 * 				  EPWM_AUTO_SHOWDOWN_SOURCE_QEIIF :  QEI错误中断
 * 返回  无。
 */
void
EPWM_Auto_ShowDown_Source_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    1b78:	2d 5d       	PUSH      LR
    1b7a:	ec 30       	SUB       SP, #12
    1b7c:	01 20       	ST.W      [SP + #1], R0
    1b7e:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:1121
	uint32_t tmpreg = 0;
    1b80:	50 10       	MOV       R5, #0
    1b82:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1124

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1b84:	01 0c       	LD.W      R4, [SP + #1]
    1b86:	18 45       	LD        R5, [PC + #24]        ;->0x1be4  :=0x40001a00
    1b88:	45 70       	CMP       R4, R5
    1b8a:	0d f0       	JZ        $+13                  ;->0x1ba4
    1b8c:	01 0c       	LD.W      R4, [SP + #1]
    1b8e:	17 45       	LD        R5, [PC + #23]        ;->0x1be8  :=0x40001300
    1b90:	45 70       	CMP       R4, R5
    1b92:	09 f0       	JZ        $+9                   ;->0x1ba4
    1b94:	01 0c       	LD.W      R4, [SP + #1]
    1b96:	16 45       	LD        R5, [PC + #22]        ;->0x1bec  :=0x40001380
    1b98:	45 70       	CMP       R4, R5
    1b9a:	05 f0       	JZ        $+5                   ;->0x1ba4
    1b9c:	01 0c       	LD.W      R4, [SP + #1]
    1b9e:	15 45       	LD        R5, [PC + #21]        ;->0x1bf0  :=0x40002e00
    1ba0:	45 70       	CMP       R4, R5
    1ba2:	03 f1       	JNZ       $+3                   ;->0x1ba8
    1ba4:	51 10       	MOV       R5, #1
    1ba6:	02 04       	SJMP      $+2                   ;->0x1baa
    1ba8:	50 10       	MOV       R5, #0
    1baa:	05 58       	MOV       R0, R5
    1bac:	12 45       	LD        R5, [PC + #18]        ;->0x1bf4  :=0x4ba6
    1bae:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1125
	CHECK_RESTRICTION(CHECK_EPWM_AUTO_SHOWDOWN_SOURCE(Select));
    1bb0:	51 10       	MOV       R5, #1
    1bb2:	02 0c       	LD.W      R4, [SP + #2]
    1bb4:	46 38       	CMP       R4, #6
    1bb6:	02 f9       	JLS       $+2                   ;->0x1bba
    1bb8:	50 10       	MOV       R5, #0
    1bba:	55 d1       	ZXT.B     R5, R5
    1bbc:	05 58       	MOV       R0, R5
    1bbe:	0e 45       	LD        R5, [PC + #14]        ;->0x1bf4  :=0x4ba6
    1bc0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1127

	tmpreg = Select << EPWM_PXASCTL_PXASS0_POS;
    1bc2:	02 0d       	LD.W      R5, [SP + #2]
    1bc4:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1128
	EPWMx->PXASCTL = SFR_Config(EPWMx->PXASCTL, ~EPWM_PXASCTL_PXASS, tmpreg);
    1bc6:	01 0d       	LD.W      R5, [SP + #1]
    1bc8:	2d 9b       	LD.W      R5, [R5 + #12]
    1bca:	05 58       	MOV       R0, R5
    1bcc:	17 10       	MOV       R1, #7
    1bce:	11 68       	NOT       R1, R1
    1bd0:	2e 82       	LD.W      R2, [SP]
    1bd2:	0a 45       	LD        R5, [PC + #10]        ;->0x1bf8  :=0x10e8
    1bd4:	05 5c       	LJMP      R5
    1bd6:	80 58       	MOV       R4, R0
    1bd8:	01 0d       	LD.W      R5, [SP + #1]
    1bda:	2c a3       	ST.W      [R5 + #12], R4
..\src\kf32a9k1xxx_epwm.c:1129
}
    1bdc:	ec 28       	ADD       SP, #12
    1bde:	0d 5d       	POP       LR
    1be0:	1d 5c       	JMP       LR
    1be2:	00 00       	NOP      NOP      
    1be4:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1be4  :=0x40001a00
    1be8:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1be8  :=0x40001300
    1bec:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1bec  :=0x40001380
    1bf0:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1bf0  :=0x40002e00
    1bf4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1bf8:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001bfc <EPWM_Trigger_AD_Event_Mode_Select>:
EPWM_Trigger_AD_Event_Mode_Select():
..\src\kf32a9k1xxx_epwm.c:1144
 * 				  EPWM_TRIGGER_AD_UD :  	选择在向上向下计数方式下触发AD
 * 返回  无。
 */
void
EPWM_Trigger_AD_Event_Mode_Select(EPWM_SFRmap* EPWMx, uint32_t Event, uint32_t Select)
{
    1bfc:	2d 5d       	PUSH      LR
    1bfe:	e0 31       	SUB       SP, #16
    1c00:	01 20       	ST.W      [SP + #1], R0
    1c02:	02 21       	ST.W      [SP + #2], R1
    1c04:	03 22       	ST.W      [SP + #3], R2
..\src\kf32a9k1xxx_epwm.c:1145
	uint32_t tmpreg = 0;
    1c06:	50 10       	MOV       R5, #0
    1c08:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1148

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1c0a:	01 0c       	LD.W      R4, [SP + #1]
    1c0c:	26 45       	LD        R5, [PC + #38]        ;->0x1ca4  :=0x40001a00
    1c0e:	45 70       	CMP       R4, R5
    1c10:	0d f0       	JZ        $+13                  ;->0x1c2a
    1c12:	01 0c       	LD.W      R4, [SP + #1]
    1c14:	25 45       	LD        R5, [PC + #37]        ;->0x1ca8  :=0x40001300
    1c16:	45 70       	CMP       R4, R5
    1c18:	09 f0       	JZ        $+9                   ;->0x1c2a
    1c1a:	01 0c       	LD.W      R4, [SP + #1]
    1c1c:	24 45       	LD        R5, [PC + #36]        ;->0x1cac  :=0x40001380
    1c1e:	45 70       	CMP       R4, R5
    1c20:	05 f0       	JZ        $+5                   ;->0x1c2a
    1c22:	01 0c       	LD.W      R4, [SP + #1]
    1c24:	23 45       	LD        R5, [PC + #35]        ;->0x1cb0  :=0x40002e00
    1c26:	45 70       	CMP       R4, R5
    1c28:	03 f1       	JNZ       $+3                   ;->0x1c2e
    1c2a:	51 10       	MOV       R5, #1
    1c2c:	02 04       	SJMP      $+2                   ;->0x1c30
    1c2e:	50 10       	MOV       R5, #0
    1c30:	05 58       	MOV       R0, R5
    1c32:	21 45       	LD        R5, [PC + #33]        ;->0x1cb4  :=0x4ba6
    1c34:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1149
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
    1c36:	51 10       	MOV       R5, #1
    1c38:	02 0c       	LD.W      R4, [SP + #2]
    1c3a:	41 38       	CMP       R4, #1
    1c3c:	02 f9       	JLS       $+2                   ;->0x1c40
    1c3e:	50 10       	MOV       R5, #0
    1c40:	55 d1       	ZXT.B     R5, R5
    1c42:	05 58       	MOV       R0, R5
    1c44:	1c 45       	LD        R5, [PC + #28]        ;->0x1cb4  :=0x4ba6
    1c46:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1150
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_UD(Select));
    1c48:	51 10       	MOV       R5, #1
    1c4a:	03 0c       	LD.W      R4, [SP + #3]
    1c4c:	42 38       	CMP       R4, #2
    1c4e:	02 f9       	JLS       $+2                   ;->0x1c52
    1c50:	50 10       	MOV       R5, #0
    1c52:	55 d1       	ZXT.B     R5, R5
    1c54:	05 58       	MOV       R0, R5
    1c56:	18 45       	LD        R5, [PC + #24]        ;->0x1cb4  :=0x4ba6
    1c58:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1152

	if(Event == EPWM_TRIGGER_AD_EVENT1)
    1c5a:	02 0d       	LD.W      R5, [SP + #2]
    1c5c:	51 38       	CMP       R5, #1
    1c5e:	0f f1       	JNZ       $+15                  ;->0x1c7c
..\src\kf32a9k1xxx_epwm.c:1154
	{
		tmpreg = Select << EPWM_ETCTL_BTSEL0_POS;
    1c60:	03 0d       	LD.W      R5, [SP + #3]
    1c62:	a8 7b       	LSL       R5, #24
    1c64:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1155
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BTSEL, tmpreg);
    1c66:	01 0d       	LD.W      R5, [SP + #1]
    1c68:	6d 9b       	LD.W      R5, [R5 + #13]
    1c6a:	05 58       	MOV       R0, R5
    1c6c:	13 41       	LD        R1, [PC + #19]        ;->0x1cb8  :=0xfcffffff
    1c6e:	2e 82       	LD.W      R2, [SP]
    1c70:	13 45       	LD        R5, [PC + #19]        ;->0x1cbc  :=0x10e8
    1c72:	05 5c       	LJMP      R5
    1c74:	80 58       	MOV       R4, R0
    1c76:	01 0d       	LD.W      R5, [SP + #1]
    1c78:	6c a3       	ST.W      [R5 + #13], R4
    1c7a:	11 04       	SJMP      $+17                  ;->0x1c9c
..\src\kf32a9k1xxx_epwm.c:1157
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
    1c7c:	02 0d       	LD.W      R5, [SP + #2]
    1c7e:	50 38       	CMP       R5, #0
    1c80:	0e f1       	JNZ       $+14                  ;->0x1c9c
..\src\kf32a9k1xxx_epwm.c:1159
	{
		tmpreg = Select << EPWM_ETCTL_ATSEL0_POS;
    1c82:	03 0d       	LD.W      R5, [SP + #3]
    1c84:	a8 7a       	LSL       R5, #8
    1c86:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1160
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_ATSEL, tmpreg);
    1c88:	01 0d       	LD.W      R5, [SP + #1]
    1c8a:	6d 9b       	LD.W      R5, [R5 + #13]
    1c8c:	05 58       	MOV       R0, R5
    1c8e:	0d 41       	LD        R1, [PC + #13]        ;->0x1cc0  :=0xfffffcff
    1c90:	2e 82       	LD.W      R2, [SP]
    1c92:	0b 45       	LD        R5, [PC + #11]        ;->0x1cbc  :=0x10e8
    1c94:	05 5c       	LJMP      R5
    1c96:	80 58       	MOV       R4, R0
    1c98:	01 0d       	LD.W      R5, [SP + #1]
    1c9a:	6c a3       	ST.W      [R5 + #13], R4
..\src\kf32a9k1xxx_epwm.c:1162
	}
}
    1c9c:	e0 29       	ADD       SP, #16
    1c9e:	0d 5d       	POP       LR
    1ca0:	1d 5c       	JMP       LR
    1ca2:	00 00       	NOP      NOP      
    1ca4:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1ca4  :=0x40001a00
    1ca8:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1ca8  :=0x40001300
    1cac:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1cac  :=0x40001380
    1cb0:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1cb0  :=0x40002e00
    1cb4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1cb8:	ff ff ff fc 	.long     0xfcffffff ->-50331649 
    1cbc:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      
    1cc0:	ff fc ff ff 	.long     0xfffffcff ->-00000769 

00001cc4 <EPWM_Trigger_Event_Cycle_Select>:
EPWM_Trigger_Event_Cycle_Select():
..\src\kf32a9k1xxx_epwm.c:1201
 * 				  EPWM_4_TRIGGER_EVENT_TRIGGER_AD : 每四次触发信号产生触发AD事件
 * 返回  无。
 */
void
EPWM_Trigger_Event_Cycle_Select(EPWM_SFRmap* EPWMx, uint32_t Event, uint32_t Select)
{
    1cc4:	2d 5d       	PUSH      LR
    1cc6:	e0 31       	SUB       SP, #16
    1cc8:	01 20       	ST.W      [SP + #1], R0
    1cca:	02 21       	ST.W      [SP + #2], R1
    1ccc:	03 22       	ST.W      [SP + #3], R2
..\src\kf32a9k1xxx_epwm.c:1202
	uint32_t tmpreg = 0;
    1cce:	50 10       	MOV       R5, #0
    1cd0:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1205

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1cd2:	01 0c       	LD.W      R4, [SP + #1]
    1cd4:	26 45       	LD        R5, [PC + #38]        ;->0x1d6c  :=0x40001a00
    1cd6:	45 70       	CMP       R4, R5
    1cd8:	0d f0       	JZ        $+13                  ;->0x1cf2
    1cda:	01 0c       	LD.W      R4, [SP + #1]
    1cdc:	25 45       	LD        R5, [PC + #37]        ;->0x1d70  :=0x40001300
    1cde:	45 70       	CMP       R4, R5
    1ce0:	09 f0       	JZ        $+9                   ;->0x1cf2
    1ce2:	01 0c       	LD.W      R4, [SP + #1]
    1ce4:	24 45       	LD        R5, [PC + #36]        ;->0x1d74  :=0x40001380
    1ce6:	45 70       	CMP       R4, R5
    1ce8:	05 f0       	JZ        $+5                   ;->0x1cf2
    1cea:	01 0c       	LD.W      R4, [SP + #1]
    1cec:	23 45       	LD        R5, [PC + #35]        ;->0x1d78  :=0x40002e00
    1cee:	45 70       	CMP       R4, R5
    1cf0:	03 f1       	JNZ       $+3                   ;->0x1cf6
    1cf2:	51 10       	MOV       R5, #1
    1cf4:	02 04       	SJMP      $+2                   ;->0x1cf8
    1cf6:	50 10       	MOV       R5, #0
    1cf8:	05 58       	MOV       R0, R5
    1cfa:	21 45       	LD        R5, [PC + #33]        ;->0x1d7c  :=0x4ba6
    1cfc:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1206
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
    1cfe:	51 10       	MOV       R5, #1
    1d00:	02 0c       	LD.W      R4, [SP + #2]
    1d02:	41 38       	CMP       R4, #1
    1d04:	02 f9       	JLS       $+2                   ;->0x1d08
    1d06:	50 10       	MOV       R5, #0
    1d08:	55 d1       	ZXT.B     R5, R5
    1d0a:	05 58       	MOV       R0, R5
    1d0c:	1c 45       	LD        R5, [PC + #28]        ;->0x1d7c  :=0x4ba6
    1d0e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1207
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_EVENT_TRIGGER_AD(Select));
    1d10:	51 10       	MOV       R5, #1
    1d12:	03 0c       	LD.W      R4, [SP + #3]
    1d14:	43 38       	CMP       R4, #3
    1d16:	02 f9       	JLS       $+2                   ;->0x1d1a
    1d18:	50 10       	MOV       R5, #0
    1d1a:	55 d1       	ZXT.B     R5, R5
    1d1c:	05 58       	MOV       R0, R5
    1d1e:	18 45       	LD        R5, [PC + #24]        ;->0x1d7c  :=0x4ba6
    1d20:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1209

	if(Event == EPWM_TRIGGER_AD_EVENT1)
    1d22:	02 0d       	LD.W      R5, [SP + #2]
    1d24:	51 38       	CMP       R5, #1
    1d26:	0f f1       	JNZ       $+15                  ;->0x1d44
..\src\kf32a9k1xxx_epwm.c:1211
	{
		tmpreg = Select << EPWM_ETCTL_BPP0_POS;
    1d28:	03 0d       	LD.W      R5, [SP + #3]
    1d2a:	2c 7b       	LSL       R5, #20
    1d2c:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1212
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BPP, tmpreg);
    1d2e:	01 0d       	LD.W      R5, [SP + #1]
    1d30:	6d 9b       	LD.W      R5, [R5 + #13]
    1d32:	05 58       	MOV       R0, R5
    1d34:	13 41       	LD        R1, [PC + #19]        ;->0x1d80  :=0xffcfffff
    1d36:	2e 82       	LD.W      R2, [SP]
    1d38:	13 45       	LD        R5, [PC + #19]        ;->0x1d84  :=0x10e8
    1d3a:	05 5c       	LJMP      R5
    1d3c:	80 58       	MOV       R4, R0
    1d3e:	01 0d       	LD.W      R5, [SP + #1]
    1d40:	6c a3       	ST.W      [R5 + #13], R4
    1d42:	12 04       	SJMP      $+18                  ;->0x1d66
..\src\kf32a9k1xxx_epwm.c:1214
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
    1d44:	02 0d       	LD.W      R5, [SP + #2]
    1d46:	50 38       	CMP       R5, #0
    1d48:	0f f1       	JNZ       $+15                  ;->0x1d66
..\src\kf32a9k1xxx_epwm.c:1216
	{
		tmpreg = Select << EPWM_ETCTL_APP0_POS;
    1d4a:	03 0d       	LD.W      R5, [SP + #3]
    1d4c:	2c 7a       	LSL       R5, #4
    1d4e:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1217
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_APP, tmpreg);
    1d50:	01 0d       	LD.W      R5, [SP + #1]
    1d52:	6d 9b       	LD.W      R5, [R5 + #13]
    1d54:	05 58       	MOV       R0, R5
    1d56:	10 13       	MOV       R1, #48
    1d58:	11 68       	NOT       R1, R1
    1d5a:	2e 82       	LD.W      R2, [SP]
    1d5c:	0a 45       	LD        R5, [PC + #10]        ;->0x1d84  :=0x10e8
    1d5e:	05 5c       	LJMP      R5
    1d60:	80 58       	MOV       R4, R0
    1d62:	01 0d       	LD.W      R5, [SP + #1]
    1d64:	6c a3       	ST.W      [R5 + #13], R4
..\src\kf32a9k1xxx_epwm.c:1219
	}
}
    1d66:	e0 29       	ADD       SP, #16
    1d68:	0d 5d       	POP       LR
    1d6a:	1d 5c       	JMP       LR
    1d6c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1d6c  :=0x40001a00
    1d70:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1d70  :=0x40001300
    1d74:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1d74  :=0x40001380
    1d78:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1d78  :=0x40002e00
    1d7c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1d80:	ff ff cf ff 	.long     0xffcfffff ->-03145729 
    1d84:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001d88 <EPWM_Trigger_AD_Event_Select>:
EPWM_Trigger_AD_Event_Select():
..\src\kf32a9k1xxx_epwm.c:1263
 * 				  EPWM_TIMER_EQUAL_DUTYB : 定时器值等于占空比B寄存器脉冲
 * 返回  无。
 */
void
EPWM_Trigger_AD_Event_Select(EPWM_SFRmap* EPWMx, uint32_t Event, uint32_t Select)
{
    1d88:	2d 5d       	PUSH      LR
    1d8a:	e0 31       	SUB       SP, #16
    1d8c:	01 20       	ST.W      [SP + #1], R0
    1d8e:	02 21       	ST.W      [SP + #2], R1
    1d90:	03 22       	ST.W      [SP + #3], R2
..\src\kf32a9k1xxx_epwm.c:1264
	uint32_t tmpreg = 0;
    1d92:	50 10       	MOV       R5, #0
    1d94:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1267

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1d96:	01 0c       	LD.W      R4, [SP + #1]
    1d98:	26 45       	LD        R5, [PC + #38]        ;->0x1e30  :=0x40001a00
    1d9a:	45 70       	CMP       R4, R5
    1d9c:	0d f0       	JZ        $+13                  ;->0x1db6
    1d9e:	01 0c       	LD.W      R4, [SP + #1]
    1da0:	25 45       	LD        R5, [PC + #37]        ;->0x1e34  :=0x40001300
    1da2:	45 70       	CMP       R4, R5
    1da4:	09 f0       	JZ        $+9                   ;->0x1db6
    1da6:	01 0c       	LD.W      R4, [SP + #1]
    1da8:	24 45       	LD        R5, [PC + #36]        ;->0x1e38  :=0x40001380
    1daa:	45 70       	CMP       R4, R5
    1dac:	05 f0       	JZ        $+5                   ;->0x1db6
    1dae:	01 0c       	LD.W      R4, [SP + #1]
    1db0:	23 45       	LD        R5, [PC + #35]        ;->0x1e3c  :=0x40002e00
    1db2:	45 70       	CMP       R4, R5
    1db4:	03 f1       	JNZ       $+3                   ;->0x1dba
    1db6:	51 10       	MOV       R5, #1
    1db8:	02 04       	SJMP      $+2                   ;->0x1dbc
    1dba:	50 10       	MOV       R5, #0
    1dbc:	05 58       	MOV       R0, R5
    1dbe:	21 45       	LD        R5, [PC + #33]        ;->0x1e40  :=0x4ba6
    1dc0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1268
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
    1dc2:	51 10       	MOV       R5, #1
    1dc4:	02 0c       	LD.W      R4, [SP + #2]
    1dc6:	41 38       	CMP       R4, #1
    1dc8:	02 f9       	JLS       $+2                   ;->0x1dcc
    1dca:	50 10       	MOV       R5, #0
    1dcc:	55 d1       	ZXT.B     R5, R5
    1dce:	05 58       	MOV       R0, R5
    1dd0:	1c 45       	LD        R5, [PC + #28]        ;->0x1e40  :=0x4ba6
    1dd2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1269
	CHECK_RESTRICTION(CEHCK_EPWM_TRIGGER_AD_EVENT(Select));
    1dd4:	51 10       	MOV       R5, #1
    1dd6:	03 0c       	LD.W      R4, [SP + #3]
    1dd8:	43 38       	CMP       R4, #3
    1dda:	02 f9       	JLS       $+2                   ;->0x1dde
    1ddc:	50 10       	MOV       R5, #0
    1dde:	55 d1       	ZXT.B     R5, R5
    1de0:	05 58       	MOV       R0, R5
    1de2:	18 45       	LD        R5, [PC + #24]        ;->0x1e40  :=0x4ba6
    1de4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1271

	if(Event == EPWM_TRIGGER_AD_EVENT1)
    1de6:	02 0d       	LD.W      R5, [SP + #2]
    1de8:	51 38       	CMP       R5, #1
    1dea:	0f f1       	JNZ       $+15                  ;->0x1e08
..\src\kf32a9k1xxx_epwm.c:1273
	{
		tmpreg = Select << EPWM_ETCTL_SELB0_POS;
    1dec:	03 0d       	LD.W      R5, [SP + #3]
    1dee:	29 7b       	LSL       R5, #17
    1df0:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1274
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_SELB, tmpreg);
    1df2:	01 0d       	LD.W      R5, [SP + #1]
    1df4:	6d 9b       	LD.W      R5, [R5 + #13]
    1df6:	05 58       	MOV       R0, R5
    1df8:	13 41       	LD        R1, [PC + #19]        ;->0x1e44  :=0xfff9ffff
    1dfa:	2e 82       	LD.W      R2, [SP]
    1dfc:	13 45       	LD        R5, [PC + #19]        ;->0x1e48  :=0x10e8
    1dfe:	05 5c       	LJMP      R5
    1e00:	80 58       	MOV       R4, R0
    1e02:	01 0d       	LD.W      R5, [SP + #1]
    1e04:	6c a3       	ST.W      [R5 + #13], R4
    1e06:	12 04       	SJMP      $+18                  ;->0x1e2a
..\src\kf32a9k1xxx_epwm.c:1276
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
    1e08:	02 0d       	LD.W      R5, [SP + #2]
    1e0a:	50 38       	CMP       R5, #0
    1e0c:	0f f1       	JNZ       $+15                  ;->0x1e2a
..\src\kf32a9k1xxx_epwm.c:1278
	{
		tmpreg = Select << EPWM_ETCTL_SELA0_POS;
    1e0e:	03 0d       	LD.W      R5, [SP + #3]
    1e10:	6d c3       	ADD       R5, R5, R5
    1e12:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1279
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_SELA, tmpreg);
    1e14:	01 0d       	LD.W      R5, [SP + #1]
    1e16:	6d 9b       	LD.W      R5, [R5 + #13]
    1e18:	05 58       	MOV       R0, R5
    1e1a:	16 10       	MOV       R1, #6
    1e1c:	11 68       	NOT       R1, R1
    1e1e:	2e 82       	LD.W      R2, [SP]
    1e20:	0a 45       	LD        R5, [PC + #10]        ;->0x1e48  :=0x10e8
    1e22:	05 5c       	LJMP      R5
    1e24:	80 58       	MOV       R4, R0
    1e26:	01 0d       	LD.W      R5, [SP + #1]
    1e28:	6c a3       	ST.W      [R5 + #13], R4
..\src\kf32a9k1xxx_epwm.c:1281
	}
}
    1e2a:	e0 29       	ADD       SP, #16
    1e2c:	0d 5d       	POP       LR
    1e2e:	1d 5c       	JMP       LR
    1e30:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1e30  :=0x40001a00
    1e34:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1e34  :=0x40001300
    1e38:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1e38  :=0x40001380
    1e3c:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1e3c  :=0x40002e00
    1e40:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1e44:	ff ff f9 ff 	.long     0xfff9ffff ->-00393217 
    1e48:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001e4c <EPWM_Trigger_AD_Event_Enable>:
EPWM_Trigger_AD_Event_Enable():
..\src\kf32a9k1xxx_epwm.c:1293
 * 					FALSE : 禁止触发AD事件
 * 返回  无。
 */
void
EPWM_Trigger_AD_Event_Enable(EPWM_SFRmap* EPWMx, uint32_t Event, FunctionalState NewState)
{
    1e4c:	2d 5d       	PUSH      LR
    1e4e:	e0 31       	SUB       SP, #16
    1e50:	01 20       	ST.W      [SP + #1], R0
    1e52:	02 21       	ST.W      [SP + #2], R1
    1e54:	03 22       	ST.W      [SP + #3], R2
..\src\kf32a9k1xxx_epwm.c:1294
	uint32_t tmpreg = 0;
    1e56:	50 10       	MOV       R5, #0
    1e58:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1297

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1e5a:	01 0c       	LD.W      R4, [SP + #1]
    1e5c:	27 45       	LD        R5, [PC + #39]        ;->0x1ef8  :=0x40001a00
    1e5e:	45 70       	CMP       R4, R5
    1e60:	0d f0       	JZ        $+13                  ;->0x1e7a
    1e62:	01 0c       	LD.W      R4, [SP + #1]
    1e64:	26 45       	LD        R5, [PC + #38]        ;->0x1efc  :=0x40001300
    1e66:	45 70       	CMP       R4, R5
    1e68:	09 f0       	JZ        $+9                   ;->0x1e7a
    1e6a:	01 0c       	LD.W      R4, [SP + #1]
    1e6c:	25 45       	LD        R5, [PC + #37]        ;->0x1f00  :=0x40001380
    1e6e:	45 70       	CMP       R4, R5
    1e70:	05 f0       	JZ        $+5                   ;->0x1e7a
    1e72:	01 0c       	LD.W      R4, [SP + #1]
    1e74:	24 45       	LD        R5, [PC + #36]        ;->0x1f04  :=0x40002e00
    1e76:	45 70       	CMP       R4, R5
    1e78:	03 f1       	JNZ       $+3                   ;->0x1e7e
    1e7a:	51 10       	MOV       R5, #1
    1e7c:	02 04       	SJMP      $+2                   ;->0x1e80
    1e7e:	50 10       	MOV       R5, #0
    1e80:	05 58       	MOV       R0, R5
    1e82:	22 45       	LD        R5, [PC + #34]        ;->0x1f08  :=0x4ba6
    1e84:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1298
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
    1e86:	51 10       	MOV       R5, #1
    1e88:	02 0c       	LD.W      R4, [SP + #2]
    1e8a:	41 38       	CMP       R4, #1
    1e8c:	02 f9       	JLS       $+2                   ;->0x1e90
    1e8e:	50 10       	MOV       R5, #0
    1e90:	55 d1       	ZXT.B     R5, R5
    1e92:	05 58       	MOV       R0, R5
    1e94:	1d 45       	LD        R5, [PC + #29]        ;->0x1f08  :=0x4ba6
    1e96:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1299
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1e98:	03 0d       	LD.W      R5, [SP + #3]
    1e9a:	50 38       	CMP       R5, #0
    1e9c:	04 f0       	JZ        $+4                   ;->0x1ea4
    1e9e:	03 0d       	LD.W      R5, [SP + #3]
    1ea0:	51 38       	CMP       R5, #1
    1ea2:	03 f1       	JNZ       $+3                   ;->0x1ea8
    1ea4:	51 10       	MOV       R5, #1
    1ea6:	02 04       	SJMP      $+2                   ;->0x1eaa
    1ea8:	50 10       	MOV       R5, #0
    1eaa:	05 58       	MOV       R0, R5
    1eac:	17 45       	LD        R5, [PC + #23]        ;->0x1f08  :=0x4ba6
    1eae:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1301

	if(Event == EPWM_TRIGGER_AD_EVENT1)
    1eb0:	02 0d       	LD.W      R5, [SP + #2]
    1eb2:	51 38       	CMP       R5, #1
    1eb4:	0f f1       	JNZ       $+15                  ;->0x1ed2
..\src\kf32a9k1xxx_epwm.c:1303
	{
		tmpreg = NewState << EPWM_ETCTL_TOADENB_POS;
    1eb6:	03 0d       	LD.W      R5, [SP + #3]
    1eb8:	28 7b       	LSL       R5, #16
    1eba:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1304
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_TOADENB, tmpreg);
    1ebc:	01 0d       	LD.W      R5, [SP + #1]
    1ebe:	6d 9b       	LD.W      R5, [R5 + #13]
    1ec0:	05 58       	MOV       R0, R5
    1ec2:	13 41       	LD        R1, [PC + #19]        ;->0x1f0c  :=0xfffeffff
    1ec4:	2e 82       	LD.W      R2, [SP]
    1ec6:	13 45       	LD        R5, [PC + #19]        ;->0x1f10  :=0x10e8
    1ec8:	05 5c       	LJMP      R5
    1eca:	80 58       	MOV       R4, R0
    1ecc:	01 0d       	LD.W      R5, [SP + #1]
    1ece:	6c a3       	ST.W      [R5 + #13], R4
    1ed0:	11 04       	SJMP      $+17                  ;->0x1ef2
..\src\kf32a9k1xxx_epwm.c:1306
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
    1ed2:	02 0d       	LD.W      R5, [SP + #2]
    1ed4:	50 38       	CMP       R5, #0
    1ed6:	0e f1       	JNZ       $+14                  ;->0x1ef2
..\src\kf32a9k1xxx_epwm.c:1308
	{
		tmpreg = NewState << EPWM_ETCTL_TOADENA_POS;
    1ed8:	03 0d       	LD.W      R5, [SP + #3]
    1eda:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1309
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_TOADENA, tmpreg);
    1edc:	01 0d       	LD.W      R5, [SP + #1]
    1ede:	6d 9b       	LD.W      R5, [R5 + #13]
    1ee0:	05 58       	MOV       R0, R5
    1ee2:	11 10       	MOV       R1, #1
    1ee4:	11 68       	NOT       R1, R1
    1ee6:	2e 82       	LD.W      R2, [SP]
    1ee8:	0a 45       	LD        R5, [PC + #10]        ;->0x1f10  :=0x10e8
    1eea:	05 5c       	LJMP      R5
    1eec:	80 58       	MOV       R4, R0
    1eee:	01 0d       	LD.W      R5, [SP + #1]
    1ef0:	6c a3       	ST.W      [R5 + #13], R4
..\src\kf32a9k1xxx_epwm.c:1311
	}
}
    1ef2:	e0 29       	ADD       SP, #16
    1ef4:	0d 5d       	POP       LR
    1ef6:	1d 5c       	JMP       LR
    1ef8:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1ef8  :=0x40001a00
    1efc:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1efc  :=0x40001300
    1f00:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1f00  :=0x40001380
    1f04:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1f04  :=0x40002e00
    1f08:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1f0c:	ff ff fe ff 	.long     0xfffeffff ->-00065537 
    1f10:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001f14 <EPWM_Global_Loading_Enable>:
EPWM_Global_Loading_Enable():
..\src\kf32a9k1xxx_epwm.c:1595
 * 					FALSE : 选择全局加载
 * 返回  无
 */
void
EPWM_Global_Loading_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
    1f14:	2d 5d       	PUSH      LR
    1f16:	ec 30       	SUB       SP, #12
    1f18:	01 20       	ST.W      [SP + #1], R0
    1f1a:	02 21       	ST.W      [SP + #2], R1
..\src\kf32a9k1xxx_epwm.c:1596
	uint32_t tmpreg = 0;
    1f1c:	50 10       	MOV       R5, #0
    1f1e:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1599

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1f20:	01 0c       	LD.W      R4, [SP + #1]
    1f22:	19 45       	LD        R5, [PC + #25]        ;->0x1f84  :=0x40001a00
    1f24:	45 70       	CMP       R4, R5
    1f26:	0d f0       	JZ        $+13                  ;->0x1f40
    1f28:	01 0c       	LD.W      R4, [SP + #1]
    1f2a:	18 45       	LD        R5, [PC + #24]        ;->0x1f88  :=0x40001300
    1f2c:	45 70       	CMP       R4, R5
    1f2e:	09 f0       	JZ        $+9                   ;->0x1f40
    1f30:	01 0c       	LD.W      R4, [SP + #1]
    1f32:	17 45       	LD        R5, [PC + #23]        ;->0x1f8c  :=0x40001380
    1f34:	45 70       	CMP       R4, R5
    1f36:	05 f0       	JZ        $+5                   ;->0x1f40
    1f38:	01 0c       	LD.W      R4, [SP + #1]
    1f3a:	16 45       	LD        R5, [PC + #22]        ;->0x1f90  :=0x40002e00
    1f3c:	45 70       	CMP       R4, R5
    1f3e:	03 f1       	JNZ       $+3                   ;->0x1f44
    1f40:	51 10       	MOV       R5, #1
    1f42:	02 04       	SJMP      $+2                   ;->0x1f46
    1f44:	50 10       	MOV       R5, #0
    1f46:	05 58       	MOV       R0, R5
    1f48:	13 45       	LD        R5, [PC + #19]        ;->0x1f94  :=0x4ba6
    1f4a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1600
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1f4c:	02 0d       	LD.W      R5, [SP + #2]
    1f4e:	50 38       	CMP       R5, #0
    1f50:	04 f0       	JZ        $+4                   ;->0x1f58
    1f52:	02 0d       	LD.W      R5, [SP + #2]
    1f54:	51 38       	CMP       R5, #1
    1f56:	03 f1       	JNZ       $+3                   ;->0x1f5c
    1f58:	51 10       	MOV       R5, #1
    1f5a:	02 04       	SJMP      $+2                   ;->0x1f5e
    1f5c:	50 10       	MOV       R5, #0
    1f5e:	05 58       	MOV       R0, R5
    1f60:	0d 45       	LD        R5, [PC + #13]        ;->0x1f94  :=0x4ba6
    1f62:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1602

	tmpreg = NewState << EPWM_UDCTL_GBUDEN_POS;
    1f64:	02 0d       	LD.W      R5, [SP + #2]
    1f66:	ab 7b       	LSL       R5, #27
    1f68:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_epwm.c:1603
	EPWMx->UDCTL = SFR_Config(EPWMx->UDCTL, ~EPWM_UDCTL_GBUDEN, tmpreg);
    1f6a:	01 0d       	LD.W      R5, [SP + #1]
    1f6c:	6d 9e       	LD.W      R5, [R5 + #25]
    1f6e:	05 58       	MOV       R0, R5
    1f70:	0a 41       	LD        R1, [PC + #10]        ;->0x1f98  :=0xf7ffffff
    1f72:	2e 82       	LD.W      R2, [SP]
    1f74:	0a 45       	LD        R5, [PC + #10]        ;->0x1f9c  :=0x10e8
    1f76:	05 5c       	LJMP      R5
    1f78:	80 58       	MOV       R4, R0
    1f7a:	01 0d       	LD.W      R5, [SP + #1]
    1f7c:	6c a6       	ST.W      [R5 + #25], R4
..\src\kf32a9k1xxx_epwm.c:1604
}
    1f7e:	ec 28       	ADD       SP, #12
    1f80:	0d 5d       	POP       LR
    1f82:	1d 5c       	JMP       LR
    1f84:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1f84  :=0x40001a00
    1f88:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1f88  :=0x40001300
    1f8c:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1f8c  :=0x40001380
    1f90:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1f90  :=0x40002e00
    1f94:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    1f98:	ff ff ff f7 	.long     0xf7ffffff ->-134217729 
    1f9c:	e8 10 00 00 	.long     0x000010e8 ->000004328  [!!!@2@:MOV       SP, #8	@@: NOP      

00001fa0 <SFR_Config>:
SFR_Config():
KF32A9K1XXX.h:13916
   -- 函数定义
   ---------------------------------------------------------------------------- */
/* 写特殊功能寄存器 */
static inline uint32_t
SFR_Config (uint32_t SfrMem, uint32_t SfrMask, uint32_t WriteVal)
{
    1fa0:	ec 30       	SUB       SP, #12
    1fa2:	e0 85       	ST.W      [SP], R0
    1fa4:	01 21       	ST.W      [SP + #1], R1
    1fa6:	02 22       	ST.W      [SP + #2], R2
KF32A9K1XXX.h:13917
    return ((SfrMem & SfrMask) | (WriteVal));
    1fa8:	5e 82       	LD.W      R5, [SP]
    1faa:	01 0c       	LD.W      R4, [SP + #1]
    1fac:	25 d5       	ANL       R4, R5, R4
    1fae:	02 0d       	LD.W      R5, [SP + #2]
    1fb0:	6c d7       	ORL       R5, R4, R5
KF32A9K1XXX.h:13918
}
    1fb2:	05 58       	MOV       R0, R5
    1fb4:	ec 28       	ADD       SP, #12
    1fb6:	1d 5c       	JMP       LR

00001fb8 <GPIO_Reset>:
GPIO_Reset():
..\src\kf32a9k1xxx_gpio.c:29
  * 输入  GPIOx: 指向GPIO内存结构的指针，取值为GPIOA_SFR~GPIOH_SFR。
  * 返回  无。
  **/
void
GPIO_Reset (GPIO_SFRmap * GPIOx)
{
    1fb8:	2d 5d       	PUSH      LR
    1fba:	e4 30       	SUB       SP, #4
    1fbc:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_gpio.c:31
	/*参数校验*/
	CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    1fbe:	5e 82       	LD.W      R5, [SP]
    1fc0:	5a 44       	LD        R4, [PC + #90]        ;->0x2128  :=0x50000000
    1fc2:	54 70       	CMP       R5, R4
    1fc4:	1d f0       	JZ        $+29                  ;->0x1ffe
    1fc6:	5e 82       	LD.W      R5, [SP]
    1fc8:	59 44       	LD        R4, [PC + #89]        ;->0x212c  :=0x50000040
    1fca:	54 70       	CMP       R5, R4
    1fcc:	19 f0       	JZ        $+25                  ;->0x1ffe
    1fce:	5e 82       	LD.W      R5, [SP]
    1fd0:	58 44       	LD        R4, [PC + #88]        ;->0x2130  :=0x50000080
    1fd2:	54 70       	CMP       R5, R4
    1fd4:	15 f0       	JZ        $+21                  ;->0x1ffe
    1fd6:	5e 82       	LD.W      R5, [SP]
    1fd8:	57 44       	LD        R4, [PC + #87]        ;->0x2134  :=0x500000c0
    1fda:	54 70       	CMP       R5, R4
    1fdc:	11 f0       	JZ        $+17                  ;->0x1ffe
    1fde:	5e 82       	LD.W      R5, [SP]
    1fe0:	56 44       	LD        R4, [PC + #86]        ;->0x2138  :=0x50000100
    1fe2:	54 70       	CMP       R5, R4
    1fe4:	0d f0       	JZ        $+13                  ;->0x1ffe
    1fe6:	5e 82       	LD.W      R5, [SP]
    1fe8:	55 44       	LD        R4, [PC + #85]        ;->0x213c  :=0x50000140
    1fea:	54 70       	CMP       R5, R4
    1fec:	09 f0       	JZ        $+9                   ;->0x1ffe
    1fee:	5e 82       	LD.W      R5, [SP]
    1ff0:	54 44       	LD        R4, [PC + #84]        ;->0x2140  :=0x50000180
    1ff2:	54 70       	CMP       R5, R4
    1ff4:	05 f0       	JZ        $+5                   ;->0x1ffe
    1ff6:	5e 82       	LD.W      R5, [SP]
    1ff8:	53 44       	LD        R4, [PC + #83]        ;->0x2144  :=0x500001c0
    1ffa:	54 70       	CMP       R5, R4
    1ffc:	03 f1       	JNZ       $+3                   ;->0x2002
    1ffe:	51 10       	MOV       R5, #1
    2000:	02 04       	SJMP      $+2                   ;->0x2004
    2002:	50 10       	MOV       R5, #0
    2004:	05 58       	MOV       R0, R5
    2006:	51 45       	LD        R5, [PC + #81]        ;->0x2148  :=0x4ba6
    2008:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:33

	if(GPIOx == GPIOA_SFR)
    200a:	5e 82       	LD.W      R5, [SP]
    200c:	47 44       	LD        R4, [PC + #71]        ;->0x2128  :=0x50000000
    200e:	54 70       	CMP       R5, R4
    2010:	02 f0       	JZ        $+2                   ;->0x2014
    2012:	88 04       	SJMP      $+136                 ;->0x2122
..\src\kf32a9k1xxx_gpio.c:35
	{
	    if (GPIOx == GPIOA_SFR)
    2014:	5e 82       	LD.W      R5, [SP]
    2016:	45 44       	LD        R4, [PC + #69]        ;->0x2128  :=0x50000000
    2018:	54 70       	CMP       R5, R4
    201a:	0e f1       	JNZ       $+14                  ;->0x2036
..\src\kf32a9k1xxx_gpio.c:37
	    {
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOARST, TRUE);
    201c:	01 10       	MOV       R0, #1
    201e:	11 10       	MOV       R1, #1
    2020:	4b 45       	LD        R5, [PC + #75]        ;->0x214c  :=0x30d8
    2022:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:38
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOARST, FALSE);
    2024:	01 10       	MOV       R0, #1
    2026:	10 10       	MOV       R1, #0
    2028:	49 45       	LD        R5, [PC + #73]        ;->0x214c  :=0x30d8
    202a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:39
	        PCLK_CTL0_Peripheral_Clock_Enable(PCLK_CTL0_GPIOACLKEN, TRUE);
    202c:	01 10       	MOV       R0, #1
    202e:	11 10       	MOV       R1, #1
    2030:	48 45       	LD        R5, [PC + #72]        ;->0x2150  :=0x2f4c
    2032:	05 5c       	LJMP      R5
    2034:	77 04       	SJMP      $+119                 ;->0x2122
..\src\kf32a9k1xxx_gpio.c:41
	    }
	    else if (GPIOx == GPIOB_SFR)
    2036:	5e 82       	LD.W      R5, [SP]
    2038:	3d 44       	LD        R4, [PC + #61]        ;->0x212c  :=0x50000040
    203a:	54 70       	CMP       R5, R4
    203c:	0e f1       	JNZ       $+14                  ;->0x2058
..\src\kf32a9k1xxx_gpio.c:43
	    {
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOBRST, TRUE);
    203e:	02 10       	MOV       R0, #2
    2040:	11 10       	MOV       R1, #1
    2042:	43 45       	LD        R5, [PC + #67]        ;->0x214c  :=0x30d8
    2044:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:44
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOBRST, FALSE);
    2046:	02 10       	MOV       R0, #2
    2048:	10 10       	MOV       R1, #0
    204a:	41 45       	LD        R5, [PC + #65]        ;->0x214c  :=0x30d8
    204c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:45
	        PCLK_CTL0_Peripheral_Clock_Enable(PCLK_CTL0_GPIOBCLKEN, TRUE);
    204e:	02 10       	MOV       R0, #2
    2050:	11 10       	MOV       R1, #1
    2052:	40 45       	LD        R5, [PC + #64]        ;->0x2150  :=0x2f4c
    2054:	05 5c       	LJMP      R5
    2056:	66 04       	SJMP      $+102                 ;->0x2122
..\src\kf32a9k1xxx_gpio.c:47
	    }
	    else if (GPIOx == GPIOC_SFR)
    2058:	5e 82       	LD.W      R5, [SP]
    205a:	36 44       	LD        R4, [PC + #54]        ;->0x2130  :=0x50000080
    205c:	54 70       	CMP       R5, R4
    205e:	0e f1       	JNZ       $+14                  ;->0x207a
..\src\kf32a9k1xxx_gpio.c:49
	    {
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOCRST, TRUE);
    2060:	04 10       	MOV       R0, #4
    2062:	11 10       	MOV       R1, #1
    2064:	3a 45       	LD        R5, [PC + #58]        ;->0x214c  :=0x30d8
    2066:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:50
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOCRST, FALSE);
    2068:	04 10       	MOV       R0, #4
    206a:	10 10       	MOV       R1, #0
    206c:	38 45       	LD        R5, [PC + #56]        ;->0x214c  :=0x30d8
    206e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:51
	        PCLK_CTL0_Peripheral_Clock_Enable(PCLK_CTL0_GPIOCCLKEN, TRUE);
    2070:	04 10       	MOV       R0, #4
    2072:	11 10       	MOV       R1, #1
    2074:	37 45       	LD        R5, [PC + #55]        ;->0x2150  :=0x2f4c
    2076:	05 5c       	LJMP      R5
    2078:	55 04       	SJMP      $+85                  ;->0x2122
..\src\kf32a9k1xxx_gpio.c:53
	    }
	    else if (GPIOx == GPIOD_SFR)
    207a:	5e 82       	LD.W      R5, [SP]
    207c:	2e 44       	LD        R4, [PC + #46]        ;->0x2134  :=0x500000c0
    207e:	54 70       	CMP       R5, R4
    2080:	0e f1       	JNZ       $+14                  ;->0x209c
..\src\kf32a9k1xxx_gpio.c:55
	    {
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIODRST, TRUE);
    2082:	08 10       	MOV       R0, #8
    2084:	11 10       	MOV       R1, #1
    2086:	32 45       	LD        R5, [PC + #50]        ;->0x214c  :=0x30d8
    2088:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:56
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIODRST, FALSE);
    208a:	08 10       	MOV       R0, #8
    208c:	10 10       	MOV       R1, #0
    208e:	30 45       	LD        R5, [PC + #48]        ;->0x214c  :=0x30d8
    2090:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:57
	        PCLK_CTL0_Peripheral_Clock_Enable(PCLK_CTL0_GPIODCLKEN, TRUE);
    2092:	08 10       	MOV       R0, #8
    2094:	11 10       	MOV       R1, #1
    2096:	2f 45       	LD        R5, [PC + #47]        ;->0x2150  :=0x2f4c
    2098:	05 5c       	LJMP      R5
    209a:	44 04       	SJMP      $+68                  ;->0x2122
..\src\kf32a9k1xxx_gpio.c:59
	    }
	    else if (GPIOx == GPIOE_SFR)
    209c:	5e 82       	LD.W      R5, [SP]
    209e:	27 44       	LD        R4, [PC + #39]        ;->0x2138  :=0x50000100
    20a0:	54 70       	CMP       R5, R4
    20a2:	0e f1       	JNZ       $+14                  ;->0x20be
..\src\kf32a9k1xxx_gpio.c:61
	    {
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOERST, TRUE);
    20a4:	00 11       	MOV       R0, #16
    20a6:	11 10       	MOV       R1, #1
    20a8:	29 45       	LD        R5, [PC + #41]        ;->0x214c  :=0x30d8
    20aa:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:62
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOERST, FALSE);
    20ac:	00 11       	MOV       R0, #16
    20ae:	10 10       	MOV       R1, #0
    20b0:	27 45       	LD        R5, [PC + #39]        ;->0x214c  :=0x30d8
    20b2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:63
	        PCLK_CTL0_Peripheral_Clock_Enable(PCLK_CTL0_GPIOECLKEN, TRUE);
    20b4:	00 11       	MOV       R0, #16
    20b6:	11 10       	MOV       R1, #1
    20b8:	26 45       	LD        R5, [PC + #38]        ;->0x2150  :=0x2f4c
    20ba:	05 5c       	LJMP      R5
    20bc:	33 04       	SJMP      $+51                  ;->0x2122
..\src\kf32a9k1xxx_gpio.c:65
	    }
	    else if (GPIOx == GPIOF_SFR)
    20be:	5e 82       	LD.W      R5, [SP]
    20c0:	1f 44       	LD        R4, [PC + #31]        ;->0x213c  :=0x50000140
    20c2:	54 70       	CMP       R5, R4
    20c4:	0e f1       	JNZ       $+14                  ;->0x20e0
..\src\kf32a9k1xxx_gpio.c:67
	    {
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOFRST, TRUE);
    20c6:	00 12       	MOV       R0, #32
    20c8:	11 10       	MOV       R1, #1
    20ca:	21 45       	LD        R5, [PC + #33]        ;->0x214c  :=0x30d8
    20cc:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:68
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOFRST, FALSE);
    20ce:	00 12       	MOV       R0, #32
    20d0:	10 10       	MOV       R1, #0
    20d2:	1f 45       	LD        R5, [PC + #31]        ;->0x214c  :=0x30d8
    20d4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:69
	        PCLK_CTL0_Peripheral_Clock_Enable(PCLK_CTL0_GPIOFCLKEN, TRUE);
    20d6:	00 12       	MOV       R0, #32
    20d8:	11 10       	MOV       R1, #1
    20da:	1e 45       	LD        R5, [PC + #30]        ;->0x2150  :=0x2f4c
    20dc:	05 5c       	LJMP      R5
    20de:	22 04       	SJMP      $+34                  ;->0x2122
..\src\kf32a9k1xxx_gpio.c:71
	    }
	    else if (GPIOx == GPIOG_SFR)
    20e0:	5e 82       	LD.W      R5, [SP]
    20e2:	18 44       	LD        R4, [PC + #24]        ;->0x2140  :=0x50000180
    20e4:	54 70       	CMP       R5, R4
    20e6:	0e f1       	JNZ       $+14                  ;->0x2102
..\src\kf32a9k1xxx_gpio.c:73
	    {
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOGRST, TRUE);
    20e8:	00 14       	MOV       R0, #64
    20ea:	11 10       	MOV       R1, #1
    20ec:	18 45       	LD        R5, [PC + #24]        ;->0x214c  :=0x30d8
    20ee:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:74
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOGRST, FALSE);
    20f0:	00 14       	MOV       R0, #64
    20f2:	10 10       	MOV       R1, #0
    20f4:	16 45       	LD        R5, [PC + #22]        ;->0x214c  :=0x30d8
    20f6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:75
	        PCLK_CTL0_Peripheral_Clock_Enable(PCLK_CTL0_GPIOGCLKEN, TRUE);
    20f8:	00 14       	MOV       R0, #64
    20fa:	11 10       	MOV       R1, #1
    20fc:	15 45       	LD        R5, [PC + #21]        ;->0x2150  :=0x2f4c
    20fe:	05 5c       	LJMP      R5
    2100:	11 04       	SJMP      $+17                  ;->0x2122
..\src\kf32a9k1xxx_gpio.c:77
	    }
	    else if (GPIOx == GPIOH_SFR)
    2102:	5e 82       	LD.W      R5, [SP]
    2104:	10 44       	LD        R4, [PC + #16]        ;->0x2144  :=0x500001c0
    2106:	54 70       	CMP       R5, R4
    2108:	0d f1       	JNZ       $+13                  ;->0x2122
..\src\kf32a9k1xxx_gpio.c:79
	    {
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOHRST, TRUE);
    210a:	00 18       	MOV       R0, #128
    210c:	11 10       	MOV       R1, #1
    210e:	10 45       	LD        R5, [PC + #16]        ;->0x214c  :=0x30d8
    2110:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:80
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOHRST, FALSE);
    2112:	00 18       	MOV       R0, #128
    2114:	10 10       	MOV       R1, #0
    2116:	0e 45       	LD        R5, [PC + #14]        ;->0x214c  :=0x30d8
    2118:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:81
	        PCLK_CTL0_Peripheral_Clock_Enable(PCLK_CTL0_GPIOHCLKEN, TRUE);
    211a:	00 18       	MOV       R0, #128
    211c:	11 10       	MOV       R1, #1
    211e:	0d 45       	LD        R5, [PC + #13]        ;->0x2150  :=0x2f4c
    2120:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:88
	    else
	    {
	        ;
	    }
	}
}
    2122:	e4 28       	ADD       SP, #4
    2124:	0d 5d       	POP       LR
    2126:	1d 5c       	JMP       LR
    2128:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    212c:	40 00 00 50 	.long     0x50000040 ->1342177344 
    2130:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xc130
    2134:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    2138:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    213c:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    2140:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    2144:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    2148:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    214c:	d8 30 00 00 	.long     0x000030d8 ->000012504  [!!!@2@:SUB       LR, #8	@@: NOP      
    2150:	4c 2f 00 00 	.long     0x00002f4c ->000012108  [!!!@2@:ADD       R4, #124	@@: NOP      

00002154 <GPIO_Configuration>:
GPIO_Configuration():
..\src\kf32a9k1xxx_gpio.c:98
  *       gpioInitStruct: GPIO配置信息结构体指针。
  * 返回  无。
  **/
void
GPIO_Configuration (GPIO_SFRmap* GPIOx, GPIO_InitTypeDef* gpioInitStruct)
{
    2154:	2d 5d       	PUSH      LR
    2156:	e8 31       	SUB       SP, #24
    2158:	04 20       	ST.W      [SP + #4], R0
    215a:	05 21       	ST.W      [SP + #5], R1
..\src\kf32a9k1xxx_gpio.c:99
    uint32_t pinpos = 0x00;
    215c:	50 10       	MOV       R5, #0
    215e:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_gpio.c:100
    uint32_t pos = 0x00;
    2160:	50 10       	MOV       R5, #0
    2162:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:101
    uint32_t currentpin = 0x00;
    2164:	50 10       	MOV       R5, #0
    2166:	02 25       	ST.W      [SP + #2], R5
..\src\kf32a9k1xxx_gpio.c:102
    uint32_t tmpreg = 0;
    2168:	50 10       	MOV       R5, #0
    216a:	03 25       	ST.W      [SP + #3], R5
..\src\kf32a9k1xxx_gpio.c:105

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    216c:	04 0c       	LD.W      R4, [SP + #4]
    216e:	83 45       	LD        R5, [PC + #131]       ;->0x2378  :=0x50000000
    2170:	45 70       	CMP       R4, R5
    2172:	1d f0       	JZ        $+29                  ;->0x21ac
    2174:	04 0c       	LD.W      R4, [SP + #4]
    2176:	82 45       	LD        R5, [PC + #130]       ;->0x237c  :=0x50000040
    2178:	45 70       	CMP       R4, R5
    217a:	19 f0       	JZ        $+25                  ;->0x21ac
    217c:	04 0c       	LD.W      R4, [SP + #4]
    217e:	81 45       	LD        R5, [PC + #129]       ;->0x2380  :=0x50000080
    2180:	45 70       	CMP       R4, R5
    2182:	15 f0       	JZ        $+21                  ;->0x21ac
    2184:	04 0c       	LD.W      R4, [SP + #4]
    2186:	80 45       	LD        R5, [PC + #128]       ;->0x2384  :=0x500000c0
    2188:	45 70       	CMP       R4, R5
    218a:	11 f0       	JZ        $+17                  ;->0x21ac
    218c:	04 0c       	LD.W      R4, [SP + #4]
    218e:	7f 45       	LD        R5, [PC + #127]       ;->0x2388  :=0x50000100
    2190:	45 70       	CMP       R4, R5
    2192:	0d f0       	JZ        $+13                  ;->0x21ac
    2194:	04 0c       	LD.W      R4, [SP + #4]
    2196:	7e 45       	LD        R5, [PC + #126]       ;->0x238c  :=0x50000140
    2198:	45 70       	CMP       R4, R5
    219a:	09 f0       	JZ        $+9                   ;->0x21ac
    219c:	04 0c       	LD.W      R4, [SP + #4]
    219e:	7d 45       	LD        R5, [PC + #125]       ;->0x2390  :=0x50000180
    21a0:	45 70       	CMP       R4, R5
    21a2:	05 f0       	JZ        $+5                   ;->0x21ac
    21a4:	04 0c       	LD.W      R4, [SP + #4]
    21a6:	7c 45       	LD        R5, [PC + #124]       ;->0x2394  :=0x500001c0
    21a8:	45 70       	CMP       R4, R5
    21aa:	03 f1       	JNZ       $+3                   ;->0x21b0
    21ac:	51 10       	MOV       R5, #1
    21ae:	02 04       	SJMP      $+2                   ;->0x21b2
    21b0:	50 10       	MOV       R5, #0
    21b2:	05 58       	MOV       R0, R5
    21b4:	79 45       	LD        R5, [PC + #121]       ;->0x2398  :=0x4ba6
    21b6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:106
    CHECK_RESTRICTION(CHECK_GPIO_PIN_MASK(gpioInitStruct->m_Pin));
    21b8:	05 0d       	LD.W      R5, [SP + #5]
    21ba:	55 82       	LD.W      R5, [R5]
    21bc:	30 11       	MOV       R3, #16
    21be:	e5 dc       	LSR       R4, R5, R3
    21c0:	51 10       	MOV       R5, #1
    21c2:	40 38       	CMP       R4, #0
    21c4:	02 f0       	JZ        $+2                   ;->0x21c8
    21c6:	50 10       	MOV       R5, #0
    21c8:	55 d1       	ZXT.B     R5, R5
    21ca:	05 58       	MOV       R0, R5
    21cc:	73 45       	LD        R5, [PC + #115]       ;->0x2398  :=0x4ba6
    21ce:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:107
    CHECK_RESTRICTION(CHECK_GPIO_MODE(gpioInitStruct->m_Mode));
    21d0:	05 0d       	LD.W      R5, [SP + #5]
    21d2:	6d 98       	LD.W      R5, [R5 + #1]
    21d4:	50 38       	CMP       R5, #0
    21d6:	0d f0       	JZ        $+13                  ;->0x21f0
    21d8:	05 0d       	LD.W      R5, [SP + #5]
    21da:	6d 98       	LD.W      R5, [R5 + #1]
    21dc:	51 38       	CMP       R5, #1
    21de:	09 f0       	JZ        $+9                   ;->0x21f0
    21e0:	05 0d       	LD.W      R5, [SP + #5]
    21e2:	6d 98       	LD.W      R5, [R5 + #1]
    21e4:	52 38       	CMP       R5, #2
    21e6:	05 f0       	JZ        $+5                   ;->0x21f0
    21e8:	05 0d       	LD.W      R5, [SP + #5]
    21ea:	6d 98       	LD.W      R5, [R5 + #1]
    21ec:	53 38       	CMP       R5, #3
    21ee:	03 f1       	JNZ       $+3                   ;->0x21f4
    21f0:	51 10       	MOV       R5, #1
    21f2:	02 04       	SJMP      $+2                   ;->0x21f6
    21f4:	50 10       	MOV       R5, #0
    21f6:	05 58       	MOV       R0, R5
    21f8:	68 45       	LD        R5, [PC + #104]       ;->0x2398  :=0x4ba6
    21fa:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:108
    CHECK_RESTRICTION(CHECK_GPIO_SPEED(gpioInitStruct->m_Speed));
    21fc:	05 0d       	LD.W      R5, [SP + #5]
    21fe:	ad 98       	LD.W      R5, [R5 + #2]
    2200:	50 38       	CMP       R5, #0
    2202:	05 f0       	JZ        $+5                   ;->0x220c
    2204:	05 0d       	LD.W      R5, [SP + #5]
    2206:	ad 98       	LD.W      R5, [R5 + #2]
    2208:	51 38       	CMP       R5, #1
    220a:	03 f1       	JNZ       $+3                   ;->0x2210
    220c:	51 10       	MOV       R5, #1
    220e:	02 04       	SJMP      $+2                   ;->0x2212
    2210:	50 10       	MOV       R5, #0
    2212:	05 58       	MOV       R0, R5
    2214:	61 45       	LD        R5, [PC + #97]        ;->0x2398  :=0x4ba6
    2216:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:109
    CHECK_RESTRICTION(CHECK_GPIO_PU(gpioInitStruct->m_PullUp));
    2218:	05 0d       	LD.W      R5, [SP + #5]
    221a:	2d 99       	LD.W      R5, [R5 + #4]
    221c:	50 38       	CMP       R5, #0
    221e:	05 f0       	JZ        $+5                   ;->0x2228
    2220:	05 0d       	LD.W      R5, [SP + #5]
    2222:	2d 99       	LD.W      R5, [R5 + #4]
    2224:	51 38       	CMP       R5, #1
    2226:	03 f1       	JNZ       $+3                   ;->0x222c
    2228:	51 10       	MOV       R5, #1
    222a:	02 04       	SJMP      $+2                   ;->0x222e
    222c:	50 10       	MOV       R5, #0
    222e:	05 58       	MOV       R0, R5
    2230:	5a 45       	LD        R5, [PC + #90]        ;->0x2398  :=0x4ba6
    2232:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:110
    CHECK_RESTRICTION(CHECK_GPIO_PD(gpioInitStruct->m_PullDown));
    2234:	05 0d       	LD.W      R5, [SP + #5]
    2236:	6d 99       	LD.W      R5, [R5 + #5]
    2238:	50 38       	CMP       R5, #0
    223a:	05 f0       	JZ        $+5                   ;->0x2244
    223c:	05 0d       	LD.W      R5, [SP + #5]
    223e:	6d 99       	LD.W      R5, [R5 + #5]
    2240:	51 38       	CMP       R5, #1
    2242:	03 f1       	JNZ       $+3                   ;->0x2248
    2244:	51 10       	MOV       R5, #1
    2246:	02 04       	SJMP      $+2                   ;->0x224a
    2248:	50 10       	MOV       R5, #0
    224a:	05 58       	MOV       R0, R5
    224c:	53 45       	LD        R5, [PC + #83]        ;->0x2398  :=0x4ba6
    224e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:113

    /* 配置一个引脚信息 */
    for(pinpos = 0x00; pinpos < 0x10; pinpos++)
    2250:	50 10       	MOV       R5, #0
    2252:	e5 85       	ST.W      [SP], R5
    2254:	8b 04       	SJMP      $+139                 ;->0x236a
..\src\kf32a9k1xxx_gpio.c:115
    {
    	pos = ((uint32_t)0x01) << pinpos;
    2256:	5e 82       	LD.W      R5, [SP]
    2258:	41 10       	MOV       R4, #1
    225a:	6c db       	LSL       R5, R4, R5
    225c:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:117
    	/* 获取引脚位置信息 */
    	currentpin = (gpioInitStruct->m_Pin) & pos;
    225e:	05 0d       	LD.W      R5, [SP + #5]
    2260:	55 82       	LD.W      R5, [R5]
    2262:	01 0c       	LD.W      R4, [SP + #1]
    2264:	2d d5       	ANL       R5, R5, R4
    2266:	02 25       	ST.W      [SP + #2], R5
..\src\kf32a9k1xxx_gpio.c:119

    	if(currentpin == pos)
    2268:	02 0c       	LD.W      R4, [SP + #2]
    226a:	01 0d       	LD.W      R5, [SP + #1]
    226c:	45 70       	CMP       R4, R5
    226e:	7b f1       	JNZ       $+123                 ;->0x2364
..\src\kf32a9k1xxx_gpio.c:123
    	{
            /*----------- 设置GPIOx_PMOD寄存器 -----------*/
            /* 根据结构体成员m_Mode，设置PXPMDy位域 */
    		tmpreg = (((uint32_t)gpioInitStruct->m_Mode) << (pinpos * 2));
    2270:	05 0d       	LD.W      R5, [SP + #5]
    2272:	65 98       	LD.W      R4, [R5 + #1]
    2274:	5e 82       	LD.W      R5, [SP]
    2276:	6d c3       	ADD       R5, R5, R5
    2278:	6c db       	LSL       R5, R4, R5
    227a:	03 25       	ST.W      [SP + #3], R5
..\src\kf32a9k1xxx_gpio.c:124
    		GPIOx->PMOD = SFR_Config(GPIOx->PMOD,
    227c:	04 0d       	LD.W      R5, [SP + #4]
    227e:	65 99       	LD.W      R4, [R5 + #5]
..\src\kf32a9k1xxx_gpio.c:125
    								~(GPIO_PMOD_PXPMD0 << (pinpos * 2)),
    2280:	5e 82       	LD.W      R5, [SP]
    2282:	6d c3       	ADD       R5, R5, R5
    2284:	33 10       	MOV       R3, #3
    2286:	6b db       	LSL       R5, R3, R5
..\src\kf32a9k1xxx_gpio.c:124
    	if(currentpin == pos)
    	{
            /*----------- 设置GPIOx_PMOD寄存器 -----------*/
            /* 根据结构体成员m_Mode，设置PXPMDy位域 */
    		tmpreg = (((uint32_t)gpioInitStruct->m_Mode) << (pinpos * 2));
    		GPIOx->PMOD = SFR_Config(GPIOx->PMOD,
    2288:	55 68       	NOT       R5, R5
    228a:	04 58       	MOV       R0, R4
    228c:	25 58       	MOV       R1, R5
    228e:	03 0a       	LD.W      R2, [SP + #3]
    2290:	43 45       	LD        R5, [PC + #67]        ;->0x239c  :=0x1fa0
    2292:	05 5c       	LJMP      R5
    2294:	80 58       	MOV       R4, R0
    2296:	04 0d       	LD.W      R5, [SP + #4]
    2298:	6c a1       	ST.W      [R5 + #5], R4
..\src\kf32a9k1xxx_gpio.c:128
    								~(GPIO_PMOD_PXPMD0 << (pinpos * 2)),
    								tmpreg);

            if ((gpioInitStruct->m_Mode == GPIO_MODE_OUT)
    229a:	05 0d       	LD.W      R5, [SP + #5]
    229c:	6d 98       	LD.W      R5, [R5 + #1]
    229e:	51 38       	CMP       R5, #1
    22a0:	05 f0       	JZ        $+5                   ;->0x22aa
..\src\kf32a9k1xxx_gpio.c:129
                || (gpioInitStruct->m_Mode == GPIO_MODE_RMP))
    22a2:	05 0d       	LD.W      R5, [SP + #5]
    22a4:	6d 98       	LD.W      R5, [R5 + #1]
    22a6:	52 38       	CMP       R5, #2
    22a8:	22 f1       	JNZ       $+34                  ;->0x22ec
..\src\kf32a9k1xxx_gpio.c:132
            {
                /* GPIO开漏控制参数校验 */
                CHECK_RESTRICTION(CHECK_GPIO_POD(gpioInitStruct->m_OpenDrain));
    22aa:	05 0d       	LD.W      R5, [SP + #5]
    22ac:	ed 98       	LD.W      R5, [R5 + #3]
    22ae:	50 38       	CMP       R5, #0
    22b0:	05 f0       	JZ        $+5                   ;->0x22ba
    22b2:	05 0d       	LD.W      R5, [SP + #5]
    22b4:	ed 98       	LD.W      R5, [R5 + #3]
    22b6:	51 38       	CMP       R5, #1
    22b8:	03 f1       	JNZ       $+3                   ;->0x22be
    22ba:	51 10       	MOV       R5, #1
    22bc:	02 04       	SJMP      $+2                   ;->0x22c0
    22be:	50 10       	MOV       R5, #0
    22c0:	05 58       	MOV       R0, R5
    22c2:	36 45       	LD        R5, [PC + #54]        ;->0x2398  :=0x4ba6
    22c4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:136

                /*----------- 设置GPIOx_PODR寄存器 -----------*/
                /* 根据结构体成员m_OpenDrain，设置PXPODR位域 */
                tmpreg = (((uint32_t)gpioInitStruct->m_OpenDrain) << (pinpos));
    22c6:	05 0d       	LD.W      R5, [SP + #5]
    22c8:	e5 98       	LD.W      R4, [R5 + #3]
    22ca:	5e 82       	LD.W      R5, [SP]
    22cc:	6c db       	LSL       R5, R4, R5
    22ce:	03 25       	ST.W      [SP + #3], R5
..\src\kf32a9k1xxx_gpio.c:137
                GPIOx->PODR = SFR_Config (GPIOx->PODR,
    22d0:	04 0d       	LD.W      R5, [SP + #4]
    22d2:	25 99       	LD.W      R4, [R5 + #4]
..\src\kf32a9k1xxx_gpio.c:138
                                      ~(GPIO_PODR_PXPODR0 << pinpos),
    22d4:	5e 82       	LD.W      R5, [SP]
    22d6:	31 10       	MOV       R3, #1
    22d8:	6b db       	LSL       R5, R3, R5
..\src\kf32a9k1xxx_gpio.c:137
                CHECK_RESTRICTION(CHECK_GPIO_POD(gpioInitStruct->m_OpenDrain));

                /*----------- 设置GPIOx_PODR寄存器 -----------*/
                /* 根据结构体成员m_OpenDrain，设置PXPODR位域 */
                tmpreg = (((uint32_t)gpioInitStruct->m_OpenDrain) << (pinpos));
                GPIOx->PODR = SFR_Config (GPIOx->PODR,
    22da:	55 68       	NOT       R5, R5
    22dc:	04 58       	MOV       R0, R4
    22de:	25 58       	MOV       R1, R5
    22e0:	03 0a       	LD.W      R2, [SP + #3]
    22e2:	2f 45       	LD        R5, [PC + #47]        ;->0x239c  :=0x1fa0
    22e4:	05 5c       	LJMP      R5
    22e6:	80 58       	MOV       R4, R0
    22e8:	04 0d       	LD.W      R5, [SP + #4]
    22ea:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_gpio.c:148
                ;
            }

            /*----------- 设置GPIOx_OMOD寄存器 -----------*/
            /* 根据结构体成员m_Speed，设置PXOMD位域 */
            tmpreg = ((uint32_t)gpioInitStruct->m_Speed) << (pinpos * 2);
    22ec:	05 0d       	LD.W      R5, [SP + #5]
    22ee:	a5 98       	LD.W      R4, [R5 + #2]
    22f0:	5e 82       	LD.W      R5, [SP]
    22f2:	6d c3       	ADD       R5, R5, R5
    22f4:	6c db       	LSL       R5, R4, R5
    22f6:	03 25       	ST.W      [SP + #3], R5
..\src\kf32a9k1xxx_gpio.c:149
            GPIOx->OMOD = SFR_Config(GPIOx->OMOD,
    22f8:	04 0d       	LD.W      R5, [SP + #4]
    22fa:	a5 99       	LD.W      R4, [R5 + #6]
..\src\kf32a9k1xxx_gpio.c:150
            					~(GPIO_OMOD_PXOMD0) << (pinpos * 2),
    22fc:	5e 82       	LD.W      R5, [SP]
    22fe:	6d c3       	ADD       R5, R5, R5
..\src\kf32a9k1xxx_gpio.c:149
            }

            /*----------- 设置GPIOx_OMOD寄存器 -----------*/
            /* 根据结构体成员m_Speed，设置PXOMD位域 */
            tmpreg = ((uint32_t)gpioInitStruct->m_Speed) << (pinpos * 2);
            GPIOx->OMOD = SFR_Config(GPIOx->OMOD,
    2300:	65 58       	MOV       R3, R5
    2302:	51 10       	MOV       R5, #1
    2304:	55 68       	NOT       R5, R5
    2306:	ed da       	LSL       R5, R5, R3
    2308:	04 58       	MOV       R0, R4
    230a:	25 58       	MOV       R1, R5
    230c:	03 0a       	LD.W      R2, [SP + #3]
    230e:	24 45       	LD        R5, [PC + #36]        ;->0x239c  :=0x1fa0
    2310:	05 5c       	LJMP      R5
    2312:	80 58       	MOV       R4, R0
    2314:	04 0d       	LD.W      R5, [SP + #4]
    2316:	ac a1       	ST.W      [R5 + #6], R4
..\src\kf32a9k1xxx_gpio.c:155
            					~(GPIO_OMOD_PXOMD0) << (pinpos * 2),
            					tmpreg);

            /*----------- 设置GPIOx_PUR寄存器 -----------*/
            /* 根据结构体成员m_PullUp，设置PXPUR位域 */
            tmpreg = (((uint32_t)gpioInitStruct->m_PullUp) << (pinpos));
    2318:	05 0d       	LD.W      R5, [SP + #5]
    231a:	25 99       	LD.W      R4, [R5 + #4]
    231c:	5e 82       	LD.W      R5, [SP]
    231e:	6c db       	LSL       R5, R4, R5
    2320:	03 25       	ST.W      [SP + #3], R5
..\src\kf32a9k1xxx_gpio.c:156
            GPIOx->PUR = SFR_Config(GPIOx->PUR,
    2322:	04 0d       	LD.W      R5, [SP + #4]
    2324:	a5 98       	LD.W      R4, [R5 + #2]
..\src\kf32a9k1xxx_gpio.c:157
            					~(GPIO_PUR_PXPUR0 << pinpos),
    2326:	5e 82       	LD.W      R5, [SP]
    2328:	31 10       	MOV       R3, #1
    232a:	6b db       	LSL       R5, R3, R5
..\src\kf32a9k1xxx_gpio.c:156
            					tmpreg);

            /*----------- 设置GPIOx_PUR寄存器 -----------*/
            /* 根据结构体成员m_PullUp，设置PXPUR位域 */
            tmpreg = (((uint32_t)gpioInitStruct->m_PullUp) << (pinpos));
            GPIOx->PUR = SFR_Config(GPIOx->PUR,
    232c:	55 68       	NOT       R5, R5
    232e:	04 58       	MOV       R0, R4
    2330:	25 58       	MOV       R1, R5
    2332:	03 0a       	LD.W      R2, [SP + #3]
    2334:	1a 45       	LD        R5, [PC + #26]        ;->0x239c  :=0x1fa0
    2336:	05 5c       	LJMP      R5
    2338:	80 58       	MOV       R4, R0
    233a:	04 0d       	LD.W      R5, [SP + #4]
    233c:	ac a0       	ST.W      [R5 + #2], R4
..\src\kf32a9k1xxx_gpio.c:162
            					~(GPIO_PUR_PXPUR0 << pinpos),
            					tmpreg);

            /*----------- 设置GPIOx_PDR寄存器 -----------*/
            /* 根据结构体成员m_PullDown，设置PXPDR位域 */
            tmpreg = (((uint32_t)gpioInitStruct->m_PullDown) << pinpos);
    233e:	05 0d       	LD.W      R5, [SP + #5]
    2340:	65 99       	LD.W      R4, [R5 + #5]
    2342:	5e 82       	LD.W      R5, [SP]
    2344:	6c db       	LSL       R5, R4, R5
    2346:	03 25       	ST.W      [SP + #3], R5
..\src\kf32a9k1xxx_gpio.c:163
            GPIOx->PDR = SFR_Config(GPIOx->PDR,
    2348:	04 0d       	LD.W      R5, [SP + #4]
    234a:	e5 98       	LD.W      R4, [R5 + #3]
..\src\kf32a9k1xxx_gpio.c:164
            					~(GPIO_PDR_PXPDR0 << pinpos),
    234c:	5e 82       	LD.W      R5, [SP]
    234e:	31 10       	MOV       R3, #1
    2350:	6b db       	LSL       R5, R3, R5
..\src\kf32a9k1xxx_gpio.c:163
            					tmpreg);

            /*----------- 设置GPIOx_PDR寄存器 -----------*/
            /* 根据结构体成员m_PullDown，设置PXPDR位域 */
            tmpreg = (((uint32_t)gpioInitStruct->m_PullDown) << pinpos);
            GPIOx->PDR = SFR_Config(GPIOx->PDR,
    2352:	55 68       	NOT       R5, R5
    2354:	04 58       	MOV       R0, R4
    2356:	25 58       	MOV       R1, R5
    2358:	03 0a       	LD.W      R2, [SP + #3]
    235a:	11 45       	LD        R5, [PC + #17]        ;->0x239c  :=0x1fa0
    235c:	05 5c       	LJMP      R5
    235e:	80 58       	MOV       R4, R0
    2360:	04 0d       	LD.W      R5, [SP + #4]
    2362:	ec a0       	ST.W      [R5 + #3], R4
..\src\kf32a9k1xxx_gpio.c:113
    CHECK_RESTRICTION(CHECK_GPIO_SPEED(gpioInitStruct->m_Speed));
    CHECK_RESTRICTION(CHECK_GPIO_PU(gpioInitStruct->m_PullUp));
    CHECK_RESTRICTION(CHECK_GPIO_PD(gpioInitStruct->m_PullDown));

    /* 配置一个引脚信息 */
    for(pinpos = 0x00; pinpos < 0x10; pinpos++)
    2364:	5e 82       	LD.W      R5, [SP]
    2366:	6d c0       	ADD       R5, R5, #1
    2368:	e5 85       	ST.W      [SP], R5
    236a:	5e 82       	LD.W      R5, [SP]
    236c:	5f 38       	CMP       R5, #15
    236e:	02 f8       	JHI       $+2                   ;->0x2372
    2370:	73 07       	SJMP      $-141                 ;->0x2256
..\src\kf32a9k1xxx_gpio.c:172
    	else
    	{
    		;
    	}
    }
}
    2372:	e8 29       	ADD       SP, #24
    2374:	0d 5d       	POP       LR
    2376:	1d 5c       	JMP       LR
    2378:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    237c:	40 00 00 50 	.long     0x50000040 ->1342177344 
    2380:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xc380
    2384:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    2388:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    238c:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    2390:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    2394:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    2398:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    239c:	a0 1f 00 00 	.long     0x00001fa0 ->000008096  [!!!@2@:MOV       R10, #240	@@: NOP      

000023a0 <GPIO_Struct_Init>:
GPIO_Struct_Init():
..\src\kf32a9k1xxx_gpio.c:181
  * 输入  gpioInitStruct: 指向待初始化的结构体指针。
  * 返回  无。
  */
void
GPIO_Struct_Init (GPIO_InitTypeDef* gpioInitStruct)
{
    23a0:	e4 30       	SUB       SP, #4
    23a2:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_gpio.c:183
    /* 初始化 GPIO端口掩码 */
    gpioInitStruct->m_Pin  = GPIO_PIN_MASK_All;
    23a4:	5e 82       	LD.W      R5, [SP]
    23a6:	0a 44       	LD        R4, [PC + #10]        ;->0x23cc  :=0xffff
    23a8:	54 85       	ST.W      [R5], R4
..\src\kf32a9k1xxx_gpio.c:186

    /* 初始化 GPIO输出模式 */
    gpioInitStruct->m_Mode = GPIO_MODE_AN;
    23aa:	5e 82       	LD.W      R5, [SP]
    23ac:	43 10       	MOV       R4, #3
    23ae:	6c a0       	ST.W      [R5 + #1], R4
..\src\kf32a9k1xxx_gpio.c:189

    /* 初始化 GPIO输出速度 */
    gpioInitStruct->m_Speed = GPIO_LOW_SPEED;
    23b0:	5e 82       	LD.W      R5, [SP]
    23b2:	40 10       	MOV       R4, #0
    23b4:	ac a0       	ST.W      [R5 + #2], R4
..\src\kf32a9k1xxx_gpio.c:192

    /* 初始化 GPIO开漏控制 */
    gpioInitStruct->m_OpenDrain = GPIO_POD_PP;
    23b6:	5e 82       	LD.W      R5, [SP]
    23b8:	40 10       	MOV       R4, #0
    23ba:	ec a0       	ST.W      [R5 + #3], R4
..\src\kf32a9k1xxx_gpio.c:195

    /* 初始化 GPIO上拉配置 */
    gpioInitStruct->m_PullUp = GPIO_NOPULL;
    23bc:	5e 82       	LD.W      R5, [SP]
    23be:	40 10       	MOV       R4, #0
    23c0:	2c a1       	ST.W      [R5 + #4], R4
..\src\kf32a9k1xxx_gpio.c:198

    /* 初始化 GPIO下拉配置 */
    gpioInitStruct->m_PullDown = GPIO_NOPULL;
    23c2:	5e 82       	LD.W      R5, [SP]
    23c4:	40 10       	MOV       R4, #0
    23c6:	6c a1       	ST.W      [R5 + #5], R4
..\src\kf32a9k1xxx_gpio.c:199
}
    23c8:	e4 28       	ADD       SP, #4
    23ca:	1d 5c       	JMP       LR
    23cc:	ff ff 00 00 	.long     0x0000ffff ->000065535 

000023d0 <GPIO_Write_Mode_Bits>:
GPIO_Write_Mode_Bits():
..\src\kf32a9k1xxx_gpio.c:400
  * 返回  无。
  */
void
GPIO_Write_Mode_Bits (GPIO_SFRmap* GPIOx,
					uint16_t GpioPin, GPIOMode_TypeDef NewState)
{
    23d0:	2d 5d       	PUSH      LR
    23d2:	e4 31       	SUB       SP, #20
    23d4:	02 20       	ST.W      [SP + #2], R0
    23d6:	a1 58       	MOV       R5, R1
    23d8:	04 22       	ST.W      [SP + #4], R2
    23da:	a6 e2       	ST.H      [SP + #6], R5
..\src\kf32a9k1xxx_gpio.c:401
	uint32_t pinpos = 0x00;
    23dc:	50 10       	MOV       R5, #0
    23de:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_gpio.c:402
	uint32_t tmpreg = 0x00;
    23e0:	50 10       	MOV       R5, #0
    23e2:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:405

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    23e4:	02 0c       	LD.W      R4, [SP + #2]
    23e6:	34 45       	LD        R5, [PC + #52]        ;->0x24b4  :=0x50000000
    23e8:	45 70       	CMP       R4, R5
    23ea:	1d f0       	JZ        $+29                  ;->0x2424
    23ec:	02 0c       	LD.W      R4, [SP + #2]
    23ee:	33 45       	LD        R5, [PC + #51]        ;->0x24b8  :=0x50000040
    23f0:	45 70       	CMP       R4, R5
    23f2:	19 f0       	JZ        $+25                  ;->0x2424
    23f4:	02 0c       	LD.W      R4, [SP + #2]
    23f6:	32 45       	LD        R5, [PC + #50]        ;->0x24bc  :=0x50000080
    23f8:	45 70       	CMP       R4, R5
    23fa:	15 f0       	JZ        $+21                  ;->0x2424
    23fc:	02 0c       	LD.W      R4, [SP + #2]
    23fe:	31 45       	LD        R5, [PC + #49]        ;->0x24c0  :=0x500000c0
    2400:	45 70       	CMP       R4, R5
    2402:	11 f0       	JZ        $+17                  ;->0x2424
    2404:	02 0c       	LD.W      R4, [SP + #2]
    2406:	30 45       	LD        R5, [PC + #48]        ;->0x24c4  :=0x50000100
    2408:	45 70       	CMP       R4, R5
    240a:	0d f0       	JZ        $+13                  ;->0x2424
    240c:	02 0c       	LD.W      R4, [SP + #2]
    240e:	2f 45       	LD        R5, [PC + #47]        ;->0x24c8  :=0x50000140
    2410:	45 70       	CMP       R4, R5
    2412:	09 f0       	JZ        $+9                   ;->0x2424
    2414:	02 0c       	LD.W      R4, [SP + #2]
    2416:	2e 45       	LD        R5, [PC + #46]        ;->0x24cc  :=0x50000180
    2418:	45 70       	CMP       R4, R5
    241a:	05 f0       	JZ        $+5                   ;->0x2424
    241c:	02 0c       	LD.W      R4, [SP + #2]
    241e:	2d 45       	LD        R5, [PC + #45]        ;->0x24d0  :=0x500001c0
    2420:	45 70       	CMP       R4, R5
    2422:	03 f1       	JNZ       $+3                   ;->0x2428
    2424:	51 10       	MOV       R5, #1
    2426:	02 04       	SJMP      $+2                   ;->0x242a
    2428:	50 10       	MOV       R5, #0
    242a:	05 58       	MOV       R0, R5
    242c:	2a 45       	LD        R5, [PC + #42]        ;->0x24d4  :=0x4ba6
    242e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:406
	CHECK_RESTRICTION(CHECK_GPIO_PIN_MASK(GpioPin));
    2430:	a6 e0       	LD.H      R5, [SP + #6]
    2432:	30 11       	MOV       R3, #16
    2434:	e5 de       	ASR       R4, R5, R3
    2436:	51 10       	MOV       R5, #1
    2438:	40 38       	CMP       R4, #0
    243a:	02 f0       	JZ        $+2                   ;->0x243e
    243c:	50 10       	MOV       R5, #0
    243e:	55 d1       	ZXT.B     R5, R5
    2440:	05 58       	MOV       R0, R5
    2442:	25 45       	LD        R5, [PC + #37]        ;->0x24d4  :=0x4ba6
    2444:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:407
	CHECK_RESTRICTION(CHECK_GPIO_MODE(NewState));
    2446:	04 0d       	LD.W      R5, [SP + #4]
    2448:	50 38       	CMP       R5, #0
    244a:	0a f0       	JZ        $+10                  ;->0x245e
    244c:	04 0d       	LD.W      R5, [SP + #4]
    244e:	51 38       	CMP       R5, #1
    2450:	07 f0       	JZ        $+7                   ;->0x245e
    2452:	04 0d       	LD.W      R5, [SP + #4]
    2454:	52 38       	CMP       R5, #2
    2456:	04 f0       	JZ        $+4                   ;->0x245e
    2458:	04 0d       	LD.W      R5, [SP + #4]
    245a:	53 38       	CMP       R5, #3
    245c:	03 f1       	JNZ       $+3                   ;->0x2462
    245e:	51 10       	MOV       R5, #1
    2460:	02 04       	SJMP      $+2                   ;->0x2464
    2462:	50 10       	MOV       R5, #0
    2464:	05 58       	MOV       R0, R5
    2466:	1c 45       	LD        R5, [PC + #28]        ;->0x24d4  :=0x4ba6
    2468:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:410

	/*----------- 获取GPIOx_PMOD寄存器 -----------*/
	tmpreg = GPIOx->PMOD;
    246a:	02 0d       	LD.W      R5, [SP + #2]
    246c:	6d 99       	LD.W      R5, [R5 + #5]
    246e:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:411
	while(GpioPin)
    2470:	19 04       	SJMP      $+25                  ;->0x24a2
..\src\kf32a9k1xxx_gpio.c:413
	{
		if(GpioPin & (uint16_t)0x01)
    2472:	86 e0       	LD.H      R4, [SP + #6]
    2474:	51 10       	MOV       R5, #1
    2476:	6c d5       	ANL       R5, R4, R5
    2478:	50 38       	CMP       R5, #0
    247a:	0e f0       	JZ        $+14                  ;->0x2496
..\src\kf32a9k1xxx_gpio.c:416
		{
            /* 记录配置信息 */
            tmpreg &= ~(GPIO_PMOD_PXPMD0 << pinpos);
    247c:	5e 82       	LD.W      R5, [SP]
    247e:	43 10       	MOV       R4, #3
    2480:	6c db       	LSL       R5, R4, R5
    2482:	55 68       	NOT       R5, R5
    2484:	01 0c       	LD.W      R4, [SP + #1]
    2486:	6c d5       	ANL       R5, R4, R5
    2488:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:417
            tmpreg |= (uint32_t)NewState << pinpos;
    248a:	5e 82       	LD.W      R5, [SP]
    248c:	04 0c       	LD.W      R4, [SP + #4]
    248e:	6c db       	LSL       R5, R4, R5
    2490:	01 0c       	LD.W      R4, [SP + #1]
    2492:	6c d7       	ORL       R5, R4, R5
    2494:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:423
		}
		else
		{
			;
		}
		GpioPin >>= 1;
    2496:	a6 e0       	LD.H      R5, [SP + #6]
    2498:	29 7c       	LSR       R5, #1
    249a:	a6 e2       	ST.H      [SP + #6], R5
..\src\kf32a9k1xxx_gpio.c:424
		pinpos += 2;
    249c:	5e 82       	LD.W      R5, [SP]
    249e:	ad c0       	ADD       R5, R5, #2
    24a0:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_gpio.c:411
	CHECK_RESTRICTION(CHECK_GPIO_PIN_MASK(GpioPin));
	CHECK_RESTRICTION(CHECK_GPIO_MODE(NewState));

	/*----------- 获取GPIOx_PMOD寄存器 -----------*/
	tmpreg = GPIOx->PMOD;
	while(GpioPin)
    24a2:	a6 e0       	LD.H      R5, [SP + #6]
    24a4:	50 38       	CMP       R5, #0
    24a6:	e6 f1       	JNZ       $-26                  ;->0x2472
..\src\kf32a9k1xxx_gpio.c:428
		GpioPin >>= 1;
		pinpos += 2;
	}

    /*----------- 配置GPIOx_PMOD寄存器 -----------*/
    GPIOx->PMOD = tmpreg;
    24a8:	02 0d       	LD.W      R5, [SP + #2]
    24aa:	01 0c       	LD.W      R4, [SP + #1]
    24ac:	6c a1       	ST.W      [R5 + #5], R4
..\src\kf32a9k1xxx_gpio.c:429
}
    24ae:	e4 29       	ADD       SP, #20
    24b0:	0d 5d       	POP       LR
    24b2:	1d 5c       	JMP       LR
    24b4:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    24b8:	40 00 00 50 	.long     0x50000040 ->1342177344 
    24bc:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xc4bc
    24c0:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    24c4:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    24c8:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    24cc:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    24d0:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    24d4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

000024d8 <GPIO_Read_Input_Data_Bit>:
GPIO_Read_Input_Data_Bit():
..\src\kf32a9k1xxx_gpio.c:528
  *       GpioPin: 指定端口引脚，取值为GPIO_PIN_MASK_0~GPIO_PIN_MASK_15中的一个。
  * 返回  指定引脚的信息，1：逻辑高电平，0：逻辑低电平。
  */
BitAction
GPIO_Read_Input_Data_Bit (GPIO_SFRmap* GPIOx, uint16_t GpioPin)
{
    24d8:	2d 5d       	PUSH      LR
    24da:	ec 30       	SUB       SP, #12
    24dc:	01 20       	ST.W      [SP + #1], R0
    24de:	a1 58       	MOV       R5, R1
    24e0:	a4 e2       	ST.H      [SP + #4], R5
..\src\kf32a9k1xxx_gpio.c:529
    uint32_t tmpreg = 0;
    24e2:	50 10       	MOV       R5, #0
    24e4:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_gpio.c:532

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    24e6:	01 0c       	LD.W      R4, [SP + #1]
    24e8:	20 45       	LD        R5, [PC + #32]        ;->0x2568  :=0x50000000
    24ea:	45 70       	CMP       R4, R5
    24ec:	1d f0       	JZ        $+29                  ;->0x2526
    24ee:	01 0c       	LD.W      R4, [SP + #1]
    24f0:	1f 45       	LD        R5, [PC + #31]        ;->0x256c  :=0x50000040
    24f2:	45 70       	CMP       R4, R5
    24f4:	19 f0       	JZ        $+25                  ;->0x2526
    24f6:	01 0c       	LD.W      R4, [SP + #1]
    24f8:	1e 45       	LD        R5, [PC + #30]        ;->0x2570  :=0x50000080
    24fa:	45 70       	CMP       R4, R5
    24fc:	15 f0       	JZ        $+21                  ;->0x2526
    24fe:	01 0c       	LD.W      R4, [SP + #1]
    2500:	1d 45       	LD        R5, [PC + #29]        ;->0x2574  :=0x500000c0
    2502:	45 70       	CMP       R4, R5
    2504:	11 f0       	JZ        $+17                  ;->0x2526
    2506:	01 0c       	LD.W      R4, [SP + #1]
    2508:	1c 45       	LD        R5, [PC + #28]        ;->0x2578  :=0x50000100
    250a:	45 70       	CMP       R4, R5
    250c:	0d f0       	JZ        $+13                  ;->0x2526
    250e:	01 0c       	LD.W      R4, [SP + #1]
    2510:	1b 45       	LD        R5, [PC + #27]        ;->0x257c  :=0x50000140
    2512:	45 70       	CMP       R4, R5
    2514:	09 f0       	JZ        $+9                   ;->0x2526
    2516:	01 0c       	LD.W      R4, [SP + #1]
    2518:	1a 45       	LD        R5, [PC + #26]        ;->0x2580  :=0x50000180
    251a:	45 70       	CMP       R4, R5
    251c:	05 f0       	JZ        $+5                   ;->0x2526
    251e:	01 0c       	LD.W      R4, [SP + #1]
    2520:	19 45       	LD        R5, [PC + #25]        ;->0x2584  :=0x500001c0
    2522:	45 70       	CMP       R4, R5
    2524:	03 f1       	JNZ       $+3                   ;->0x252a
    2526:	51 10       	MOV       R5, #1
    2528:	02 04       	SJMP      $+2                   ;->0x252c
    252a:	50 10       	MOV       R5, #0
    252c:	05 58       	MOV       R0, R5
    252e:	17 45       	LD        R5, [PC + #23]        ;->0x2588  :=0x4ba6
    2530:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:533
    CHECK_RESTRICTION(CHECK_GPIO_PIN_MASK(GpioPin));
    2532:	a4 e0       	LD.H      R5, [SP + #4]
    2534:	30 11       	MOV       R3, #16
    2536:	e5 de       	ASR       R4, R5, R3
    2538:	51 10       	MOV       R5, #1
    253a:	40 38       	CMP       R4, #0
    253c:	02 f0       	JZ        $+2                   ;->0x2540
    253e:	50 10       	MOV       R5, #0
    2540:	55 d1       	ZXT.B     R5, R5
    2542:	05 58       	MOV       R0, R5
    2544:	11 45       	LD        R5, [PC + #17]        ;->0x2588  :=0x4ba6
    2546:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:536

    /*---------------- 获取GPIOx_PIR寄存器PXPIRy位 ----------------*/
    tmpreg = (uint32_t)GpioPin;
    2548:	a4 e0       	LD.H      R5, [SP + #4]
    254a:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_gpio.c:537
    if ((GPIOx->PIR & tmpreg) != Bit_RESET)
    254c:	01 0d       	LD.W      R5, [SP + #1]
    254e:	45 82       	LD.W      R4, [R5]
    2550:	5e 82       	LD.W      R5, [SP]
    2552:	6c d5       	ANL       R5, R4, R5
    2554:	50 38       	CMP       R5, #0
    2556:	03 f0       	JZ        $+3                   ;->0x255c
..\src\kf32a9k1xxx_gpio.c:540
    {
        /* 逻辑高电平 */
        return Bit_SET;
    2558:	51 10       	MOV       R5, #1
    255a:	02 04       	SJMP      $+2                   ;->0x255e
..\src\kf32a9k1xxx_gpio.c:545
    }
    else
    {
        /* 逻辑低电平 */
        return Bit_RESET;
    255c:	50 10       	MOV       R5, #0
..\src\kf32a9k1xxx_gpio.c:547
    }
}
    255e:	05 58       	MOV       R0, R5
    2560:	ec 28       	ADD       SP, #12
    2562:	0d 5d       	POP       LR
    2564:	1d 5c       	JMP       LR
    2566:	00 00       	NOP      NOP      
    2568:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    256c:	40 00 00 50 	.long     0x50000040 ->1342177344 
    2570:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xc570
    2574:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    2578:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    257c:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    2580:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    2584:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    2588:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

0000258c <GPIO_Pin_RMP_Config>:
GPIO_Pin_RMP_Config():
..\src\kf32a9k1xxx_gpio.c:700
  *
  * 返回  无。
  */
void
GPIO_Pin_RMP_Config(GPIO_SFRmap* GPIOx, uint16_t GpioPinNum, uint32_t PinRemap)
{
    258c:	2d 5d       	PUSH      LR
    258e:	e8 31       	SUB       SP, #24
    2590:	03 20       	ST.W      [SP + #3], R0
    2592:	a1 58       	MOV       R5, R1
    2594:	05 22       	ST.W      [SP + #5], R2
    2596:	a8 e2       	ST.H      [SP + #8], R5
..\src\kf32a9k1xxx_gpio.c:701
    uint32_t tmask = 0x00;
    2598:	50 10       	MOV       R5, #0
    259a:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_gpio.c:702
    uint32_t tmpreg = 0x00;
    259c:	50 10       	MOV       R5, #0
    259e:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:703
    uint32_t PageNum = (PinRemap&0x300)>>8;
    25a0:	05 0c       	LD.W      R4, [SP + #5]
    25a2:	67 45       	LD        R5, [PC + #103]       ;->0x273c  :=0x300
    25a4:	6c d5       	ANL       R5, R4, R5
    25a6:	a8 7c       	LSR       R5, #8
    25a8:	02 25       	ST.W      [SP + #2], R5
..\src\kf32a9k1xxx_gpio.c:706

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    25aa:	03 0c       	LD.W      R4, [SP + #3]
    25ac:	65 45       	LD        R5, [PC + #101]       ;->0x2740  :=0x50000000
    25ae:	45 70       	CMP       R4, R5
    25b0:	1d f0       	JZ        $+29                  ;->0x25ea
    25b2:	03 0c       	LD.W      R4, [SP + #3]
    25b4:	64 45       	LD        R5, [PC + #100]       ;->0x2744  :=0x50000040
    25b6:	45 70       	CMP       R4, R5
    25b8:	19 f0       	JZ        $+25                  ;->0x25ea
    25ba:	03 0c       	LD.W      R4, [SP + #3]
    25bc:	63 45       	LD        R5, [PC + #99]        ;->0x2748  :=0x50000080
    25be:	45 70       	CMP       R4, R5
    25c0:	15 f0       	JZ        $+21                  ;->0x25ea
    25c2:	03 0c       	LD.W      R4, [SP + #3]
    25c4:	62 45       	LD        R5, [PC + #98]        ;->0x274c  :=0x500000c0
    25c6:	45 70       	CMP       R4, R5
    25c8:	11 f0       	JZ        $+17                  ;->0x25ea
    25ca:	03 0c       	LD.W      R4, [SP + #3]
    25cc:	61 45       	LD        R5, [PC + #97]        ;->0x2750  :=0x50000100
    25ce:	45 70       	CMP       R4, R5
    25d0:	0d f0       	JZ        $+13                  ;->0x25ea
    25d2:	03 0c       	LD.W      R4, [SP + #3]
    25d4:	60 45       	LD        R5, [PC + #96]        ;->0x2754  :=0x50000140
    25d6:	45 70       	CMP       R4, R5
    25d8:	09 f0       	JZ        $+9                   ;->0x25ea
    25da:	03 0c       	LD.W      R4, [SP + #3]
    25dc:	5f 45       	LD        R5, [PC + #95]        ;->0x2758  :=0x50000180
    25de:	45 70       	CMP       R4, R5
    25e0:	05 f0       	JZ        $+5                   ;->0x25ea
    25e2:	03 0c       	LD.W      R4, [SP + #3]
    25e4:	5e 45       	LD        R5, [PC + #94]        ;->0x275c  :=0x500001c0
    25e6:	45 70       	CMP       R4, R5
    25e8:	03 f1       	JNZ       $+3                   ;->0x25ee
    25ea:	51 10       	MOV       R5, #1
    25ec:	02 04       	SJMP      $+2                   ;->0x25f0
    25ee:	50 10       	MOV       R5, #0
    25f0:	05 58       	MOV       R0, R5
    25f2:	5c 45       	LD        R5, [PC + #92]        ;->0x2760  :=0x4ba6
    25f4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:707
    CHECK_RESTRICTION(CHECK_GPIO_PIN_NUM(GpioPinNum));
    25f6:	51 10       	MOV       R5, #1
    25f8:	88 e0       	LD.H      R4, [SP + #8]
    25fa:	4f 38       	CMP       R4, #15
    25fc:	02 f9       	JLS       $+2                   ;->0x2600
    25fe:	50 10       	MOV       R5, #0
    2600:	55 d1       	ZXT.B     R5, R5
    2602:	05 58       	MOV       R0, R5
    2604:	57 45       	LD        R5, [PC + #87]        ;->0x2760  :=0x4ba6
    2606:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:708
    switch(PageNum)
    2608:	02 0d       	LD.W      R5, [SP + #2]
    260a:	52 38       	CMP       R5, #2
    260c:	15 f0       	JZ        $+21                  ;->0x2636
    260e:	53 38       	CMP       R5, #3
    2610:	22 f0       	JZ        $+34                  ;->0x2654
    2612:	51 38       	CMP       R5, #1
    2614:	2f f1       	JNZ       $+47                  ;->0x2672
..\src\kf32a9k1xxx_gpio.c:711
    {
    case 0x01:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE1_REMAP(PinRemap));
    2616:	05 0c       	LD.W      R4, [SP + #5]
    2618:	5f 1f       	MOV       R5, #255
    261a:	50 29       	ADD       R5, #16
    261c:	45 70       	CMP       R4, R5
    261e:	07 f8       	JHI       $+7                   ;->0x262c
    2620:	05 0c       	LD.W      R4, [SP + #5]
    2622:	5f 1f       	MOV       R5, #255
    2624:	45 70       	CMP       R4, R5
    2626:	03 f9       	JLS       $+3                   ;->0x262c
    2628:	51 10       	MOV       R5, #1
    262a:	02 04       	SJMP      $+2                   ;->0x262e
    262c:	50 10       	MOV       R5, #0
    262e:	05 58       	MOV       R0, R5
    2630:	4c 45       	LD        R5, [PC + #76]        ;->0x2760  :=0x4ba6
    2632:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:712
    	break;
    2634:	20 04       	SJMP      $+32                  ;->0x2674
..\src\kf32a9k1xxx_gpio.c:714
    case 0x02:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE2_REMAP(PinRemap));
    2636:	05 0c       	LD.W      R4, [SP + #5]
    2638:	4b 45       	LD        R5, [PC + #75]        ;->0x2764  :=0x20c
    263a:	45 70       	CMP       R4, R5
    263c:	07 f8       	JHI       $+7                   ;->0x264a
    263e:	05 0c       	LD.W      R4, [SP + #5]
    2640:	4a 45       	LD        R5, [PC + #74]        ;->0x2768  :=0x1ff
    2642:	45 70       	CMP       R4, R5
    2644:	03 f9       	JLS       $+3                   ;->0x264a
    2646:	51 10       	MOV       R5, #1
    2648:	02 04       	SJMP      $+2                   ;->0x264c
    264a:	50 10       	MOV       R5, #0
    264c:	05 58       	MOV       R0, R5
    264e:	45 45       	LD        R5, [PC + #69]        ;->0x2760  :=0x4ba6
    2650:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:715
    	break;
    2652:	11 04       	SJMP      $+17                  ;->0x2674
..\src\kf32a9k1xxx_gpio.c:717
    case 0x03:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE3_REMAP(PinRemap));
    2654:	05 0c       	LD.W      R4, [SP + #5]
    2656:	46 45       	LD        R5, [PC + #70]        ;->0x276c  :=0x30e
    2658:	45 70       	CMP       R4, R5
    265a:	07 f8       	JHI       $+7                   ;->0x2668
    265c:	05 0c       	LD.W      R4, [SP + #5]
    265e:	45 45       	LD        R5, [PC + #69]        ;->0x2770  :=0x2ff
    2660:	45 70       	CMP       R4, R5
    2662:	03 f9       	JLS       $+3                   ;->0x2668
    2664:	51 10       	MOV       R5, #1
    2666:	02 04       	SJMP      $+2                   ;->0x266a
    2668:	50 10       	MOV       R5, #0
    266a:	05 58       	MOV       R0, R5
    266c:	3d 45       	LD        R5, [PC + #61]        ;->0x2760  :=0x4ba6
    266e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:718
    	break;
    2670:	02 04       	SJMP      $+2                   ;->0x2674
..\src\kf32a9k1xxx_gpio.c:719
    default:break;
    2672:	00 00       	NOP      NOP      
..\src\kf32a9k1xxx_gpio.c:723
    }

    /* 配置GPIOx_RMP_MSB寄存器 */
    tmask = ((uint32_t)1 << (GpioPinNum+16)) + ((uint32_t)1 << GpioPinNum);
    2674:	a8 e0       	LD.H      R5, [SP + #8]
    2676:	30 11       	MOV       R3, #16
    2678:	e5 c2       	ADD       R4, R5, R3
    267a:	51 10       	MOV       R5, #1
    267c:	25 db       	LSL       R4, R5, R4
    267e:	68 e0       	LD.H      R3, [SP + #8]
    2680:	51 10       	MOV       R5, #1
    2682:	ed da       	LSL       R5, R5, R3
    2684:	6c c3       	ADD       R5, R4, R5
    2686:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_gpio.c:724
    tmpreg = ((uint32_t)((PageNum-1)/2) << (GpioPinNum+16)) + ((uint32_t)((PageNum-1)%2) << GpioPinNum);
    2688:	02 0d       	LD.W      R5, [SP + #2]
    268a:	6d cc       	SUB       R5, R5, #1
    268c:	31 10       	MOV       R3, #1
    268e:	e5 dc       	LSR       R4, R5, R3
    2690:	a8 e0       	LD.H      R5, [SP + #8]
    2692:	50 29       	ADD       R5, #16
    2694:	64 db       	LSL       R4, R4, R5
    2696:	02 0d       	LD.W      R5, [SP + #2]
    2698:	5d cc       	SUB       R3, R5, #1
    269a:	51 10       	MOV       R5, #1
    269c:	5b d5       	ANL       R3, R3, R5
    269e:	a8 e0       	LD.H      R5, [SP + #8]
    26a0:	6b db       	LSL       R5, R3, R5
    26a2:	6c c3       	ADD       R5, R4, R5
    26a4:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:725
    GPIOx->RMP_MSB = SFR_Config(GPIOx->RMP_MSB,~tmask,tmpreg);
    26a6:	03 0d       	LD.W      R5, [SP + #3]
    26a8:	65 9b       	LD.W      R4, [R5 + #13]
    26aa:	5e 82       	LD.W      R5, [SP]
    26ac:	55 68       	NOT       R5, R5
    26ae:	04 58       	MOV       R0, R4
    26b0:	25 58       	MOV       R1, R5
    26b2:	01 0a       	LD.W      R2, [SP + #1]
    26b4:	30 45       	LD        R5, [PC + #48]        ;->0x2774  :=0x1fa0
    26b6:	05 5c       	LJMP      R5
    26b8:	80 58       	MOV       R4, R0
    26ba:	03 0d       	LD.W      R5, [SP + #3]
    26bc:	6c a3       	ST.W      [R5 + #13], R4
..\src\kf32a9k1xxx_gpio.c:728

    /* 配置GPIOx_RMPH\L寄存器 */
    if(GpioPinNum <= GPIO_Pin_Num_7)
    26be:	a8 e0       	LD.H      R5, [SP + #8]
    26c0:	57 38       	CMP       R5, #7
    26c2:	1b f8       	JHI       $+27                  ;->0x26f8
..\src\kf32a9k1xxx_gpio.c:730
    {
    	tmask = 0xF << (GpioPinNum*4);
    26c4:	a8 e0       	LD.H      R5, [SP + #8]
    26c6:	32 10       	MOV       R3, #2
    26c8:	e5 da       	LSL       R4, R5, R3
    26ca:	5f 10       	MOV       R5, #15
    26cc:	2d db       	LSL       R5, R5, R4
    26ce:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_gpio.c:731
    	tmpreg = (PinRemap&0xF) << (GpioPinNum*4);
    26d0:	05 0c       	LD.W      R4, [SP + #5]
    26d2:	5f 10       	MOV       R5, #15
    26d4:	64 d5       	ANL       R4, R4, R5
    26d6:	a8 e0       	LD.H      R5, [SP + #8]
    26d8:	2a 7a       	LSL       R5, #2
    26da:	6c db       	LSL       R5, R4, R5
    26dc:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:732
    	GPIOx->RMP[0] = SFR_Config(GPIOx->RMP[0],~tmask,tmpreg);
    26de:	03 0d       	LD.W      R5, [SP + #3]
    26e0:	25 9a       	LD.W      R4, [R5 + #8]
    26e2:	5e 82       	LD.W      R5, [SP]
    26e4:	55 68       	NOT       R5, R5
    26e6:	04 58       	MOV       R0, R4
    26e8:	25 58       	MOV       R1, R5
    26ea:	01 0a       	LD.W      R2, [SP + #1]
    26ec:	22 45       	LD        R5, [PC + #34]        ;->0x2774  :=0x1fa0
    26ee:	05 5c       	LJMP      R5
    26f0:	80 58       	MOV       R4, R0
    26f2:	03 0d       	LD.W      R5, [SP + #3]
    26f4:	2c a2       	ST.W      [R5 + #8], R4
    26f6:	1f 04       	SJMP      $+31                  ;->0x2734
..\src\kf32a9k1xxx_gpio.c:734
    }
    else if(GpioPinNum <= GPIO_Pin_Num_15)
    26f8:	a8 e0       	LD.H      R5, [SP + #8]
    26fa:	5f 38       	CMP       R5, #15
    26fc:	1c f8       	JHI       $+28                  ;->0x2734
..\src\kf32a9k1xxx_gpio.c:736
    {
    	tmask = 0xF << ((GpioPinNum - 8)*4);
    26fe:	a8 e0       	LD.H      R5, [SP + #8]
    2700:	58 30       	SUB       R5, #8
    2702:	32 10       	MOV       R3, #2
    2704:	e5 da       	LSL       R4, R5, R3
    2706:	5f 10       	MOV       R5, #15
    2708:	2d db       	LSL       R5, R5, R4
    270a:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_gpio.c:737
    	tmpreg = (PinRemap&0xF) << ((GpioPinNum - 8)*4);
    270c:	05 0c       	LD.W      R4, [SP + #5]
    270e:	5f 10       	MOV       R5, #15
    2710:	64 d5       	ANL       R4, R4, R5
    2712:	a8 e0       	LD.H      R5, [SP + #8]
    2714:	58 30       	SUB       R5, #8
    2716:	2a 7a       	LSL       R5, #2
    2718:	6c db       	LSL       R5, R4, R5
    271a:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_gpio.c:738
    	GPIOx->RMP[1] = SFR_Config(GPIOx->RMP[1],~tmask,tmpreg);
    271c:	03 0d       	LD.W      R5, [SP + #3]
    271e:	65 9a       	LD.W      R4, [R5 + #9]
    2720:	5e 82       	LD.W      R5, [SP]
    2722:	55 68       	NOT       R5, R5
    2724:	04 58       	MOV       R0, R4
    2726:	25 58       	MOV       R1, R5
    2728:	01 0a       	LD.W      R2, [SP + #1]
    272a:	13 45       	LD        R5, [PC + #19]        ;->0x2774  :=0x1fa0
    272c:	05 5c       	LJMP      R5
    272e:	80 58       	MOV       R4, R0
    2730:	03 0d       	LD.W      R5, [SP + #3]
    2732:	6c a2       	ST.W      [R5 + #9], R4
..\src\kf32a9k1xxx_gpio.c:740
    }
}
    2734:	e8 29       	ADD       SP, #24
    2736:	0d 5d       	POP       LR
    2738:	1d 5c       	JMP       LR
    273a:	00 00       	NOP      NOP      
    273c:	00 03 00 00 	.long     0x00000300 ->000000768  [!!!@4@:JMP       $+0                   ;->0x273c
    2740:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    2744:	40 00 00 50 	.long     0x50000040 ->1342177344 
    2748:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xc748
    274c:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    2750:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    2754:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    2758:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    275c:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    2760:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2764:	0c 02 00 00 	.long     0x0000020c ->000000524  [!!!@2@:SVC      	@@: NOP      
    2768:	ff 01 00 00 	.long     0x000001ff ->000000511  [!!!@2@:CMN       PC, PC	@@: NOP      
    276c:	0e 03 00 00 	.long     0x0000030e ->000000782  [!!!@4@:JMP       $+917504              ;->0x1c276c
    2770:	ff 02 00 00 	.long     0x000002ff ->000000767  [!!!@2@:SVC      	@@: NOP      
    2774:	a0 1f 00 00 	.long     0x00001fa0 ->000008096  [!!!@2@:MOV       R10, #240	@@: NOP      

00002778 <SFR_Config>:
SFR_Config():
KF32A9K1XXX.h:13916
   -- 函数定义
   ---------------------------------------------------------------------------- */
/* 写特殊功能寄存器 */
static inline uint32_t
SFR_Config (uint32_t SfrMem, uint32_t SfrMask, uint32_t WriteVal)
{
    2778:	ec 30       	SUB       SP, #12
    277a:	e0 85       	ST.W      [SP], R0
    277c:	01 21       	ST.W      [SP + #1], R1
    277e:	02 22       	ST.W      [SP + #2], R2
KF32A9K1XXX.h:13917
    return ((SfrMem & SfrMask) | (WriteVal));
    2780:	5e 82       	LD.W      R5, [SP]
    2782:	01 0c       	LD.W      R4, [SP + #1]
    2784:	25 d5       	ANL       R4, R5, R4
    2786:	02 0d       	LD.W      R5, [SP + #2]
    2788:	6c d7       	ORL       R5, R4, R5
KF32A9K1XXX.h:13918
}
    278a:	05 58       	MOV       R0, R5
    278c:	ec 28       	ADD       SP, #12
    278e:	1d 5c       	JMP       LR

00002790 <INT_Stack_Align_Config>:
INT_Stack_Align_Config():
..\src\kf32a9k1xxx_int.c:95
  *                     INT_STACK_SINGLE_ALIGN: 中断自动堆栈使用单字对齐
  * 返回  无。
  */
void
INT_Stack_Align_Config (uint32_t StackAlign)
{
    2790:	2d 5d       	PUSH      LR
    2792:	e4 30       	SUB       SP, #4
    2794:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_int.c:96
    CHECK_RESTRICTION(CHECK_INT_STACK_ALIGN(StackAlign));
    2796:	5e 82       	LD.W      R5, [SP]
    2798:	50 38       	CMP       R5, #0
    279a:	05 f0       	JZ        $+5                   ;->0x27a4
    279c:	4e 82       	LD.W      R4, [SP]
    279e:	50 18       	MOV       R5, #128
    27a0:	45 70       	CMP       R4, R5
    27a2:	03 f1       	JNZ       $+3                   ;->0x27a8
    27a4:	51 10       	MOV       R5, #1
    27a6:	02 04       	SJMP      $+2                   ;->0x27aa
    27a8:	50 10       	MOV       R5, #0
    27aa:	05 58       	MOV       R0, R5
    27ac:	07 45       	LD        R5, [PC + #7]         ;->0x27c8  :=0x4ba6
    27ae:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:99

    /*---------------- 设置INT_CTL0寄存器DSALIGN位 ----------------*/
    if (StackAlign != INT_STACK_DOUBLE_ALIGN)
    27b0:	5e 82       	LD.W      R5, [SP]
    27b2:	50 38       	CMP       R5, #0
    27b4:	04 f0       	JZ        $+4                   ;->0x27bc
..\src\kf32a9k1xxx_int.c:102
    {
        /* 中断自动堆栈使用单字对齐 */
        SFR_SET_BIT_ASM(INT_CTL0, INT_CTL0_DSALIGN_POS);
    27b6:	06 45       	LD        R5, [PC + #6]         ;->0x27cc  :=0x40200000
    27b8:	2f 4c       	SET       [R5], #7
    27ba:	03 04       	SJMP      $+3                   ;->0x27c0
..\src\kf32a9k1xxx_int.c:107
    }
    else
    {
        /* 中断自动堆栈使用双字对齐 */
        SFR_CLR_BIT_ASM(INT_CTL0, INT_CTL0_DSALIGN_POS);
    27bc:	04 45       	LD        R5, [PC + #4]         ;->0x27cc  :=0x40200000
    27be:	2f 4e       	CLR       [R5], #7
..\src\kf32a9k1xxx_int.c:109
    }
}
    27c0:	e4 28       	ADD       SP, #4
    27c2:	0d 5d       	POP       LR
    27c4:	1d 5c       	JMP       LR
    27c6:	00 00       	NOP      NOP      
    27c8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    27cc:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x284c  :=0x10510c02

000027d0 <INT_All_Enable>:
INT_All_Enable():
..\src\kf32a9k1xxx_int.c:226
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
INT_All_Enable (FunctionalState NewState)
{
    27d0:	2d 5d       	PUSH      LR
    27d2:	e4 30       	SUB       SP, #4
    27d4:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_int.c:228
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    27d6:	5e 82       	LD.W      R5, [SP]
    27d8:	50 38       	CMP       R5, #0
    27da:	04 f0       	JZ        $+4                   ;->0x27e2
    27dc:	5e 82       	LD.W      R5, [SP]
    27de:	51 38       	CMP       R5, #1
    27e0:	03 f1       	JNZ       $+3                   ;->0x27e6
    27e2:	51 10       	MOV       R5, #1
    27e4:	02 04       	SJMP      $+2                   ;->0x27e8
    27e6:	50 10       	MOV       R5, #0
    27e8:	05 58       	MOV       R0, R5
    27ea:	07 45       	LD        R5, [PC + #7]         ;->0x2804  :=0x4ba6
    27ec:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:231

    /*---------------- 设置INT_CTL0寄存器AIE位 ----------------*/
    if (NewState != FALSE)
    27ee:	5e 82       	LD.W      R5, [SP]
    27f0:	50 38       	CMP       R5, #0
    27f2:	04 f0       	JZ        $+4                   ;->0x27fa
..\src\kf32a9k1xxx_int.c:234
    {
        /* 全局可屏蔽中断使能 */
        SFR_SET_BIT_ASM(INT_CTL0, INT_CTL0_AIE_POS);
    27f4:	05 45       	LD        R5, [PC + #5]         ;->0x2808  :=0x40200000
    27f6:	28 4c       	SET       [R5], #0
    27f8:	03 04       	SJMP      $+3                   ;->0x27fe
..\src\kf32a9k1xxx_int.c:239
    }
    else
    {
        /* 全局可屏蔽中断禁止 */
        SFR_CLR_BIT_ASM(INT_CTL0, INT_CTL0_AIE_POS);
    27fa:	04 45       	LD        R5, [PC + #4]         ;->0x2808  :=0x40200000
    27fc:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_int.c:241
    }
}
    27fe:	e4 28       	ADD       SP, #4
    2800:	0d 5d       	POP       LR
    2802:	1d 5c       	JMP       LR
    2804:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2808:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x2888  :=0xc033150

0000280c <INT_Interrupt_Enable>:
INT_Interrupt_Enable():
..\src\kf32a9k1xxx_int.c:254
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
INT_Interrupt_Enable (InterruptIndex Peripheral, FunctionalState NewState)
{
    280c:	81 5f       	PUSH      {R6,LR}
    280e:	e0 31       	SUB       SP, #16
    2810:	02 20       	ST.W      [SP + #2], R0
    2812:	03 21       	ST.W      [SP + #3], R1
..\src\kf32a9k1xxx_int.c:255
	uint32_t tmask = 0x00;
    2814:	50 10       	MOV       R5, #0
    2816:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:256
	uint32_t tmpreg = 0x00;
    2818:	50 10       	MOV       R5, #0
    281a:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_int.c:259

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    281c:	51 10       	MOV       R5, #1
    281e:	02 0c       	LD.W      R4, [SP + #2]
    2820:	4f 3c       	CMP       R4, #79
    2822:	02 f9       	JLS       $+2                   ;->0x2826
    2824:	50 10       	MOV       R5, #0
    2826:	55 d1       	ZXT.B     R5, R5
    2828:	05 58       	MOV       R0, R5
    282a:	2f 45       	LD        R5, [PC + #47]        ;->0x28e4  :=0x4ba6
    282c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:260
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    282e:	03 0d       	LD.W      R5, [SP + #3]
    2830:	50 38       	CMP       R5, #0
    2832:	04 f0       	JZ        $+4                   ;->0x283a
    2834:	03 0d       	LD.W      R5, [SP + #3]
    2836:	51 38       	CMP       R5, #1
    2838:	03 f1       	JNZ       $+3                   ;->0x283e
    283a:	51 10       	MOV       R5, #1
    283c:	02 04       	SJMP      $+2                   ;->0x2840
    283e:	50 10       	MOV       R5, #0
    2840:	05 58       	MOV       R0, R5
    2842:	29 45       	LD        R5, [PC + #41]        ;->0x28e4  :=0x4ba6
    2844:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:262

    if(Peripheral <= INT_SysTick)
    2846:	02 0d       	LD.W      R5, [SP + #2]
    2848:	5f 38       	CMP       R5, #15
    284a:	16 f8       	JHI       $+22                  ;->0x2876
..\src\kf32a9k1xxx_int.c:265
    {
    	/*---------------- 设置INT_EIE0寄存器 ----------------*/
    	tmask = ((uint32_t)1 << Peripheral);
    284c:	02 0c       	LD.W      R4, [SP + #2]
    284e:	51 10       	MOV       R5, #1
    2850:	2d db       	LSL       R5, R5, R4
    2852:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:266
    	tmpreg = ((uint32_t)NewState << Peripheral);
    2854:	02 0d       	LD.W      R5, [SP + #2]
    2856:	03 0c       	LD.W      R4, [SP + #3]
    2858:	6c db       	LSL       R5, R4, R5
    285a:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_int.c:267
    	INT_EIE0 = SFR_Config(INT_EIE0, ~tmask, tmpreg);
    285c:	23 46       	LD        R6, [PC + #35]        ;->0x28e8  :=0x40200000
    285e:	23 45       	LD        R5, [PC + #35]        ;->0x28e8  :=0x40200000
    2860:	65 98       	LD.W      R4, [R5 + #1]
    2862:	5e 82       	LD.W      R5, [SP]
    2864:	55 68       	NOT       R5, R5
    2866:	04 58       	MOV       R0, R4
    2868:	25 58       	MOV       R1, R5
    286a:	01 0a       	LD.W      R2, [SP + #1]
    286c:	20 45       	LD        R5, [PC + #32]        ;->0x28ec  :=0x2778
    286e:	05 5c       	LJMP      R5
    2870:	a0 58       	MOV       R5, R0
    2872:	75 a0       	ST.W      [R6 + #1], R5
    2874:	34 04       	SJMP      $+52                  ;->0x28dc
..\src\kf32a9k1xxx_int.c:269
    }
    else if(Peripheral <= INT_SPI1)
    2876:	02 0d       	LD.W      R5, [SP + #2]
    2878:	5f 3a       	CMP       R5, #47
    287a:	18 f8       	JHI       $+24                  ;->0x28aa
..\src\kf32a9k1xxx_int.c:272
    {
    	/*---------------- 设置INT_EIE1寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_WWDT));
    287c:	02 0d       	LD.W      R5, [SP + #2]
    287e:	50 31       	SUB       R5, #16
    2880:	41 10       	MOV       R4, #1
    2882:	6c db       	LSL       R5, R4, R5
    2884:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:273
    	tmpreg = ((uint32_t)NewState << (Peripheral - INT_WWDT));
    2886:	02 0d       	LD.W      R5, [SP + #2]
    2888:	50 31       	SUB       R5, #16
    288a:	03 0c       	LD.W      R4, [SP + #3]
    288c:	6c db       	LSL       R5, R4, R5
    288e:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_int.c:274
    	INT_EIE1 = SFR_Config(INT_EIE1, ~tmask, tmpreg);
    2890:	16 46       	LD        R6, [PC + #22]        ;->0x28e8  :=0x40200000
    2892:	16 45       	LD        R5, [PC + #22]        ;->0x28e8  :=0x40200000
    2894:	e5 98       	LD.W      R4, [R5 + #3]
    2896:	5e 82       	LD.W      R5, [SP]
    2898:	55 68       	NOT       R5, R5
    289a:	04 58       	MOV       R0, R4
    289c:	25 58       	MOV       R1, R5
    289e:	01 0a       	LD.W      R2, [SP + #1]
    28a0:	13 45       	LD        R5, [PC + #19]        ;->0x28ec  :=0x2778
    28a2:	05 5c       	LJMP      R5
    28a4:	a0 58       	MOV       R5, R0
    28a6:	f5 a0       	ST.W      [R6 + #3], R5
    28a8:	1a 04       	SJMP      $+26                  ;->0x28dc
..\src\kf32a9k1xxx_int.c:276
    }
    else if(Peripheral <= INT_USART7)
    28aa:	02 0d       	LD.W      R5, [SP + #2]
    28ac:	5f 3c       	CMP       R5, #79
    28ae:	17 f8       	JHI       $+23                  ;->0x28dc
..\src\kf32a9k1xxx_int.c:279
    {
    	/*---------------- 设置INT_EIE2寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_DMA1));
    28b0:	02 0d       	LD.W      R5, [SP + #2]
    28b2:	50 33       	SUB       R5, #48
    28b4:	41 10       	MOV       R4, #1
    28b6:	6c db       	LSL       R5, R4, R5
    28b8:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:280
    	tmpreg = ((uint32_t)NewState << (Peripheral - INT_DMA1));
    28ba:	02 0d       	LD.W      R5, [SP + #2]
    28bc:	50 33       	SUB       R5, #48
    28be:	03 0c       	LD.W      R4, [SP + #3]
    28c0:	6c db       	LSL       R5, R4, R5
    28c2:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_int.c:281
    	INT_EIE2 = SFR_Config(INT_EIE2, ~tmask, tmpreg);
    28c4:	09 46       	LD        R6, [PC + #9]         ;->0x28e8  :=0x40200000
    28c6:	09 45       	LD        R5, [PC + #9]         ;->0x28e8  :=0x40200000
    28c8:	65 99       	LD.W      R4, [R5 + #5]
    28ca:	5e 82       	LD.W      R5, [SP]
    28cc:	55 68       	NOT       R5, R5
    28ce:	04 58       	MOV       R0, R4
    28d0:	25 58       	MOV       R1, R5
    28d2:	01 0a       	LD.W      R2, [SP + #1]
    28d4:	06 45       	LD        R5, [PC + #6]         ;->0x28ec  :=0x2778
    28d6:	05 5c       	LJMP      R5
    28d8:	a0 58       	MOV       R5, R0
    28da:	75 a1       	ST.W      [R6 + #5], R5
..\src\kf32a9k1xxx_int.c:287
    }
    else
    {
    	;
    }
}
    28dc:	e0 29       	ADD       SP, #16
    28de:	06 5d       	POP       R6
    28e0:	0d 5d       	POP       LR
    28e2:	1d 5c       	JMP       LR
    28e4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    28e8:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x2968  :=0xdb6c1041
    28ec:	78 27 00 00 	.long     0x00002778 ->000010104  [!!!@2@:ST.W      [SP + #120], R7	@@: NOP      

000028f0 <INT_Clear_Interrupt_Flag>:
INT_Clear_Interrupt_Flag():
..\src\kf32a9k1xxx_int.c:393
  *                   枚举类型InterruptIndex中的外设中断向量编号。
  * 返回  无。
  */
void
INT_Clear_Interrupt_Flag (InterruptIndex Peripheral)
{
    28f0:	81 5f       	PUSH      {R6,LR}
    28f2:	e8 30       	SUB       SP, #8
    28f4:	01 20       	ST.W      [SP + #1], R0
..\src\kf32a9k1xxx_int.c:394
    uint32_t tmask = 0;
    28f6:	50 10       	MOV       R5, #0
    28f8:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:397

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    28fa:	51 10       	MOV       R5, #1
    28fc:	01 0c       	LD.W      R4, [SP + #1]
    28fe:	4f 3c       	CMP       R4, #79
    2900:	02 f9       	JLS       $+2                   ;->0x2904
    2902:	50 10       	MOV       R5, #0
    2904:	55 d1       	ZXT.B     R5, R5
    2906:	05 58       	MOV       R0, R5
    2908:	22 45       	LD        R5, [PC + #34]        ;->0x2990  :=0x4ba6
    290a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:399

    if(Peripheral <= INT_SysTick)
    290c:	01 0d       	LD.W      R5, [SP + #1]
    290e:	5f 38       	CMP       R5, #15
    2910:	12 f8       	JHI       $+18                  ;->0x2934
..\src\kf32a9k1xxx_int.c:402
    {
    	/*---------------- 读取INT_EIF0寄存器 ----------------*/
    	tmask = ((uint32_t)1 << Peripheral);
    2912:	01 0c       	LD.W      R4, [SP + #1]
    2914:	51 10       	MOV       R5, #1
    2916:	2d db       	LSL       R5, R5, R4
    2918:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:403
    	INT_EIF0 = SFR_Config(INT_EIF0,~tmask,0);
    291a:	1f 46       	LD        R6, [PC + #31]        ;->0x2994  :=0x40200000
    291c:	1e 45       	LD        R5, [PC + #30]        ;->0x2994  :=0x40200000
    291e:	e5 99       	LD.W      R4, [R5 + #7]
    2920:	5e 82       	LD.W      R5, [SP]
    2922:	55 68       	NOT       R5, R5
    2924:	04 58       	MOV       R0, R4
    2926:	25 58       	MOV       R1, R5
    2928:	20 10       	MOV       R2, #0
    292a:	1c 45       	LD        R5, [PC + #28]        ;->0x2998  :=0x2778
    292c:	05 5c       	LJMP      R5
    292e:	a0 58       	MOV       R5, R0
    2930:	f5 a1       	ST.W      [R6 + #7], R5
    2932:	2a 04       	SJMP      $+42                  ;->0x2986
..\src\kf32a9k1xxx_int.c:405
    }
    else if(Peripheral <= INT_SPI1)
    2934:	01 0d       	LD.W      R5, [SP + #1]
    2936:	5f 3a       	CMP       R5, #47
    2938:	13 f8       	JHI       $+19                  ;->0x295e
..\src\kf32a9k1xxx_int.c:408
    {
    	/*---------------- 读取INT_EIF1寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_WWDT));
    293a:	01 0d       	LD.W      R5, [SP + #1]
    293c:	50 31       	SUB       R5, #16
    293e:	41 10       	MOV       R4, #1
    2940:	6c db       	LSL       R5, R4, R5
    2942:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:409
    	INT_EIF1 = SFR_Config(INT_EIF1,~tmask,0);
    2944:	14 46       	LD        R6, [PC + #20]        ;->0x2994  :=0x40200000
    2946:	14 45       	LD        R5, [PC + #20]        ;->0x2994  :=0x40200000
    2948:	65 9a       	LD.W      R4, [R5 + #9]
    294a:	5e 82       	LD.W      R5, [SP]
    294c:	55 68       	NOT       R5, R5
    294e:	04 58       	MOV       R0, R4
    2950:	25 58       	MOV       R1, R5
    2952:	20 10       	MOV       R2, #0
    2954:	11 45       	LD        R5, [PC + #17]        ;->0x2998  :=0x2778
    2956:	05 5c       	LJMP      R5
    2958:	a0 58       	MOV       R5, R0
    295a:	75 a2       	ST.W      [R6 + #9], R5
    295c:	15 04       	SJMP      $+21                  ;->0x2986
..\src\kf32a9k1xxx_int.c:411
    }
    else if(Peripheral <= INT_USART7)
    295e:	01 0d       	LD.W      R5, [SP + #1]
    2960:	5f 3c       	CMP       R5, #79
    2962:	12 f8       	JHI       $+18                  ;->0x2986
..\src\kf32a9k1xxx_int.c:414
    {
    	/*---------------- 读取INT_EIF2寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_DMA1));
    2964:	01 0d       	LD.W      R5, [SP + #1]
    2966:	50 33       	SUB       R5, #48
    2968:	41 10       	MOV       R4, #1
    296a:	6c db       	LSL       R5, R4, R5
    296c:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:415
    	INT_EIF2 = SFR_Config(INT_EIF2,~tmask,0);
    296e:	0a 46       	LD        R6, [PC + #10]        ;->0x2994  :=0x40200000
    2970:	09 45       	LD        R5, [PC + #9]         ;->0x2994  :=0x40200000
    2972:	e5 9a       	LD.W      R4, [R5 + #11]
    2974:	5e 82       	LD.W      R5, [SP]
    2976:	55 68       	NOT       R5, R5
    2978:	04 58       	MOV       R0, R4
    297a:	25 58       	MOV       R1, R5
    297c:	20 10       	MOV       R2, #0
    297e:	07 45       	LD        R5, [PC + #7]         ;->0x2998  :=0x2778
    2980:	05 5c       	LJMP      R5
    2982:	a0 58       	MOV       R5, R0
    2984:	f5 a2       	ST.W      [R6 + #11], R5
..\src\kf32a9k1xxx_int.c:421
    }
    else
    {
    	;
    }
}
    2986:	e8 28       	ADD       SP, #8
    2988:	06 5d       	POP       R6
    298a:	0d 5d       	POP       LR
    298c:	1d 5c       	JMP       LR
    298e:	00 00       	NOP      NOP      
    2990:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2994:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x2a14  :=0xf1063850
    2998:	78 27 00 00 	.long     0x00002778 ->000010104  [!!!@2@:ST.W      [SP + #120], R7	@@: NOP      

0000299c <INT_Interrupt_Priority_Config>:
INT_Interrupt_Priority_Config():
..\src\kf32a9k1xxx_int.c:440
  * 返回  无。
  */
void
INT_Interrupt_Priority_Config (InterruptIndex Peripheral,
                    uint32_t Preemption, uint32_t SubPriority)
{
    299c:	81 5f       	PUSH      {R6,LR}
    299e:	ec 31       	SUB       SP, #28
    29a0:	04 20       	ST.W      [SP + #4], R0
    29a2:	05 21       	ST.W      [SP + #5], R1
    29a4:	06 22       	ST.W      [SP + #6], R2
..\src\kf32a9k1xxx_int.c:441
    uint32_t tmpreg = 0;
    29a6:	50 10       	MOV       R5, #0
    29a8:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:442
    uint32_t regoffset = 0;
    29aa:	50 10       	MOV       R5, #0
    29ac:	02 25       	ST.W      [SP + #2], R5
..\src\kf32a9k1xxx_int.c:443
    uint32_t bitoffset = 0;
    29ae:	50 10       	MOV       R5, #0
    29b0:	03 25       	ST.W      [SP + #3], R5
..\src\kf32a9k1xxx_int.c:444
    uint32_t priorityconfig = 0;
    29b2:	50 10       	MOV       R5, #0
    29b4:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_int.c:447

    /*--------- 获取INT_CTL0寄存器的PRIGROUP位 ---------*/
    tmpreg = INT_CTL0;
    29b6:	4b 45       	LD        R5, [PC + #75]        ;->0x2ae0  :=0x40200000
    29b8:	55 82       	LD.W      R5, [R5]
    29ba:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:448
    tmpreg &= INT_CTL0_PRIGROUP;
    29bc:	4e 82       	LD.W      R4, [SP]
    29be:	56 10       	MOV       R5, #6
    29c0:	6c d5       	ANL       R5, R4, R5
    29c2:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:451

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    29c4:	51 10       	MOV       R5, #1
    29c6:	04 0c       	LD.W      R4, [SP + #4]
    29c8:	4f 3c       	CMP       R4, #79
    29ca:	02 f9       	JLS       $+2                   ;->0x29ce
    29cc:	50 10       	MOV       R5, #0
    29ce:	55 d1       	ZXT.B     R5, R5
    29d0:	05 58       	MOV       R0, R5
    29d2:	45 45       	LD        R5, [PC + #69]        ;->0x2ae4  :=0x4ba6
    29d4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:452
    CHECK_RESTRICTION(CHECK_PRIORITY_CONFIG(tmpreg, Preemption, SubPriority));
    29d6:	5e 82       	LD.W      R5, [SP]
    29d8:	50 38       	CMP       R5, #0
    29da:	07 f1       	JNZ       $+7                   ;->0x29e8
    29dc:	05 0d       	LD.W      R5, [SP + #5]
    29de:	57 38       	CMP       R5, #7
    29e0:	04 f8       	JHI       $+4                   ;->0x29e8
    29e2:	06 0d       	LD.W      R5, [SP + #6]
    29e4:	51 38       	CMP       R5, #1
    29e6:	1c f9       	JLS       $+28                  ;->0x2a1e
    29e8:	5e 82       	LD.W      R5, [SP]
    29ea:	52 38       	CMP       R5, #2
    29ec:	07 f1       	JNZ       $+7                   ;->0x29fa
    29ee:	05 0d       	LD.W      R5, [SP + #5]
    29f0:	53 38       	CMP       R5, #3
    29f2:	04 f8       	JHI       $+4                   ;->0x29fa
    29f4:	06 0d       	LD.W      R5, [SP + #6]
    29f6:	53 38       	CMP       R5, #3
    29f8:	13 f9       	JLS       $+19                  ;->0x2a1e
    29fa:	5e 82       	LD.W      R5, [SP]
    29fc:	54 38       	CMP       R5, #4
    29fe:	07 f1       	JNZ       $+7                   ;->0x2a0c
    2a00:	05 0d       	LD.W      R5, [SP + #5]
    2a02:	51 38       	CMP       R5, #1
    2a04:	04 f8       	JHI       $+4                   ;->0x2a0c
    2a06:	06 0d       	LD.W      R5, [SP + #6]
    2a08:	57 38       	CMP       R5, #7
    2a0a:	0a f9       	JLS       $+10                  ;->0x2a1e
    2a0c:	5e 82       	LD.W      R5, [SP]
    2a0e:	56 38       	CMP       R5, #6
    2a10:	09 f1       	JNZ       $+9                   ;->0x2a22
    2a12:	05 0d       	LD.W      R5, [SP + #5]
    2a14:	50 38       	CMP       R5, #0
    2a16:	06 f1       	JNZ       $+6                   ;->0x2a22
    2a18:	06 0d       	LD.W      R5, [SP + #6]
    2a1a:	5f 38       	CMP       R5, #15
    2a1c:	03 f8       	JHI       $+3                   ;->0x2a22
    2a1e:	51 10       	MOV       R5, #1
    2a20:	02 04       	SJMP      $+2                   ;->0x2a24
    2a22:	50 10       	MOV       R5, #0
    2a24:	05 58       	MOV       R0, R5
    2a26:	30 45       	LD        R5, [PC + #48]        ;->0x2ae4  :=0x4ba6
    2a28:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:455

    /*--------- 获取中断优先级控制位的值 ---------*/
    switch (tmpreg)
    2a2a:	5e 82       	LD.W      R5, [SP]
    2a2c:	52 38       	CMP       R5, #2
    2a2e:	13 f0       	JZ        $+19                  ;->0x2a54
    2a30:	52 38       	CMP       R5, #2
    2a32:	04 f8       	JHI       $+4                   ;->0x2a3a
    2a34:	50 38       	CMP       R5, #0
    2a36:	07 f0       	JZ        $+7                   ;->0x2a44
    2a38:	25 04       	SJMP      $+37                  ;->0x2a82
    2a3a:	54 38       	CMP       R5, #4
    2a3c:	15 f0       	JZ        $+21                  ;->0x2a66
    2a3e:	56 38       	CMP       R5, #6
    2a40:	1c f0       	JZ        $+28                  ;->0x2a78
    2a42:	20 04       	SJMP      $+32                  ;->0x2a82
..\src\kf32a9k1xxx_int.c:458
    {
    case INT_PRIORITY_GROUP_3VS1:
        priorityconfig = (Preemption << 1) | (SubPriority & 0x1);
    2a44:	05 0d       	LD.W      R5, [SP + #5]
    2a46:	6d c3       	ADD       R5, R5, R5
    2a48:	06 0b       	LD.W      R3, [SP + #6]
    2a4a:	41 10       	MOV       R4, #1
    2a4c:	23 d5       	ANL       R4, R3, R4
    2a4e:	2d d7       	ORL       R5, R5, R4
    2a50:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_int.c:459
        break;
    2a52:	1c 04       	SJMP      $+28                  ;->0x2a8a
..\src\kf32a9k1xxx_int.c:461
    case INT_PRIORITY_GROUP_2VS2:
        priorityconfig = (Preemption << 2) | (SubPriority & 0x3);
    2a54:	05 0d       	LD.W      R5, [SP + #5]
    2a56:	32 10       	MOV       R3, #2
    2a58:	e5 da       	LSL       R4, R5, R3
    2a5a:	06 0b       	LD.W      R3, [SP + #6]
    2a5c:	53 10       	MOV       R5, #3
    2a5e:	6b d5       	ANL       R5, R3, R5
    2a60:	6c d7       	ORL       R5, R4, R5
    2a62:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_int.c:462
        break;
    2a64:	13 04       	SJMP      $+19                  ;->0x2a8a
..\src\kf32a9k1xxx_int.c:464
    case INT_PRIORITY_GROUP_1VS3:
        priorityconfig = (Preemption << 3) | (SubPriority & 0x7);
    2a66:	05 0d       	LD.W      R5, [SP + #5]
    2a68:	33 10       	MOV       R3, #3
    2a6a:	e5 da       	LSL       R4, R5, R3
    2a6c:	06 0b       	LD.W      R3, [SP + #6]
    2a6e:	57 10       	MOV       R5, #7
    2a70:	6b d5       	ANL       R5, R3, R5
    2a72:	6c d7       	ORL       R5, R4, R5
    2a74:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_int.c:465
        break;
    2a76:	0a 04       	SJMP      $+10                  ;->0x2a8a
..\src\kf32a9k1xxx_int.c:467
    case INT_PRIORITY_GROUP_0VS4:
        priorityconfig = SubPriority & 0xF;
    2a78:	06 0c       	LD.W      R4, [SP + #6]
    2a7a:	5f 10       	MOV       R5, #15
    2a7c:	6c d5       	ANL       R5, R4, R5
    2a7e:	01 25       	ST.W      [SP + #1], R5
..\src\kf32a9k1xxx_int.c:468
        break;
    2a80:	05 04       	SJMP      $+5                   ;->0x2a8a
..\src\kf32a9k1xxx_int.c:470
    default:
        CHECK_RESTRICTION(0);
    2a82:	00 10       	MOV       R0, #0
    2a84:	18 45       	LD        R5, [PC + #24]        ;->0x2ae4  :=0x4ba6
    2a86:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:471
        break;
    2a88:	00 00       	NOP      NOP      
..\src\kf32a9k1xxx_int.c:475
    }

    /*--------- 配置中断优先级控制位 ---------*/
    if (Peripheral <= INT_USART7)
    2a8a:	04 0d       	LD.W      R5, [SP + #4]
    2a8c:	5f 3c       	CMP       R5, #79
    2a8e:	0d f8       	JHI       $+13                  ;->0x2aa8
..\src\kf32a9k1xxx_int.c:479
    {
        /*---------------- 设置INT_IPx(x=0~18)寄存器 ----------------*/
        /* 获取中断优先级寄存器地址 */
        regoffset = (Peripheral - INT_Reserved4) >> 2;
    2a90:	04 0d       	LD.W      R5, [SP + #4]
    2a92:	2d cd       	SUB       R5, R5, #4
    2a94:	2a 7c       	LSR       R5, #2
    2a96:	02 25       	ST.W      [SP + #2], R5
..\src\kf32a9k1xxx_int.c:480
        tmpreg = (uint32_t)&INT_IP0;
    2a98:	14 45       	LD        R5, [PC + #20]        ;->0x2ae8  :=0x40200034
    2a9a:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:481
        tmpreg = tmpreg + (regoffset << 2);
    2a9c:	02 0d       	LD.W      R5, [SP + #2]
    2a9e:	32 10       	MOV       R3, #2
    2aa0:	e5 da       	LSL       R4, R5, R3
    2aa2:	5e 82       	LD.W      R5, [SP]
    2aa4:	2d c3       	ADD       R5, R5, R4
    2aa6:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_int.c:489
    {
    	;
    }

    /*---------------- 设置INT_IPx(x=0~30)寄存器 ----------------*/
    bitoffset = ((Peripheral & 0x3) * 8) + 4;
    2aa8:	04 0c       	LD.W      R4, [SP + #4]
    2aaa:	53 10       	MOV       R5, #3
    2aac:	6c d5       	ANL       R5, R4, R5
    2aae:	2b 7a       	LSL       R5, #3
    2ab0:	2d c1       	ADD       R5, R5, #4
    2ab2:	03 25       	ST.W      [SP + #3], R5
..\src\kf32a9k1xxx_int.c:490
    *(volatile uint32_t*)tmpreg
    2ab4:	6e 82       	LD.W      R6, [SP]
..\src\kf32a9k1xxx_int.c:491
          = SFR_Config (*(volatile uint32_t*)tmpreg,
    2ab6:	5e 82       	LD.W      R5, [SP]
    2ab8:	45 82       	LD.W      R4, [R5]
..\src\kf32a9k1xxx_int.c:492
                      ~(0xF << bitoffset),
    2aba:	03 0b       	LD.W      R3, [SP + #3]
    2abc:	5f 10       	MOV       R5, #15
    2abe:	ed da       	LSL       R5, R5, R3
    2ac0:	55 68       	NOT       R5, R5
..\src\kf32a9k1xxx_int.c:491
    }

    /*---------------- 设置INT_IPx(x=0~30)寄存器 ----------------*/
    bitoffset = ((Peripheral & 0x3) * 8) + 4;
    *(volatile uint32_t*)tmpreg
          = SFR_Config (*(volatile uint32_t*)tmpreg,
    2ac2:	03 0b       	LD.W      R3, [SP + #3]
    2ac4:	01 0a       	LD.W      R2, [SP + #1]
    2ac6:	da da       	LSL       R3, R2, R3
    2ac8:	04 58       	MOV       R0, R4
    2aca:	25 58       	MOV       R1, R5
    2acc:	43 58       	MOV       R2, R3
    2ace:	08 45       	LD        R5, [PC + #8]         ;->0x2aec  :=0x2778
    2ad0:	05 5c       	LJMP      R5
    2ad2:	a0 58       	MOV       R5, R0
    2ad4:	65 85       	ST.W      [R6], R5
..\src\kf32a9k1xxx_int.c:494
                      ~(0xF << bitoffset),
                      priorityconfig << bitoffset);
}
    2ad6:	ec 29       	ADD       SP, #28
    2ad8:	06 5d       	POP       R6
    2ada:	0d 5d       	POP       LR
    2adc:	1d 5c       	JMP       LR
    2ade:	00 00       	NOP      NOP      
    2ae0:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x2b60  :=0x105185e5
    2ae4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2ae8:	34 00 20 40 	.long     0x40200034 ->1075839028 
    2aec:	78 27 00 00 	.long     0x00002778 ->000010104  [!!!@2@:ST.W      [SP + #120], R7	@@: NOP      

00002af0 <SFR_Config>:
SFR_Config():
KF32A9K1XXX.h:13916
   -- 函数定义
   ---------------------------------------------------------------------------- */
/* 写特殊功能寄存器 */
static inline uint32_t
SFR_Config (uint32_t SfrMem, uint32_t SfrMask, uint32_t WriteVal)
{
    2af0:	ec 30       	SUB       SP, #12
    2af2:	e0 85       	ST.W      [SP], R0
    2af4:	01 21       	ST.W      [SP + #1], R1
    2af6:	02 22       	ST.W      [SP + #2], R2
KF32A9K1XXX.h:13917
    return ((SfrMem & SfrMask) | (WriteVal));
    2af8:	5e 82       	LD.W      R5, [SP]
    2afa:	01 0c       	LD.W      R4, [SP + #1]
    2afc:	25 d5       	ANL       R4, R5, R4
    2afe:	02 0d       	LD.W      R5, [SP + #2]
    2b00:	6c d7       	ORL       R5, R4, R5
KF32A9K1XXX.h:13918
}
    2b02:	05 58       	MOV       R0, R5
    2b04:	ec 28       	ADD       SP, #12
    2b06:	1d 5c       	JMP       LR

00002b08 <OSC_LFCK_Division_Config>:
OSC_LFCK_Division_Config():
..\src\kf32a9k1xxx_osc.c:173
  *                         LFCK_DIVISION_128: 1/128分频,
  * 返回  无。
  */
void
OSC_LFCK_Division_Config (uint32_t LFDivision)
{
    2b08:	81 5f       	PUSH      {R6,LR}
    2b0a:	e8 30       	SUB       SP, #8
    2b0c:	01 20       	ST.W      [SP + #1], R0
..\src\kf32a9k1xxx_osc.c:174
    uint32_t tmpreg = 0;
    2b0e:	50 10       	MOV       R5, #0
    2b10:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:177

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_LFCK_DIVISION(LFDivision));
    2b12:	51 10       	MOV       R5, #1
    2b14:	01 0c       	LD.W      R4, [SP + #1]
    2b16:	47 38       	CMP       R4, #7
    2b18:	02 f9       	JLS       $+2                   ;->0x2b1c
    2b1a:	50 10       	MOV       R5, #0
    2b1c:	55 d1       	ZXT.B     R5, R5
    2b1e:	05 58       	MOV       R0, R5
    2b20:	0b 45       	LD        R5, [PC + #11]        ;->0x2b4c  :=0x4ba6
    2b22:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:180

    /*---------------- 设置OSC_CTL0寄存器LFCKDIV位 ----------------*/
    tmpreg = LFDivision << OSC_CTL0_LFCKDIV0_POS;
    2b24:	01 0d       	LD.W      R5, [SP + #1]
    2b26:	a8 7b       	LSL       R5, #24
    2b28:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:181
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_LFCKDIV, tmpreg);
    2b2a:	61 10       	MOV       R6, #1
    2b2c:	b6 7b       	LSL       R6, #30
    2b2e:	51 10       	MOV       R5, #1
    2b30:	ae 7b       	LSL       R5, #30
    2b32:	55 82       	LD.W      R5, [R5]
    2b34:	05 58       	MOV       R0, R5
    2b36:	07 41       	LD        R1, [PC + #7]         ;->0x2b50  :=0xf8ffffff
    2b38:	2e 82       	LD.W      R2, [SP]
    2b3a:	07 45       	LD        R5, [PC + #7]         ;->0x2b54  :=0x2af0
    2b3c:	05 5c       	LJMP      R5
    2b3e:	a0 58       	MOV       R5, R0
    2b40:	65 85       	ST.W      [R6], R5
..\src\kf32a9k1xxx_osc.c:182
}
    2b42:	e8 28       	ADD       SP, #8
    2b44:	06 5d       	POP       R6
    2b46:	0d 5d       	POP       LR
    2b48:	1d 5c       	JMP       LR
    2b4a:	00 00       	NOP      NOP      
    2b4c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2b50:	ff ff ff f8 	.long     0xf8ffffff ->-117440513 
    2b54:	f0 2a 00 00 	.long     0x00002af0 ->000010992  [!!!@2@:ADD       PC, #32	@@: NOP      

00002b58 <OSC_HFCK_Division_Config>:
OSC_HFCK_Division_Config():
..\src\kf32a9k1xxx_osc.c:201
  *                         HFCK_DIVISION_512: 1/512分频,
  * 返回  无。
  */
void
OSC_HFCK_Division_Config (uint32_t HFDivision)
{
    2b58:	81 5f       	PUSH      {R6,LR}
    2b5a:	e8 30       	SUB       SP, #8
    2b5c:	01 20       	ST.W      [SP + #1], R0
..\src\kf32a9k1xxx_osc.c:202
    uint32_t tmpreg = 0;
    2b5e:	50 10       	MOV       R5, #0
    2b60:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:205

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_HFCK_DIVISION(HFDivision));
    2b62:	51 10       	MOV       R5, #1
    2b64:	01 0c       	LD.W      R4, [SP + #1]
    2b66:	49 38       	CMP       R4, #9
    2b68:	02 f9       	JLS       $+2                   ;->0x2b6c
    2b6a:	50 10       	MOV       R5, #0
    2b6c:	55 d1       	ZXT.B     R5, R5
    2b6e:	05 58       	MOV       R0, R5
    2b70:	0b 45       	LD        R5, [PC + #11]        ;->0x2b9c  :=0x4ba6
    2b72:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:208

    /*---------------- 设置OSC_CTL0寄存器HFCKDIV位 ----------------*/
    tmpreg = HFDivision << OSC_CTL0_HFCKDIV0_POS;
    2b74:	01 0d       	LD.W      R5, [SP + #1]
    2b76:	2c 7b       	LSL       R5, #20
    2b78:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:209
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_HFCKDIV, tmpreg);
    2b7a:	61 10       	MOV       R6, #1
    2b7c:	b6 7b       	LSL       R6, #30
    2b7e:	51 10       	MOV       R5, #1
    2b80:	ae 7b       	LSL       R5, #30
    2b82:	55 82       	LD.W      R5, [R5]
    2b84:	05 58       	MOV       R0, R5
    2b86:	07 41       	LD        R1, [PC + #7]         ;->0x2ba0  :=0xff0fffff
    2b88:	2e 82       	LD.W      R2, [SP]
    2b8a:	07 45       	LD        R5, [PC + #7]         ;->0x2ba4  :=0x2af0
    2b8c:	05 5c       	LJMP      R5
    2b8e:	a0 58       	MOV       R5, R0
    2b90:	65 85       	ST.W      [R6], R5
..\src\kf32a9k1xxx_osc.c:210
}
    2b92:	e8 28       	ADD       SP, #8
    2b94:	06 5d       	POP       R6
    2b96:	0d 5d       	POP       LR
    2b98:	1d 5c       	JMP       LR
    2b9a:	00 00       	NOP      NOP      
    2b9c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2ba0:	ff ff 0f ff 	.long     0xff0fffff ->-15728641 
    2ba4:	f0 2a 00 00 	.long     0x00002af0 ->000010992  [!!!@2@:ADD       PC, #32	@@: NOP      

00002ba8 <OSC_PLL_Input_Source_Config>:
OSC_PLL_Input_Source_Config():
..\src\kf32a9k1xxx_osc.c:247
  *                   PLL_INPUT_EXTHF: 选择EXTHF作为PLL输入时钟。
  * 返回  无。
  */
void
OSC_PLL_Input_Source_Config (uint32_t NewState)
{
    2ba8:	2d 5d       	PUSH      LR
    2baa:	e4 30       	SUB       SP, #4
    2bac:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_osc.c:249
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_INPUT(NewState));
    2bae:	5e 82       	LD.W      R5, [SP]
    2bb0:	31 10       	MOV       R3, #1
    2bb2:	e5 dc       	LSR       R4, R5, R3
    2bb4:	51 10       	MOV       R5, #1
    2bb6:	40 38       	CMP       R4, #0
    2bb8:	02 f0       	JZ        $+2                   ;->0x2bbc
    2bba:	50 10       	MOV       R5, #0
    2bbc:	55 d1       	ZXT.B     R5, R5
    2bbe:	05 58       	MOV       R0, R5
    2bc0:	08 45       	LD        R5, [PC + #8]         ;->0x2be0  :=0x4ba6
    2bc2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:252

    /*---------------- 设置OSC_CTL0寄存器PLL0CKS位 ----------------*/
    if (NewState != PLL_INPUT_INTHF)
    2bc4:	5e 82       	LD.W      R5, [SP]
    2bc6:	50 38       	CMP       R5, #0
    2bc8:	05 f0       	JZ        $+5                   ;->0x2bd2
..\src\kf32a9k1xxx_osc.c:255
    {
        /* 选择EXTHF作为PLL输入时钟 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_PLLCKS_POS);
    2bca:	51 10       	MOV       R5, #1
    2bcc:	ae 7b       	LSL       R5, #30
    2bce:	ac 4c       	SET       [R5], #12
    2bd0:	04 04       	SJMP      $+4                   ;->0x2bd8
..\src\kf32a9k1xxx_osc.c:260
    }
    else
    {
        /* 选择INTHF作为PLL输入时钟 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_PLLCKS_POS);
    2bd2:	51 10       	MOV       R5, #1
    2bd4:	ae 7b       	LSL       R5, #30
    2bd6:	ac 4e       	CLR       [R5], #12
..\src\kf32a9k1xxx_osc.c:262
    }
}
    2bd8:	e4 28       	ADD       SP, #4
    2bda:	0d 5d       	POP       LR
    2bdc:	1d 5c       	JMP       LR
    2bde:	00 00       	NOP      NOP      
    2be0:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00002be4 <OSC_HFCK_Source_Config>:
OSC_HFCK_Source_Config():
..\src\kf32a9k1xxx_osc.c:275
  *                   HFCK_SOURCE_LP4M:  选择LPM输出作为HFCLK时钟,
  * 返回  无。
  */
void
OSC_HFCK_Source_Config (uint32_t HFSource)
{
    2be4:	81 5f       	PUSH      {R6,LR}
    2be6:	e8 30       	SUB       SP, #8
    2be8:	01 20       	ST.W      [SP + #1], R0
..\src\kf32a9k1xxx_osc.c:276
    uint32_t tmpreg = 0;
    2bea:	50 10       	MOV       R5, #0
    2bec:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:279

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_HFCK_SOURCE(HFSource));
    2bee:	01 0d       	LD.W      R5, [SP + #1]
    2bf0:	33 10       	MOV       R3, #3
    2bf2:	e5 dc       	LSR       R4, R5, R3
    2bf4:	51 10       	MOV       R5, #1
    2bf6:	40 38       	CMP       R4, #0
    2bf8:	02 f0       	JZ        $+2                   ;->0x2bfc
    2bfa:	50 10       	MOV       R5, #0
    2bfc:	55 d1       	ZXT.B     R5, R5
    2bfe:	05 58       	MOV       R0, R5
    2c00:	0b 45       	LD        R5, [PC + #11]        ;->0x2c2c  :=0x4ba6
    2c02:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:282

    /*---------------- 设置OSC_CTL0寄存器HFCKS位 ----------------*/
    tmpreg = HFSource << OSC_CTL0_HFCKS0_POS;
    2c04:	01 0d       	LD.W      R5, [SP + #1]
    2c06:	a9 7a       	LSL       R5, #9
    2c08:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:283
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_HFCKS, tmpreg);
    2c0a:	61 10       	MOV       R6, #1
    2c0c:	b6 7b       	LSL       R6, #30
    2c0e:	51 10       	MOV       R5, #1
    2c10:	ae 7b       	LSL       R5, #30
    2c12:	55 82       	LD.W      R5, [R5]
    2c14:	05 58       	MOV       R0, R5
    2c16:	07 41       	LD        R1, [PC + #7]         ;->0x2c30  :=0xfffff1ff
    2c18:	2e 82       	LD.W      R2, [SP]
    2c1a:	07 45       	LD        R5, [PC + #7]         ;->0x2c34  :=0x2af0
    2c1c:	05 5c       	LJMP      R5
    2c1e:	a0 58       	MOV       R5, R0
    2c20:	65 85       	ST.W      [R6], R5
..\src\kf32a9k1xxx_osc.c:284
}
    2c22:	e8 28       	ADD       SP, #8
    2c24:	06 5d       	POP       R6
    2c26:	0d 5d       	POP       LR
    2c28:	1d 5c       	JMP       LR
    2c2a:	00 00       	NOP      NOP      
    2c2c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2c30:	ff f1 ff ff 	.long     0xfffff1ff ->-00003585 
    2c34:	f0 2a 00 00 	.long     0x00002af0 ->000010992  [!!!@2@:ADD       PC, #32	@@: NOP      

00002c38 <OSC_HFCK_Enable>:
OSC_HFCK_Enable():
..\src\kf32a9k1xxx_osc.c:294
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
OSC_HFCK_Enable (FunctionalState NewState)
{
    2c38:	2d 5d       	PUSH      LR
    2c3a:	e4 30       	SUB       SP, #4
    2c3c:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_osc.c:296
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2c3e:	5e 82       	LD.W      R5, [SP]
    2c40:	50 38       	CMP       R5, #0
    2c42:	04 f0       	JZ        $+4                   ;->0x2c4a
    2c44:	5e 82       	LD.W      R5, [SP]
    2c46:	51 38       	CMP       R5, #1
    2c48:	03 f1       	JNZ       $+3                   ;->0x2c4e
    2c4a:	51 10       	MOV       R5, #1
    2c4c:	02 04       	SJMP      $+2                   ;->0x2c50
    2c4e:	50 10       	MOV       R5, #0
    2c50:	05 58       	MOV       R0, R5
    2c52:	08 45       	LD        R5, [PC + #8]         ;->0x2c70  :=0x4ba6
    2c54:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:299

    /*---------------- 设置OSC_CTL0寄存器HFCKEN位 ----------------*/
    if (NewState != FALSE)
    2c56:	5e 82       	LD.W      R5, [SP]
    2c58:	50 38       	CMP       R5, #0
    2c5a:	05 f0       	JZ        $+5                   ;->0x2c64
..\src\kf32a9k1xxx_osc.c:302
    {
        /* HFCLK时钟信号允许 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_HFCKEN_POS);
    2c5c:	51 10       	MOV       R5, #1
    2c5e:	ae 7b       	LSL       R5, #30
    2c60:	a8 4c       	SET       [R5], #8
    2c62:	04 04       	SJMP      $+4                   ;->0x2c6a
..\src\kf32a9k1xxx_osc.c:307
    }
    else
    {
        /* HFCLK时钟信号禁止 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_HFCKEN_POS);
    2c64:	51 10       	MOV       R5, #1
    2c66:	ae 7b       	LSL       R5, #30
    2c68:	a8 4e       	CLR       [R5], #8
..\src\kf32a9k1xxx_osc.c:309
    }
}
    2c6a:	e4 28       	ADD       SP, #4
    2c6c:	0d 5d       	POP       LR
    2c6e:	1d 5c       	JMP       LR
    2c70:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00002c74 <OSC_LFCK_Source_Config>:
OSC_LFCK_Source_Config():
..\src\kf32a9k1xxx_osc.c:320
  *                   LFCK_INPUT_EXTLF: 选择EXTLF作为LFCLK时钟。
  * 返回  无。
  */
void
OSC_LFCK_Source_Config (uint32_t NewState)
{
    2c74:	2d 5d       	PUSH      LR
    2c76:	e4 30       	SUB       SP, #4
    2c78:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_osc.c:322
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_LFCK_INPUT(NewState));
    2c7a:	51 10       	MOV       R5, #1
    2c7c:	4e 82       	LD.W      R4, [SP]
    2c7e:	41 38       	CMP       R4, #1
    2c80:	02 f9       	JLS       $+2                   ;->0x2c84
    2c82:	50 10       	MOV       R5, #0
    2c84:	55 d1       	ZXT.B     R5, R5
    2c86:	05 58       	MOV       R0, R5
    2c88:	08 45       	LD        R5, [PC + #8]         ;->0x2ca8  :=0x4ba6
    2c8a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:325

    /*---------------- 设置OSC_CTL0寄存器LFCKS位 ----------------*/
    if (NewState != LFCK_INPUT_INTLF)
    2c8c:	5e 82       	LD.W      R5, [SP]
    2c8e:	50 38       	CMP       R5, #0
    2c90:	05 f0       	JZ        $+5                   ;->0x2c9a
..\src\kf32a9k1xxx_osc.c:328
    {
        /* 选择EXTLF作为LFCLK时钟 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKS_POS);
    2c92:	51 10       	MOV       R5, #1
    2c94:	ae 7b       	LSL       R5, #30
    2c96:	2e 4c       	SET       [R5], #6
    2c98:	04 04       	SJMP      $+4                   ;->0x2ca0
..\src\kf32a9k1xxx_osc.c:333
    }
    else
    {
        /* 选择INTLF作为LFCLK时钟 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKS_POS);
    2c9a:	51 10       	MOV       R5, #1
    2c9c:	ae 7b       	LSL       R5, #30
    2c9e:	2e 4e       	CLR       [R5], #6
..\src\kf32a9k1xxx_osc.c:335
    }
}
    2ca0:	e4 28       	ADD       SP, #4
    2ca2:	0d 5d       	POP       LR
    2ca4:	1d 5c       	JMP       LR
    2ca6:	00 00       	NOP      NOP      
    2ca8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00002cac <OSC_LFCK_Enable>:
OSC_LFCK_Enable():
..\src\kf32a9k1xxx_osc.c:345
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
OSC_LFCK_Enable (FunctionalState NewState)
{
    2cac:	2d 5d       	PUSH      LR
    2cae:	e4 30       	SUB       SP, #4
    2cb0:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_osc.c:347
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2cb2:	5e 82       	LD.W      R5, [SP]
    2cb4:	50 38       	CMP       R5, #0
    2cb6:	04 f0       	JZ        $+4                   ;->0x2cbe
    2cb8:	5e 82       	LD.W      R5, [SP]
    2cba:	51 38       	CMP       R5, #1
    2cbc:	03 f1       	JNZ       $+3                   ;->0x2cc2
    2cbe:	51 10       	MOV       R5, #1
    2cc0:	02 04       	SJMP      $+2                   ;->0x2cc4
    2cc2:	50 10       	MOV       R5, #0
    2cc4:	05 58       	MOV       R0, R5
    2cc6:	08 45       	LD        R5, [PC + #8]         ;->0x2ce4  :=0x4ba6
    2cc8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:350

    /*---------------- 设置OSC_CTL0寄存器LFCKEN位 ----------------*/
    if (NewState != FALSE)
    2cca:	5e 82       	LD.W      R5, [SP]
    2ccc:	50 38       	CMP       R5, #0
    2cce:	05 f0       	JZ        $+5                   ;->0x2cd8
..\src\kf32a9k1xxx_osc.c:353
    {
        /* LFCLK时钟信号允许 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKEN_POS);
    2cd0:	51 10       	MOV       R5, #1
    2cd2:	ae 7b       	LSL       R5, #30
    2cd4:	2c 4c       	SET       [R5], #4
    2cd6:	04 04       	SJMP      $+4                   ;->0x2cde
..\src\kf32a9k1xxx_osc.c:358
    }
    else
    {
        /* LFCLK时钟信号禁止 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKEN_POS);
    2cd8:	51 10       	MOV       R5, #1
    2cda:	ae 7b       	LSL       R5, #30
    2cdc:	2c 4e       	CLR       [R5], #4
..\src\kf32a9k1xxx_osc.c:360
    }
}
    2cde:	e4 28       	ADD       SP, #4
    2ce0:	0d 5d       	POP       LR
    2ce2:	1d 5c       	JMP       LR
    2ce4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00002ce8 <OSC_SCK_Source_Config>:
OSC_SCK_Source_Config():
..\src\kf32a9k1xxx_osc.c:375
  *                     SCLK_SOURCE_LP4M:  选择 LP4M 输出作为系统时钟
  * 返回  无。
  */
void
OSC_SCK_Source_Config (uint32_t SclkSource)
{
    2ce8:	81 5f       	PUSH      {R6,LR}
    2cea:	e8 30       	SUB       SP, #8
    2cec:	01 20       	ST.W      [SP + #1], R0
..\src\kf32a9k1xxx_osc.c:376
    uint32_t tmpreg = 0;
    2cee:	50 10       	MOV       R5, #0
    2cf0:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:379

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_SCLK_SOURCE(SclkSource));
    2cf2:	01 0d       	LD.W      R5, [SP + #1]
    2cf4:	33 10       	MOV       R3, #3
    2cf6:	e5 dc       	LSR       R4, R5, R3
    2cf8:	51 10       	MOV       R5, #1
    2cfa:	40 38       	CMP       R4, #0
    2cfc:	02 f0       	JZ        $+2                   ;->0x2d00
    2cfe:	50 10       	MOV       R5, #0
    2d00:	55 d1       	ZXT.B     R5, R5
    2d02:	05 58       	MOV       R0, R5
    2d04:	0b 45       	LD        R5, [PC + #11]        ;->0x2d30  :=0x4ba6
    2d06:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:382

    /*---------------- 设置OSC_CTL0寄存器SCKS位 ----------------*/
    tmpreg = SclkSource << OSC_CTL0_SCKS0_POS;
    2d08:	01 0d       	LD.W      R5, [SP + #1]
    2d0a:	6d c3       	ADD       R5, R5, R5
    2d0c:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:383
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_SCKS, tmpreg);
    2d0e:	61 10       	MOV       R6, #1
    2d10:	b6 7b       	LSL       R6, #30
    2d12:	51 10       	MOV       R5, #1
    2d14:	ae 7b       	LSL       R5, #30
    2d16:	55 82       	LD.W      R5, [R5]
    2d18:	05 58       	MOV       R0, R5
    2d1a:	1e 10       	MOV       R1, #14
    2d1c:	11 68       	NOT       R1, R1
    2d1e:	2e 82       	LD.W      R2, [SP]
    2d20:	05 45       	LD        R5, [PC + #5]         ;->0x2d34  :=0x2af0
    2d22:	05 5c       	LJMP      R5
    2d24:	a0 58       	MOV       R5, R0
    2d26:	65 85       	ST.W      [R6], R5
..\src\kf32a9k1xxx_osc.c:384
}
    2d28:	e8 28       	ADD       SP, #8
    2d2a:	06 5d       	POP       R6
    2d2c:	0d 5d       	POP       LR
    2d2e:	1d 5c       	JMP       LR
    2d30:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2d34:	f0 2a 00 00 	.long     0x00002af0 ->000010992  [!!!@2@:ADD       PC, #32	@@: NOP      

00002d38 <OSC_PLL_Multiple_Value_Select>:
OSC_PLL_Multiple_Value_Select():
..\src\kf32a9k1xxx_osc.c:543
  *					放大倍数=PLLmultiple_M/（PLLmultiple_N*PLLmultiple_NO）
  * 返回  无。
  */
void
OSC_PLL_Multiple_Value_Select (uint32_t PLLmultiple_M,uint32_t PLLmultiple_N,uint32_t PLLmultiple_NO)
{
    2d38:	81 5f       	PUSH      {R6,LR}
    2d3a:	e0 31       	SUB       SP, #16
    2d3c:	01 20       	ST.W      [SP + #1], R0
    2d3e:	02 21       	ST.W      [SP + #2], R1
    2d40:	03 22       	ST.W      [SP + #3], R2
..\src\kf32a9k1xxx_osc.c:544
    uint32_t tmpreg = 0x00;
    2d42:	50 10       	MOV       R5, #0
    2d44:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:547

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_MValue(PLLmultiple_M));
    2d46:	51 10       	MOV       R5, #1
    2d48:	01 0b       	LD.W      R3, [SP + #1]
    2d4a:	2b 44       	LD        R4, [PC + #43]        ;->0x2df4  :=0x3fff
    2d4c:	34 70       	CMP       R3, R4
    2d4e:	02 f9       	JLS       $+2                   ;->0x2d52
    2d50:	50 10       	MOV       R5, #0
    2d52:	55 d1       	ZXT.B     R5, R5
    2d54:	05 58       	MOV       R0, R5
    2d56:	29 45       	LD        R5, [PC + #41]        ;->0x2df8  :=0x4ba6
    2d58:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:548
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_NValue(PLLmultiple_N));
    2d5a:	51 10       	MOV       R5, #1
    2d5c:	02 0c       	LD.W      R4, [SP + #2]
    2d5e:	4f 38       	CMP       R4, #15
    2d60:	02 f9       	JLS       $+2                   ;->0x2d64
    2d62:	50 10       	MOV       R5, #0
    2d64:	55 d1       	ZXT.B     R5, R5
    2d66:	05 58       	MOV       R0, R5
    2d68:	24 45       	LD        R5, [PC + #36]        ;->0x2df8  :=0x4ba6
    2d6a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:549
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_NOValue(PLLmultiple_NO));
    2d6c:	03 0d       	LD.W      R5, [SP + #3]
    2d6e:	51 38       	CMP       R5, #1
    2d70:	0a f0       	JZ        $+10                  ;->0x2d84
    2d72:	03 0d       	LD.W      R5, [SP + #3]
    2d74:	52 38       	CMP       R5, #2
    2d76:	07 f0       	JZ        $+7                   ;->0x2d84
    2d78:	03 0d       	LD.W      R5, [SP + #3]
    2d7a:	54 38       	CMP       R5, #4
    2d7c:	04 f0       	JZ        $+4                   ;->0x2d84
    2d7e:	03 0d       	LD.W      R5, [SP + #3]
    2d80:	58 38       	CMP       R5, #8
    2d82:	03 f1       	JNZ       $+3                   ;->0x2d88
    2d84:	51 10       	MOV       R5, #1
    2d86:	02 04       	SJMP      $+2                   ;->0x2d8a
    2d88:	50 10       	MOV       R5, #0
    2d8a:	05 58       	MOV       R0, R5
    2d8c:	1b 45       	LD        R5, [PC + #27]        ;->0x2df8  :=0x4ba6
    2d8e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:551

    if(PLLmultiple_NO==8){PLLmultiple_NO=3;}
    2d90:	03 0d       	LD.W      R5, [SP + #3]
    2d92:	58 38       	CMP       R5, #8
    2d94:	04 f1       	JNZ       $+4                   ;->0x2d9c
    2d96:	53 10       	MOV       R5, #3
    2d98:	03 25       	ST.W      [SP + #3], R5
    2d9a:	12 04       	SJMP      $+18                  ;->0x2dbe
..\src\kf32a9k1xxx_osc.c:552
    else if(PLLmultiple_NO==4){PLLmultiple_NO=2;}
    2d9c:	03 0d       	LD.W      R5, [SP + #3]
    2d9e:	54 38       	CMP       R5, #4
    2da0:	04 f1       	JNZ       $+4                   ;->0x2da8
    2da2:	52 10       	MOV       R5, #2
    2da4:	03 25       	ST.W      [SP + #3], R5
    2da6:	0c 04       	SJMP      $+12                  ;->0x2dbe
..\src\kf32a9k1xxx_osc.c:553
    else if(PLLmultiple_NO==2){PLLmultiple_NO=1;}
    2da8:	03 0d       	LD.W      R5, [SP + #3]
    2daa:	52 38       	CMP       R5, #2
    2dac:	04 f1       	JNZ       $+4                   ;->0x2db4
    2dae:	51 10       	MOV       R5, #1
    2db0:	03 25       	ST.W      [SP + #3], R5
    2db2:	06 04       	SJMP      $+6                   ;->0x2dbe
..\src\kf32a9k1xxx_osc.c:554
    else if(PLLmultiple_NO==1){PLLmultiple_NO=0;}
    2db4:	03 0d       	LD.W      R5, [SP + #3]
    2db6:	51 38       	CMP       R5, #1
    2db8:	03 f1       	JNZ       $+3                   ;->0x2dbe
    2dba:	50 10       	MOV       R5, #0
    2dbc:	03 25       	ST.W      [SP + #3], R5
..\src\kf32a9k1xxx_osc.c:557

    /*---------------- 设置PLL_CTL寄存器OD位N位M位 ----------------*/
    tmpreg |= ((PLLmultiple_M << PLL_CTL_M0_POS) \
    2dbe:	01 0d       	LD.W      R5, [SP + #1]
    2dc0:	32 10       	MOV       R3, #2
    2dc2:	e5 da       	LSL       R4, R5, R3
..\src\kf32a9k1xxx_osc.c:558
    		 | (PLLmultiple_N << PLL_CTL_N0_POS) \
    2dc4:	02 0d       	LD.W      R5, [SP + #2]
    2dc6:	28 7b       	LSL       R5, #16
    2dc8:	64 d7       	ORL       R4, R4, R5
..\src\kf32a9k1xxx_osc.c:559
    		 | (PLLmultiple_NO << PLL_CTL_OD0_POS));
    2dca:	03 0d       	LD.W      R5, [SP + #3]
    2dcc:	2c 7b       	LSL       R5, #20
    2dce:	64 d7       	ORL       R4, R4, R5
..\src\kf32a9k1xxx_osc.c:557
    else if(PLLmultiple_NO==4){PLLmultiple_NO=2;}
    else if(PLLmultiple_NO==2){PLLmultiple_NO=1;}
    else if(PLLmultiple_NO==1){PLLmultiple_NO=0;}

    /*---------------- 设置PLL_CTL寄存器OD位N位M位 ----------------*/
    tmpreg |= ((PLLmultiple_M << PLL_CTL_M0_POS) \
    2dd0:	5e 82       	LD.W      R5, [SP]
    2dd2:	2d d7       	ORL       R5, R5, R4
    2dd4:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:561
    		 | (PLLmultiple_N << PLL_CTL_N0_POS) \
    		 | (PLLmultiple_NO << PLL_CTL_OD0_POS));

    PLL_CTL = SFR_Config (PLL_CTL, ~(PLL_CTL_M | PLL_CTL_N | PLL_CTL_OD), tmpreg);
    2dd6:	0a 46       	LD        R6, [PC + #10]        ;->0x2dfc  :=0x40002580
    2dd8:	09 45       	LD        R5, [PC + #9]         ;->0x2dfc  :=0x40002580
    2dda:	55 82       	LD.W      R5, [R5]
    2ddc:	05 58       	MOV       R0, R5
    2dde:	09 41       	LD        R1, [PC + #9]         ;->0x2e00  :=0xffc00003
    2de0:	2e 82       	LD.W      R2, [SP]
    2de2:	09 45       	LD        R5, [PC + #9]         ;->0x2e04  :=0x2af0
    2de4:	05 5c       	LJMP      R5
    2de6:	a0 58       	MOV       R5, R0
    2de8:	65 85       	ST.W      [R6], R5
..\src\kf32a9k1xxx_osc.c:562
}
    2dea:	e0 29       	ADD       SP, #16
    2dec:	06 5d       	POP       R6
    2dee:	0d 5d       	POP       LR
    2df0:	1d 5c       	JMP       LR
    2df2:	00 00       	NOP      NOP      
    2df4:	ff 3f 00 00 	.long     0x00003fff ->000016383  [!!!@2@:CMP       PC, #127	@@: NOP      
    2df8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2dfc:	80 25 00 40 	.long     0x40002580 ->1073751424  [!!!@2@:ST.W      [SP + #128], R5	@@: LD        R0, [PC + #0]         ;->0x2dfc  :=0x40002580
    2e00:	03 00 c0 ff 	.long     0xffc00003 ->-04194301 
    2e04:	f0 2a 00 00 	.long     0x00002af0 ->000010992  [!!!@2@:ADD       PC, #32	@@: NOP      

00002e08 <OSC_PLL_RST>:
OSC_PLL_RST():
..\src\kf32a9k1xxx_osc.c:573
  */
void
OSC_PLL_RST(void)
{
    /*---------------- 设置PLL_CTL寄存器PDRST位 ----------------*/
    SFR_SET_BIT_ASM(PLL_CTL, PLL_CTL_PDRST_POS);
    2e08:	02 45       	LD        R5, [PC + #2]         ;->0x2e10  :=0x40002580
    2e0a:	28 4c       	SET       [R5], #0
..\src\kf32a9k1xxx_osc.c:574
}
    2e0c:	1d 5c       	JMP       LR
    2e0e:	00 00       	NOP      NOP      
    2e10:	80 25 00 40 	.long     0x40002580 ->1073751424  [!!!@2@:ST.W      [SP + #128], R5	@@: LD        R0, [PC + #0]         ;->0x2e10  :=0x40002580

00002e14 <OSC_PLL_Start_Delay_Config>:
OSC_PLL_Start_Delay_Config():
..\src\kf32a9k1xxx_osc.c:593
  *                   PLL_START_DELAY_32768: 延迟32768个时钟
  * 返回  无。
  */
void
OSC_PLL_Start_Delay_Config (uint32_t PLLDelay)
{
    2e14:	81 5f       	PUSH      {R6,LR}
    2e16:	e8 30       	SUB       SP, #8
    2e18:	01 20       	ST.W      [SP + #1], R0
..\src\kf32a9k1xxx_osc.c:594
    uint32_t tmpreg = 0;
    2e1a:	50 10       	MOV       R5, #0
    2e1c:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:597

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_START_DELAY(PLLDelay));
    2e1e:	01 0d       	LD.W      R5, [SP + #1]
    2e20:	34 10       	MOV       R3, #4
    2e22:	e5 dc       	LSR       R4, R5, R3
    2e24:	51 10       	MOV       R5, #1
    2e26:	40 38       	CMP       R4, #0
    2e28:	02 f0       	JZ        $+2                   ;->0x2e2c
    2e2a:	50 10       	MOV       R5, #0
    2e2c:	55 d1       	ZXT.B     R5, R5
    2e2e:	05 58       	MOV       R0, R5
    2e30:	0b 45       	LD        R5, [PC + #11]        ;->0x2e5c  :=0x4ba6
    2e32:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:600

    /*---------------- 设置OSC_CTL2寄存器PLLDLY位 ----------------*/
    tmpreg = PLLDelay << OSC_CTL2_PLLDLY0_POS;
    2e34:	01 0d       	LD.W      R5, [SP + #1]
    2e36:	a8 7b       	LSL       R5, #24
    2e38:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:601
    OSC_CTL2 = SFR_Config (OSC_CTL2, ~OSC_CTL2_PLLDLY, tmpreg);
    2e3a:	61 10       	MOV       R6, #1
    2e3c:	b6 7b       	LSL       R6, #30
    2e3e:	51 10       	MOV       R5, #1
    2e40:	ae 7b       	LSL       R5, #30
    2e42:	ed 98       	LD.W      R5, [R5 + #3]
    2e44:	05 58       	MOV       R0, R5
    2e46:	07 41       	LD        R1, [PC + #7]         ;->0x2e60  :=0xf0ffffff
    2e48:	2e 82       	LD.W      R2, [SP]
    2e4a:	07 45       	LD        R5, [PC + #7]         ;->0x2e64  :=0x2af0
    2e4c:	05 5c       	LJMP      R5
    2e4e:	a0 58       	MOV       R5, R0
    2e50:	f5 a0       	ST.W      [R6 + #3], R5
..\src\kf32a9k1xxx_osc.c:602
}
    2e52:	e8 28       	ADD       SP, #8
    2e54:	06 5d       	POP       R6
    2e56:	0d 5d       	POP       LR
    2e58:	1d 5c       	JMP       LR
    2e5a:	00 00       	NOP      NOP      
    2e5c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2e60:	ff ff ff f0 	.long     0xf0ffffff ->-251658241 
    2e64:	f0 2a 00 00 	.long     0x00002af0 ->000010992  [!!!@2@:ADD       PC, #32	@@: NOP      

00002e68 <OSC_EXTHF_Start_Delay_Config>:
OSC_EXTHF_Start_Delay_Config():
..\src\kf32a9k1xxx_osc.c:621
  *                        EXT_START_DELAY_65536: 延迟65536个时钟
  * 返回  无。
  */
void
OSC_EXTHF_Start_Delay_Config (uint32_t ExternalDelay)
{
    2e68:	81 5f       	PUSH      {R6,LR}
    2e6a:	e8 30       	SUB       SP, #8
    2e6c:	01 20       	ST.W      [SP + #1], R0
..\src\kf32a9k1xxx_osc.c:622
    uint32_t tmpreg = 0;
    2e6e:	50 10       	MOV       R5, #0
    2e70:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:625

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EXT_START_DELAY(ExternalDelay));
    2e72:	01 0d       	LD.W      R5, [SP + #1]
    2e74:	34 10       	MOV       R3, #4
    2e76:	e5 dc       	LSR       R4, R5, R3
    2e78:	51 10       	MOV       R5, #1
    2e7a:	40 38       	CMP       R4, #0
    2e7c:	02 f0       	JZ        $+2                   ;->0x2e80
    2e7e:	50 10       	MOV       R5, #0
    2e80:	55 d1       	ZXT.B     R5, R5
    2e82:	05 58       	MOV       R0, R5
    2e84:	0b 45       	LD        R5, [PC + #11]        ;->0x2eb0  :=0x4ba6
    2e86:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:628

    /*---------------- 设置OSC_CTL2寄存器EHFDLY位 ----------------*/
    tmpreg = ExternalDelay << OSC_CTL2_EHFDLY0_POS;
    2e88:	01 0d       	LD.W      R5, [SP + #1]
    2e8a:	2c 7b       	LSL       R5, #20
    2e8c:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_osc.c:629
    OSC_CTL2 = SFR_Config (OSC_CTL2, ~OSC_CTL2_EHFDLY, tmpreg);
    2e8e:	61 10       	MOV       R6, #1
    2e90:	b6 7b       	LSL       R6, #30
    2e92:	51 10       	MOV       R5, #1
    2e94:	ae 7b       	LSL       R5, #30
    2e96:	ed 98       	LD.W      R5, [R5 + #3]
    2e98:	05 58       	MOV       R0, R5
    2e9a:	07 41       	LD        R1, [PC + #7]         ;->0x2eb4  :=0xff0fffff
    2e9c:	2e 82       	LD.W      R2, [SP]
    2e9e:	07 45       	LD        R5, [PC + #7]         ;->0x2eb8  :=0x2af0
    2ea0:	05 5c       	LJMP      R5
    2ea2:	a0 58       	MOV       R5, R0
    2ea4:	f5 a0       	ST.W      [R6 + #3], R5
..\src\kf32a9k1xxx_osc.c:630
}
    2ea6:	e8 28       	ADD       SP, #8
    2ea8:	06 5d       	POP       R6
    2eaa:	0d 5d       	POP       LR
    2eac:	1d 5c       	JMP       LR
    2eae:	00 00       	NOP      NOP      
    2eb0:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2eb4:	ff ff 0f ff 	.long     0xff0fffff ->-15728641 
    2eb8:	f0 2a 00 00 	.long     0x00002af0 ->000010992  [!!!@2@:ADD       PC, #32	@@: NOP      

00002ebc <OSC_PLL_Software_Enable>:
OSC_PLL_Software_Enable():
..\src\kf32a9k1xxx_osc.c:691
  * 输入  NewState: PLL软件使能状态，取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
OSC_PLL_Software_Enable (FunctionalState NewState)
{
    2ebc:	2d 5d       	PUSH      LR
    2ebe:	e4 30       	SUB       SP, #4
    2ec0:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_osc.c:693
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2ec2:	5e 82       	LD.W      R5, [SP]
    2ec4:	50 38       	CMP       R5, #0
    2ec6:	04 f0       	JZ        $+4                   ;->0x2ece
    2ec8:	5e 82       	LD.W      R5, [SP]
    2eca:	51 38       	CMP       R5, #1
    2ecc:	03 f1       	JNZ       $+3                   ;->0x2ed2
    2ece:	51 10       	MOV       R5, #1
    2ed0:	02 04       	SJMP      $+2                   ;->0x2ed4
    2ed2:	50 10       	MOV       R5, #0
    2ed4:	05 58       	MOV       R0, R5
    2ed6:	07 45       	LD        R5, [PC + #7]         ;->0x2ef0  :=0x4ba6
    2ed8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:696

    /*---------------- 设置OSC_CTL2寄存器PLLSWEN位 ----------------*/
    if (NewState != FALSE)
    2eda:	5e 82       	LD.W      R5, [SP]
    2edc:	50 38       	CMP       R5, #0
    2ede:	04 f0       	JZ        $+4                   ;->0x2ee6
..\src\kf32a9k1xxx_osc.c:699
    {
        /* 使能PLL工作 */
        SFR_SET_BIT_ASM(OSC_CTL2, OSC_CTL2_PLLSWEN_POS);
    2ee0:	05 45       	LD        R5, [PC + #5]         ;->0x2ef4  :=0x4000000c
    2ee2:	2c 4c       	SET       [R5], #4
    2ee4:	03 04       	SJMP      $+3                   ;->0x2eea
..\src\kf32a9k1xxx_osc.c:704
    }
    else
    {
        /* 无效 */
        SFR_CLR_BIT_ASM(OSC_CTL2, OSC_CTL2_PLLSWEN_POS);
    2ee6:	04 45       	LD        R5, [PC + #4]         ;->0x2ef4  :=0x4000000c
    2ee8:	2c 4e       	CLR       [R5], #4
..\src\kf32a9k1xxx_osc.c:706
    }
}
    2eea:	e4 28       	ADD       SP, #4
    2eec:	0d 5d       	POP       LR
    2eee:	1d 5c       	JMP       LR
    2ef0:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2ef4:	0c 00 00 40 	.long     0x4000000c ->1073741836 

00002ef8 <OSC_EXTHF_Software_Enable>:
OSC_EXTHF_Software_Enable():
..\src\kf32a9k1xxx_osc.c:715
  * 输入  NewState: 外部高频振荡器软件使能状态，取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
OSC_EXTHF_Software_Enable (FunctionalState NewState)
{
    2ef8:	2d 5d       	PUSH      LR
    2efa:	e4 30       	SUB       SP, #4
    2efc:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_osc.c:717
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2efe:	5e 82       	LD.W      R5, [SP]
    2f00:	50 38       	CMP       R5, #0
    2f02:	04 f0       	JZ        $+4                   ;->0x2f0a
    2f04:	5e 82       	LD.W      R5, [SP]
    2f06:	51 38       	CMP       R5, #1
    2f08:	03 f1       	JNZ       $+3                   ;->0x2f0e
    2f0a:	51 10       	MOV       R5, #1
    2f0c:	02 04       	SJMP      $+2                   ;->0x2f10
    2f0e:	50 10       	MOV       R5, #0
    2f10:	05 58       	MOV       R0, R5
    2f12:	07 45       	LD        R5, [PC + #7]         ;->0x2f2c  :=0x4ba6
    2f14:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:720

    /*---------------- 设置OSC_CTL2寄存器EXTHFSWEN位 ----------------*/
    if (NewState != FALSE)
    2f16:	5e 82       	LD.W      R5, [SP]
    2f18:	50 38       	CMP       R5, #0
    2f1a:	04 f0       	JZ        $+4                   ;->0x2f22
..\src\kf32a9k1xxx_osc.c:723
    {
        /* 使能外部高频振荡器工作 */
        SFR_SET_BIT_ASM(OSC_CTL2, OSC_CTL2_EXTHFSWEN_POS);
    2f1c:	05 45       	LD        R5, [PC + #5]         ;->0x2f30  :=0x4000000c
    2f1e:	2b 4c       	SET       [R5], #3
    2f20:	03 04       	SJMP      $+3                   ;->0x2f26
..\src\kf32a9k1xxx_osc.c:728
    }
    else
    {
        /* 无效 */
        SFR_CLR_BIT_ASM(OSC_CTL2, OSC_CTL2_EXTHFSWEN_POS);
    2f22:	04 45       	LD        R5, [PC + #4]         ;->0x2f30  :=0x4000000c
    2f24:	2b 4e       	CLR       [R5], #3
..\src\kf32a9k1xxx_osc.c:730
    }
}
    2f26:	e4 28       	ADD       SP, #4
    2f28:	0d 5d       	POP       LR
    2f2a:	1d 5c       	JMP       LR
    2f2c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2f30:	0c 00 00 40 	.long     0x4000000c ->1073741836 

00002f34 <OSC_Get_EXTHF_INT_Flag>:
OSC_Get_EXTHF_INT_Flag():
..\src\kf32a9k1xxx_osc.c:1193
  */
FlagStatus
OSC_Get_EXTHF_INT_Flag (void)
{
    /*---------------- 设置OSC_INT寄存器EHFIF位 ----------------*/
    if (OSC_INT & OSC_INT_EHFIF)
    2f34:	51 10       	MOV       R5, #1
    2f36:	ae 7b       	LSL       R5, #30
    2f38:	a5 98       	LD.W      R4, [R5 + #2]
    2f3a:	58 10       	MOV       R5, #8
    2f3c:	6c d5       	ANL       R5, R4, R5
    2f3e:	50 38       	CMP       R5, #0
    2f40:	03 f0       	JZ        $+3                   ;->0x2f46
..\src\kf32a9k1xxx_osc.c:1196
    {
        /* PLL锁定 */
        return SET;
    2f42:	51 10       	MOV       R5, #1
    2f44:	02 04       	SJMP      $+2                   ;->0x2f48
..\src\kf32a9k1xxx_osc.c:1201
    }
    else
    {
        /* PLL未锁定 */
        return RESET;
    2f46:	50 10       	MOV       R5, #0
..\src\kf32a9k1xxx_osc.c:1203
    }
}
    2f48:	05 58       	MOV       R0, R5
    2f4a:	1d 5c       	JMP       LR

00002f4c <PCLK_CTL0_Peripheral_Clock_Enable>:
PCLK_CTL0_Peripheral_Clock_Enable():
..\src\kf32a9k1xxx_pclk.c:36
  * 返回  无。
  **/
void
PCLK_CTL0_Peripheral_Clock_Enable (uint32_t PCLK_CTL0_bit,
                    FunctionalState NewState)
{
    2f4c:	2d 5d       	PUSH      LR
    2f4e:	e8 30       	SUB       SP, #8
    2f50:	e0 85       	ST.W      [SP], R0
    2f52:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_pclk.c:38
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PCLK_CTL0_PERIPH(PCLK_CTL0_bit));
    2f54:	5e 82       	LD.W      R5, [SP]
    2f56:	a8 7c       	LSR       R5, #8
    2f58:	50 38       	CMP       R5, #0
    2f5a:	06 f1       	JNZ       $+6                   ;->0x2f66
    2f5c:	5e 82       	LD.W      R5, [SP]
    2f5e:	50 38       	CMP       R5, #0
    2f60:	03 f0       	JZ        $+3                   ;->0x2f66
    2f62:	51 10       	MOV       R5, #1
    2f64:	02 04       	SJMP      $+2                   ;->0x2f68
    2f66:	50 10       	MOV       R5, #0
    2f68:	05 58       	MOV       R0, R5
    2f6a:	12 45       	LD        R5, [PC + #18]        ;->0x2fb0  :=0x4ba6
    2f6c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pclk.c:39
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2f6e:	01 0d       	LD.W      R5, [SP + #1]
    2f70:	50 38       	CMP       R5, #0
    2f72:	04 f0       	JZ        $+4                   ;->0x2f7a
    2f74:	01 0d       	LD.W      R5, [SP + #1]
    2f76:	51 38       	CMP       R5, #1
    2f78:	03 f1       	JNZ       $+3                   ;->0x2f7e
    2f7a:	51 10       	MOV       R5, #1
    2f7c:	02 04       	SJMP      $+2                   ;->0x2f80
    2f7e:	50 10       	MOV       R5, #0
    2f80:	05 58       	MOV       R0, R5
    2f82:	0c 45       	LD        R5, [PC + #12]        ;->0x2fb0  :=0x4ba6
    2f84:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pclk.c:41

    if (NewState != FALSE)
    2f86:	01 0d       	LD.W      R5, [SP + #1]
    2f88:	50 38       	CMP       R5, #0
    2f8a:	08 f0       	JZ        $+8                   ;->0x2f9a
..\src\kf32a9k1xxx_pclk.c:43
    {
        PCLK_CTL0 |= PCLK_CTL0_bit;
    2f8c:	0a 45       	LD        R5, [PC + #10]        ;->0x2fb4  :=0x40002640
    2f8e:	0a 44       	LD        R4, [PC + #10]        ;->0x2fb4  :=0x40002640
    2f90:	34 82       	LD.W      R3, [R4]
    2f92:	4e 82       	LD.W      R4, [SP]
    2f94:	23 d7       	ORL       R4, R3, R4
    2f96:	54 85       	ST.W      [R5], R4
    2f98:	08 04       	SJMP      $+8                   ;->0x2fa8
..\src\kf32a9k1xxx_pclk.c:47
    }
    else
    {
        PCLK_CTL0 &= ~PCLK_CTL0_bit;
    2f9a:	07 44       	LD        R4, [PC + #7]         ;->0x2fb4  :=0x40002640
    2f9c:	06 45       	LD        R5, [PC + #6]         ;->0x2fb4  :=0x40002640
    2f9e:	35 82       	LD.W      R3, [R5]
    2fa0:	5e 82       	LD.W      R5, [SP]
    2fa2:	55 68       	NOT       R5, R5
    2fa4:	6b d5       	ANL       R5, R3, R5
    2fa6:	45 85       	ST.W      [R4], R5
..\src\kf32a9k1xxx_pclk.c:49
    }
}
    2fa8:	e8 28       	ADD       SP, #8
    2faa:	0d 5d       	POP       LR
    2fac:	1d 5c       	JMP       LR
    2fae:	00 00       	NOP      NOP      
    2fb0:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    2fb4:	40 26 00 40 	.long     0x40002640 ->1073751616  [!!!@2@:ST.W      [SP + #64], R6	@@: LD        R0, [PC + #0]         ;->0x2fb4  :=0x40002640

00002fb8 <PCLK_CTL1_Peripheral_Clock_Enable>:
PCLK_CTL1_Peripheral_Clock_Enable():
..\src\kf32a9k1xxx_pclk.c:83
  * 返回  无。
  **/
void
PCLK_CTL1_Peripheral_Clock_Enable (uint32_t PCLK_CTL1_bit,
                    FunctionalState NewState)
{
    2fb8:	2d 5d       	PUSH      LR
    2fba:	e8 30       	SUB       SP, #8
    2fbc:	e0 85       	ST.W      [SP], R0
    2fbe:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_pclk.c:85
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PCLK_CTL1_PERIPH(PCLK_CTL1_bit));
    2fc0:	5e 82       	LD.W      R5, [SP]
    2fc2:	17 44       	LD        R4, [PC + #23]        ;->0x301c  :=0xe0440381
    2fc4:	2d d5       	ANL       R5, R5, R4
    2fc6:	50 38       	CMP       R5, #0
    2fc8:	06 f1       	JNZ       $+6                   ;->0x2fd4
    2fca:	5e 82       	LD.W      R5, [SP]
    2fcc:	50 38       	CMP       R5, #0
    2fce:	03 f0       	JZ        $+3                   ;->0x2fd4
    2fd0:	51 10       	MOV       R5, #1
    2fd2:	02 04       	SJMP      $+2                   ;->0x2fd6
    2fd4:	50 10       	MOV       R5, #0
    2fd6:	05 58       	MOV       R0, R5
    2fd8:	12 45       	LD        R5, [PC + #18]        ;->0x3020  :=0x4ba6
    2fda:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pclk.c:86
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2fdc:	01 0d       	LD.W      R5, [SP + #1]
    2fde:	50 38       	CMP       R5, #0
    2fe0:	04 f0       	JZ        $+4                   ;->0x2fe8
    2fe2:	01 0d       	LD.W      R5, [SP + #1]
    2fe4:	51 38       	CMP       R5, #1
    2fe6:	03 f1       	JNZ       $+3                   ;->0x2fec
    2fe8:	51 10       	MOV       R5, #1
    2fea:	02 04       	SJMP      $+2                   ;->0x2fee
    2fec:	50 10       	MOV       R5, #0
    2fee:	05 58       	MOV       R0, R5
    2ff0:	0c 45       	LD        R5, [PC + #12]        ;->0x3020  :=0x4ba6
    2ff2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pclk.c:88

    if (NewState != FALSE)
    2ff4:	01 0d       	LD.W      R5, [SP + #1]
    2ff6:	50 38       	CMP       R5, #0
    2ff8:	08 f0       	JZ        $+8                   ;->0x3008
..\src\kf32a9k1xxx_pclk.c:90
    {
        PCLK_CTL1 |= PCLK_CTL1_bit;
    2ffa:	0b 45       	LD        R5, [PC + #11]        ;->0x3024  :=0x40002640
    2ffc:	0a 44       	LD        R4, [PC + #10]        ;->0x3024  :=0x40002640
    2ffe:	5c 98       	LD.W      R3, [R4 + #1]
    3000:	4e 82       	LD.W      R4, [SP]
    3002:	23 d7       	ORL       R4, R3, R4
    3004:	6c a0       	ST.W      [R5 + #1], R4
    3006:	08 04       	SJMP      $+8                   ;->0x3016
..\src\kf32a9k1xxx_pclk.c:94
    }
    else
    {
        PCLK_CTL1 &= ~PCLK_CTL1_bit;
    3008:	07 44       	LD        R4, [PC + #7]         ;->0x3024  :=0x40002640
    300a:	07 45       	LD        R5, [PC + #7]         ;->0x3024  :=0x40002640
    300c:	5d 98       	LD.W      R3, [R5 + #1]
    300e:	5e 82       	LD.W      R5, [SP]
    3010:	55 68       	NOT       R5, R5
    3012:	6b d5       	ANL       R5, R3, R5
    3014:	65 a0       	ST.W      [R4 + #1], R5
..\src\kf32a9k1xxx_pclk.c:96
    }
}
    3016:	e8 28       	ADD       SP, #8
    3018:	0d 5d       	POP       LR
    301a:	1d 5c       	JMP       LR
    301c:	81 03 44 e0 	.long     0xe0440381 ->-532413567  [!!!@4@:JMP       $-8265660             ;->0xff03f0a4
    3020:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    3024:	40 26 00 40 	.long     0x40002640 ->1073751616  [!!!@2@:ST.W      [SP + #64], R6	@@: LD        R0, [PC + #0]         ;->0x3024  :=0x40002640

00003028 <PCLK_CTL2_Peripheral_Clock_Enable>:
PCLK_CTL2_Peripheral_Clock_Enable():
..\src\kf32a9k1xxx_pclk.c:124
  * 返回  无。
  **/
void
PCLK_CTL2_Peripheral_Clock_Enable (uint32_t PCLK_CTL2_bit,
					FunctionalState NewState)
{
    3028:	2d 5d       	PUSH      LR
    302a:	e8 30       	SUB       SP, #8
    302c:	e0 85       	ST.W      [SP], R0
    302e:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_pclk.c:126
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_PCLK_CTL2_PERIPH(PCLK_CTL2_bit));
    3030:	5e 82       	LD.W      R5, [SP]
    3032:	17 44       	LD        R4, [PC + #23]        ;->0x308c  :=0x469ea0dc
    3034:	2d d5       	ANL       R5, R5, R4
    3036:	50 38       	CMP       R5, #0
    3038:	06 f1       	JNZ       $+6                   ;->0x3044
    303a:	5e 82       	LD.W      R5, [SP]
    303c:	50 38       	CMP       R5, #0
    303e:	03 f0       	JZ        $+3                   ;->0x3044
    3040:	51 10       	MOV       R5, #1
    3042:	02 04       	SJMP      $+2                   ;->0x3046
    3044:	50 10       	MOV       R5, #0
    3046:	05 58       	MOV       R0, R5
    3048:	12 45       	LD        R5, [PC + #18]        ;->0x3090  :=0x4ba6
    304a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pclk.c:127
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    304c:	01 0d       	LD.W      R5, [SP + #1]
    304e:	50 38       	CMP       R5, #0
    3050:	04 f0       	JZ        $+4                   ;->0x3058
    3052:	01 0d       	LD.W      R5, [SP + #1]
    3054:	51 38       	CMP       R5, #1
    3056:	03 f1       	JNZ       $+3                   ;->0x305c
    3058:	51 10       	MOV       R5, #1
    305a:	02 04       	SJMP      $+2                   ;->0x305e
    305c:	50 10       	MOV       R5, #0
    305e:	05 58       	MOV       R0, R5
    3060:	0c 45       	LD        R5, [PC + #12]        ;->0x3090  :=0x4ba6
    3062:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pclk.c:129

	if(NewState != FALSE)
    3064:	01 0d       	LD.W      R5, [SP + #1]
    3066:	50 38       	CMP       R5, #0
    3068:	08 f0       	JZ        $+8                   ;->0x3078
..\src\kf32a9k1xxx_pclk.c:131
	{
		PCLK_CTL2 |= PCLK_CTL2_bit;
    306a:	0b 45       	LD        R5, [PC + #11]        ;->0x3094  :=0x40002640
    306c:	0a 44       	LD        R4, [PC + #10]        ;->0x3094  :=0x40002640
    306e:	9c 98       	LD.W      R3, [R4 + #2]
    3070:	4e 82       	LD.W      R4, [SP]
    3072:	23 d7       	ORL       R4, R3, R4
    3074:	ac a0       	ST.W      [R5 + #2], R4
    3076:	08 04       	SJMP      $+8                   ;->0x3086
..\src\kf32a9k1xxx_pclk.c:135
	}
	else
	{
		PCLK_CTL2 &= ~PCLK_CTL2_bit;
    3078:	07 44       	LD        R4, [PC + #7]         ;->0x3094  :=0x40002640
    307a:	07 45       	LD        R5, [PC + #7]         ;->0x3094  :=0x40002640
    307c:	9d 98       	LD.W      R3, [R5 + #2]
    307e:	5e 82       	LD.W      R5, [SP]
    3080:	55 68       	NOT       R5, R5
    3082:	6b d5       	ANL       R5, R3, R5
    3084:	a5 a0       	ST.W      [R4 + #2], R5
..\src\kf32a9k1xxx_pclk.c:137
	}
}
    3086:	e8 28       	ADD       SP, #8
    3088:	0d 5d       	POP       LR
    308a:	1d 5c       	JMP       LR
    308c:	dc a0 9e 46 	.long     0x469ea0dc ->1184800988  [!!!@2@:ST.W      [R3 + #3], R4	@@: LD        R6, [PC + #158]       ;->0x3304  :=0x5c1d5d0d
    3090:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    3094:	40 26 00 40 	.long     0x40002640 ->1073751616  [!!!@2@:ST.W      [SP + #64], R6	@@: LD        R0, [PC + #0]         ;->0x3094  :=0x40002640

00003098 <PM_EXTHF_PIN_Selection_Config>:
PM_EXTHF_PIN_Selection_Config():
..\src\kf32a9k1xxx_pm.c:1847
  *                         PM_EXTHF_PIN2_IO_PORT: 选择外部高频晶振2
  * 返回  无。
  */
void
PM_EXTHF_PIN_Selection_Config (uint32_t PeripheralPort)
{
    3098:	2d 5d       	PUSH      LR
    309a:	e4 30       	SUB       SP, #4
    309c:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_pm.c:1849
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PM_EXTHF_PIN_IO(PeripheralPort));
    309e:	5e 82       	LD.W      R5, [SP]
    30a0:	50 38       	CMP       R5, #0
    30a2:	06 f0       	JZ        $+6                   ;->0x30ae
    30a4:	4e 82       	LD.W      R4, [SP]
    30a6:	51 10       	MOV       R5, #1
    30a8:	af 7a       	LSL       R5, #15
    30aa:	45 70       	CMP       R4, R5
    30ac:	03 f1       	JNZ       $+3                   ;->0x30b2
    30ae:	51 10       	MOV       R5, #1
    30b0:	02 04       	SJMP      $+2                   ;->0x30b4
    30b2:	50 10       	MOV       R5, #0
    30b4:	05 58       	MOV       R0, R5
    30b6:	07 45       	LD        R5, [PC + #7]         ;->0x30d0  :=0x4ba6
    30b8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pm.c:1852

    /*---------------- 设置PM_CTL1寄存器HSESEL位 ----------------*/
    if (PeripheralPort != PM_EXTHF_PIN1_IO_PORT)
    30ba:	5e 82       	LD.W      R5, [SP]
    30bc:	50 38       	CMP       R5, #0
    30be:	04 f0       	JZ        $+4                   ;->0x30c6
..\src\kf32a9k1xxx_pm.c:1855
    {
        /* 选择外部低频晶振2*/
        SFR_SET_BIT_ASM(PM_CAL1, PM_CAL1_HSE_SEL_POS);
    30c0:	05 45       	LD        R5, [PC + #5]         ;->0x30d4  :=0x4000159c
    30c2:	af 4c       	SET       [R5], #15
    30c4:	03 04       	SJMP      $+3                   ;->0x30ca
..\src\kf32a9k1xxx_pm.c:1860
    }
    else
    {
        /* 选择外部低频晶振1 */
        SFR_CLR_BIT_ASM(PM_CAL1, PM_CAL1_HSE_SEL_POS);
    30c6:	04 45       	LD        R5, [PC + #4]         ;->0x30d4  :=0x4000159c
    30c8:	af 4e       	CLR       [R5], #15
..\src\kf32a9k1xxx_pm.c:1862
    }
}
    30ca:	e4 28       	ADD       SP, #4
    30cc:	0d 5d       	POP       LR
    30ce:	1d 5c       	JMP       LR
    30d0:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    30d4:	9c 15 00 40 	.long     0x4000159c ->1073747356  [!!!@2@:MOV       R9, #92	@@: LD        R0, [PC + #0]         ;->0x30d4  :=0x4000159c

000030d8 <RST_CTL0_Peripheral_Reset_Enable>:
RST_CTL0_Peripheral_Reset_Enable():
..\src\kf32a9k1xxx_rst.c:37
  * 返回  无。
  **/
void
RST_CTL0_Peripheral_Reset_Enable (uint32_t RST_CTL0_bit,
					FunctionalState NewState)
{
    30d8:	2d 5d       	PUSH      LR
    30da:	e8 30       	SUB       SP, #8
    30dc:	e0 85       	ST.W      [SP], R0
    30de:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_rst.c:39
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_RST_CTL0_RESET_PERIPH(RST_CTL0_bit));
    30e0:	5e 82       	LD.W      R5, [SP]
    30e2:	a9 7c       	LSR       R5, #9
    30e4:	50 38       	CMP       R5, #0
    30e6:	06 f1       	JNZ       $+6                   ;->0x30f2
    30e8:	5e 82       	LD.W      R5, [SP]
    30ea:	50 38       	CMP       R5, #0
    30ec:	03 f0       	JZ        $+3                   ;->0x30f2
    30ee:	51 10       	MOV       R5, #1
    30f0:	02 04       	SJMP      $+2                   ;->0x30f4
    30f2:	50 10       	MOV       R5, #0
    30f4:	05 58       	MOV       R0, R5
    30f6:	12 45       	LD        R5, [PC + #18]        ;->0x313c  :=0x4ba6
    30f8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_rst.c:40
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    30fa:	01 0d       	LD.W      R5, [SP + #1]
    30fc:	50 38       	CMP       R5, #0
    30fe:	04 f0       	JZ        $+4                   ;->0x3106
    3100:	01 0d       	LD.W      R5, [SP + #1]
    3102:	51 38       	CMP       R5, #1
    3104:	03 f1       	JNZ       $+3                   ;->0x310a
    3106:	51 10       	MOV       R5, #1
    3108:	02 04       	SJMP      $+2                   ;->0x310c
    310a:	50 10       	MOV       R5, #0
    310c:	05 58       	MOV       R0, R5
    310e:	0c 45       	LD        R5, [PC + #12]        ;->0x313c  :=0x4ba6
    3110:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_rst.c:42

	if(NewState != FALSE)
    3112:	01 0d       	LD.W      R5, [SP + #1]
    3114:	50 38       	CMP       R5, #0
    3116:	08 f0       	JZ        $+8                   ;->0x3126
..\src\kf32a9k1xxx_rst.c:44
	{
		RST_CTL0 |= RST_CTL0_bit;
    3118:	0a 45       	LD        R5, [PC + #10]        ;->0x3140  :=0x40001500
    311a:	0a 44       	LD        R4, [PC + #10]        ;->0x3140  :=0x40001500
    311c:	34 82       	LD.W      R3, [R4]
    311e:	4e 82       	LD.W      R4, [SP]
    3120:	23 d7       	ORL       R4, R3, R4
    3122:	54 85       	ST.W      [R5], R4
    3124:	08 04       	SJMP      $+8                   ;->0x3134
..\src\kf32a9k1xxx_rst.c:48
	}
	else
	{
		RST_CTL0 &= ~RST_CTL0_bit;
    3126:	07 44       	LD        R4, [PC + #7]         ;->0x3140  :=0x40001500
    3128:	06 45       	LD        R5, [PC + #6]         ;->0x3140  :=0x40001500
    312a:	35 82       	LD.W      R3, [R5]
    312c:	5e 82       	LD.W      R5, [SP]
    312e:	55 68       	NOT       R5, R5
    3130:	6b d5       	ANL       R5, R3, R5
    3132:	45 85       	ST.W      [R4], R5
..\src\kf32a9k1xxx_rst.c:50
	}
}
    3134:	e8 28       	ADD       SP, #8
    3136:	0d 5d       	POP       LR
    3138:	1d 5c       	JMP       LR
    313a:	00 00       	NOP      NOP      
    313c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    3140:	00 15 00 40 	.long     0x40001500 ->1073747200  [!!!@2@:MOV       R0, #80	@@: LD        R0, [PC + #0]         ;->0x3140  :=0x40001500

00003144 <RST_CTL1_Peripheral_Reset_Enable>:
RST_CTL1_Peripheral_Reset_Enable():
..\src\kf32a9k1xxx_rst.c:84
  * 返回  无。
  **/
void
RST_CTL1_Peripheral_Reset_Enable (uint32_t RST_CTL1_bit,
					FunctionalState NewState)
{
    3144:	2d 5d       	PUSH      LR
    3146:	e8 30       	SUB       SP, #8
    3148:	e0 85       	ST.W      [SP], R0
    314a:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_rst.c:86
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_RST_CTL1_RESET_PERIPH(RST_CTL1_bit));
    314c:	5e 82       	LD.W      R5, [SP]
    314e:	17 44       	LD        R4, [PC + #23]        ;->0x31a8  :=0xe0440381
    3150:	2d d5       	ANL       R5, R5, R4
    3152:	50 38       	CMP       R5, #0
    3154:	06 f1       	JNZ       $+6                   ;->0x3160
    3156:	5e 82       	LD.W      R5, [SP]
    3158:	50 38       	CMP       R5, #0
    315a:	03 f0       	JZ        $+3                   ;->0x3160
    315c:	51 10       	MOV       R5, #1
    315e:	02 04       	SJMP      $+2                   ;->0x3162
    3160:	50 10       	MOV       R5, #0
    3162:	05 58       	MOV       R0, R5
    3164:	12 45       	LD        R5, [PC + #18]        ;->0x31ac  :=0x4ba6
    3166:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_rst.c:87
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    3168:	01 0d       	LD.W      R5, [SP + #1]
    316a:	50 38       	CMP       R5, #0
    316c:	04 f0       	JZ        $+4                   ;->0x3174
    316e:	01 0d       	LD.W      R5, [SP + #1]
    3170:	51 38       	CMP       R5, #1
    3172:	03 f1       	JNZ       $+3                   ;->0x3178
    3174:	51 10       	MOV       R5, #1
    3176:	02 04       	SJMP      $+2                   ;->0x317a
    3178:	50 10       	MOV       R5, #0
    317a:	05 58       	MOV       R0, R5
    317c:	0c 45       	LD        R5, [PC + #12]        ;->0x31ac  :=0x4ba6
    317e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_rst.c:89

	if(NewState != FALSE)
    3180:	01 0d       	LD.W      R5, [SP + #1]
    3182:	50 38       	CMP       R5, #0
    3184:	08 f0       	JZ        $+8                   ;->0x3194
..\src\kf32a9k1xxx_rst.c:91
	{
		RST_CTL1 |= RST_CTL1_bit;
    3186:	0b 45       	LD        R5, [PC + #11]        ;->0x31b0  :=0x40001500
    3188:	0a 44       	LD        R4, [PC + #10]        ;->0x31b0  :=0x40001500
    318a:	5c 98       	LD.W      R3, [R4 + #1]
    318c:	4e 82       	LD.W      R4, [SP]
    318e:	23 d7       	ORL       R4, R3, R4
    3190:	6c a0       	ST.W      [R5 + #1], R4
    3192:	08 04       	SJMP      $+8                   ;->0x31a2
..\src\kf32a9k1xxx_rst.c:95
	}
	else
	{
		RST_CTL1 &= ~RST_CTL1_bit;
    3194:	07 44       	LD        R4, [PC + #7]         ;->0x31b0  :=0x40001500
    3196:	07 45       	LD        R5, [PC + #7]         ;->0x31b0  :=0x40001500
    3198:	5d 98       	LD.W      R3, [R5 + #1]
    319a:	5e 82       	LD.W      R5, [SP]
    319c:	55 68       	NOT       R5, R5
    319e:	6b d5       	ANL       R5, R3, R5
    31a0:	65 a0       	ST.W      [R4 + #1], R5
..\src\kf32a9k1xxx_rst.c:97
	}
}
    31a2:	e8 28       	ADD       SP, #8
    31a4:	0d 5d       	POP       LR
    31a6:	1d 5c       	JMP       LR
    31a8:	81 03 44 e0 	.long     0xe0440381 ->-532413567  [!!!@4@:JMP       $-8265660             ;->0xff03f230
    31ac:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    31b0:	00 15 00 40 	.long     0x40001500 ->1073747200  [!!!@2@:MOV       R0, #80	@@: LD        R0, [PC + #0]         ;->0x31b0  :=0x40001500

000031b4 <RST_CTL2_Peripheral_Reset_Enable>:
RST_CTL2_Peripheral_Reset_Enable():
..\src\kf32a9k1xxx_rst.c:125
  * 返回  无。
  */
void
RST_CTL2_Peripheral_Reset_Enable (uint32_t RST_CTL2_bit,
					FunctionalState NewState)
{
    31b4:	2d 5d       	PUSH      LR
    31b6:	e8 30       	SUB       SP, #8
    31b8:	e0 85       	ST.W      [SP], R0
    31ba:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_rst.c:127
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_RST_CTL2_RESET_PERIPH(RST_CTL2_bit));
    31bc:	5e 82       	LD.W      R5, [SP]
    31be:	17 44       	LD        R4, [PC + #23]        ;->0x3218  :=0x469ea0dc
    31c0:	2d d5       	ANL       R5, R5, R4
    31c2:	50 38       	CMP       R5, #0
    31c4:	06 f1       	JNZ       $+6                   ;->0x31d0
    31c6:	5e 82       	LD.W      R5, [SP]
    31c8:	50 38       	CMP       R5, #0
    31ca:	03 f0       	JZ        $+3                   ;->0x31d0
    31cc:	51 10       	MOV       R5, #1
    31ce:	02 04       	SJMP      $+2                   ;->0x31d2
    31d0:	50 10       	MOV       R5, #0
    31d2:	05 58       	MOV       R0, R5
    31d4:	12 45       	LD        R5, [PC + #18]        ;->0x321c  :=0x4ba6
    31d6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_rst.c:128
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    31d8:	01 0d       	LD.W      R5, [SP + #1]
    31da:	50 38       	CMP       R5, #0
    31dc:	04 f0       	JZ        $+4                   ;->0x31e4
    31de:	01 0d       	LD.W      R5, [SP + #1]
    31e0:	51 38       	CMP       R5, #1
    31e2:	03 f1       	JNZ       $+3                   ;->0x31e8
    31e4:	51 10       	MOV       R5, #1
    31e6:	02 04       	SJMP      $+2                   ;->0x31ea
    31e8:	50 10       	MOV       R5, #0
    31ea:	05 58       	MOV       R0, R5
    31ec:	0c 45       	LD        R5, [PC + #12]        ;->0x321c  :=0x4ba6
    31ee:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_rst.c:130

    if (NewState != FALSE)
    31f0:	01 0d       	LD.W      R5, [SP + #1]
    31f2:	50 38       	CMP       R5, #0
    31f4:	08 f0       	JZ        $+8                   ;->0x3204
..\src\kf32a9k1xxx_rst.c:132
    {
        RST_CTL2 |= RST_CTL2_bit;
    31f6:	0b 45       	LD        R5, [PC + #11]        ;->0x3220  :=0x40001500
    31f8:	0a 44       	LD        R4, [PC + #10]        ;->0x3220  :=0x40001500
    31fa:	9c 98       	LD.W      R3, [R4 + #2]
    31fc:	4e 82       	LD.W      R4, [SP]
    31fe:	23 d7       	ORL       R4, R3, R4
    3200:	ac a0       	ST.W      [R5 + #2], R4
    3202:	08 04       	SJMP      $+8                   ;->0x3212
..\src\kf32a9k1xxx_rst.c:136
    }
    else
    {
        RST_CTL2 &= ~RST_CTL2_bit;
    3204:	07 44       	LD        R4, [PC + #7]         ;->0x3220  :=0x40001500
    3206:	07 45       	LD        R5, [PC + #7]         ;->0x3220  :=0x40001500
    3208:	9d 98       	LD.W      R3, [R5 + #2]
    320a:	5e 82       	LD.W      R5, [SP]
    320c:	55 68       	NOT       R5, R5
    320e:	6b d5       	ANL       R5, R3, R5
    3210:	a5 a0       	ST.W      [R4 + #2], R5
..\src\kf32a9k1xxx_rst.c:138
    }
}
    3212:	e8 28       	ADD       SP, #8
    3214:	0d 5d       	POP       LR
    3216:	1d 5c       	JMP       LR
    3218:	dc a0 9e 46 	.long     0x469ea0dc ->1184800988  [!!!@2@:ST.W      [R3 + #3], R4	@@: LD        R6, [PC + #158]       ;->0x3490  :=0x40001f80
    321c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    3220:	00 15 00 40 	.long     0x40001500 ->1073747200  [!!!@2@:MOV       R0, #80	@@: LD        R0, [PC + #0]         ;->0x3220  :=0x40001500

00003224 <SFR_Config>:
SFR_Config():
KF32A9K1XXX.h:13916
   -- 函数定义
   ---------------------------------------------------------------------------- */
/* 写特殊功能寄存器 */
static inline uint32_t
SFR_Config (uint32_t SfrMem, uint32_t SfrMask, uint32_t WriteVal)
{
    3224:	ec 30       	SUB       SP, #12
    3226:	e0 85       	ST.W      [SP], R0
    3228:	01 21       	ST.W      [SP + #1], R1
    322a:	02 22       	ST.W      [SP + #2], R2
KF32A9K1XXX.h:13917
    return ((SfrMem & SfrMask) | (WriteVal));
    322c:	5e 82       	LD.W      R5, [SP]
    322e:	01 0c       	LD.W      R4, [SP + #1]
    3230:	25 d5       	ANL       R4, R5, R4
    3232:	02 0d       	LD.W      R5, [SP + #2]
    3234:	6c d7       	ORL       R5, R4, R5
KF32A9K1XXX.h:13918
}
    3236:	05 58       	MOV       R0, R5
    3238:	ec 28       	ADD       SP, #12
    323a:	1d 5c       	JMP       LR

0000323c <SYSTICK_Configuration>:
SYSTICK_Configuration():
..\src\kf32a9k1xxx_systick.c:43
  *               取值为24位数据。
  * 返回  无
  */
void
SYSTICK_Configuration (uint32_t Clock, uint32_t SysTickINT, uint32_t Reload)
{
    323c:	81 5f       	PUSH      {R6,LR}
    323e:	e0 31       	SUB       SP, #16
    3240:	01 20       	ST.W      [SP + #1], R0
    3242:	02 21       	ST.W      [SP + #2], R1
    3244:	03 22       	ST.W      [SP + #3], R2
..\src\kf32a9k1xxx_systick.c:44
    uint32_t tmpreg = 0;
    3246:	50 10       	MOV       R5, #0
    3248:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_systick.c:47

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_SYSTICK_CLOCK(Clock));
    324a:	01 0d       	LD.W      R5, [SP + #1]
    324c:	50 38       	CMP       R5, #0
    324e:	04 f0       	JZ        $+4                   ;->0x3256
    3250:	01 0d       	LD.W      R5, [SP + #1]
    3252:	54 38       	CMP       R5, #4
    3254:	03 f1       	JNZ       $+3                   ;->0x325a
    3256:	51 10       	MOV       R5, #1
    3258:	02 04       	SJMP      $+2                   ;->0x325c
    325a:	50 10       	MOV       R5, #0
    325c:	05 58       	MOV       R0, R5
    325e:	1b 45       	LD        R5, [PC + #27]        ;->0x32c8  :=0x4ba6
    3260:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_systick.c:48
    CHECK_RESTRICTION(CHECK_SYSTICK_RELOAD(Reload));
    3262:	03 0d       	LD.W      R5, [SP + #3]
    3264:	38 11       	MOV       R3, #24
    3266:	e5 dc       	LSR       R4, R5, R3
    3268:	51 10       	MOV       R5, #1
    326a:	40 38       	CMP       R4, #0
    326c:	02 f0       	JZ        $+2                   ;->0x3270
    326e:	50 10       	MOV       R5, #0
    3270:	55 d1       	ZXT.B     R5, R5
    3272:	05 58       	MOV       R0, R5
    3274:	15 45       	LD        R5, [PC + #21]        ;->0x32c8  :=0x4ba6
    3276:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_systick.c:49
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(SysTickINT));
    3278:	02 0d       	LD.W      R5, [SP + #2]
    327a:	50 38       	CMP       R5, #0
    327c:	04 f0       	JZ        $+4                   ;->0x3284
    327e:	02 0d       	LD.W      R5, [SP + #2]
    3280:	51 38       	CMP       R5, #1
    3282:	03 f1       	JNZ       $+3                   ;->0x3288
    3284:	51 10       	MOV       R5, #1
    3286:	02 04       	SJMP      $+2                   ;->0x328a
    3288:	50 10       	MOV       R5, #0
    328a:	05 58       	MOV       R0, R5
    328c:	0f 45       	LD        R5, [PC + #15]        ;->0x32c8  :=0x4ba6
    328e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_systick.c:52

    /*------------ 禁止节拍定时器，防止意外中断 -------------*/
    SFR_CLR_BIT_ASM(ST_CTL, ST_CTL_STEN_POS);
    3290:	0f 45       	LD        R5, [PC + #15]        ;->0x32cc  :=0x402000a0
    3292:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_systick.c:55

    /*--------------- 设置ST_RELOAD寄存器 ---------------*/
    ST_RELOAD = Reload;
    3294:	0e 45       	LD        R5, [PC + #14]        ;->0x32cc  :=0x402000a0
    3296:	03 0c       	LD.W      R4, [SP + #3]
    3298:	6c a0       	ST.W      [R5 + #1], R4
..\src\kf32a9k1xxx_systick.c:59

    /*-- 设置ST_CV寄存器，以清零当前值寄存器并清零COUNTZERO标志位，
         确保重载值能加载到当前值寄存器中 -------------------*/
    ST_CV = 0;
    329a:	0d 45       	LD        R5, [PC + #13]        ;->0x32cc  :=0x402000a0
    329c:	40 10       	MOV       R4, #0
    329e:	ac a0       	ST.W      [R5 + #2], R4
..\src\kf32a9k1xxx_systick.c:64

    /*------------------ 设置ST_CTL寄存器 -----------------*/
    /* 根据参数Clock，设置STCLKS位域 */
    /* 根据参数SysTickINT，设置TICKINTEN位域 */
    tmpreg = Clock | (SysTickINT << ST_CTL_TICKINTEN_POS);
    32a0:	02 0d       	LD.W      R5, [SP + #2]
    32a2:	6d c3       	ADD       R5, R5, R5
    32a4:	01 0c       	LD.W      R4, [SP + #1]
    32a6:	2d d7       	ORL       R5, R5, R4
    32a8:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_systick.c:65
    ST_CTL = SFR_Config (ST_CTL,
    32aa:	09 46       	LD        R6, [PC + #9]         ;->0x32cc  :=0x402000a0
    32ac:	08 45       	LD        R5, [PC + #8]         ;->0x32cc  :=0x402000a0
    32ae:	55 82       	LD.W      R5, [R5]
    32b0:	05 58       	MOV       R0, R5
    32b2:	16 10       	MOV       R1, #6
    32b4:	11 68       	NOT       R1, R1
    32b6:	2e 82       	LD.W      R2, [SP]
    32b8:	06 45       	LD        R5, [PC + #6]         ;->0x32d0  :=0x3224
    32ba:	05 5c       	LJMP      R5
    32bc:	a0 58       	MOV       R5, R0
    32be:	65 85       	ST.W      [R6], R5
..\src\kf32a9k1xxx_systick.c:68
                          ~SYSTICK_CTL_INIT_MASK,
                          tmpreg);
}
    32c0:	e0 29       	ADD       SP, #16
    32c2:	06 5d       	POP       R6
    32c4:	0d 5d       	POP       LR
    32c6:	1d 5c       	JMP       LR
    32c8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    32cc:	a0 00 20 40 	.long     0x402000a0 ->1075839136 
    32d0:	24 32 00 00 	.long     0x00003224 ->000012836  [!!!@2@:SUB       R2, #36	@@: NOP      

000032d4 <SYSTICK_Cmd>:
SYSTICK_Cmd():
..\src\kf32a9k1xxx_systick.c:86
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无
  */
void
SYSTICK_Cmd (FunctionalState NewState)
{
    32d4:	2d 5d       	PUSH      LR
    32d6:	e4 30       	SUB       SP, #4
    32d8:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_systick.c:88
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    32da:	5e 82       	LD.W      R5, [SP]
    32dc:	50 38       	CMP       R5, #0
    32de:	04 f0       	JZ        $+4                   ;->0x32e6
    32e0:	5e 82       	LD.W      R5, [SP]
    32e2:	51 38       	CMP       R5, #1
    32e4:	03 f1       	JNZ       $+3                   ;->0x32ea
    32e6:	51 10       	MOV       R5, #1
    32e8:	02 04       	SJMP      $+2                   ;->0x32ec
    32ea:	50 10       	MOV       R5, #0
    32ec:	05 58       	MOV       R0, R5
    32ee:	07 45       	LD        R5, [PC + #7]         ;->0x3308  :=0x4ba6
    32f0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_systick.c:91

    /*---------------- 设置ST_CTL寄存器STEN位 ----------------*/
    if (NewState != FALSE)
    32f2:	5e 82       	LD.W      R5, [SP]
    32f4:	50 38       	CMP       R5, #0
    32f6:	04 f0       	JZ        $+4                   ;->0x32fe
..\src\kf32a9k1xxx_systick.c:94
    {
        /* 使能系统节拍定时器 */
        SFR_SET_BIT_ASM(ST_CTL, ST_CTL_STEN_POS);
    32f8:	05 45       	LD        R5, [PC + #5]         ;->0x330c  :=0x402000a0
    32fa:	28 4c       	SET       [R5], #0
    32fc:	03 04       	SJMP      $+3                   ;->0x3302
..\src\kf32a9k1xxx_systick.c:99
    }
    else
    {
        /* 禁止系统节拍定时器 */
        SFR_CLR_BIT_ASM(ST_CTL, ST_CTL_STEN_POS);
    32fe:	04 45       	LD        R5, [PC + #4]         ;->0x330c  :=0x402000a0
    3300:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_systick.c:101
    }
}
    3302:	e4 28       	ADD       SP, #4
    3304:	0d 5d       	POP       LR
    3306:	1d 5c       	JMP       LR
    3308:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    330c:	a0 00 20 40 	.long     0x402000a0 ->1075839136 

00003310 <SYSTICK_Get_Count_Zero_Flag>:
SYSTICK_Get_Count_Zero_Flag():
..\src\kf32a9k1xxx_systick.c:165
  */
FlagStatus
SYSTICK_Get_Count_Zero_Flag (void)
{
    /*-------------------- 设置ST_CTL寄存器COUNTZERO位 --------------------*/
    if (ST_CTL & ST_CTL_COUNTZERO)
    3310:	06 45       	LD        R5, [PC + #6]         ;->0x3328  :=0x402000a0
    3312:	45 82       	LD.W      R4, [R5]
    3314:	51 10       	MOV       R5, #1
    3316:	28 7b       	LSL       R5, #16
    3318:	6c d5       	ANL       R5, R4, R5
    331a:	50 38       	CMP       R5, #0
    331c:	03 f0       	JZ        $+3                   ;->0x3322
..\src\kf32a9k1xxx_systick.c:168
    {
        /* 计数到零 */
        return SET;
    331e:	51 10       	MOV       R5, #1
    3320:	02 04       	SJMP      $+2                   ;->0x3324
..\src\kf32a9k1xxx_systick.c:173
    }
    else
    {
        /* 计数未到零 */
        return RESET;
    3322:	50 10       	MOV       R5, #0
..\src\kf32a9k1xxx_systick.c:175
    }
}
    3324:	05 58       	MOV       R0, R5
    3326:	1d 5c       	JMP       LR
    3328:	a0 00 20 40 	.long     0x402000a0 ->1075839136 

0000332c <SFR_Config>:
SFR_Config():
KF32A9K1XXX.h:13916
   -- 函数定义
   ---------------------------------------------------------------------------- */
/* 写特殊功能寄存器 */
static inline uint32_t
SFR_Config (uint32_t SfrMem, uint32_t SfrMask, uint32_t WriteVal)
{
    332c:	ec 30       	SUB       SP, #12
    332e:	e0 85       	ST.W      [SP], R0
    3330:	01 21       	ST.W      [SP + #1], R1
    3332:	02 22       	ST.W      [SP + #2], R2
KF32A9K1XXX.h:13917
    return ((SfrMem & SfrMask) | (WriteVal));
    3334:	5e 82       	LD.W      R5, [SP]
    3336:	01 0c       	LD.W      R4, [SP + #1]
    3338:	25 d5       	ANL       R4, R5, R4
    333a:	02 0d       	LD.W      R5, [SP + #2]
    333c:	6c d7       	ORL       R5, R4, R5
KF32A9K1XXX.h:13918
}
    333e:	05 58       	MOV       R0, R5
    3340:	ec 28       	ADD       SP, #12
    3342:	1d 5c       	JMP       LR

00003344 <USART_Reset>:
USART_Reset():
..\src\kf32a9k1xxx_usart.c:56
  * 输入  USARTx: 指向USART内存结构的指针，取值为USART0_SFR/USART1_SFR/USART2_SFR/USART4_SFR/USART5_SFR/USART7_SFR。
  * 返回  无。
  */
void
USART_Reset (USART_SFRmap* USARTx)
{
    3344:	2d 5d       	PUSH      LR
    3346:	e4 30       	SUB       SP, #4
    3348:	e0 85       	ST.W      [SP], R0
..\src\kf32a9k1xxx_usart.c:58
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    334a:	5e 82       	LD.W      R5, [SP]
    334c:	4c 44       	LD        R4, [PC + #76]        ;->0x347c  :=0x40000980
    334e:	54 70       	CMP       R5, R4
    3350:	15 f0       	JZ        $+21                  ;->0x337a
    3352:	5e 82       	LD.W      R5, [SP]
    3354:	4b 44       	LD        R4, [PC + #75]        ;->0x3480  :=0x40000a00
    3356:	54 70       	CMP       R5, R4
    3358:	11 f0       	JZ        $+17                  ;->0x337a
    335a:	5e 82       	LD.W      R5, [SP]
    335c:	4a 44       	LD        R4, [PC + #74]        ;->0x3484  :=0x40000a80
    335e:	54 70       	CMP       R5, R4
    3360:	0d f0       	JZ        $+13                  ;->0x337a
    3362:	5e 82       	LD.W      R5, [SP]
    3364:	49 44       	LD        R4, [PC + #73]        ;->0x3488  :=0x40000b80
    3366:	54 70       	CMP       R5, R4
    3368:	09 f0       	JZ        $+9                   ;->0x337a
    336a:	5e 82       	LD.W      R5, [SP]
    336c:	48 44       	LD        R4, [PC + #72]        ;->0x348c  :=0x40001e80
    336e:	54 70       	CMP       R5, R4
    3370:	05 f0       	JZ        $+5                   ;->0x337a
    3372:	5e 82       	LD.W      R5, [SP]
    3374:	47 44       	LD        R4, [PC + #71]        ;->0x3490  :=0x40001f80
    3376:	54 70       	CMP       R5, R4
    3378:	03 f1       	JNZ       $+3                   ;->0x337e
    337a:	51 10       	MOV       R5, #1
    337c:	02 04       	SJMP      $+2                   ;->0x3380
    337e:	50 10       	MOV       R5, #0
    3380:	05 58       	MOV       R0, R5
    3382:	45 45       	LD        R5, [PC + #69]        ;->0x3494  :=0x4ba6
    3384:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:60

    if (USARTx == USART0_SFR)
    3386:	5e 82       	LD.W      R5, [SP]
    3388:	3d 44       	LD        R4, [PC + #61]        ;->0x347c  :=0x40000980
    338a:	54 70       	CMP       R5, R4
    338c:	11 f1       	JNZ       $+17                  ;->0x33ae
..\src\kf32a9k1xxx_usart.c:62
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART0RST, TRUE);
    338e:	01 10       	MOV       R0, #1
    3390:	03 7b       	LSL       R0, #19
    3392:	11 10       	MOV       R1, #1
    3394:	41 45       	LD        R5, [PC + #65]        ;->0x3498  :=0x3144
    3396:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:63
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART0RST, FALSE);
    3398:	01 10       	MOV       R0, #1
    339a:	03 7b       	LSL       R0, #19
    339c:	10 10       	MOV       R1, #0
    339e:	3f 45       	LD        R5, [PC + #63]        ;->0x3498  :=0x3144
    33a0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:64
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART0CLKEN, TRUE);
    33a2:	01 10       	MOV       R0, #1
    33a4:	03 7b       	LSL       R0, #19
    33a6:	11 10       	MOV       R1, #1
    33a8:	3d 45       	LD        R5, [PC + #61]        ;->0x349c  :=0x2fb8
    33aa:	05 5c       	LJMP      R5
    33ac:	64 04       	SJMP      $+100                 ;->0x3474
..\src\kf32a9k1xxx_usart.c:66
    }
    else if (USARTx == USART1_SFR)
    33ae:	5e 82       	LD.W      R5, [SP]
    33b0:	34 44       	LD        R4, [PC + #52]        ;->0x3480  :=0x40000a00
    33b2:	54 70       	CMP       R5, R4
    33b4:	11 f1       	JNZ       $+17                  ;->0x33d6
..\src\kf32a9k1xxx_usart.c:68
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART1RST, TRUE);
    33b6:	01 10       	MOV       R0, #1
    33b8:	04 7b       	LSL       R0, #20
    33ba:	11 10       	MOV       R1, #1
    33bc:	37 45       	LD        R5, [PC + #55]        ;->0x3498  :=0x3144
    33be:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:69
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART1RST, FALSE);
    33c0:	01 10       	MOV       R0, #1
    33c2:	04 7b       	LSL       R0, #20
    33c4:	10 10       	MOV       R1, #0
    33c6:	35 45       	LD        R5, [PC + #53]        ;->0x3498  :=0x3144
    33c8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:70
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART1CLKEN, TRUE);
    33ca:	01 10       	MOV       R0, #1
    33cc:	04 7b       	LSL       R0, #20
    33ce:	11 10       	MOV       R1, #1
    33d0:	33 45       	LD        R5, [PC + #51]        ;->0x349c  :=0x2fb8
    33d2:	05 5c       	LJMP      R5
    33d4:	50 04       	SJMP      $+80                  ;->0x3474
..\src\kf32a9k1xxx_usart.c:72
    }
    else if (USARTx == USART2_SFR)
    33d6:	5e 82       	LD.W      R5, [SP]
    33d8:	2b 44       	LD        R4, [PC + #43]        ;->0x3484  :=0x40000a80
    33da:	54 70       	CMP       R5, R4
    33dc:	11 f1       	JNZ       $+17                  ;->0x33fe
..\src\kf32a9k1xxx_usart.c:74
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART2RST, TRUE);
    33de:	01 10       	MOV       R0, #1
    33e0:	05 7b       	LSL       R0, #21
    33e2:	11 10       	MOV       R1, #1
    33e4:	2d 45       	LD        R5, [PC + #45]        ;->0x3498  :=0x3144
    33e6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:75
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART2RST, FALSE);
    33e8:	01 10       	MOV       R0, #1
    33ea:	05 7b       	LSL       R0, #21
    33ec:	10 10       	MOV       R1, #0
    33ee:	2b 45       	LD        R5, [PC + #43]        ;->0x3498  :=0x3144
    33f0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:76
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART2CLKEN, TRUE);
    33f2:	01 10       	MOV       R0, #1
    33f4:	05 7b       	LSL       R0, #21
    33f6:	11 10       	MOV       R1, #1
    33f8:	29 45       	LD        R5, [PC + #41]        ;->0x349c  :=0x2fb8
    33fa:	05 5c       	LJMP      R5
    33fc:	3c 04       	SJMP      $+60                  ;->0x3474
..\src\kf32a9k1xxx_usart.c:78
    }
    else if (USARTx == USART4_SFR)
    33fe:	5e 82       	LD.W      R5, [SP]
    3400:	22 44       	LD        R4, [PC + #34]        ;->0x3488  :=0x40000b80
    3402:	54 70       	CMP       R5, R4
    3404:	11 f1       	JNZ       $+17                  ;->0x3426
..\src\kf32a9k1xxx_usart.c:80
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART4RST, TRUE);
    3406:	01 10       	MOV       R0, #1
    3408:	07 7b       	LSL       R0, #23
    340a:	11 10       	MOV       R1, #1
    340c:	23 45       	LD        R5, [PC + #35]        ;->0x3498  :=0x3144
    340e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:81
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART4RST, FALSE);
    3410:	01 10       	MOV       R0, #1
    3412:	07 7b       	LSL       R0, #23
    3414:	10 10       	MOV       R1, #0
    3416:	21 45       	LD        R5, [PC + #33]        ;->0x3498  :=0x3144
    3418:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:82
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART4CLKEN, TRUE);
    341a:	01 10       	MOV       R0, #1
    341c:	07 7b       	LSL       R0, #23
    341e:	11 10       	MOV       R1, #1
    3420:	1f 45       	LD        R5, [PC + #31]        ;->0x349c  :=0x2fb8
    3422:	05 5c       	LJMP      R5
    3424:	28 04       	SJMP      $+40                  ;->0x3474
..\src\kf32a9k1xxx_usart.c:84
    }
    else if (USARTx == USART5_SFR)
    3426:	5e 82       	LD.W      R5, [SP]
    3428:	19 44       	LD        R4, [PC + #25]        ;->0x348c  :=0x40001e80
    342a:	54 70       	CMP       R5, R4
    342c:	11 f1       	JNZ       $+17                  ;->0x344e
..\src\kf32a9k1xxx_usart.c:86
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART5RST, TRUE);
    342e:	01 10       	MOV       R0, #1
    3430:	85 7b       	LSL       R0, #29
    3432:	11 10       	MOV       R1, #1
    3434:	1b 45       	LD        R5, [PC + #27]        ;->0x34a0  :=0x31b4
    3436:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:87
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART5RST, FALSE);
    3438:	01 10       	MOV       R0, #1
    343a:	85 7b       	LSL       R0, #29
    343c:	10 10       	MOV       R1, #0
    343e:	19 45       	LD        R5, [PC + #25]        ;->0x34a0  :=0x31b4
    3440:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:88
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_USART5CLKEN, TRUE);
    3442:	01 10       	MOV       R0, #1
    3444:	85 7b       	LSL       R0, #29
    3446:	11 10       	MOV       R1, #1
    3448:	17 45       	LD        R5, [PC + #23]        ;->0x34a4  :=0x3028
    344a:	05 5c       	LJMP      R5
    344c:	14 04       	SJMP      $+20                  ;->0x3474
..\src\kf32a9k1xxx_usart.c:90
    }
    else if (USARTx == USART7_SFR)
    344e:	5e 82       	LD.W      R5, [SP]
    3450:	10 44       	LD        R4, [PC + #16]        ;->0x3490  :=0x40001f80
    3452:	54 70       	CMP       R5, R4
    3454:	10 f1       	JNZ       $+16                  ;->0x3474
..\src\kf32a9k1xxx_usart.c:92
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART7RST, TRUE);
    3456:	01 10       	MOV       R0, #1
    3458:	87 7b       	LSL       R0, #31
    345a:	11 10       	MOV       R1, #1
    345c:	11 45       	LD        R5, [PC + #17]        ;->0x34a0  :=0x31b4
    345e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:93
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART7RST, FALSE);
    3460:	01 10       	MOV       R0, #1
    3462:	87 7b       	LSL       R0, #31
    3464:	10 10       	MOV       R1, #0
    3466:	0f 45       	LD        R5, [PC + #15]        ;->0x34a0  :=0x31b4
    3468:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:94
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_USART7CLKEN, TRUE);
    346a:	01 10       	MOV       R0, #1
    346c:	87 7b       	LSL       R0, #31
    346e:	11 10       	MOV       R1, #1
    3470:	0d 45       	LD        R5, [PC + #13]        ;->0x34a4  :=0x3028
    3472:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:100
    }
    else
    {
        ;
    }
}
    3474:	e4 28       	ADD       SP, #4
    3476:	0d 5d       	POP       LR
    3478:	1d 5c       	JMP       LR
    347a:	00 00       	NOP      NOP      
    347c:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x347c  :=0x40000980
    3480:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x3480  :=0x40000a00
    3484:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3484  :=0x40000a80
    3488:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3488  :=0x40000b80
    348c:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x348c  :=0x40001e80
    3490:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x3490  :=0x40001f80
    3494:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    3498:	44 31 00 00 	.long     0x00003144 ->000012612  [!!!@2@:SUB       R4, #20	@@: NOP      
    349c:	b8 2f 00 00 	.long     0x00002fb8 ->000012216  [!!!@2@:ADD       R11, #120	@@: NOP      
    34a0:	b4 31 00 00 	.long     0x000031b4 ->000012724  [!!!@2@:SUB       R11, #20	@@: NOP      
    34a4:	28 30 00 00 	.long     0x00003028 ->000012328  [!!!@2@:SUB       R2, #8	@@: NOP      

000034a8 <USART_Cmd>:
USART_Cmd():
..\src\kf32a9k1xxx_usart.c:301
  *       NewState: USART使能使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_Cmd (USART_SFRmap* USARTx, FunctionalState NewState)
{
    34a8:	2d 5d       	PUSH      LR
    34aa:	e8 30       	SUB       SP, #8
    34ac:	e0 85       	ST.W      [SP], R0
    34ae:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:303
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    34b0:	5e 82       	LD.W      R5, [SP]
    34b2:	1b 44       	LD        R4, [PC + #27]        ;->0x351c  :=0x40000980
    34b4:	54 70       	CMP       R5, R4
    34b6:	15 f0       	JZ        $+21                  ;->0x34e0
    34b8:	5e 82       	LD.W      R5, [SP]
    34ba:	1a 44       	LD        R4, [PC + #26]        ;->0x3520  :=0x40000a00
    34bc:	54 70       	CMP       R5, R4
    34be:	11 f0       	JZ        $+17                  ;->0x34e0
    34c0:	5e 82       	LD.W      R5, [SP]
    34c2:	19 44       	LD        R4, [PC + #25]        ;->0x3524  :=0x40000a80
    34c4:	54 70       	CMP       R5, R4
    34c6:	0d f0       	JZ        $+13                  ;->0x34e0
    34c8:	5e 82       	LD.W      R5, [SP]
    34ca:	18 44       	LD        R4, [PC + #24]        ;->0x3528  :=0x40000b80
    34cc:	54 70       	CMP       R5, R4
    34ce:	09 f0       	JZ        $+9                   ;->0x34e0
    34d0:	5e 82       	LD.W      R5, [SP]
    34d2:	17 44       	LD        R4, [PC + #23]        ;->0x352c  :=0x40001e80
    34d4:	54 70       	CMP       R5, R4
    34d6:	05 f0       	JZ        $+5                   ;->0x34e0
    34d8:	5e 82       	LD.W      R5, [SP]
    34da:	16 44       	LD        R4, [PC + #22]        ;->0x3530  :=0x40001f80
    34dc:	54 70       	CMP       R5, R4
    34de:	03 f1       	JNZ       $+3                   ;->0x34e4
    34e0:	51 10       	MOV       R5, #1
    34e2:	02 04       	SJMP      $+2                   ;->0x34e6
    34e4:	50 10       	MOV       R5, #0
    34e6:	05 58       	MOV       R0, R5
    34e8:	13 45       	LD        R5, [PC + #19]        ;->0x3534  :=0x4ba6
    34ea:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:304
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    34ec:	01 0d       	LD.W      R5, [SP + #1]
    34ee:	50 38       	CMP       R5, #0
    34f0:	04 f0       	JZ        $+4                   ;->0x34f8
    34f2:	01 0d       	LD.W      R5, [SP + #1]
    34f4:	51 38       	CMP       R5, #1
    34f6:	03 f1       	JNZ       $+3                   ;->0x34fc
    34f8:	51 10       	MOV       R5, #1
    34fa:	02 04       	SJMP      $+2                   ;->0x34fe
    34fc:	50 10       	MOV       R5, #0
    34fe:	05 58       	MOV       R0, R5
    3500:	0d 45       	LD        R5, [PC + #13]        ;->0x3534  :=0x4ba6
    3502:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:307

    /*---------------- 配置USART_CTLR寄存器USARTEN位 ----------------*/
    if (NewState != FALSE)
    3504:	01 0d       	LD.W      R5, [SP + #1]
    3506:	50 38       	CMP       R5, #0
    3508:	04 f0       	JZ        $+4                   ;->0x3510
..\src\kf32a9k1xxx_usart.c:310
    {
        /* 使能USART */
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_USARTEN_POS);
    350a:	5e 82       	LD.W      R5, [SP]
    350c:	28 4c       	SET       [R5], #0
    350e:	03 04       	SJMP      $+3                   ;->0x3514
..\src\kf32a9k1xxx_usart.c:315
    }
    else
    {
        /* 禁止USART */
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_USARTEN_POS);
    3510:	5e 82       	LD.W      R5, [SP]
    3512:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_usart.c:317
    }
}
    3514:	e8 28       	ADD       SP, #8
    3516:	0d 5d       	POP       LR
    3518:	1d 5c       	JMP       LR
    351a:	00 00       	NOP      NOP      
    351c:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x351c  :=0x40000980
    3520:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x3520  :=0x40000a00
    3524:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3524  :=0x40000a80
    3528:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3528  :=0x40000b80
    352c:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x352c  :=0x40001e80
    3530:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x3530  :=0x40001f80
    3534:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00003538 <USART_BaudRate_Clock_Config>:
USART_BaudRate_Clock_Config():
..\src\kf32a9k1xxx_usart.c:330
  *              USART_CLK_LFCLK :低频外设时钟
  * 返回  无。
  */
void
USART_BaudRate_Clock_Config(USART_SFRmap* USARTx, uint32_t CLK)
{
    3538:	2d 5d       	PUSH      LR
    353a:	e8 30       	SUB       SP, #8
    353c:	e0 85       	ST.W      [SP], R0
    353e:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:332
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    3540:	5e 82       	LD.W      R5, [SP]
    3542:	1f 44       	LD        R4, [PC + #31]        ;->0x35bc  :=0x40000980
    3544:	54 70       	CMP       R5, R4
    3546:	15 f0       	JZ        $+21                  ;->0x3570
    3548:	5e 82       	LD.W      R5, [SP]
    354a:	1e 44       	LD        R4, [PC + #30]        ;->0x35c0  :=0x40000a00
    354c:	54 70       	CMP       R5, R4
    354e:	11 f0       	JZ        $+17                  ;->0x3570
    3550:	5e 82       	LD.W      R5, [SP]
    3552:	1d 44       	LD        R4, [PC + #29]        ;->0x35c4  :=0x40000a80
    3554:	54 70       	CMP       R5, R4
    3556:	0d f0       	JZ        $+13                  ;->0x3570
    3558:	5e 82       	LD.W      R5, [SP]
    355a:	1c 44       	LD        R4, [PC + #28]        ;->0x35c8  :=0x40000b80
    355c:	54 70       	CMP       R5, R4
    355e:	09 f0       	JZ        $+9                   ;->0x3570
    3560:	5e 82       	LD.W      R5, [SP]
    3562:	1b 44       	LD        R4, [PC + #27]        ;->0x35cc  :=0x40001e80
    3564:	54 70       	CMP       R5, R4
    3566:	05 f0       	JZ        $+5                   ;->0x3570
    3568:	5e 82       	LD.W      R5, [SP]
    356a:	1a 44       	LD        R4, [PC + #26]        ;->0x35d0  :=0x40001f80
    356c:	54 70       	CMP       R5, R4
    356e:	03 f1       	JNZ       $+3                   ;->0x3574
    3570:	51 10       	MOV       R5, #1
    3572:	02 04       	SJMP      $+2                   ;->0x3576
    3574:	50 10       	MOV       R5, #0
    3576:	05 58       	MOV       R0, R5
    3578:	17 45       	LD        R5, [PC + #23]        ;->0x35d4  :=0x4ba6
    357a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:333
    CHECK_RESTRICTION(CHECK_USART_CLK(CLK));
    357c:	01 0d       	LD.W      R5, [SP + #1]
    357e:	50 38       	CMP       R5, #0
    3580:	0a f0       	JZ        $+10                  ;->0x3594
    3582:	01 0d       	LD.W      R5, [SP + #1]
    3584:	52 38       	CMP       R5, #2
    3586:	07 f0       	JZ        $+7                   ;->0x3594
    3588:	01 0d       	LD.W      R5, [SP + #1]
    358a:	54 38       	CMP       R5, #4
    358c:	04 f0       	JZ        $+4                   ;->0x3594
    358e:	01 0d       	LD.W      R5, [SP + #1]
    3590:	56 38       	CMP       R5, #6
    3592:	03 f1       	JNZ       $+3                   ;->0x3598
    3594:	51 10       	MOV       R5, #1
    3596:	02 04       	SJMP      $+2                   ;->0x359a
    3598:	50 10       	MOV       R5, #0
    359a:	05 58       	MOV       R0, R5
    359c:	0e 45       	LD        R5, [PC + #14]        ;->0x35d4  :=0x4ba6
    359e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:336

    /*---------------- 设置USART_CTLR寄存器BRCKS位 ----------------*/
    USARTx->CTLR = SFR_Config (USARTx->CTLR, ~USART_CTLR_BRCKS, CLK);
    35a0:	5e 82       	LD.W      R5, [SP]
    35a2:	55 82       	LD.W      R5, [R5]
    35a4:	05 58       	MOV       R0, R5
    35a6:	16 10       	MOV       R1, #6
    35a8:	11 68       	NOT       R1, R1
    35aa:	01 0a       	LD.W      R2, [SP + #1]
    35ac:	0b 45       	LD        R5, [PC + #11]        ;->0x35d8  :=0x332c
    35ae:	05 5c       	LJMP      R5
    35b0:	80 58       	MOV       R4, R0
    35b2:	5e 82       	LD.W      R5, [SP]
    35b4:	54 85       	ST.W      [R5], R4
..\src\kf32a9k1xxx_usart.c:337
}
    35b6:	e8 28       	ADD       SP, #8
    35b8:	0d 5d       	POP       LR
    35ba:	1d 5c       	JMP       LR
    35bc:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x35bc  :=0x40000980
    35c0:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x35c0  :=0x40000a00
    35c4:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x35c4  :=0x40000a80
    35c8:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x35c8  :=0x40000b80
    35cc:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x35cc  :=0x40001e80
    35d0:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x35d0  :=0x40001f80
    35d4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    35d8:	2c 33 00 00 	.long     0x0000332c ->000013100  [!!!@2@:SUB       R2, #60	@@: NOP      

000035dc <USART_Transmit_Order_Config>:
USART_Transmit_Order_Config():
..\src\kf32a9k1xxx_usart.c:377
  *                   USART_TRANSMIT_LSB:先发送LSB。
  * 返回  无。
  */
void
USART_Transmit_Order_Config (USART_SFRmap* USARTx, uint32_t NewState)
{
    35dc:	2d 5d       	PUSH      LR
    35de:	e8 30       	SUB       SP, #8
    35e0:	e0 85       	ST.W      [SP], R0
    35e2:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:379
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    35e4:	5e 82       	LD.W      R5, [SP]
    35e6:	1b 44       	LD        R4, [PC + #27]        ;->0x3650  :=0x40000980
    35e8:	54 70       	CMP       R5, R4
    35ea:	15 f0       	JZ        $+21                  ;->0x3614
    35ec:	5e 82       	LD.W      R5, [SP]
    35ee:	1a 44       	LD        R4, [PC + #26]        ;->0x3654  :=0x40000a00
    35f0:	54 70       	CMP       R5, R4
    35f2:	11 f0       	JZ        $+17                  ;->0x3614
    35f4:	5e 82       	LD.W      R5, [SP]
    35f6:	19 44       	LD        R4, [PC + #25]        ;->0x3658  :=0x40000a80
    35f8:	54 70       	CMP       R5, R4
    35fa:	0d f0       	JZ        $+13                  ;->0x3614
    35fc:	5e 82       	LD.W      R5, [SP]
    35fe:	18 44       	LD        R4, [PC + #24]        ;->0x365c  :=0x40000b80
    3600:	54 70       	CMP       R5, R4
    3602:	09 f0       	JZ        $+9                   ;->0x3614
    3604:	5e 82       	LD.W      R5, [SP]
    3606:	17 44       	LD        R4, [PC + #23]        ;->0x3660  :=0x40001e80
    3608:	54 70       	CMP       R5, R4
    360a:	05 f0       	JZ        $+5                   ;->0x3614
    360c:	5e 82       	LD.W      R5, [SP]
    360e:	16 44       	LD        R4, [PC + #22]        ;->0x3664  :=0x40001f80
    3610:	54 70       	CMP       R5, R4
    3612:	03 f1       	JNZ       $+3                   ;->0x3618
    3614:	51 10       	MOV       R5, #1
    3616:	02 04       	SJMP      $+2                   ;->0x361a
    3618:	50 10       	MOV       R5, #0
    361a:	05 58       	MOV       R0, R5
    361c:	13 45       	LD        R5, [PC + #19]        ;->0x3668  :=0x4ba6
    361e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:380
    CHECK_RESTRICTION(CHECK_USART_TRANSMIT_DIR(NewState));
    3620:	01 0d       	LD.W      R5, [SP + #1]
    3622:	50 38       	CMP       R5, #0
    3624:	04 f0       	JZ        $+4                   ;->0x362c
    3626:	01 0d       	LD.W      R5, [SP + #1]
    3628:	50 39       	CMP       R5, #16
    362a:	03 f1       	JNZ       $+3                   ;->0x3630
    362c:	51 10       	MOV       R5, #1
    362e:	02 04       	SJMP      $+2                   ;->0x3632
    3630:	50 10       	MOV       R5, #0
    3632:	05 58       	MOV       R0, R5
    3634:	0d 45       	LD        R5, [PC + #13]        ;->0x3668  :=0x4ba6
    3636:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:383

    /*---------------- 设置USART_CTLR寄存器TCONV位 ----------------*/
    if (NewState != USART_TRANSMIT_LSB)
    3638:	01 0d       	LD.W      R5, [SP + #1]
    363a:	50 38       	CMP       R5, #0
    363c:	04 f0       	JZ        $+4                   ;->0x3644
..\src\kf32a9k1xxx_usart.c:386
    {
        /* 先发送MSB */
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_TCONV_POS);
    363e:	5e 82       	LD.W      R5, [SP]
    3640:	2c 4c       	SET       [R5], #4
    3642:	03 04       	SJMP      $+3                   ;->0x3648
..\src\kf32a9k1xxx_usart.c:391
    }
    else
    {
        /* 先发送LSB */
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_TCONV_POS);
    3644:	5e 82       	LD.W      R5, [SP]
    3646:	2c 4e       	CLR       [R5], #4
..\src\kf32a9k1xxx_usart.c:393
    }
}
    3648:	e8 28       	ADD       SP, #8
    364a:	0d 5d       	POP       LR
    364c:	1d 5c       	JMP       LR
    364e:	00 00       	NOP      NOP      
    3650:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3650  :=0x40000980
    3654:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x3654  :=0x40000a00
    3658:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3658  :=0x40000a80
    365c:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x365c  :=0x40000b80
    3660:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x3660  :=0x40001e80
    3664:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x3664  :=0x40001f80
    3668:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

0000366c <USART_Receive_Order_Config>:
USART_Receive_Order_Config():
..\src\kf32a9k1xxx_usart.c:405
  *                   USART_RECEIVE_LSB:先接收LSB。
  * 返回  无。
  */
void
USART_Receive_Order_Config (USART_SFRmap* USARTx, uint32_t NewState)
{
    366c:	2d 5d       	PUSH      LR
    366e:	e8 30       	SUB       SP, #8
    3670:	e0 85       	ST.W      [SP], R0
    3672:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:407
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    3674:	5e 82       	LD.W      R5, [SP]
    3676:	1b 44       	LD        R4, [PC + #27]        ;->0x36e0  :=0x40000980
    3678:	54 70       	CMP       R5, R4
    367a:	15 f0       	JZ        $+21                  ;->0x36a4
    367c:	5e 82       	LD.W      R5, [SP]
    367e:	1a 44       	LD        R4, [PC + #26]        ;->0x36e4  :=0x40000a00
    3680:	54 70       	CMP       R5, R4
    3682:	11 f0       	JZ        $+17                  ;->0x36a4
    3684:	5e 82       	LD.W      R5, [SP]
    3686:	19 44       	LD        R4, [PC + #25]        ;->0x36e8  :=0x40000a80
    3688:	54 70       	CMP       R5, R4
    368a:	0d f0       	JZ        $+13                  ;->0x36a4
    368c:	5e 82       	LD.W      R5, [SP]
    368e:	18 44       	LD        R4, [PC + #24]        ;->0x36ec  :=0x40000b80
    3690:	54 70       	CMP       R5, R4
    3692:	09 f0       	JZ        $+9                   ;->0x36a4
    3694:	5e 82       	LD.W      R5, [SP]
    3696:	17 44       	LD        R4, [PC + #23]        ;->0x36f0  :=0x40001e80
    3698:	54 70       	CMP       R5, R4
    369a:	05 f0       	JZ        $+5                   ;->0x36a4
    369c:	5e 82       	LD.W      R5, [SP]
    369e:	16 44       	LD        R4, [PC + #22]        ;->0x36f4  :=0x40001f80
    36a0:	54 70       	CMP       R5, R4
    36a2:	03 f1       	JNZ       $+3                   ;->0x36a8
    36a4:	51 10       	MOV       R5, #1
    36a6:	02 04       	SJMP      $+2                   ;->0x36aa
    36a8:	50 10       	MOV       R5, #0
    36aa:	05 58       	MOV       R0, R5
    36ac:	13 45       	LD        R5, [PC + #19]        ;->0x36f8  :=0x4ba6
    36ae:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:408
    CHECK_RESTRICTION(CHECK_USART_RECEIVE_DIR(NewState));
    36b0:	01 0d       	LD.W      R5, [SP + #1]
    36b2:	50 38       	CMP       R5, #0
    36b4:	04 f0       	JZ        $+4                   ;->0x36bc
    36b6:	01 0d       	LD.W      R5, [SP + #1]
    36b8:	50 3a       	CMP       R5, #32
    36ba:	03 f1       	JNZ       $+3                   ;->0x36c0
    36bc:	51 10       	MOV       R5, #1
    36be:	02 04       	SJMP      $+2                   ;->0x36c2
    36c0:	50 10       	MOV       R5, #0
    36c2:	05 58       	MOV       R0, R5
    36c4:	0d 45       	LD        R5, [PC + #13]        ;->0x36f8  :=0x4ba6
    36c6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:411

    /*---------------- 设置USART_CTLR寄存器RCONV位 ----------------*/
    if (NewState != USART_RECEIVE_LSB)
    36c8:	01 0d       	LD.W      R5, [SP + #1]
    36ca:	50 38       	CMP       R5, #0
    36cc:	04 f0       	JZ        $+4                   ;->0x36d4
..\src\kf32a9k1xxx_usart.c:414
    {
        /* 先接收MSB */
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_RCONV_POS);
    36ce:	5e 82       	LD.W      R5, [SP]
    36d0:	2d 4c       	SET       [R5], #5
    36d2:	03 04       	SJMP      $+3                   ;->0x36d8
..\src\kf32a9k1xxx_usart.c:419
    }
    else
    {
        /* 先接收LSB */
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_RCONV_POS);
    36d4:	5e 82       	LD.W      R5, [SP]
    36d6:	2d 4e       	CLR       [R5], #5
..\src\kf32a9k1xxx_usart.c:421
    }
}
    36d8:	e8 28       	ADD       SP, #8
    36da:	0d 5d       	POP       LR
    36dc:	1d 5c       	JMP       LR
    36de:	00 00       	NOP      NOP      
    36e0:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x36e0  :=0x40000980
    36e4:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x36e4  :=0x40000a00
    36e8:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x36e8  :=0x40000a80
    36ec:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x36ec  :=0x40000b80
    36f0:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x36f0  :=0x40001e80
    36f4:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x36f4  :=0x40001f80
    36f8:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

000036fc <USART_Clock_Source_Config>:
USART_Clock_Source_Config():
..\src\kf32a9k1xxx_usart.c:488
  *                      USART_SLAVE_CLOCKSOURCE_EXTER: 从模式(时钟源来自外部)。
  * 返回  无。
  */
void
USART_Clock_Source_Config(USART_SFRmap* USARTx, uint32_t ClockSource)
{
    36fc:	2d 5d       	PUSH      LR
    36fe:	e8 30       	SUB       SP, #8
    3700:	e0 85       	ST.W      [SP], R0
    3702:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:490
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    3704:	5e 82       	LD.W      R5, [SP]
    3706:	1c 44       	LD        R4, [PC + #28]        ;->0x3774  :=0x40000980
    3708:	54 70       	CMP       R5, R4
    370a:	15 f0       	JZ        $+21                  ;->0x3734
    370c:	5e 82       	LD.W      R5, [SP]
    370e:	1b 44       	LD        R4, [PC + #27]        ;->0x3778  :=0x40000a00
    3710:	54 70       	CMP       R5, R4
    3712:	11 f0       	JZ        $+17                  ;->0x3734
    3714:	5e 82       	LD.W      R5, [SP]
    3716:	1a 44       	LD        R4, [PC + #26]        ;->0x377c  :=0x40000a80
    3718:	54 70       	CMP       R5, R4
    371a:	0d f0       	JZ        $+13                  ;->0x3734
    371c:	5e 82       	LD.W      R5, [SP]
    371e:	19 44       	LD        R4, [PC + #25]        ;->0x3780  :=0x40000b80
    3720:	54 70       	CMP       R5, R4
    3722:	09 f0       	JZ        $+9                   ;->0x3734
    3724:	5e 82       	LD.W      R5, [SP]
    3726:	18 44       	LD        R4, [PC + #24]        ;->0x3784  :=0x40001e80
    3728:	54 70       	CMP       R5, R4
    372a:	05 f0       	JZ        $+5                   ;->0x3734
    372c:	5e 82       	LD.W      R5, [SP]
    372e:	17 44       	LD        R4, [PC + #23]        ;->0x3788  :=0x40001f80
    3730:	54 70       	CMP       R5, R4
    3732:	03 f1       	JNZ       $+3                   ;->0x3738
    3734:	51 10       	MOV       R5, #1
    3736:	02 04       	SJMP      $+2                   ;->0x373a
    3738:	50 10       	MOV       R5, #0
    373a:	05 58       	MOV       R0, R5
    373c:	14 45       	LD        R5, [PC + #20]        ;->0x378c  :=0x4ba6
    373e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:491
    CHECK_RESTRICTION(CHECK_USART_CLOCKSOURCE(ClockSource));
    3740:	01 0d       	LD.W      R5, [SP + #1]
    3742:	50 38       	CMP       R5, #0
    3744:	06 f0       	JZ        $+6                   ;->0x3750
    3746:	01 0c       	LD.W      R4, [SP + #1]
    3748:	5f 1f       	MOV       R5, #255
    374a:	6d c0       	ADD       R5, R5, #1
    374c:	45 70       	CMP       R4, R5
    374e:	03 f1       	JNZ       $+3                   ;->0x3754
    3750:	51 10       	MOV       R5, #1
    3752:	02 04       	SJMP      $+2                   ;->0x3756
    3754:	50 10       	MOV       R5, #0
    3756:	05 58       	MOV       R0, R5
    3758:	0d 45       	LD        R5, [PC + #13]        ;->0x378c  :=0x4ba6
    375a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:494

    /*---------------- 设置USART_CTLR寄存器CSRS位 ----------------*/
    if (ClockSource != USART_SLAVE_CLOCKSOURCE_EXTER)
    375c:	01 0d       	LD.W      R5, [SP + #1]
    375e:	50 38       	CMP       R5, #0
    3760:	04 f0       	JZ        $+4                   ;->0x3768
..\src\kf32a9k1xxx_usart.c:497
    {
        /* 主模式(由BRG内部产生时钟*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_CSRS_POS);
    3762:	5e 82       	LD.W      R5, [SP]
    3764:	a8 4c       	SET       [R5], #8
    3766:	03 04       	SJMP      $+3                   ;->0x376c
..\src\kf32a9k1xxx_usart.c:502
    }
    else
    {
        /* 从模式(时钟源来自外部*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_CSRS_POS);
    3768:	5e 82       	LD.W      R5, [SP]
    376a:	a8 4e       	CLR       [R5], #8
..\src\kf32a9k1xxx_usart.c:504
    }
}
    376c:	e8 28       	ADD       SP, #8
    376e:	0d 5d       	POP       LR
    3770:	1d 5c       	JMP       LR
    3772:	00 00       	NOP      NOP      
    3774:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3774  :=0x40000980
    3778:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x3778  :=0x40000a00
    377c:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x377c  :=0x40000a80
    3780:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3780  :=0x40000b80
    3784:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x3784  :=0x40001e80
    3788:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x3788  :=0x40001f80
    378c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00003790 <USART_SYNC_Choice_Config>:
USART_SYNC_Choice_Config():
..\src\kf32a9k1xxx_usart.c:618
  *                  USART_MODE_FULLDUPLEXASY:全双工异步模式。
  * 返回  无。
  */
void
USART_SYNC_Choice_Config(USART_SFRmap* USARTx, uint32_t NewMode)
{
    3790:	2d 5d       	PUSH      LR
    3792:	e8 30       	SUB       SP, #8
    3794:	e0 85       	ST.W      [SP], R0
    3796:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:620
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    3798:	5e 82       	LD.W      R5, [SP]
    379a:	1b 44       	LD        R4, [PC + #27]        ;->0x3804  :=0x40000980
    379c:	54 70       	CMP       R5, R4
    379e:	15 f0       	JZ        $+21                  ;->0x37c8
    37a0:	5e 82       	LD.W      R5, [SP]
    37a2:	1a 44       	LD        R4, [PC + #26]        ;->0x3808  :=0x40000a00
    37a4:	54 70       	CMP       R5, R4
    37a6:	11 f0       	JZ        $+17                  ;->0x37c8
    37a8:	5e 82       	LD.W      R5, [SP]
    37aa:	19 44       	LD        R4, [PC + #25]        ;->0x380c  :=0x40000a80
    37ac:	54 70       	CMP       R5, R4
    37ae:	0d f0       	JZ        $+13                  ;->0x37c8
    37b0:	5e 82       	LD.W      R5, [SP]
    37b2:	18 44       	LD        R4, [PC + #24]        ;->0x3810  :=0x40000b80
    37b4:	54 70       	CMP       R5, R4
    37b6:	09 f0       	JZ        $+9                   ;->0x37c8
    37b8:	5e 82       	LD.W      R5, [SP]
    37ba:	17 44       	LD        R4, [PC + #23]        ;->0x3814  :=0x40001e80
    37bc:	54 70       	CMP       R5, R4
    37be:	05 f0       	JZ        $+5                   ;->0x37c8
    37c0:	5e 82       	LD.W      R5, [SP]
    37c2:	16 44       	LD        R4, [PC + #22]        ;->0x3818  :=0x40001f80
    37c4:	54 70       	CMP       R5, R4
    37c6:	03 f1       	JNZ       $+3                   ;->0x37cc
    37c8:	51 10       	MOV       R5, #1
    37ca:	02 04       	SJMP      $+2                   ;->0x37ce
    37cc:	50 10       	MOV       R5, #0
    37ce:	05 58       	MOV       R0, R5
    37d0:	13 45       	LD        R5, [PC + #19]        ;->0x381c  :=0x4ba6
    37d2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:621
    CHECK_RESTRICTION(CHECK_USART_MODE(NewMode));
    37d4:	01 0d       	LD.W      R5, [SP + #1]
    37d6:	50 38       	CMP       R5, #0
    37d8:	05 f0       	JZ        $+5                   ;->0x37e2
    37da:	01 0c       	LD.W      R4, [SP + #1]
    37dc:	11 45       	LD        R5, [PC + #17]        ;->0x3820  :=0x40004000
    37de:	45 70       	CMP       R4, R5
    37e0:	03 f1       	JNZ       $+3                   ;->0x37e6
    37e2:	51 10       	MOV       R5, #1
    37e4:	02 04       	SJMP      $+2                   ;->0x37e8
    37e6:	50 10       	MOV       R5, #0
    37e8:	05 58       	MOV       R0, R5
    37ea:	0d 45       	LD        R5, [PC + #13]        ;->0x381c  :=0x4ba6
    37ec:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:624

    /*---------------- 设置USART_CTLR寄存器SYNC位 ----------------*/
    if (NewMode != USART_MODE_FULLDUPLEXASY)
    37ee:	01 0d       	LD.W      R5, [SP + #1]
    37f0:	50 38       	CMP       R5, #0
    37f2:	04 f0       	JZ        $+4                   ;->0x37fa
..\src\kf32a9k1xxx_usart.c:627
    {
        /* 半双工同步模式*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_SYNC_POS);
    37f4:	5e 82       	LD.W      R5, [SP]
    37f6:	ae 4c       	SET       [R5], #14
    37f8:	03 04       	SJMP      $+3                   ;->0x37fe
..\src\kf32a9k1xxx_usart.c:632
    }
    else
    {
        /*全双工异步模式*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_SYNC_POS);
    37fa:	5e 82       	LD.W      R5, [SP]
    37fc:	ae 4e       	CLR       [R5], #14
..\src\kf32a9k1xxx_usart.c:634
    }
}
    37fe:	e8 28       	ADD       SP, #8
    3800:	0d 5d       	POP       LR
    3802:	1d 5c       	JMP       LR
    3804:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3804  :=0x40000980
    3808:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x3808  :=0x40000a00
    380c:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x380c  :=0x40000a80
    3810:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3810  :=0x40000b80
    3814:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x3814  :=0x40001e80
    3818:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x3818  :=0x40001f80
    381c:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    3820:	00 40 00 40 	.long     0x40004000 ->1073758208  [!!!@2@:LD        R0, [PC + #0]         ;->0x3820  :=0x40004000	@@: LD        R0, [PC + #0]         ;->0x3820  :=0x40004000

00003824 <USART_Transmit_Data_Enable>:
USART_Transmit_Data_Enable():
..\src\kf32a9k1xxx_usart.c:644
  *       NewState: USART发送使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_Transmit_Data_Enable (USART_SFRmap* USARTx, FunctionalState NewState)
{
    3824:	2d 5d       	PUSH      LR
    3826:	e8 30       	SUB       SP, #8
    3828:	e0 85       	ST.W      [SP], R0
    382a:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:646
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    382c:	5e 82       	LD.W      R5, [SP]
    382e:	1b 44       	LD        R4, [PC + #27]        ;->0x3898  :=0x40000980
    3830:	54 70       	CMP       R5, R4
    3832:	15 f0       	JZ        $+21                  ;->0x385c
    3834:	5e 82       	LD.W      R5, [SP]
    3836:	1a 44       	LD        R4, [PC + #26]        ;->0x389c  :=0x40000a00
    3838:	54 70       	CMP       R5, R4
    383a:	11 f0       	JZ        $+17                  ;->0x385c
    383c:	5e 82       	LD.W      R5, [SP]
    383e:	19 44       	LD        R4, [PC + #25]        ;->0x38a0  :=0x40000a80
    3840:	54 70       	CMP       R5, R4
    3842:	0d f0       	JZ        $+13                  ;->0x385c
    3844:	5e 82       	LD.W      R5, [SP]
    3846:	18 44       	LD        R4, [PC + #24]        ;->0x38a4  :=0x40000b80
    3848:	54 70       	CMP       R5, R4
    384a:	09 f0       	JZ        $+9                   ;->0x385c
    384c:	5e 82       	LD.W      R5, [SP]
    384e:	17 44       	LD        R4, [PC + #23]        ;->0x38a8  :=0x40001e80
    3850:	54 70       	CMP       R5, R4
    3852:	05 f0       	JZ        $+5                   ;->0x385c
    3854:	5e 82       	LD.W      R5, [SP]
    3856:	16 44       	LD        R4, [PC + #22]        ;->0x38ac  :=0x40001f80
    3858:	54 70       	CMP       R5, R4
    385a:	03 f1       	JNZ       $+3                   ;->0x3860
    385c:	51 10       	MOV       R5, #1
    385e:	02 04       	SJMP      $+2                   ;->0x3862
    3860:	50 10       	MOV       R5, #0
    3862:	05 58       	MOV       R0, R5
    3864:	13 45       	LD        R5, [PC + #19]        ;->0x38b0  :=0x4ba6
    3866:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:647
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    3868:	01 0d       	LD.W      R5, [SP + #1]
    386a:	50 38       	CMP       R5, #0
    386c:	04 f0       	JZ        $+4                   ;->0x3874
    386e:	01 0d       	LD.W      R5, [SP + #1]
    3870:	51 38       	CMP       R5, #1
    3872:	03 f1       	JNZ       $+3                   ;->0x3878
    3874:	51 10       	MOV       R5, #1
    3876:	02 04       	SJMP      $+2                   ;->0x387a
    3878:	50 10       	MOV       R5, #0
    387a:	05 58       	MOV       R0, R5
    387c:	0d 45       	LD        R5, [PC + #13]        ;->0x38b0  :=0x4ba6
    387e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:650

    /*---------------- 设置USART_CTLR寄存器TXEN位 ----------------*/
    if (NewState != FALSE)
    3880:	01 0d       	LD.W      R5, [SP + #1]
    3882:	50 38       	CMP       R5, #0
    3884:	04 f0       	JZ        $+4                   ;->0x388c
..\src\kf32a9k1xxx_usart.c:653
    {
        /* 使能发送*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_TXEN_POS);
    3886:	5e 82       	LD.W      R5, [SP]
    3888:	af 4c       	SET       [R5], #15
    388a:	03 04       	SJMP      $+3                   ;->0x3890
..\src\kf32a9k1xxx_usart.c:658
    }
    else
    {
        /* 禁止发送*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_TXEN_POS);
    388c:	5e 82       	LD.W      R5, [SP]
    388e:	af 4e       	CLR       [R5], #15
..\src\kf32a9k1xxx_usart.c:660
    }
}
    3890:	e8 28       	ADD       SP, #8
    3892:	0d 5d       	POP       LR
    3894:	1d 5c       	JMP       LR
    3896:	00 00       	NOP      NOP      
    3898:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3898  :=0x40000980
    389c:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x389c  :=0x40000a00
    38a0:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x38a0  :=0x40000a80
    38a4:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x38a4  :=0x40000b80
    38a8:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x38a8  :=0x40001e80
    38ac:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x38ac  :=0x40001f80
    38b0:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

000038b4 <USART_Receive_Data_Enable>:
USART_Receive_Data_Enable():
..\src\kf32a9k1xxx_usart.c:670
  *       NewState: USART接收使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_Receive_Data_Enable (USART_SFRmap* USARTx, FunctionalState NewState)
{
    38b4:	2d 5d       	PUSH      LR
    38b6:	e8 30       	SUB       SP, #8
    38b8:	e0 85       	ST.W      [SP], R0
    38ba:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:672
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    38bc:	5e 82       	LD.W      R5, [SP]
    38be:	1b 44       	LD        R4, [PC + #27]        ;->0x3928  :=0x40000980
    38c0:	54 70       	CMP       R5, R4
    38c2:	15 f0       	JZ        $+21                  ;->0x38ec
    38c4:	5e 82       	LD.W      R5, [SP]
    38c6:	1a 44       	LD        R4, [PC + #26]        ;->0x392c  :=0x40000a00
    38c8:	54 70       	CMP       R5, R4
    38ca:	11 f0       	JZ        $+17                  ;->0x38ec
    38cc:	5e 82       	LD.W      R5, [SP]
    38ce:	19 44       	LD        R4, [PC + #25]        ;->0x3930  :=0x40000a80
    38d0:	54 70       	CMP       R5, R4
    38d2:	0d f0       	JZ        $+13                  ;->0x38ec
    38d4:	5e 82       	LD.W      R5, [SP]
    38d6:	18 44       	LD        R4, [PC + #24]        ;->0x3934  :=0x40000b80
    38d8:	54 70       	CMP       R5, R4
    38da:	09 f0       	JZ        $+9                   ;->0x38ec
    38dc:	5e 82       	LD.W      R5, [SP]
    38de:	17 44       	LD        R4, [PC + #23]        ;->0x3938  :=0x40001e80
    38e0:	54 70       	CMP       R5, R4
    38e2:	05 f0       	JZ        $+5                   ;->0x38ec
    38e4:	5e 82       	LD.W      R5, [SP]
    38e6:	16 44       	LD        R4, [PC + #22]        ;->0x393c  :=0x40001f80
    38e8:	54 70       	CMP       R5, R4
    38ea:	03 f1       	JNZ       $+3                   ;->0x38f0
    38ec:	51 10       	MOV       R5, #1
    38ee:	02 04       	SJMP      $+2                   ;->0x38f2
    38f0:	50 10       	MOV       R5, #0
    38f2:	05 58       	MOV       R0, R5
    38f4:	13 45       	LD        R5, [PC + #19]        ;->0x3940  :=0x4ba6
    38f6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:673
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    38f8:	01 0d       	LD.W      R5, [SP + #1]
    38fa:	50 38       	CMP       R5, #0
    38fc:	04 f0       	JZ        $+4                   ;->0x3904
    38fe:	01 0d       	LD.W      R5, [SP + #1]
    3900:	51 38       	CMP       R5, #1
    3902:	03 f1       	JNZ       $+3                   ;->0x3908
    3904:	51 10       	MOV       R5, #1
    3906:	02 04       	SJMP      $+2                   ;->0x390a
    3908:	50 10       	MOV       R5, #0
    390a:	05 58       	MOV       R0, R5
    390c:	0d 45       	LD        R5, [PC + #13]        ;->0x3940  :=0x4ba6
    390e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:676

    /*---------------- 设置USART_CTLR寄存器RXEN位 ----------------*/
    if (NewState != FALSE)
    3910:	01 0d       	LD.W      R5, [SP + #1]
    3912:	50 38       	CMP       R5, #0
    3914:	04 f0       	JZ        $+4                   ;->0x391c
..\src\kf32a9k1xxx_usart.c:679
    {
        /* 使能接收*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_RXEN_POS);
    3916:	5e 82       	LD.W      R5, [SP]
    3918:	28 4d       	SET       [R5], #16
    391a:	03 04       	SJMP      $+3                   ;->0x3920
..\src\kf32a9k1xxx_usart.c:684
    }
    else
    {
        /* 禁止接收*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_RXEN_POS);
    391c:	5e 82       	LD.W      R5, [SP]
    391e:	28 4f       	CLR       [R5], #16
..\src\kf32a9k1xxx_usart.c:686
    }
}
    3920:	e8 28       	ADD       SP, #8
    3922:	0d 5d       	POP       LR
    3924:	1d 5c       	JMP       LR
    3926:	00 00       	NOP      NOP      
    3928:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3928  :=0x40000980
    392c:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x392c  :=0x40000a00
    3930:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3930  :=0x40000a80
    3934:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3934  :=0x40000b80
    3938:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x3938  :=0x40001e80
    393c:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x393c  :=0x40001f80
    3940:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00003944 <USART_STOP_Word_Config>:
USART_STOP_Word_Config():
..\src\kf32a9k1xxx_usart.c:698
  *                    USART_STOPBITS_1 :停止位长度为1bit。
  * 返回  无。
  */
void
USART_STOP_Word_Config(USART_SFRmap* USARTx, uint32_t NewLength)
{
    3944:	2d 5d       	PUSH      LR
    3946:	e8 30       	SUB       SP, #8
    3948:	e0 85       	ST.W      [SP], R0
    394a:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:700
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    394c:	5e 82       	LD.W      R5, [SP]
    394e:	1c 44       	LD        R4, [PC + #28]        ;->0x39bc  :=0x40000980
    3950:	54 70       	CMP       R5, R4
    3952:	15 f0       	JZ        $+21                  ;->0x397c
    3954:	5e 82       	LD.W      R5, [SP]
    3956:	1b 44       	LD        R4, [PC + #27]        ;->0x39c0  :=0x40000a00
    3958:	54 70       	CMP       R5, R4
    395a:	11 f0       	JZ        $+17                  ;->0x397c
    395c:	5e 82       	LD.W      R5, [SP]
    395e:	1a 44       	LD        R4, [PC + #26]        ;->0x39c4  :=0x40000a80
    3960:	54 70       	CMP       R5, R4
    3962:	0d f0       	JZ        $+13                  ;->0x397c
    3964:	5e 82       	LD.W      R5, [SP]
    3966:	19 44       	LD        R4, [PC + #25]        ;->0x39c8  :=0x40000b80
    3968:	54 70       	CMP       R5, R4
    396a:	09 f0       	JZ        $+9                   ;->0x397c
    396c:	5e 82       	LD.W      R5, [SP]
    396e:	18 44       	LD        R4, [PC + #24]        ;->0x39cc  :=0x40001e80
    3970:	54 70       	CMP       R5, R4
    3972:	05 f0       	JZ        $+5                   ;->0x397c
    3974:	5e 82       	LD.W      R5, [SP]
    3976:	17 44       	LD        R4, [PC + #23]        ;->0x39d0  :=0x40001f80
    3978:	54 70       	CMP       R5, R4
    397a:	03 f1       	JNZ       $+3                   ;->0x3980
    397c:	51 10       	MOV       R5, #1
    397e:	02 04       	SJMP      $+2                   ;->0x3982
    3980:	50 10       	MOV       R5, #0
    3982:	05 58       	MOV       R0, R5
    3984:	14 45       	LD        R5, [PC + #20]        ;->0x39d4  :=0x4ba6
    3986:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:701
    CHECK_RESTRICTION(CHECK_USART_STOPBITS(NewLength));
    3988:	01 0d       	LD.W      R5, [SP + #1]
    398a:	50 38       	CMP       R5, #0
    398c:	06 f0       	JZ        $+6                   ;->0x3998
    398e:	01 0c       	LD.W      R4, [SP + #1]
    3990:	51 10       	MOV       R5, #1
    3992:	2a 7b       	LSL       R5, #18
    3994:	45 70       	CMP       R4, R5
    3996:	03 f1       	JNZ       $+3                   ;->0x399c
    3998:	51 10       	MOV       R5, #1
    399a:	02 04       	SJMP      $+2                   ;->0x399e
    399c:	50 10       	MOV       R5, #0
    399e:	05 58       	MOV       R0, R5
    39a0:	0d 45       	LD        R5, [PC + #13]        ;->0x39d4  :=0x4ba6
    39a2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:704

    /*---------------- 设置USART_CTLR寄存器STPW位 ----------------*/
    if (NewLength != USART_STOPBITS_1)
    39a4:	01 0d       	LD.W      R5, [SP + #1]
    39a6:	50 38       	CMP       R5, #0
    39a8:	04 f0       	JZ        $+4                   ;->0x39b0
..\src\kf32a9k1xxx_usart.c:707
    {
        /* 停止位长度为2bits*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_STPW_POS);
    39aa:	5e 82       	LD.W      R5, [SP]
    39ac:	2a 4d       	SET       [R5], #18
    39ae:	03 04       	SJMP      $+3                   ;->0x39b4
..\src\kf32a9k1xxx_usart.c:712
    }
    else
    {
        /* 停止位长度为1bit*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_STPW_POS);
    39b0:	5e 82       	LD.W      R5, [SP]
    39b2:	2a 4f       	CLR       [R5], #18
..\src\kf32a9k1xxx_usart.c:714
    }
}
    39b4:	e8 28       	ADD       SP, #8
    39b6:	0d 5d       	POP       LR
    39b8:	1d 5c       	JMP       LR
    39ba:	00 00       	NOP      NOP      
    39bc:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x39bc  :=0x40000980
    39c0:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x39c0  :=0x40000a00
    39c4:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x39c4  :=0x40000a80
    39c8:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x39c8  :=0x40000b80
    39cc:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x39cc  :=0x40001e80
    39d0:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x39d0  :=0x40001f80
    39d4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

000039d8 <USART_9Data_Enable>:
USART_9Data_Enable():
..\src\kf32a9k1xxx_usart.c:780
  *       NewState: USART第9位数据使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_9Data_Enable (USART_SFRmap* USARTx, FunctionalState NewState)
{
    39d8:	2d 5d       	PUSH      LR
    39da:	e8 30       	SUB       SP, #8
    39dc:	e0 85       	ST.W      [SP], R0
    39de:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:782
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    39e0:	5e 82       	LD.W      R5, [SP]
    39e2:	1b 44       	LD        R4, [PC + #27]        ;->0x3a4c  :=0x40000980
    39e4:	54 70       	CMP       R5, R4
    39e6:	15 f0       	JZ        $+21                  ;->0x3a10
    39e8:	5e 82       	LD.W      R5, [SP]
    39ea:	1a 44       	LD        R4, [PC + #26]        ;->0x3a50  :=0x40000a00
    39ec:	54 70       	CMP       R5, R4
    39ee:	11 f0       	JZ        $+17                  ;->0x3a10
    39f0:	5e 82       	LD.W      R5, [SP]
    39f2:	19 44       	LD        R4, [PC + #25]        ;->0x3a54  :=0x40000a80
    39f4:	54 70       	CMP       R5, R4
    39f6:	0d f0       	JZ        $+13                  ;->0x3a10
    39f8:	5e 82       	LD.W      R5, [SP]
    39fa:	18 44       	LD        R4, [PC + #24]        ;->0x3a58  :=0x40000b80
    39fc:	54 70       	CMP       R5, R4
    39fe:	09 f0       	JZ        $+9                   ;->0x3a10
    3a00:	5e 82       	LD.W      R5, [SP]
    3a02:	17 44       	LD        R4, [PC + #23]        ;->0x3a5c  :=0x40001e80
    3a04:	54 70       	CMP       R5, R4
    3a06:	05 f0       	JZ        $+5                   ;->0x3a10
    3a08:	5e 82       	LD.W      R5, [SP]
    3a0a:	16 44       	LD        R4, [PC + #22]        ;->0x3a60  :=0x40001f80
    3a0c:	54 70       	CMP       R5, R4
    3a0e:	03 f1       	JNZ       $+3                   ;->0x3a14
    3a10:	51 10       	MOV       R5, #1
    3a12:	02 04       	SJMP      $+2                   ;->0x3a16
    3a14:	50 10       	MOV       R5, #0
    3a16:	05 58       	MOV       R0, R5
    3a18:	13 45       	LD        R5, [PC + #19]        ;->0x3a64  :=0x4ba6
    3a1a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:783
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    3a1c:	01 0d       	LD.W      R5, [SP + #1]
    3a1e:	50 38       	CMP       R5, #0
    3a20:	04 f0       	JZ        $+4                   ;->0x3a28
    3a22:	01 0d       	LD.W      R5, [SP + #1]
    3a24:	51 38       	CMP       R5, #1
    3a26:	03 f1       	JNZ       $+3                   ;->0x3a2c
    3a28:	51 10       	MOV       R5, #1
    3a2a:	02 04       	SJMP      $+2                   ;->0x3a2e
    3a2c:	50 10       	MOV       R5, #0
    3a2e:	05 58       	MOV       R0, R5
    3a30:	0d 45       	LD        R5, [PC + #13]        ;->0x3a64  :=0x4ba6
    3a32:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:786

    /*---------------- 设置USART_CTLR寄存器DT9EN位 ----------------*/
    if (NewState != FALSE)
    3a34:	01 0d       	LD.W      R5, [SP + #1]
    3a36:	50 38       	CMP       R5, #0
    3a38:	04 f0       	JZ        $+4                   ;->0x3a40
..\src\kf32a9k1xxx_usart.c:789
    {
        /* 使能第9位数据发送和接收*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_DT9EN_POS);
    3a3a:	5e 82       	LD.W      R5, [SP]
    3a3c:	2d 4d       	SET       [R5], #21
    3a3e:	03 04       	SJMP      $+3                   ;->0x3a44
..\src\kf32a9k1xxx_usart.c:794
    }
    else
    {
        /* 未使能第9位数据发送和接收*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_DT9EN_POS);
    3a40:	5e 82       	LD.W      R5, [SP]
    3a42:	2d 4f       	CLR       [R5], #21
..\src\kf32a9k1xxx_usart.c:796
    }
}
    3a44:	e8 28       	ADD       SP, #8
    3a46:	0d 5d       	POP       LR
    3a48:	1d 5c       	JMP       LR
    3a4a:	00 00       	NOP      NOP      
    3a4c:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3a4c  :=0x40000980
    3a50:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x3a50  :=0x40000a00
    3a54:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3a54  :=0x40000a80
    3a58:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3a58  :=0x40000b80
    3a5c:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x3a5c  :=0x40001e80
    3a60:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x3a60  :=0x40001f80
    3a64:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00003a68 <USART_RESHD_Enable>:
USART_RESHD_Enable():
..\src\kf32a9k1xxx_usart.c:884
  *       NewState: USART 单线模式使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_RESHD_Enable (USART_SFRmap* USARTx, FunctionalState NewState)
{
    3a68:	2d 5d       	PUSH      LR
    3a6a:	e8 30       	SUB       SP, #8
    3a6c:	e0 85       	ST.W      [SP], R0
    3a6e:	01 21       	ST.W      [SP + #1], R1
..\src\kf32a9k1xxx_usart.c:886
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    3a70:	5e 82       	LD.W      R5, [SP]
    3a72:	1b 44       	LD        R4, [PC + #27]        ;->0x3adc  :=0x40000980
    3a74:	54 70       	CMP       R5, R4
    3a76:	15 f0       	JZ        $+21                  ;->0x3aa0
    3a78:	5e 82       	LD.W      R5, [SP]
    3a7a:	1a 44       	LD        R4, [PC + #26]        ;->0x3ae0  :=0x40000a00
    3a7c:	54 70       	CMP       R5, R4
    3a7e:	11 f0       	JZ        $+17                  ;->0x3aa0
    3a80:	5e 82       	LD.W      R5, [SP]
    3a82:	19 44       	LD        R4, [PC + #25]        ;->0x3ae4  :=0x40000a80
    3a84:	54 70       	CMP       R5, R4
    3a86:	0d f0       	JZ        $+13                  ;->0x3aa0
    3a88:	5e 82       	LD.W      R5, [SP]
    3a8a:	18 44       	LD        R4, [PC + #24]        ;->0x3ae8  :=0x40000b80
    3a8c:	54 70       	CMP       R5, R4
    3a8e:	09 f0       	JZ        $+9                   ;->0x3aa0
    3a90:	5e 82       	LD.W      R5, [SP]
    3a92:	17 44       	LD        R4, [PC + #23]        ;->0x3aec  :=0x40001e80
    3a94:	54 70       	CMP       R5, R4
    3a96:	05 f0       	JZ        $+5                   ;->0x3aa0
    3a98:	5e 82       	LD.W      R5, [SP]
    3a9a:	16 44       	LD        R4, [PC + #22]        ;->0x3af0  :=0x40001f80
    3a9c:	54 70       	CMP       R5, R4
    3a9e:	03 f1       	JNZ       $+3                   ;->0x3aa4
    3aa0:	51 10       	MOV       R5, #1
    3aa2:	02 04       	SJMP      $+2                   ;->0x3aa6
    3aa4:	50 10       	MOV       R5, #0
    3aa6:	05 58       	MOV       R0, R5
    3aa8:	13 45       	LD        R5, [PC + #19]        ;->0x3af4  :=0x4ba6
    3aaa:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:887
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    3aac:	01 0d       	LD.W      R5, [SP + #1]
    3aae:	50 38       	CMP       R5, #0
    3ab0:	04 f0       	JZ        $+4                   ;->0x3ab8
    3ab2:	01 0d       	LD.W      R5, [SP + #1]
    3ab4:	51 38       	CMP       R5, #1
    3ab6:	03 f1       	JNZ       $+3                   ;->0x3abc
    3ab8:	51 10       	MOV       R5, #1
    3aba:	02 04       	SJMP      $+2                   ;->0x3abe
    3abc:	50 10       	MOV       R5, #0
    3abe:	05 58       	MOV       R0, R5
    3ac0:	0d 45       	LD        R5, [PC + #13]        ;->0x3af4  :=0x4ba6
    3ac2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:890

    /*---------------- 设置USART_CTLR寄存器RESHD位 ----------------*/
    if (NewState != FALSE)
    3ac4:	01 0d       	LD.W      R5, [SP + #1]
    3ac6:	50 38       	CMP       R5, #0
    3ac8:	04 f0       	JZ        $+4                   ;->0x3ad0
..\src\kf32a9k1xxx_usart.c:893
    {
        /* 使能单线模式*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_RESHD_POS);
    3aca:	5e 82       	LD.W      R5, [SP]
    3acc:	ae 4d       	SET       [R5], #30
    3ace:	03 04       	SJMP      $+3                   ;->0x3ad4
..\src\kf32a9k1xxx_usart.c:898
    }
    else
    {
        /* 禁止单线模式*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_RESHD_POS);
    3ad0:	5e 82       	LD.W      R5, [SP]
    3ad2:	ae 4f       	CLR       [R5], #30
..\src\kf32a9k1xxx_usart.c:900
    }
}
    3ad4:	e8 28       	ADD       SP, #8
    3ad6:	0d 5d       	POP       LR
    3ad8:	1d 5c       	JMP       LR
    3ada:	00 00       	NOP      NOP      
    3adc:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3adc  :=0x40000980
    3ae0:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x3ae0  :=0x40000a00
    3ae4:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3ae4  :=0x40000a80
    3ae8:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3ae8  :=0x40000b80
    3aec:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x3aec  :=0x40001e80
    3af0:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x3af0  :=0x40001f80
    3af4:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      

00003af8 <USART_BaudRate_Integer_Config>:
USART_BaudRate_Integer_Config():
..\src\kf32a9k1xxx_usart.c:936
  *       DIV: 取值范围为0~65535。
  * 返回  无。
  */
void
USART_BaudRate_Integer_Config(USART_SFRmap* USARTx, uint16_t DIV)
{
    3af8:	2d 5d       	PUSH      LR
    3afa:	ec 30       	SUB       SP, #12
    3afc:	01 20       	ST.W      [SP + #1], R0
    3afe:	a1 58       	MOV       R5, R1
    3b00:	a4 e2       	ST.H      [SP + #4], R5
..\src\kf32a9k1xxx_usart.c:937
    uint32_t tmpreg = 0;
    3b02:	50 10       	MOV       R5, #0
    3b04:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_usart.c:940

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    3b06:	01 0c       	LD.W      R4, [SP + #1]
    3b08:	16 45       	LD        R5, [PC + #22]        ;->0x3b60  :=0x40000980
    3b0a:	45 70       	CMP       R4, R5
    3b0c:	15 f0       	JZ        $+21                  ;->0x3b36
    3b0e:	01 0c       	LD.W      R4, [SP + #1]
    3b10:	15 45       	LD        R5, [PC + #21]        ;->0x3b64  :=0x40000a00
    3b12:	45 70       	CMP       R4, R5
    3b14:	11 f0       	JZ        $+17                  ;->0x3b36
    3b16:	01 0c       	LD.W      R4, [SP + #1]
    3b18:	14 45       	LD        R5, [PC + #20]        ;->0x3b68  :=0x40000a80
    3b1a:	45 70       	CMP       R4, R5
    3b1c:	0d f0       	JZ        $+13                  ;->0x3b36
    3b1e:	01 0c       	LD.W      R4, [SP + #1]
    3b20:	13 45       	LD        R5, [PC + #19]        ;->0x3b6c  :=0x40000b80
    3b22:	45 70       	CMP       R4, R5
    3b24:	09 f0       	JZ        $+9                   ;->0x3b36
    3b26:	01 0c       	LD.W      R4, [SP + #1]
    3b28:	12 45       	LD        R5, [PC + #18]        ;->0x3b70  :=0x40001e80
    3b2a:	45 70       	CMP       R4, R5
    3b2c:	05 f0       	JZ        $+5                   ;->0x3b36
    3b2e:	01 0c       	LD.W      R4, [SP + #1]
    3b30:	11 45       	LD        R5, [PC + #17]        ;->0x3b74  :=0x40001f80
    3b32:	45 70       	CMP       R4, R5
    3b34:	03 f1       	JNZ       $+3                   ;->0x3b3a
    3b36:	51 10       	MOV       R5, #1
    3b38:	02 04       	SJMP      $+2                   ;->0x3b3c
    3b3a:	50 10       	MOV       R5, #0
    3b3c:	05 58       	MOV       R0, R5
    3b3e:	0f 45       	LD        R5, [PC + #15]        ;->0x3b78  :=0x4ba6
    3b40:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:943

    /*---------------- 设置USART_BRGR寄存器BRGM位 ----------------*/
    tmpreg = DIV << USART_BRGR_BRGM0_POS;
    3b42:	a4 e0       	LD.H      R5, [SP + #4]
    3b44:	e5 85       	ST.W      [SP], R5
..\src\kf32a9k1xxx_usart.c:944
    USARTx->BRGR = SFR_Config (USARTx->BRGR, ~USART_BRGR_BRGM, tmpreg);
    3b46:	01 0d       	LD.W      R5, [SP + #1]
    3b48:	6d 98       	LD.W      R5, [R5 + #1]
    3b4a:	05 58       	MOV       R0, R5
    3b4c:	0c 41       	LD        R1, [PC + #12]        ;->0x3b7c  :=0xffff0000
    3b4e:	2e 82       	LD.W      R2, [SP]
    3b50:	0c 45       	LD        R5, [PC + #12]        ;->0x3b80  :=0x332c
    3b52:	05 5c       	LJMP      R5
    3b54:	80 58       	MOV       R4, R0
    3b56:	01 0d       	LD.W      R5, [SP + #1]
    3b58:	6c a0       	ST.W      [R5 + #1], R4
..\src\kf32a9k1xxx_usart.c:945
}
    3b5a:	ec 28       	ADD       SP, #12
    3b5c:	0d 5d       	POP       LR
    3b5e:	1d 5c       	JMP       LR
    3b60:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3b60  :=0x40000980
    3b64:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x3b64  :=0x40000a00
    3b68:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3b68  :=0x40000a80
    3b6c:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3b6c  :=0x40000b80
    3b70:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x3b70  :=0x40001e80
    3b74:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x3b74  :=0x40001f80
    3b78:	a6 4b 00 00 	.long     0x00004ba6 ->000019366  [!!!@2@:CLR       R4, #30	@@: NOP      
    3b7c:	00 00 ff ff 	.long     0xffff0000 ->-00065536 
    3b80:	2c 33 00 00 	.long     0x0000332c ->000013100  [!!!@2@:SUB       R2, #60	@@: NOP      

00003b84 <cfg_ADC>:
cfg_ADC():
..\driver\driver_adc.c:24
volatile ADC_DATA_TYPE adc_data;



void cfg_ADC(void)
{
    3b84:	2d 5d       	PUSH      LR
    3b86:	e4 30       	SUB       SP, #4
..\driver\driver_adc.c:25
	volatile uint16_t i = 50000;
    3b88:	0e 45       	LD        R5, [PC + #14]        ;->0x3bc0  :=0xffffc350
    3b8a:	e5 84       	ST.H      [SP], R5
..\driver\driver_adc.c:26
	cfg_ADC_GPIO();
    3b8c:	0e 45       	LD        R5, [PC + #14]        ;->0x3bc4  :=0x3bd8
    3b8e:	05 5c       	LJMP      R5
..\driver\driver_adc.c:27
    cfg_ADC0();
    3b90:	0e 45       	LD        R5, [PC + #14]        ;->0x3bc8  :=0x3c58
    3b92:	05 5c       	LJMP      R5
..\driver\driver_adc.c:28
    cfg_ADC1();
    3b94:	0e 45       	LD        R5, [PC + #14]        ;->0x3bcc  :=0x3d3c
    3b96:	05 5c       	LJMP      R5
..\driver\driver_adc.c:29
    cfg_ADC2();
    3b98:	0e 45       	LD        R5, [PC + #14]        ;->0x3bd0  :=0x3de0
    3b9a:	05 5c       	LJMP      R5
..\driver\driver_adc.c:30
    cfg_ADC0_IT();
    3b9c:	0e 45       	LD        R5, [PC + #14]        ;->0x3bd4  :=0x3cfc
    3b9e:	05 5c       	LJMP      R5
..\driver\driver_adc.c:31
    while(i--);
    3ba0:	00 00       	NOP      NOP      
    3ba2:	5e 81       	LD.H      R5, [SP]
    3ba4:	45 d0       	ZXT.H     R4, R5
    3ba6:	50 10       	MOV       R5, #0
    3ba8:	2d c7       	SUB       R5, R5, R4
    3baa:	af 7d       	LSR       R5, #31
    3bac:	55 d1       	ZXT.B     R5, R5
    3bae:	64 cc       	SUB       R4, R4, #1
    3bb0:	44 d0       	ZXT.H     R4, R4
    3bb2:	e4 84       	ST.H      [SP], R4
    3bb4:	50 38       	CMP       R5, #0
    3bb6:	f6 f1       	JNZ       $-10                  ;->0x3ba2
..\driver\driver_adc.c:32
}
    3bb8:	e4 28       	ADD       SP, #4
    3bba:	0d 5d       	POP       LR
    3bbc:	1d 5c       	JMP       LR
    3bbe:	00 00       	NOP      NOP      
    3bc0:	50 c3 ff ff 	.long     0xffffc350 ->-00015536 
    3bc4:	d8 3b 00 00 	.long     0x00003bd8 ->000015320  [!!!@2@:CMP       LR, #56	@@: NOP      
    3bc8:	58 3c 00 00 	.long     0x00003c58 ->000015448  [!!!@2@:CMP       R5, #72	@@: NOP      
    3bcc:	3c 3d 00 00 	.long     0x00003d3c ->000015676  [!!!@2@:CMP       R3, #92	@@: NOP      
    3bd0:	e0 3d 00 00 	.long     0x00003de0 ->000015840  [!!!@2@:CMP       SP, #80	@@: NOP      
    3bd4:	fc 3c 00 00 	.long     0x00003cfc ->000015612  [!!!@2@:CMP       PC, #76	@@: NOP      

00003bd8 <cfg_ADC_GPIO>:
cfg_ADC_GPIO():
..\driver\driver_adc.c:36


void cfg_ADC_GPIO(void)
{
    3bd8:	2d 5d       	PUSH      LR
..\driver\driver_adc.c:37
	GPIO_Write_Mode_Bits(GPIOG_SFR,GPIO_PIN_MASK_2,GPIO_MODE_AN); //PG2-ADC_CH25-Iu
    3bda:	1d 40       	LD        R0, [PC + #29]        ;->0x3c4c  :=0x50000180
    3bdc:	14 10       	MOV       R1, #4
    3bde:	23 10       	MOV       R2, #3
    3be0:	1c 45       	LD        R5, [PC + #28]        ;->0x3c50  :=0x23d0
    3be2:	05 5c       	LJMP      R5
..\driver\driver_adc.c:38
	GPIO_Write_Mode_Bits(GPIOG_SFR,GPIO_PIN_MASK_0,GPIO_MODE_AN); //PG0-ADC_CH23-Iv
    3be4:	1a 40       	LD        R0, [PC + #26]        ;->0x3c4c  :=0x50000180
    3be6:	11 10       	MOV       R1, #1
    3be8:	23 10       	MOV       R2, #3
    3bea:	1a 45       	LD        R5, [PC + #26]        ;->0x3c50  :=0x23d0
    3bec:	05 5c       	LJMP      R5
..\driver\driver_adc.c:39
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_6,GPIO_MODE_AN); //PC6-ADC_CH35-Vbus
    3bee:	1a 40       	LD        R0, [PC + #26]        ;->0x3c54  :=0x50000080
    3bf0:	10 14       	MOV       R1, #64
    3bf2:	23 10       	MOV       R2, #3
    3bf4:	17 45       	LD        R5, [PC + #23]        ;->0x3c50  :=0x23d0
    3bf6:	05 5c       	LJMP      R5
..\driver\driver_adc.c:40
	GPIO_Write_Mode_Bits(GPIOG_SFR,GPIO_PIN_MASK_13,GPIO_MODE_AN); //PG13-ADC_CH91-Vpot
    3bf8:	15 40       	LD        R0, [PC + #21]        ;->0x3c4c  :=0x50000180
    3bfa:	11 10       	MOV       R1, #1
    3bfc:	8d 7a       	LSL       R1, #13
    3bfe:	23 10       	MOV       R2, #3
    3c00:	14 45       	LD        R5, [PC + #20]        ;->0x3c50  :=0x23d0
    3c02:	05 5c       	LJMP      R5
..\driver\driver_adc.c:41
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_0,GPIO_MODE_AN); //PC0-ADC_CH29-Ibus
    3c04:	14 40       	LD        R0, [PC + #20]        ;->0x3c54  :=0x50000080
    3c06:	11 10       	MOV       R1, #1
    3c08:	23 10       	MOV       R2, #3
    3c0a:	12 45       	LD        R5, [PC + #18]        ;->0x3c50  :=0x23d0
    3c0c:	05 5c       	LJMP      R5
..\driver\driver_adc.c:42
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_14,GPIO_MODE_AN); //PC14-ADC_CH0-Vu
    3c0e:	12 40       	LD        R0, [PC + #18]        ;->0x3c54  :=0x50000080
    3c10:	11 10       	MOV       R1, #1
    3c12:	8e 7a       	LSL       R1, #14
    3c14:	23 10       	MOV       R2, #3
    3c16:	0f 45       	LD        R5, [PC + #15]        ;->0x3c50  :=0x23d0
    3c18:	05 5c       	LJMP      R5
..\driver\driver_adc.c:43
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_13,GPIO_MODE_AN); //PC13-ADC_CH43-Vv
    3c1a:	0f 40       	LD        R0, [PC + #15]        ;->0x3c54  :=0x50000080
    3c1c:	11 10       	MOV       R1, #1
    3c1e:	8d 7a       	LSL       R1, #13
    3c20:	23 10       	MOV       R2, #3
    3c22:	0c 45       	LD        R5, [PC + #12]        ;->0x3c50  :=0x23d0
    3c24:	05 5c       	LJMP      R5
..\driver\driver_adc.c:44
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_12,GPIO_MODE_AN); //PC12-ADC_CH42-Vw
    3c26:	0c 40       	LD        R0, [PC + #12]        ;->0x3c54  :=0x50000080
    3c28:	11 10       	MOV       R1, #1
    3c2a:	8c 7a       	LSL       R1, #12
    3c2c:	23 10       	MOV       R2, #3
    3c2e:	09 45       	LD        R5, [PC + #9]         ;->0x3c50  :=0x23d0
    3c30:	05 5c       	LJMP      R5
..\driver\driver_adc.c:45
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_11,GPIO_MODE_AN); //PC11-ADC_CH41-Vm
    3c32:	09 40       	LD        R0, [PC + #9]         ;->0x3c54  :=0x50000080
    3c34:	11 10       	MOV       R1, #1
    3c36:	8b 7a       	LSL       R1, #11
    3c38:	23 10       	MOV       R2, #3
    3c3a:	06 45       	LD        R5, [PC + #6]         ;->0x3c50  :=0x23d0
    3c3c:	05 5c       	LJMP      R5
..\driver\driver_adc.c:47
	//CMP
	GPIO_Write_Mode_Bits(GPIOG_SFR,GPIO_PIN_MASK_4,GPIO_MODE_AN); //PG4
    3c3e:	04 40       	LD        R0, [PC + #4]         ;->0x3c4c  :=0x50000180
    3c40:	10 11       	MOV       R1, #16
    3c42:	23 10       	MOV       R2, #3
    3c44:	03 45       	LD        R5, [PC + #3]         ;->0x3c50  :=0x23d0
    3c46:	05 5c       	LJMP      R5
..\driver\driver_adc.c:48
}
    3c48:	0d 5d       	POP       LR
    3c4a:	1d 5c       	JMP       LR
    3c4c:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    3c50:	d0 23 00 00 	.long     0x000023d0 ->000009168  [!!!@2@:ST.W      [SP + #208], R3	@@: NOP      
    3c54:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xdc54

00003c58 <cfg_ADC0>:
cfg_ADC0():
..\driver\driver_adc.c:52


void cfg_ADC0(void)
{
    3c58:	2d 5d       	PUSH      LR
    3c5a:	e0 33       	SUB       SP, #48
..\driver\driver_adc.c:55
	ADC_InitTypeDef adcStruct;

	ADC_Reset (ADC0_SFR);
    3c5c:	20 40       	LD        R0, [PC + #32]        ;->0x3cdc  :=0x40000580
    3c5e:	21 45       	LD        R5, [PC + #33]        ;->0x3ce0  :=0x218
    3c60:	05 5c       	LJMP      R5
..\driver\driver_adc.c:56
	ADC_Struct_Init(&adcStruct);
    3c62:	0e 58       	MOV       R0, SP
    3c64:	20 45       	LD        R5, [PC + #32]        ;->0x3ce4  :=0x584
    3c66:	05 5c       	LJMP      R5
..\driver\driver_adc.c:59

	/* 初始化 ADC时钟源选择 */
	adcStruct.m_Clock = ADC_SCLK;
    3c68:	50 10       	MOV       R5, #0
    3c6a:	e5 85       	ST.W      [SP], R5
..\driver\driver_adc.c:61
	/* 初始化 ADC时钟分频 */
	adcStruct.m_ClockDiv = ADC_CLK_DIV_8;//15M
    3c6c:	51 10       	MOV       R5, #1
    3c6e:	a9 7a       	LSL       R5, #9
    3c70:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_adc.c:63
	/* 初始化 ADC扫描模式使能 */
	adcStruct.m_ScanMode = TRUE;
    3c72:	51 10       	MOV       R5, #1
    3c74:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_adc.c:65
	/* 初始化 ADC连续转换模式 */
	adcStruct.m_ContinuousMode = ADC_SINGLE_MODE;
    3c76:	50 10       	MOV       R5, #0
    3c78:	03 25       	ST.W      [SP + #3], R5
..\driver\driver_adc.c:67
	/* 初始化 ADC转换结果输出格式 */
	adcStruct.m_DataAlign = ADC_DATAALIGN_RIGHT;
    3c7a:	58 10       	MOV       R5, #8
    3c7c:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_adc.c:69
	/* 初始化 ADC常规通道外部触发转换模式使能 */
	adcStruct.m_ExternalTrig_EN = FALSE;//TRUE;
    3c7e:	50 10       	MOV       R5, #0
    3c80:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_adc.c:71
	/* 初始化 ADC常规通道外部触发事件 */
	adcStruct.m_ExternalTrig = ADC_EXTERNALTRIG_T5_OVERFLOW;
    3c82:	1a 45       	LD        R5, [PC + #26]        ;->0x3ce8  :=0x340
    3c84:	06 25       	ST.W      [SP + #6], R5
..\driver\driver_adc.c:73
	/* 初始化 ADC高优先级通道外部触发转换模式使能 */
	adcStruct.m_HPExternalTrig_EN = TRUE;
    3c86:	51 10       	MOV       R5, #1
    3c88:	07 25       	ST.W      [SP + #7], R5
..\driver\driver_adc.c:75
	/* 初始化 高优先级通道外部触发事件 */
	adcStruct.m_HPExternalTrig = ADC_HPEXTERNALTRIG_EPWM11_AD0;
    3c8a:	19 45       	LD        R5, [PC + #25]        ;->0x3cec  :=0x3600000
    3c8c:	08 25       	ST.W      [SP + #8], R5
..\driver\driver_adc.c:77
	/* 参考电压选择，取值为宏“ADC参考电压选择”中的一个。 */
	adcStruct.m_VoltageRef=ADC_REF_AVDD;
    3c8e:	51 10       	MOV       R5, #1
    3c90:	29 7b       	LSL       R5, #17
    3c92:	09 25       	ST.W      [SP + #9], R5
..\driver\driver_adc.c:79
	/* 初始化 ADC常规通道扫描长度 */
	adcStruct.m_NumOfConv = 4;
    3c94:	54 10       	MOV       R5, #4
    3c96:	0a 25       	ST.W      [SP + #10], R5
..\driver\driver_adc.c:81
	/* 初始化 ADC高优先级通道扫描长度 */
	adcStruct.m_NumOfHPConv = 4;
    3c98:	54 10       	MOV       R5, #4
    3c9a:	0b 25       	ST.W      [SP + #11], R5
..\driver\driver_adc.c:82
	ADC_Configuration (ADC0_SFR, &adcStruct);
    3c9c:	10 40       	LD        R0, [PC + #16]        ;->0x3cdc  :=0x40000580
    3c9e:	2e 58       	MOV       R1, SP
    3ca0:	14 45       	LD        R5, [PC + #20]        ;->0x3cf0  :=0x2d8
    3ca2:	05 5c       	LJMP      R5
..\driver\driver_adc.c:84

	ADC_High_Priority_Channel_Config(ADC0_SFR, ADC_CHANNEL_25, 0x01);  //Ia
    3ca4:	0e 40       	LD        R0, [PC + #14]        ;->0x3cdc  :=0x40000580
    3ca6:	19 11       	MOV       R1, #25
    3ca8:	21 10       	MOV       R2, #1
    3caa:	13 45       	LD        R5, [PC + #19]        ;->0x3cf4  :=0x644
    3cac:	05 5c       	LJMP      R5
..\driver\driver_adc.c:85
	ADC_High_Priority_Channel_Config(ADC0_SFR, ADC_CHANNEL_0, 0x02);  //Vu
    3cae:	0c 40       	LD        R0, [PC + #12]        ;->0x3cdc  :=0x40000580
    3cb0:	10 10       	MOV       R1, #0
    3cb2:	22 10       	MOV       R2, #2
    3cb4:	10 45       	LD        R5, [PC + #16]        ;->0x3cf4  :=0x644
    3cb6:	05 5c       	LJMP      R5
..\driver\driver_adc.c:86
	ADC_High_Priority_Channel_Config(ADC0_SFR, ADC_CHANNEL_0, 0x03);  //Vm
    3cb8:	09 40       	LD        R0, [PC + #9]         ;->0x3cdc  :=0x40000580
    3cba:	10 10       	MOV       R1, #0
    3cbc:	23 10       	MOV       R2, #3
    3cbe:	0e 45       	LD        R5, [PC + #14]        ;->0x3cf4  :=0x644
    3cc0:	05 5c       	LJMP      R5
..\driver\driver_adc.c:87
	ADC_High_Priority_Channel_Config(ADC0_SFR, ADC_CHANNEL_29, 0x04);  //Ibus
    3cc2:	07 40       	LD        R0, [PC + #7]         ;->0x3cdc  :=0x40000580
    3cc4:	1d 11       	MOV       R1, #29
    3cc6:	24 10       	MOV       R2, #4
    3cc8:	0b 45       	LD        R5, [PC + #11]        ;->0x3cf4  :=0x644
    3cca:	05 5c       	LJMP      R5
..\driver\driver_adc.c:89

	ADC_Cmd (ADC0_SFR, TRUE); //ADC使能
    3ccc:	04 40       	LD        R0, [PC + #4]         ;->0x3cdc  :=0x40000580
    3cce:	11 10       	MOV       R1, #1
    3cd0:	0a 45       	LD        R5, [PC + #10]        ;->0x3cf8  :=0x5d8
    3cd2:	05 5c       	LJMP      R5
..\driver\driver_adc.c:91

}
    3cd4:	e0 2b       	ADD       SP, #48
    3cd6:	0d 5d       	POP       LR
    3cd8:	1d 5c       	JMP       LR
    3cda:	00 00       	NOP      NOP      
    3cdc:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x3fdc	@@: LD        R0, [PC + #0]         ;->0x3cdc  :=0x40000580
    3ce0:	18 02 00 00 	.long     0x00000218 ->000000536  [!!!@2@:SVC      	@@: NOP      
    3ce4:	84 05 00 00 	.long     0x00000584 ->000001412  [!!!@2@:SJMP      $+388                 ;->0x3fec	@@: NOP      
    3ce8:	40 03 00 00 	.long     0x00000340 ->000000832  [!!!@4@:JMP       $+4194304             ;->0x803ce8
    3cec:	00 00 60 03 	.long     0x03600000 ->056623104  [!!!@2@:NOP      	@@: JMP       $+6292320             ;->0xc043ac
    3cf0:	d8 02 00 00 	.long     0x000002d8 ->000000728  [!!!@2@:SVC      	@@: NOP      
    3cf4:	44 06 00 00 	.long     0x00000644 ->000001604  [!!!@2@:SJMP      $-444                 ;->0x397c	@@: NOP      
    3cf8:	d8 05 00 00 	.long     0x000005d8 ->000001496  [!!!@2@:SJMP      $+472                 ;->0x40a8	@@: NOP      

00003cfc <cfg_ADC0_IT>:
cfg_ADC0_IT():
..\driver\driver_adc.c:94

void cfg_ADC0_IT(void)
{
    3cfc:	2d 5d       	PUSH      LR
..\driver\driver_adc.c:95
	ADC_Set_INT_Enable (ADC0_SFR,ADC_INT_HPEND, TRUE);
    3cfe:	0a 40       	LD        R0, [PC + #10]        ;->0x3d24  :=0x40000580
    3d00:	0a 41       	LD        R1, [PC + #10]        ;->0x3d28  :=0x60309
    3d02:	21 10       	MOV       R2, #1
    3d04:	0a 45       	LD        R5, [PC + #10]        ;->0x3d2c  :=0xaa4
    3d06:	05 5c       	LJMP      R5
..\driver\driver_adc.c:96
	INT_Interrupt_Priority_Config(INT_ADC0,1,0);//抢占优先级1,子优先级0
    3d08:	05 12       	MOV       R0, #37
    3d0a:	11 10       	MOV       R1, #1
    3d0c:	20 10       	MOV       R2, #0
    3d0e:	09 45       	LD        R5, [PC + #9]         ;->0x3d30  :=0x299c
    3d10:	05 5c       	LJMP      R5
..\driver\driver_adc.c:97
	INT_Clear_Interrupt_Flag(INT_ADC0);//清中断标志
    3d12:	05 12       	MOV       R0, #37
    3d14:	08 45       	LD        R5, [PC + #8]         ;->0x3d34  :=0x28f0
    3d16:	05 5c       	LJMP      R5
..\driver\driver_adc.c:98
	INT_Interrupt_Enable(INT_ADC0,TRUE);//外设中断使能
    3d18:	05 12       	MOV       R0, #37
    3d1a:	11 10       	MOV       R1, #1
    3d1c:	07 45       	LD        R5, [PC + #7]         ;->0x3d38  :=0x280c
    3d1e:	05 5c       	LJMP      R5
..\driver\driver_adc.c:99
}
    3d20:	0d 5d       	POP       LR
    3d22:	1d 5c       	JMP       LR
    3d24:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x4024	@@: LD        R0, [PC + #0]         ;->0x3d24  :=0x40000580
    3d28:	09 03 06 00 	.long     0x00060309 ->000393993  [!!!@4@:JMP       $+589830              ;->0x123d34
    3d2c:	a4 0a 00 00 	.long     0x00000aa4 ->000002724  [!!!@2@:LD.W      R2, [SP + #164]	@@: NOP      
    3d30:	9c 29 00 00 	.long     0x0000299c ->000010652  [!!!@2@:ADD       R9, #28	@@: NOP      
    3d34:	f0 28 00 00 	.long     0x000028f0 ->000010480  [!!!@2@:ADD       PC, #0	@@: NOP      
    3d38:	0c 28 00 00 	.long     0x0000280c ->000010252  [!!!@2@:ADD       R0, #12	@@: NOP      

00003d3c <cfg_ADC1>:
cfg_ADC1():
..\driver\driver_adc.c:102

void cfg_ADC1(void)
{
    3d3c:	2d 5d       	PUSH      LR
    3d3e:	e0 33       	SUB       SP, #48
..\driver\driver_adc.c:105
	ADC_InitTypeDef adcStruct;

	ADC_Reset (ADC1_SFR);
    3d40:	20 40       	LD        R0, [PC + #32]        ;->0x3dc0  :=0x40000600
    3d42:	21 45       	LD        R5, [PC + #33]        ;->0x3dc4  :=0x218
    3d44:	05 5c       	LJMP      R5
..\driver\driver_adc.c:106
	ADC_Struct_Init(&adcStruct);
    3d46:	0e 58       	MOV       R0, SP
    3d48:	20 45       	LD        R5, [PC + #32]        ;->0x3dc8  :=0x584
    3d4a:	05 5c       	LJMP      R5
..\driver\driver_adc.c:109

	/* 初始化 ADC时钟源选择 */
	adcStruct.m_Clock = ADC_SCLK;
    3d4c:	50 10       	MOV       R5, #0
    3d4e:	e5 85       	ST.W      [SP], R5
..\driver\driver_adc.c:111
	/* 初始化 ADC时钟分频 */
	adcStruct.m_ClockDiv = ADC_CLK_DIV_8;//15M
    3d50:	51 10       	MOV       R5, #1
    3d52:	a9 7a       	LSL       R5, #9
    3d54:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_adc.c:113
	/* 初始化 ADC扫描模式使能 */
	adcStruct.m_ScanMode = TRUE;
    3d56:	51 10       	MOV       R5, #1
    3d58:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_adc.c:115
	/* 初始化 ADC连续转换模式 */
	adcStruct.m_ContinuousMode = ADC_SINGLE_MODE;
    3d5a:	50 10       	MOV       R5, #0
    3d5c:	03 25       	ST.W      [SP + #3], R5
..\driver\driver_adc.c:117
	/* 初始化 ADC转换结果输出格式 */
	adcStruct.m_DataAlign = ADC_DATAALIGN_RIGHT;
    3d5e:	58 10       	MOV       R5, #8
    3d60:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_adc.c:119
	/* 初始化 ADC常规通道外部触发转换模式使能 */
	adcStruct.m_ExternalTrig_EN = FALSE;//TRUE;
    3d62:	50 10       	MOV       R5, #0
    3d64:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_adc.c:121
	/* 初始化 ADC常规通道外部触发事件 */
	adcStruct.m_ExternalTrig = ADC_EXTERNALTRIG_T5_OVERFLOW;
    3d66:	1a 45       	LD        R5, [PC + #26]        ;->0x3dcc  :=0x340
    3d68:	06 25       	ST.W      [SP + #6], R5
..\driver\driver_adc.c:123
	/* 初始化 ADC高优先级通道外部触发转换模式使能 */
	adcStruct.m_HPExternalTrig_EN = TRUE;
    3d6a:	51 10       	MOV       R5, #1
    3d6c:	07 25       	ST.W      [SP + #7], R5
..\driver\driver_adc.c:125
	/* 初始化 高优先级通道外部触发事件 */
	adcStruct.m_HPExternalTrig = ADC_HPEXTERNALTRIG_EPWM11_AD0;
    3d6e:	19 45       	LD        R5, [PC + #25]        ;->0x3dd0  :=0x3600000
    3d70:	08 25       	ST.W      [SP + #8], R5
..\driver\driver_adc.c:127
	/* 参考电压选择，取值为宏“ADC参考电压选择”中的一个。 */
	adcStruct.m_VoltageRef=ADC_REF_AVDD;
    3d72:	51 10       	MOV       R5, #1
    3d74:	29 7b       	LSL       R5, #17
    3d76:	09 25       	ST.W      [SP + #9], R5
..\driver\driver_adc.c:129
	/* 初始化 ADC常规通道扫描长度 */
	adcStruct.m_NumOfConv = 4;
    3d78:	54 10       	MOV       R5, #4
    3d7a:	0a 25       	ST.W      [SP + #10], R5
..\driver\driver_adc.c:131
	/* 初始化 ADC高优先级通道扫描长度 */
	adcStruct.m_NumOfHPConv = 4;
    3d7c:	54 10       	MOV       R5, #4
    3d7e:	0b 25       	ST.W      [SP + #11], R5
..\driver\driver_adc.c:132
	ADC_Configuration (ADC1_SFR, &adcStruct);
    3d80:	10 40       	LD        R0, [PC + #16]        ;->0x3dc0  :=0x40000600
    3d82:	2e 58       	MOV       R1, SP
    3d84:	14 45       	LD        R5, [PC + #20]        ;->0x3dd4  :=0x2d8
    3d86:	05 5c       	LJMP      R5
..\driver\driver_adc.c:134

	ADC_High_Priority_Channel_Config(ADC1_SFR, ADC_CHANNEL_23, 0x01);  //Ib
    3d88:	0e 40       	LD        R0, [PC + #14]        ;->0x3dc0  :=0x40000600
    3d8a:	17 11       	MOV       R1, #23
    3d8c:	21 10       	MOV       R2, #1
    3d8e:	13 45       	LD        R5, [PC + #19]        ;->0x3dd8  :=0x644
    3d90:	05 5c       	LJMP      R5
..\driver\driver_adc.c:135
	ADC_High_Priority_Channel_Config(ADC1_SFR, ADC_CHANNEL_43, 0x02);  //Vv
    3d92:	0c 40       	LD        R0, [PC + #12]        ;->0x3dc0  :=0x40000600
    3d94:	1b 12       	MOV       R1, #43
    3d96:	22 10       	MOV       R2, #2
    3d98:	10 45       	LD        R5, [PC + #16]        ;->0x3dd8  :=0x644
    3d9a:	05 5c       	LJMP      R5
..\driver\driver_adc.c:136
	ADC_High_Priority_Channel_Config(ADC1_SFR, ADC_CHANNEL_35, 0x03);  //Vbus
    3d9c:	09 40       	LD        R0, [PC + #9]         ;->0x3dc0  :=0x40000600
    3d9e:	13 12       	MOV       R1, #35
    3da0:	23 10       	MOV       R2, #3
    3da2:	0e 45       	LD        R5, [PC + #14]        ;->0x3dd8  :=0x644
    3da4:	05 5c       	LJMP      R5
..\driver\driver_adc.c:137
	ADC_High_Priority_Channel_Config(ADC1_SFR, ADC_CHANNEL_23, 0x04);  //Ibus_avg
    3da6:	07 40       	LD        R0, [PC + #7]         ;->0x3dc0  :=0x40000600
    3da8:	17 11       	MOV       R1, #23
    3daa:	24 10       	MOV       R2, #4
    3dac:	0b 45       	LD        R5, [PC + #11]        ;->0x3dd8  :=0x644
    3dae:	05 5c       	LJMP      R5
..\driver\driver_adc.c:139

	ADC_Cmd (ADC1_SFR, TRUE); //ADC使能
    3db0:	04 40       	LD        R0, [PC + #4]         ;->0x3dc0  :=0x40000600
    3db2:	11 10       	MOV       R1, #1
    3db4:	0a 45       	LD        R5, [PC + #10]        ;->0x3ddc  :=0x5d8
    3db6:	05 5c       	LJMP      R5
..\driver\driver_adc.c:140
}
    3db8:	e0 2b       	ADD       SP, #48
    3dba:	0d 5d       	POP       LR
    3dbc:	1d 5c       	JMP       LR
    3dbe:	00 00       	NOP      NOP      
    3dc0:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x39c0	@@: LD        R0, [PC + #0]         ;->0x3dc0  :=0x40000600
    3dc4:	18 02 00 00 	.long     0x00000218 ->000000536  [!!!@2@:SVC      	@@: NOP      
    3dc8:	84 05 00 00 	.long     0x00000584 ->000001412  [!!!@2@:SJMP      $+388                 ;->0x40d0	@@: NOP      
    3dcc:	40 03 00 00 	.long     0x00000340 ->000000832  [!!!@4@:JMP       $+4194304             ;->0x803dcc
    3dd0:	00 00 60 03 	.long     0x03600000 ->056623104  [!!!@2@:NOP      	@@: JMP       $+6292320             ;->0xc04490
    3dd4:	d8 02 00 00 	.long     0x000002d8 ->000000728  [!!!@2@:SVC      	@@: NOP      
    3dd8:	44 06 00 00 	.long     0x00000644 ->000001604  [!!!@2@:SJMP      $-444                 ;->0x3a60	@@: NOP      
    3ddc:	d8 05 00 00 	.long     0x000005d8 ->000001496  [!!!@2@:SJMP      $+472                 ;->0x418c	@@: NOP      

00003de0 <cfg_ADC2>:
cfg_ADC2():
..\driver\driver_adc.c:143

void cfg_ADC2(void)
{
    3de0:	2d 5d       	PUSH      LR
    3de2:	e0 33       	SUB       SP, #48
..\driver\driver_adc.c:146
	ADC_InitTypeDef adcStruct;

	ADC_Reset (ADC2_SFR);
    3de4:	20 40       	LD        R0, [PC + #32]        ;->0x3e64  :=0x40000680
    3de6:	21 45       	LD        R5, [PC + #33]        ;->0x3e68  :=0x218
    3de8:	05 5c       	LJMP      R5
..\driver\driver_adc.c:147
	ADC_Struct_Init(&adcStruct);
    3dea:	0e 58       	MOV       R0, SP
    3dec:	20 45       	LD        R5, [PC + #32]        ;->0x3e6c  :=0x584
    3dee:	05 5c       	LJMP      R5
..\driver\driver_adc.c:150

	/* 初始化 ADC时钟源选择 */
	adcStruct.m_Clock = ADC_SCLK;
    3df0:	50 10       	MOV       R5, #0
    3df2:	e5 85       	ST.W      [SP], R5
..\driver\driver_adc.c:152
	/* 初始化 ADC时钟分频 */
	adcStruct.m_ClockDiv = ADC_CLK_DIV_8;//15M
    3df4:	51 10       	MOV       R5, #1
    3df6:	a9 7a       	LSL       R5, #9
    3df8:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_adc.c:154
	/* 初始化 ADC扫描模式使能 */
	adcStruct.m_ScanMode = TRUE;
    3dfa:	51 10       	MOV       R5, #1
    3dfc:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_adc.c:156
	/* 初始化 ADC连续转换模式 */
	adcStruct.m_ContinuousMode = ADC_SINGLE_MODE;
    3dfe:	50 10       	MOV       R5, #0
    3e00:	03 25       	ST.W      [SP + #3], R5
..\driver\driver_adc.c:158
	/* 初始化 ADC转换结果输出格式 */
	adcStruct.m_DataAlign = ADC_DATAALIGN_RIGHT;
    3e02:	58 10       	MOV       R5, #8
    3e04:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_adc.c:160
	/* 初始化 ADC常规通道外部触发转换模式使能 */
	adcStruct.m_ExternalTrig_EN = FALSE;//TRUE;
    3e06:	50 10       	MOV       R5, #0
    3e08:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_adc.c:162
	/* 初始化 ADC常规通道外部触发事件 */
	adcStruct.m_ExternalTrig = ADC_EXTERNALTRIG_T5_OVERFLOW;
    3e0a:	1a 45       	LD        R5, [PC + #26]        ;->0x3e70  :=0x340
    3e0c:	06 25       	ST.W      [SP + #6], R5
..\driver\driver_adc.c:164
	/* 初始化 ADC高优先级通道外部触发转换模式使能 */
	adcStruct.m_HPExternalTrig_EN = TRUE;
    3e0e:	51 10       	MOV       R5, #1
    3e10:	07 25       	ST.W      [SP + #7], R5
..\driver\driver_adc.c:166
	/* 初始化 高优先级通道外部触发事件 */
	adcStruct.m_HPExternalTrig = ADC_HPEXTERNALTRIG_EPWM11_AD0;
    3e12:	19 45       	LD        R5, [PC + #25]        ;->0x3e74  :=0x3600000
    3e14:	08 25       	ST.W      [SP + #8], R5
..\driver\driver_adc.c:168
	/* 参考电压选择，取值为宏“ADC参考电压选择”中的一个。 */
	adcStruct.m_VoltageRef=ADC_REF_AVDD;
    3e16:	51 10       	MOV       R5, #1
    3e18:	29 7b       	LSL       R5, #17
    3e1a:	09 25       	ST.W      [SP + #9], R5
..\driver\driver_adc.c:170
	/* 初始化 ADC常规通道扫描长度 */
	adcStruct.m_NumOfConv = 4;
    3e1c:	54 10       	MOV       R5, #4
    3e1e:	0a 25       	ST.W      [SP + #10], R5
..\driver\driver_adc.c:172
	/* 初始化 ADC高优先级通道扫描长度 */
	adcStruct.m_NumOfHPConv = 4;
    3e20:	54 10       	MOV       R5, #4
    3e22:	0b 25       	ST.W      [SP + #11], R5
..\driver\driver_adc.c:173
	ADC_Configuration (ADC2_SFR, &adcStruct);
    3e24:	10 40       	LD        R0, [PC + #16]        ;->0x3e64  :=0x40000680
    3e26:	2e 58       	MOV       R1, SP
    3e28:	14 45       	LD        R5, [PC + #20]        ;->0x3e78  :=0x2d8
    3e2a:	05 5c       	LJMP      R5
..\driver\driver_adc.c:175

	ADC_High_Priority_Channel_Config(ADC2_SFR, ADC_CHANNEL_41, 0x01);  //Vm
    3e2c:	0e 40       	LD        R0, [PC + #14]        ;->0x3e64  :=0x40000680
    3e2e:	19 12       	MOV       R1, #41
    3e30:	21 10       	MOV       R2, #1
    3e32:	13 45       	LD        R5, [PC + #19]        ;->0x3e7c  :=0x644
    3e34:	05 5c       	LJMP      R5
..\driver\driver_adc.c:176
	ADC_High_Priority_Channel_Config(ADC2_SFR, ADC_CHANNEL_42, 0x02);  //Vw
    3e36:	0c 40       	LD        R0, [PC + #12]        ;->0x3e64  :=0x40000680
    3e38:	1a 12       	MOV       R1, #42
    3e3a:	22 10       	MOV       R2, #2
    3e3c:	10 45       	LD        R5, [PC + #16]        ;->0x3e7c  :=0x644
    3e3e:	05 5c       	LJMP      R5
..\driver\driver_adc.c:177
	ADC_High_Priority_Channel_Config(ADC2_SFR, ADC_CHANNEL_91, 0x03);  //POT
    3e40:	09 40       	LD        R0, [PC + #9]         ;->0x3e64  :=0x40000680
    3e42:	1b 15       	MOV       R1, #91
    3e44:	23 10       	MOV       R2, #3
    3e46:	0e 45       	LD        R5, [PC + #14]        ;->0x3e7c  :=0x644
    3e48:	05 5c       	LJMP      R5
..\driver\driver_adc.c:178
	ADC_High_Priority_Channel_Config(ADC2_SFR, ADC_CHANNEL_9, 0x04);  //TEMP
    3e4a:	07 40       	LD        R0, [PC + #7]         ;->0x3e64  :=0x40000680
    3e4c:	19 10       	MOV       R1, #9
    3e4e:	24 10       	MOV       R2, #4
    3e50:	0b 45       	LD        R5, [PC + #11]        ;->0x3e7c  :=0x644
    3e52:	05 5c       	LJMP      R5
..\driver\driver_adc.c:180

	ADC_Cmd (ADC2_SFR, TRUE); //ADC使能
    3e54:	04 40       	LD        R0, [PC + #4]         ;->0x3e64  :=0x40000680
    3e56:	11 10       	MOV       R1, #1
    3e58:	0a 45       	LD        R5, [PC + #10]        ;->0x3e80  :=0x5d8
    3e5a:	05 5c       	LJMP      R5
..\driver\driver_adc.c:181
}
    3e5c:	e0 2b       	ADD       SP, #48
    3e5e:	0d 5d       	POP       LR
    3e60:	1d 5c       	JMP       LR
    3e62:	00 00       	NOP      NOP      
    3e64:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x3b64	@@: LD        R0, [PC + #0]         ;->0x3e64  :=0x40000680
    3e68:	18 02 00 00 	.long     0x00000218 ->000000536  [!!!@2@:SVC      	@@: NOP      
    3e6c:	84 05 00 00 	.long     0x00000584 ->000001412  [!!!@2@:SJMP      $+388                 ;->0x4174	@@: NOP      
    3e70:	40 03 00 00 	.long     0x00000340 ->000000832  [!!!@4@:JMP       $+4194304             ;->0x803e70
    3e74:	00 00 60 03 	.long     0x03600000 ->056623104  [!!!@2@:NOP      	@@: JMP       $+6292320             ;->0xc04534
    3e78:	d8 02 00 00 	.long     0x000002d8 ->000000728  [!!!@2@:SVC      	@@: NOP      
    3e7c:	44 06 00 00 	.long     0x00000644 ->000001604  [!!!@2@:SJMP      $-444                 ;->0x3b04	@@: NOP      
    3e80:	d8 05 00 00 	.long     0x000005d8 ->000001496  [!!!@2@:SJMP      $+472                 ;->0x4230	@@: NOP      

00003e84 <adc_offset_calc>:
adc_offset_calc():
..\driver\driver_adc.c:215
   // adc_data.Ibus_avg_pu = adc_buf[7];
}


void adc_offset_calc(void)
{
    3e84:	e4 30       	SUB       SP, #4
..\driver\driver_adc.c:218
	uint16_t i,j;

	adc_data.Ia_offset = 0;
    3e86:	41 44       	LD        R4, [PC + #65]        ;->0x3f88  :=0x10003ee0
    3e88:	50 10       	MOV       R5, #0
    3e8a:	45 85       	ST.W      [R4], R5
..\driver\driver_adc.c:219
	adc_data.Ib_offset = 0;
    3e8c:	3f 45       	LD        R5, [PC + #63]        ;->0x3f88  :=0x10003ee0
    3e8e:	40 10       	MOV       R4, #0
    3e90:	6c a0       	ST.W      [R5 + #1], R4
..\driver\driver_adc.c:220
	adc_data.Ic_offset = 0;
    3e92:	3e 45       	LD        R5, [PC + #62]        ;->0x3f88  :=0x10003ee0
    3e94:	40 10       	MOV       R4, #0
    3e96:	ac a0       	ST.W      [R5 + #2], R4
..\driver\driver_adc.c:221
	for(i=0;i<1025;i++)
    3e98:	50 10       	MOV       R5, #0
    3e9a:	e5 84       	ST.H      [SP], R5
    3e9c:	63 04       	SJMP      $+99                  ;->0x3f62
..\driver\driver_adc.c:223
	{
		ADC0_HPSTART;
    3e9e:	3c 45       	LD        R5, [PC + #60]        ;->0x3f8c  :=0x40000580
    3ea0:	3b 44       	LD        R4, [PC + #59]        ;->0x3f8c  :=0x40000580
    3ea2:	64 98       	LD.W      R4, [R4 + #1]
    3ea4:	23 48       	SET       R4, #3
    3ea6:	6c a0       	ST.W      [R5 + #1], R4
..\driver\driver_adc.c:224
		ADC1_HPSTART;
    3ea8:	3a 45       	LD        R5, [PC + #58]        ;->0x3f90  :=0x40000600
    3eaa:	3a 44       	LD        R4, [PC + #58]        ;->0x3f90  :=0x40000600
    3eac:	64 98       	LD.W      R4, [R4 + #1]
    3eae:	23 48       	SET       R4, #3
    3eb0:	6c a0       	ST.W      [R5 + #1], R4
..\driver\driver_adc.c:225
		ADC2_HPSTART;
    3eb2:	39 45       	LD        R5, [PC + #57]        ;->0x3f94  :=0x40000680
    3eb4:	38 44       	LD        R4, [PC + #56]        ;->0x3f94  :=0x40000680
    3eb6:	64 98       	LD.W      R4, [R4 + #1]
    3eb8:	23 48       	SET       R4, #3
    3eba:	6c a0       	ST.W      [R5 + #1], R4
..\driver\driver_adc.c:226
		while(!(ADC0_HPENDIF_CHECK&&ADC1_HPENDIF_CHECK&&ADC2_HPENDIF_CHECK));
    3ebc:	00 00       	NOP      NOP      
    3ebe:	34 45       	LD        R5, [PC + #52]        ;->0x3f8c  :=0x40000580
    3ec0:	25 9d       	LD.W      R4, [R5 + #20]
    3ec2:	58 10       	MOV       R5, #8
    3ec4:	6c d5       	ANL       R5, R4, R5
    3ec6:	50 38       	CMP       R5, #0
    3ec8:	fb f0       	JZ        $-5                   ;->0x3ebe
    3eca:	32 45       	LD        R5, [PC + #50]        ;->0x3f90  :=0x40000600
    3ecc:	25 9d       	LD.W      R4, [R5 + #20]
    3ece:	58 10       	MOV       R5, #8
    3ed0:	6c d5       	ANL       R5, R4, R5
    3ed2:	50 38       	CMP       R5, #0
    3ed4:	f5 f0       	JZ        $-11                  ;->0x3ebe
    3ed6:	30 45       	LD        R5, [PC + #48]        ;->0x3f94  :=0x40000680
    3ed8:	25 9d       	LD.W      R4, [R5 + #20]
    3eda:	58 10       	MOV       R5, #8
    3edc:	6c d5       	ANL       R5, R4, R5
    3ede:	50 38       	CMP       R5, #0
    3ee0:	ef f0       	JZ        $-17                  ;->0x3ebe
..\driver\driver_adc.c:227
		ADC0_HPENDIF_CLEAR;
    3ee2:	2b 45       	LD        R5, [PC + #43]        ;->0x3f8c  :=0x40000580
    3ee4:	2a 44       	LD        R4, [PC + #42]        ;->0x3f8c  :=0x40000580
    3ee6:	24 9d       	LD.W      R4, [R4 + #20]
    3ee8:	26 48       	SET       R4, #6
    3eea:	2c a5       	ST.W      [R5 + #20], R4
..\driver\driver_adc.c:228
		ADC1_HPENDIF_CLEAR;
    3eec:	29 45       	LD        R5, [PC + #41]        ;->0x3f90  :=0x40000600
    3eee:	29 44       	LD        R4, [PC + #41]        ;->0x3f90  :=0x40000600
    3ef0:	24 9d       	LD.W      R4, [R4 + #20]
    3ef2:	26 48       	SET       R4, #6
    3ef4:	2c a5       	ST.W      [R5 + #20], R4
..\driver\driver_adc.c:229
		ADC2_HPENDIF_CLEAR;
    3ef6:	28 45       	LD        R5, [PC + #40]        ;->0x3f94  :=0x40000680
    3ef8:	27 44       	LD        R4, [PC + #39]        ;->0x3f94  :=0x40000680
    3efa:	24 9d       	LD.W      R4, [R4 + #20]
    3efc:	26 48       	SET       R4, #6
    3efe:	2c a5       	ST.W      [R5 + #20], R4
..\driver\driver_adc.c:230
		ADC0_HPENDIC_CLEAR;
    3f00:	23 45       	LD        R5, [PC + #35]        ;->0x3f8c  :=0x40000580
    3f02:	23 44       	LD        R4, [PC + #35]        ;->0x3f8c  :=0x40000580
    3f04:	24 9d       	LD.W      R4, [R4 + #20]
    3f06:	26 4a       	CLR       R4, #6
    3f08:	2c a5       	ST.W      [R5 + #20], R4
..\driver\driver_adc.c:231
		ADC1_HPENDIC_CLEAR;
    3f0a:	22 45       	LD        R5, [PC + #34]        ;->0x3f90  :=0x40000600
    3f0c:	21 44       	LD        R4, [PC + #33]        ;->0x3f90  :=0x40000600
    3f0e:	24 9d       	LD.W      R4, [R4 + #20]
    3f10:	26 4a       	CLR       R4, #6
    3f12:	2c a5       	ST.W      [R5 + #20], R4
..\driver\driver_adc.c:232
		ADC2_HPENDIC_CLEAR;
    3f14:	20 45       	LD        R5, [PC + #32]        ;->0x3f94  :=0x40000680
    3f16:	20 44       	LD        R4, [PC + #32]        ;->0x3f94  :=0x40000680
    3f18:	24 9d       	LD.W      R4, [R4 + #20]
    3f1a:	26 4a       	CLR       R4, #6
    3f1c:	2c a5       	ST.W      [R5 + #20], R4
..\driver\driver_adc.c:233
		adc_buf[0] = ADC0_SFR->HPDATA0;
    3f1e:	1c 45       	LD        R5, [PC + #28]        ;->0x3f8c  :=0x40000580
    3f20:	6d 9a       	LD.W      R5, [R5 + #9]
    3f22:	55 d0       	ZXT.H     R5, R5
    3f24:	1d 44       	LD        R4, [PC + #29]        ;->0x3f98  :=0x10003f04
    3f26:	45 84       	ST.H      [R4], R5
..\driver\driver_adc.c:234
	    adc_buf[4] = ADC1_SFR->HPDATA0;
    3f28:	1a 45       	LD        R5, [PC + #26]        ;->0x3f90  :=0x40000600
    3f2a:	6d 9a       	LD.W      R5, [R5 + #9]
    3f2c:	55 d0       	ZXT.H     R5, R5
    3f2e:	1b 44       	LD        R4, [PC + #27]        ;->0x3f98  :=0x10003f04
    3f30:	25 b1       	ST.H      [R4 + #4], R5
..\driver\driver_adc.c:236
	    //adc_buf[8] = ADC2_SFR->HPDATA0;
	    if(i!=0)
    3f32:	5e 81       	LD.H      R5, [SP]
    3f34:	50 38       	CMP       R5, #0
    3f36:	13 f0       	JZ        $+19                  ;->0x3f5c
..\driver\driver_adc.c:238
	    {
	      adc_data.Ia_offset += adc_buf[0];
    3f38:	14 45       	LD        R5, [PC + #20]        ;->0x3f88  :=0x10003ee0
    3f3a:	45 82       	LD.W      R4, [R5]
    3f3c:	17 45       	LD        R5, [PC + #23]        ;->0x3f98  :=0x10003f04
    3f3e:	55 81       	LD.H      R5, [R5]
    3f40:	55 d0       	ZXT.H     R5, R5
    3f42:	55 61       	SXT.H     R5, R5
    3f44:	64 c3       	ADD       R4, R4, R5
    3f46:	11 45       	LD        R5, [PC + #17]        ;->0x3f88  :=0x10003ee0
    3f48:	54 85       	ST.W      [R5], R4
..\driver\driver_adc.c:239
	      adc_data.Ib_offset += adc_buf[4];
    3f4a:	10 45       	LD        R5, [PC + #16]        ;->0x3f88  :=0x10003ee0
    3f4c:	65 98       	LD.W      R4, [R5 + #1]
    3f4e:	13 45       	LD        R5, [PC + #19]        ;->0x3f98  :=0x10003f04
    3f50:	2d a9       	LD.H      R5, [R5 + #4]
    3f52:	55 d0       	ZXT.H     R5, R5
    3f54:	55 61       	SXT.H     R5, R5
    3f56:	64 c3       	ADD       R4, R4, R5
    3f58:	0c 45       	LD        R5, [PC + #12]        ;->0x3f88  :=0x10003ee0
    3f5a:	6c a0       	ST.W      [R5 + #1], R4
..\driver\driver_adc.c:221
	uint16_t i,j;

	adc_data.Ia_offset = 0;
	adc_data.Ib_offset = 0;
	adc_data.Ic_offset = 0;
	for(i=0;i<1025;i++)
    3f5c:	5e 81       	LD.H      R5, [SP]
    3f5e:	6d c0       	ADD       R5, R5, #1
    3f60:	e5 84       	ST.H      [SP], R5
    3f62:	4e 81       	LD.H      R4, [SP]
    3f64:	51 10       	MOV       R5, #1
    3f66:	aa 7a       	LSL       R5, #10
    3f68:	45 70       	CMP       R4, R5
    3f6a:	9a f9       	JLS       $-102                 ;->0x3e9e
..\driver\driver_adc.c:243
	      adc_data.Ia_offset += adc_buf[0];
	      adc_data.Ib_offset += adc_buf[4];
	      //adc_data.Ic_offset += adc_buf[8];
	    }
	}
	adc_data.Ia_offset = adc_data.Ia_offset>>10;
    3f6c:	07 45       	LD        R5, [PC + #7]         ;->0x3f88  :=0x10003ee0
    3f6e:	55 82       	LD.W      R5, [R5]
    3f70:	aa 78       	ASR       R5, #10
    3f72:	06 44       	LD        R4, [PC + #6]         ;->0x3f88  :=0x10003ee0
    3f74:	45 85       	ST.W      [R4], R5
..\driver\driver_adc.c:244
	adc_data.Ib_offset = adc_data.Ib_offset>>10;
    3f76:	05 45       	LD        R5, [PC + #5]         ;->0x3f88  :=0x10003ee0
    3f78:	6d 98       	LD.W      R5, [R5 + #1]
    3f7a:	3a 10       	MOV       R3, #10
    3f7c:	e5 de       	ASR       R4, R5, R3
    3f7e:	03 45       	LD        R5, [PC + #3]         ;->0x3f88  :=0x10003ee0
    3f80:	6c a0       	ST.W      [R5 + #1], R4
..\driver\driver_adc.c:246
	//adc_data.Ic_offset = adc_data.Ic_offset>>10;
}
    3f82:	e4 28       	ADD       SP, #4
    3f84:	1d 5c       	JMP       LR
    3f86:	00 00       	NOP      NOP      
    3f88:	e0 3e 00 10 	.long     0x10003ee0 ->268451552  [!!!@2@:CMP       SP, #96	@@: MOV       R0, #0
    3f8c:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x428c	@@: LD        R0, [PC + #0]         ;->0x3f8c  :=0x40000580
    3f90:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x3b90	@@: LD        R0, [PC + #0]         ;->0x3f90  :=0x40000600
    3f94:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x3c94	@@: LD        R0, [PC + #0]         ;->0x3f94  :=0x40000680
    3f98:	04 3f 00 10 	.long     0x10003f04 ->268451588  [!!!@2@:CMP       R0, #116	@@: MOV       R0, #0

00003f9c <cfg_DMA>:
cfg_DMA():
..\driver\driver_dma.c:29

void cfg_DMA(void)
{
	//cfg_DMA0();
	//cfg_dma_intrupt();
}
    3f9c:	1d 5c       	JMP       LR
	...

00003fa0 <cfg_GPIO>:
cfg_GPIO():
..\driver\driver_gpio.c:13
#include "system_init.h"
#include "driver_gpio.h"


void cfg_GPIO(void)
{
    3fa0:	2d 5d       	PUSH      LR
    3fa2:	e8 31       	SUB       SP, #24
..\driver\driver_gpio.c:15
	GPIO_InitTypeDef  GPIO_InitStructure;
	GPIO_Struct_Init(&GPIO_InitStructure);
    3fa4:	0e 58       	MOV       R0, SP
    3fa6:	3a 45       	LD        R5, [PC + #58]        ;->0x408c  :=0x23a0
    3fa8:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:16
	GPIO_Reset(GPIOA_SFR);
    3faa:	3a 40       	LD        R0, [PC + #58]        ;->0x4090  :=0x50000000
    3fac:	3a 45       	LD        R5, [PC + #58]        ;->0x4094  :=0x1fb8
    3fae:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:17
	GPIO_Reset(GPIOB_SFR);
    3fb0:	3a 40       	LD        R0, [PC + #58]        ;->0x4098  :=0x50000040
    3fb2:	39 45       	LD        R5, [PC + #57]        ;->0x4094  :=0x1fb8
    3fb4:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:18
	GPIO_Reset(GPIOC_SFR);
    3fb6:	3a 40       	LD        R0, [PC + #58]        ;->0x409c  :=0x50000080
    3fb8:	37 45       	LD        R5, [PC + #55]        ;->0x4094  :=0x1fb8
    3fba:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:19
	GPIO_Reset(GPIOD_SFR);
    3fbc:	39 40       	LD        R0, [PC + #57]        ;->0x40a0  :=0x500000c0
    3fbe:	36 45       	LD        R5, [PC + #54]        ;->0x4094  :=0x1fb8
    3fc0:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:20
	GPIO_Reset(GPIOF_SFR);
    3fc2:	39 40       	LD        R0, [PC + #57]        ;->0x40a4  :=0x50000140
    3fc4:	34 45       	LD        R5, [PC + #52]        ;->0x4094  :=0x1fb8
    3fc6:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:21
	GPIO_Reset(GPIOE_SFR);
    3fc8:	38 40       	LD        R0, [PC + #56]        ;->0x40a8  :=0x50000100
    3fca:	33 45       	LD        R5, [PC + #51]        ;->0x4094  :=0x1fb8
    3fcc:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:22
	GPIO_Reset(GPIOG_SFR);
    3fce:	38 40       	LD        R0, [PC + #56]        ;->0x40ac  :=0x50000180
    3fd0:	31 45       	LD        R5, [PC + #49]        ;->0x4094  :=0x1fb8
    3fd2:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:24
	//LED1
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_15;
    3fd4:	51 10       	MOV       R5, #1
    3fd6:	af 7a       	LSL       R5, #15
    3fd8:	e5 85       	ST.W      [SP], R5
..\driver\driver_gpio.c:25
    GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    3fda:	50 10       	MOV       R5, #0
    3fdc:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_gpio.c:26
	GPIO_InitStructure.m_Mode = GPIO_MODE_OUT;            //初始化 GPIO方向为输出
    3fde:	51 10       	MOV       R5, #1
    3fe0:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_gpio.c:27
	GPIO_InitStructure.m_PullUp = GPIO_NOPULL;            //初始化 GPIO是否上拉
    3fe2:	50 10       	MOV       R5, #0
    3fe4:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_gpio.c:28
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    3fe6:	50 10       	MOV       R5, #0
    3fe8:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_gpio.c:29
	GPIO_Configuration(GPIOB_SFR, &GPIO_InitStructure);
    3fea:	2c 40       	LD        R0, [PC + #44]        ;->0x4098  :=0x50000040
    3fec:	2e 58       	MOV       R1, SP
    3fee:	31 45       	LD        R5, [PC + #49]        ;->0x40b0  :=0x2154
    3ff0:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:31
	//LED2
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_14;
    3ff2:	51 10       	MOV       R5, #1
    3ff4:	ae 7a       	LSL       R5, #14
    3ff6:	e5 85       	ST.W      [SP], R5
..\driver\driver_gpio.c:32
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    3ff8:	50 10       	MOV       R5, #0
    3ffa:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_gpio.c:33
	GPIO_InitStructure.m_Mode = GPIO_MODE_OUT;            //初始化 GPIO方向为输出
    3ffc:	51 10       	MOV       R5, #1
    3ffe:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_gpio.c:34
	GPIO_InitStructure.m_PullUp = GPIO_NOPULL;            //初始化 GPIO是否上拉
    4000:	50 10       	MOV       R5, #0
    4002:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_gpio.c:35
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    4004:	50 10       	MOV       R5, #0
    4006:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_gpio.c:36
	GPIO_Configuration(GPIOB_SFR, &GPIO_InitStructure);
    4008:	24 40       	LD        R0, [PC + #36]        ;->0x4098  :=0x50000040
    400a:	2e 58       	MOV       R1, SP
    400c:	29 45       	LD        R5, [PC + #41]        ;->0x40b0  :=0x2154
    400e:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:38
	//LED3
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_13;
    4010:	51 10       	MOV       R5, #1
    4012:	ad 7a       	LSL       R5, #13
    4014:	e5 85       	ST.W      [SP], R5
..\driver\driver_gpio.c:39
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    4016:	50 10       	MOV       R5, #0
    4018:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_gpio.c:40
	GPIO_InitStructure.m_Mode = GPIO_MODE_OUT;            //初始化 GPIO方向为输出
    401a:	51 10       	MOV       R5, #1
    401c:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_gpio.c:41
	GPIO_InitStructure.m_PullUp = GPIO_NOPULL;            //初始化 GPIO是否上拉
    401e:	50 10       	MOV       R5, #0
    4020:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_gpio.c:42
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    4022:	50 10       	MOV       R5, #0
    4024:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_gpio.c:43
	GPIO_Configuration(GPIOB_SFR, &GPIO_InitStructure);
    4026:	1d 40       	LD        R0, [PC + #29]        ;->0x4098  :=0x50000040
    4028:	2e 58       	MOV       R1, SP
    402a:	22 45       	LD        R5, [PC + #34]        ;->0x40b0  :=0x2154
    402c:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:45
	//KEY
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_15;
    402e:	51 10       	MOV       R5, #1
    4030:	af 7a       	LSL       R5, #15
    4032:	e5 85       	ST.W      [SP], R5
..\driver\driver_gpio.c:46
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    4034:	50 10       	MOV       R5, #0
    4036:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_gpio.c:47
	GPIO_InitStructure.m_Mode = GPIO_MODE_IN;             //初始化 GPIO方向为输出
    4038:	50 10       	MOV       R5, #0
    403a:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_gpio.c:48
	GPIO_InitStructure.m_PullUp = GPIO_NOPULL;            //初始化 GPIO是否上拉
    403c:	50 10       	MOV       R5, #0
    403e:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_gpio.c:49
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    4040:	50 10       	MOV       R5, #0
    4042:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_gpio.c:50
	GPIO_Configuration(GPIOG_SFR, &GPIO_InitStructure);
    4044:	1a 40       	LD        R0, [PC + #26]        ;->0x40ac  :=0x50000180
    4046:	2e 58       	MOV       R1, SP
    4048:	1a 45       	LD        R5, [PC + #26]        ;->0x40b0  :=0x2154
    404a:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:52
	//PB0
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_0;
    404c:	51 10       	MOV       R5, #1
    404e:	e5 85       	ST.W      [SP], R5
..\driver\driver_gpio.c:53
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    4050:	50 10       	MOV       R5, #0
    4052:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_gpio.c:54
	GPIO_InitStructure.m_Mode = GPIO_MODE_IN;             //初始化 GPIO方向为输出
    4054:	50 10       	MOV       R5, #0
    4056:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_gpio.c:55
	GPIO_InitStructure.m_PullUp = GPIO_PULLUP;            //初始化 GPIO是否上拉
    4058:	51 10       	MOV       R5, #1
    405a:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_gpio.c:56
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    405c:	50 10       	MOV       R5, #0
    405e:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_gpio.c:57
	GPIO_Configuration(GPIOB_SFR, &GPIO_InitStructure);
    4060:	0e 40       	LD        R0, [PC + #14]        ;->0x4098  :=0x50000040
    4062:	2e 58       	MOV       R1, SP
    4064:	13 45       	LD        R5, [PC + #19]        ;->0x40b0  :=0x2154
    4066:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:59
	//PF8
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_8;
    4068:	5f 1f       	MOV       R5, #255
    406a:	6d c0       	ADD       R5, R5, #1
    406c:	e5 85       	ST.W      [SP], R5
..\driver\driver_gpio.c:60
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    406e:	50 10       	MOV       R5, #0
    4070:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_gpio.c:61
	GPIO_InitStructure.m_Mode = GPIO_MODE_IN;             //初始化 GPIO方向为输出
    4072:	50 10       	MOV       R5, #0
    4074:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_gpio.c:62
	GPIO_InitStructure.m_PullUp = GPIO_PULLUP;            //初始化 GPIO是否上拉
    4076:	51 10       	MOV       R5, #1
    4078:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_gpio.c:63
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    407a:	50 10       	MOV       R5, #0
    407c:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_gpio.c:64
	GPIO_Configuration(GPIOF_SFR, &GPIO_InitStructure);
    407e:	0a 40       	LD        R0, [PC + #10]        ;->0x40a4  :=0x50000140
    4080:	2e 58       	MOV       R1, SP
    4082:	0c 45       	LD        R5, [PC + #12]        ;->0x40b0  :=0x2154
    4084:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:66

}
    4086:	e8 29       	ADD       SP, #24
    4088:	0d 5d       	POP       LR
    408a:	1d 5c       	JMP       LR
    408c:	a0 23 00 00 	.long     0x000023a0 ->000009120  [!!!@2@:ST.W      [SP + #160], R3	@@: NOP      
    4090:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    4094:	b8 1f 00 00 	.long     0x00001fb8 ->000008120  [!!!@2@:MOV       R11, #248	@@: NOP      
    4098:	40 00 00 50 	.long     0x50000040 ->1342177344 
    409c:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xe09c
    40a0:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    40a4:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    40a8:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    40ac:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    40b0:	54 21 00 00 	.long     0x00002154 ->000008532  [!!!@2@:ST.W      [SP + #84], R1	@@: NOP      

000040b4 <cfg_PWM>:
cfg_PWM():
..\driver\driver_pwm.c:21




void cfg_PWM(void)
{
    40b4:	2d 5d       	PUSH      LR
..\driver\driver_pwm.c:22
    EPWM_Reset(EPWM11_SFR);
    40b6:	0d 40       	LD        R0, [PC + #13]        ;->0x40e8  :=0x40001a00
    40b8:	0d 45       	LD        R5, [PC + #13]        ;->0x40ec  :=0x1100
    40ba:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:23
    EPWM_Reset(EPWM12_SFR);
    40bc:	0d 40       	LD        R0, [PC + #13]        ;->0x40f0  :=0x40001300
    40be:	0c 45       	LD        R5, [PC + #12]        ;->0x40ec  :=0x1100
    40c0:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:24
    EPWM_Reset(EPWM13_SFR);
    40c2:	0d 40       	LD        R0, [PC + #13]        ;->0x40f4  :=0x40001380
    40c4:	0a 45       	LD        R5, [PC + #10]        ;->0x40ec  :=0x1100
    40c6:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:25
    EPWM_Reset(EPWM16_SFR);
    40c8:	0c 40       	LD        R0, [PC + #12]        ;->0x40f8  :=0x40002e00
    40ca:	09 45       	LD        R5, [PC + #9]         ;->0x40ec  :=0x1100
    40cc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:26
	cfg_EPWM_GPIO();
    40ce:	0c 45       	LD        R5, [PC + #12]        ;->0x40fc  :=0x4110
    40d0:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:27
	cfg_EPWM11();
    40d2:	0c 45       	LD        R5, [PC + #12]        ;->0x4100  :=0x41bc
    40d4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:28
	cfg_EPWM12();
    40d6:	0c 45       	LD        R5, [PC + #12]        ;->0x4104  :=0x4344
    40d8:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:29
	cfg_EPWM13();
    40da:	0c 45       	LD        R5, [PC + #12]        ;->0x4108  :=0x446c
    40dc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:31
	//cfg_EPWM16();
	pwm_disable();
    40de:	0c 45       	LD        R5, [PC + #12]        ;->0x410c  :=0x45cc
    40e0:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:32
}
    40e2:	0d 5d       	POP       LR
    40e4:	1d 5c       	JMP       LR
    40e6:	00 00       	NOP      NOP      
    40e8:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x40e8  :=0x40001a00
    40ec:	00 11 00 00 	.long     0x00001100 ->000004352  [!!!@2@:MOV       R0, #16	@@: NOP      
    40f0:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x40f0  :=0x40001300
    40f4:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x40f4  :=0x40001380
    40f8:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x40f8  :=0x40002e00
    40fc:	10 41 00 00 	.long     0x00004110 ->000016656  [!!!@2@:LD        R1, [PC + #16]        ;->0x413c  :=0x10221210	@@: NOP      
    4100:	bc 41 00 00 	.long     0x000041bc ->000016828  [!!!@2@:LD        R1, [PC + #188]       ;->0x43f0  :=0x451b1010	@@: NOP      
    4104:	44 43 00 00 	.long     0x00004344 ->000017220  [!!!@2@:LD        R3, [PC + #68]        ;->0x4214  :=0x10321022	@@: NOP      
    4108:	6c 44 00 00 	.long     0x0000446c ->000017516  [!!!@2@:LD        R4, [PC + #108]       ;->0x42b8  :=0x451f1010	@@: NOP      
    410c:	cc 45 00 00 	.long     0x000045cc ->000017868  [!!!@2@:LD        R5, [PC + #204]       ;->0x443c  :=0x5dc	@@: NOP      

00004110 <cfg_EPWM_GPIO>:
cfg_EPWM_GPIO():
..\driver\driver_pwm.c:35

void cfg_EPWM_GPIO(void)
{
    4110:	2d 5d       	PUSH      LR
..\driver\driver_pwm.c:36
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_3,GPIO_MODE_RMP);  //PWM11A-PF3
    4112:	25 40       	LD        R0, [PC + #37]        ;->0x41a4  :=0x50000140
    4114:	18 10       	MOV       R1, #8
    4116:	22 10       	MOV       R2, #2
    4118:	24 45       	LD        R5, [PC + #36]        ;->0x41a8  :=0x23d0
    411a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:37
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_1,GPIO_MODE_RMP);  //PWM11B-PF1
    411c:	22 40       	LD        R0, [PC + #34]        ;->0x41a4  :=0x50000140
    411e:	12 10       	MOV       R1, #2
    4120:	22 10       	MOV       R2, #2
    4122:	22 45       	LD        R5, [PC + #34]        ;->0x41a8  :=0x23d0
    4124:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:38
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_2,GPIO_MODE_RMP);  //PWM12A-PF2
    4126:	20 40       	LD        R0, [PC + #32]        ;->0x41a4  :=0x50000140
    4128:	14 10       	MOV       R1, #4
    412a:	22 10       	MOV       R2, #2
    412c:	1f 45       	LD        R5, [PC + #31]        ;->0x41a8  :=0x23d0
    412e:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:39
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_0,GPIO_MODE_RMP);  //PWM12B-PF0
    4130:	1d 40       	LD        R0, [PC + #29]        ;->0x41a4  :=0x50000140
    4132:	11 10       	MOV       R1, #1
    4134:	22 10       	MOV       R2, #2
    4136:	1d 45       	LD        R5, [PC + #29]        ;->0x41a8  :=0x23d0
    4138:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:40
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_5,GPIO_MODE_RMP);  //PWM13A-PF5
    413a:	1b 40       	LD        R0, [PC + #27]        ;->0x41a4  :=0x50000140
    413c:	10 12       	MOV       R1, #32
    413e:	22 10       	MOV       R2, #2
    4140:	1a 45       	LD        R5, [PC + #26]        ;->0x41a8  :=0x23d0
    4142:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:41
	GPIO_Write_Mode_Bits(GPIOB_SFR,GPIO_PIN_MASK_6,GPIO_MODE_RMP);  //PWM13B-PB6
    4144:	1a 40       	LD        R0, [PC + #26]        ;->0x41ac  :=0x50000040
    4146:	10 14       	MOV       R1, #64
    4148:	22 10       	MOV       R2, #2
    414a:	18 45       	LD        R5, [PC + #24]        ;->0x41a8  :=0x23d0
    414c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:42
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_7,GPIO_MODE_RMP);  //PWM16A-PF7
    414e:	16 40       	LD        R0, [PC + #22]        ;->0x41a4  :=0x50000140
    4150:	10 18       	MOV       R1, #128
    4152:	22 10       	MOV       R2, #2
    4154:	15 45       	LD        R5, [PC + #21]        ;->0x41a8  :=0x23d0
    4156:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:44

	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_3,GPIO_RMP_PAGE3_AF1);  //EPWM11A-PF3
    4158:	13 40       	LD        R0, [PC + #19]        ;->0x41a4  :=0x50000140
    415a:	13 10       	MOV       R1, #3
    415c:	15 42       	LD        R2, [PC + #21]        ;->0x41b0  :=0x301
    415e:	16 45       	LD        R5, [PC + #22]        ;->0x41b4  :=0x258c
    4160:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:45
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_1,GPIO_RMP_PAGE3_AF1);  //EPWM11B-PF1
    4162:	11 40       	LD        R0, [PC + #17]        ;->0x41a4  :=0x50000140
    4164:	11 10       	MOV       R1, #1
    4166:	13 42       	LD        R2, [PC + #19]        ;->0x41b0  :=0x301
    4168:	13 45       	LD        R5, [PC + #19]        ;->0x41b4  :=0x258c
    416a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:46
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_2,GPIO_RMP_PAGE3_AF1);  //EPWM12A-PF2
    416c:	0e 40       	LD        R0, [PC + #14]        ;->0x41a4  :=0x50000140
    416e:	12 10       	MOV       R1, #2
    4170:	10 42       	LD        R2, [PC + #16]        ;->0x41b0  :=0x301
    4172:	11 45       	LD        R5, [PC + #17]        ;->0x41b4  :=0x258c
    4174:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:47
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_0,GPIO_RMP_PAGE3_AF1);  //EPWM12B-PF0
    4176:	0c 40       	LD        R0, [PC + #12]        ;->0x41a4  :=0x50000140
    4178:	10 10       	MOV       R1, #0
    417a:	0e 42       	LD        R2, [PC + #14]        ;->0x41b0  :=0x301
    417c:	0e 45       	LD        R5, [PC + #14]        ;->0x41b4  :=0x258c
    417e:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:48
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_5,GPIO_RMP_PAGE3_AF1);  //EPWM13A-PF5
    4180:	09 40       	LD        R0, [PC + #9]         ;->0x41a4  :=0x50000140
    4182:	15 10       	MOV       R1, #5
    4184:	0b 42       	LD        R2, [PC + #11]        ;->0x41b0  :=0x301
    4186:	0c 45       	LD        R5, [PC + #12]        ;->0x41b4  :=0x258c
    4188:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:49
	GPIO_Pin_RMP_Config(GPIOB_SFR,GPIO_Pin_Num_6,GPIO_RMP_PAGE3_AF5);  //EPWM13B-PB6
    418a:	09 40       	LD        R0, [PC + #9]         ;->0x41ac  :=0x50000040
    418c:	16 10       	MOV       R1, #6
    418e:	0b 42       	LD        R2, [PC + #11]        ;->0x41b8  :=0x305
    4190:	09 45       	LD        R5, [PC + #9]         ;->0x41b4  :=0x258c
    4192:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:50
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_7,GPIO_RMP_PAGE3_AF1);  //EPWM16A-PF7
    4194:	04 40       	LD        R0, [PC + #4]         ;->0x41a4  :=0x50000140
    4196:	17 10       	MOV       R1, #7
    4198:	06 42       	LD        R2, [PC + #6]         ;->0x41b0  :=0x301
    419a:	07 45       	LD        R5, [PC + #7]         ;->0x41b4  :=0x258c
    419c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:51
}
    419e:	0d 5d       	POP       LR
    41a0:	1d 5c       	JMP       LR
    41a2:	00 00       	NOP      NOP      
    41a4:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    41a8:	d0 23 00 00 	.long     0x000023d0 ->000009168  [!!!@2@:ST.W      [SP + #208], R3	@@: NOP      
    41ac:	40 00 00 50 	.long     0x50000040 ->1342177344 
    41b0:	01 03 00 00 	.long     0x00000301 ->000000769  [!!!@4@:JMP       $+65536               ;->0x241b0
    41b4:	8c 25 00 00 	.long     0x0000258c ->000009612  [!!!@2@:ST.W      [SP + #140], R5	@@: NOP      
    41b8:	05 03 00 00 	.long     0x00000305 ->000000773  [!!!@4@:JMP       $+327680              ;->0xa41b8

000041bc <cfg_EPWM11>:
cfg_EPWM11():
..\driver\driver_pwm.c:54

void cfg_EPWM11(void)
{
    41bc:	2d 5d       	PUSH      LR
..\driver\driver_pwm.c:55
	EPWM_Work_Mode_Config(EPWM11_SFR,EPWM_TIMER_MODE);
    41be:	48 40       	LD        R0, [PC + #72]        ;->0x42dc  :=0x40001a00
    41c0:	10 10       	MOV       R1, #0
    41c2:	48 45       	LD        R5, [PC + #72]        ;->0x42e0  :=0x1684
    41c4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:56
	EPWM_Work_Clock_Select(EPWM11_SFR,EPWM_CLK_SCLK);  //EPWM_CLK=SCLK
    41c6:	46 40       	LD        R0, [PC + #70]        ;->0x42dc  :=0x40001a00
    41c8:	10 10       	MOV       R1, #0
    41ca:	47 45       	LD        R5, [PC + #71]        ;->0x42e4  :=0x1600
    41cc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:57
	EPWM_TxPRSC_Value_Config(EPWM11_SFR,0);  //1:1
    41ce:	44 40       	LD        R0, [PC + #68]        ;->0x42dc  :=0x40001a00
    41d0:	10 10       	MOV       R1, #0
    41d2:	46 45       	LD        R5, [PC + #70]        ;->0x42e8  :=0x1250
    41d4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:58
	EPWM_TxPHS_Value_Config(EPWM11_SFR,0);
    41d6:	42 40       	LD        R0, [PC + #66]        ;->0x42dc  :=0x40001a00
    41d8:	10 10       	MOV       R1, #0
    41da:	45 45       	LD        R5, [PC + #69]        ;->0x42ec  :=0x11f4
    41dc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:60

	EPWM_Counter_Mode_Select(EPWM11_SFR,EPWM_COUNT_UP_DOWM_OF);  //UP DOWN MODE
    41de:	40 40       	LD        R0, [PC + #64]        ;->0x42dc  :=0x40001a00
    41e0:	15 10       	MOV       R1, #5
    41e2:	44 45       	LD        R5, [PC + #68]        ;->0x42f0  :=0x1560
    41e4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:62

	EPWM_Phase_Register_Loading_Enable(EPWM11_SFR,TRUE);
    41e6:	3e 40       	LD        R0, [PC + #62]        ;->0x42dc  :=0x40001a00
    41e8:	11 10       	MOV       R1, #1
    41ea:	43 45       	LD        R5, [PC + #67]        ;->0x42f4  :=0x13bc
    41ec:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:63
	EPWM_Phase_Direction_Config(EPWM11_SFR,EPWM_SYNC_TRIGGER_UP);
    41ee:	3c 40       	LD        R0, [PC + #60]        ;->0x42dc  :=0x40001a00
    41f0:	11 10       	MOV       R1, #1
    41f2:	42 45       	LD        R5, [PC + #66]        ;->0x42f8  :=0x12ac
    41f4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:64
	EPWM_SYNC_Event_Out_Select(EPWM11_SFR,EPWM_SYNC_EVENT_OUT_COUNT0);  //CNT=0
    41f6:	3a 40       	LD        R0, [PC + #58]        ;->0x42dc  :=0x40001a00
    41f8:	11 10       	MOV       R1, #1
    41fa:	41 45       	LD        R5, [PC + #65]        ;->0x42fc  :=0x1334
    41fc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:66

	EPWM11_SFR->PPX = EPWM_PERIOD;
    41fe:	38 45       	LD        R5, [PC + #56]        ;->0x42dc  :=0x40001a00
    4200:	40 44       	LD        R4, [PC + #64]        ;->0x4300  :=0xbb8
    4202:	ac a0       	ST.W      [R5 + #2], R4
..\driver\driver_pwm.c:67
	EPWM11_SFR->RA = EPWM_HALF_PERIOD;
    4204:	36 45       	LD        R5, [PC + #54]        ;->0x42dc  :=0x40001a00
    4206:	40 44       	LD        R4, [PC + #64]        ;->0x4304  :=0x5dc
    4208:	6c a1       	ST.W      [R5 + #5], R4
..\driver\driver_pwm.c:68
	EPWM11_SFR->RB = EPWM_HALF_PERIOD;
    420a:	35 45       	LD        R5, [PC + #53]        ;->0x42dc  :=0x40001a00
    420c:	3e 44       	LD        R4, [PC + #62]        ;->0x4304  :=0x5dc
    420e:	ac a1       	ST.W      [R5 + #6], R4
..\driver\driver_pwm.c:70

	EPWM_EPWMxAB_OUTPUT_Select(EPWM11_SFR,EPWM_REGISTER_A,EPWM_CERA_DU_EPWMAB_OUT,EPWM_OUT_HIGH);    //RA-UP HIGH
    4210:	33 40       	LD        R0, [PC + #51]        ;->0x42dc  :=0x40001a00
    4212:	10 10       	MOV       R1, #0
    4214:	22 10       	MOV       R2, #2
    4216:	32 10       	MOV       R3, #2
    4218:	3c 45       	LD        R5, [PC + #60]        ;->0x4308  :=0x1844
    421a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:71
	EPWM_EPWMxAB_OUTPUT_Select(EPWM11_SFR,EPWM_REGISTER_A,EPWM_CERA_DD_EPWMAB_OUT,EPWM_OUT_LOW);   //RA-DOWN LOW
    421c:	30 40       	LD        R0, [PC + #48]        ;->0x42dc  :=0x40001a00
    421e:	10 10       	MOV       R1, #0
    4220:	23 10       	MOV       R2, #3
    4222:	31 10       	MOV       R3, #1
    4224:	39 45       	LD        R5, [PC + #57]        ;->0x4308  :=0x1844
    4226:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:72
	EPWM_Continuous_Mandatory_Output_Config(EPWM11_SFR,EPWM_REGISTER_A,EPWM_OUT_PROHIBIT);
    4228:	2d 40       	LD        R0, [PC + #45]        ;->0x42dc  :=0x40001a00
    422a:	10 10       	MOV       R1, #0
    422c:	23 10       	MOV       R2, #3
    422e:	38 45       	LD        R5, [PC + #56]        ;->0x430c  :=0x1788
    4230:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:75

	//DB
	EPWM_Dead_Zone_Input_Select(EPWM11_SFR,EPWM_EPWMA_UP_EPWMA_DOWM);
    4232:	2b 40       	LD        R0, [PC + #43]        ;->0x42dc  :=0x40001a00
    4234:	10 10       	MOV       R1, #0
    4236:	37 45       	LD        R5, [PC + #55]        ;->0x4310  :=0x192c
    4238:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:76
	EPWM_Dead_Zone_Output_Polarity_Select(EPWM11_SFR,EPWM_EPWMA_NTOGGLE_EPWMB_TOGGLE);
    423a:	29 40       	LD        R0, [PC + #41]        ;->0x42dc  :=0x40001a00
    423c:	12 10       	MOV       R1, #2
    423e:	36 45       	LD        R5, [PC + #54]        ;->0x4314  :=0x19b0
    4240:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:77
	EPWM_Dead_Zone_Output_Select(EPWM11_SFR,EPWM_UP_ENABLE_DOWN_ENABLE);
    4242:	27 40       	LD        R0, [PC + #39]        ;->0x42dc  :=0x40001a00
    4244:	13 10       	MOV       R1, #3
    4246:	35 45       	LD        R5, [PC + #53]        ;->0x4318  :=0x1a34
    4248:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:78
	EPWM_Dead_Zone_Time_Config(EPWM11_SFR,EPWM_UP_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    424a:	25 40       	LD        R0, [PC + #37]        ;->0x42dc  :=0x40001a00
    424c:	11 10       	MOV       R1, #1
    424e:	28 17       	MOV       R2, #120
    4250:	33 45       	LD        R5, [PC + #51]        ;->0x431c  :=0x1ab8
    4252:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:79
	EPWM_Dead_Zone_Time_Config(EPWM11_SFR,EPWM_DOWM_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    4254:	22 40       	LD        R0, [PC + #34]        ;->0x42dc  :=0x40001a00
    4256:	10 10       	MOV       R1, #0
    4258:	28 17       	MOV       R2, #120
    425a:	31 45       	LD        R5, [PC + #49]        ;->0x431c  :=0x1ab8
    425c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:82

	//TZ
	EPWM_Auto_ShowDown_Source_Select(EPWM11_SFR,EPWM_AUTO_SHOWDOWN_SOURCE_TZ4_HIGH);  //TZ4
    425e:	20 40       	LD        R0, [PC + #32]        ;->0x42dc  :=0x40001a00
    4260:	14 10       	MOV       R1, #4
    4262:	30 45       	LD        R5, [PC + #48]        ;->0x4320  :=0x1b78
    4264:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:85

    //trigger AD
	EPWM_Trigger_AD_Event_Mode_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT0,EPWM_TRIGGER_AD_UP);
    4266:	1e 40       	LD        R0, [PC + #30]        ;->0x42dc  :=0x40001a00
    4268:	10 10       	MOV       R1, #0
    426a:	20 10       	MOV       R2, #0
    426c:	2e 45       	LD        R5, [PC + #46]        ;->0x4324  :=0x1bfc
    426e:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:86
	EPWM_Trigger_AD_Event_Mode_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT1,EPWM_TRIGGER_AD_UP);
    4270:	1b 40       	LD        R0, [PC + #27]        ;->0x42dc  :=0x40001a00
    4272:	11 10       	MOV       R1, #1
    4274:	20 10       	MOV       R2, #0
    4276:	2c 45       	LD        R5, [PC + #44]        ;->0x4324  :=0x1bfc
    4278:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:87
	EPWM_Trigger_Event_Cycle_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT0,EPWM_1_TRIGGER_EVENT_TRIGGER_AD);
    427a:	19 40       	LD        R0, [PC + #25]        ;->0x42dc  :=0x40001a00
    427c:	10 10       	MOV       R1, #0
    427e:	20 10       	MOV       R2, #0
    4280:	2a 45       	LD        R5, [PC + #42]        ;->0x4328  :=0x1cc4
    4282:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:88
	EPWM_Trigger_Event_Cycle_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT1,EPWM_1_TRIGGER_EVENT_TRIGGER_AD);
    4284:	16 40       	LD        R0, [PC + #22]        ;->0x42dc  :=0x40001a00
    4286:	11 10       	MOV       R1, #1
    4288:	20 10       	MOV       R2, #0
    428a:	28 45       	LD        R5, [PC + #40]        ;->0x4328  :=0x1cc4
    428c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:89
	EPWM_Trigger_AD_Event_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT0,EPWM_TIMER_EQUAL_0PULSE);
    428e:	14 40       	LD        R0, [PC + #20]        ;->0x42dc  :=0x40001a00
    4290:	10 10       	MOV       R1, #0
    4292:	20 10       	MOV       R2, #0
    4294:	26 45       	LD        R5, [PC + #38]        ;->0x432c  :=0x1d88
    4296:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:90
	EPWM_Trigger_AD_Event_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT1,EPWM_TIMER_EQUAL_PPPULSE);
    4298:	11 40       	LD        R0, [PC + #17]        ;->0x42dc  :=0x40001a00
    429a:	11 10       	MOV       R1, #1
    429c:	21 10       	MOV       R2, #1
    429e:	24 45       	LD        R5, [PC + #36]        ;->0x432c  :=0x1d88
    42a0:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:91
	EPWM_Trigger_AD_Event_Enable(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT0,TRUE);
    42a2:	0f 40       	LD        R0, [PC + #15]        ;->0x42dc  :=0x40001a00
    42a4:	10 10       	MOV       R1, #0
    42a6:	21 10       	MOV       R2, #1
    42a8:	22 45       	LD        R5, [PC + #34]        ;->0x4330  :=0x1e4c
    42aa:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:92
	EPWM_Trigger_AD_Event_Enable(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT1,TRUE);
    42ac:	0c 40       	LD        R0, [PC + #12]        ;->0x42dc  :=0x40001a00
    42ae:	11 10       	MOV       R1, #1
    42b0:	21 10       	MOV       R2, #1
    42b2:	20 45       	LD        R5, [PC + #32]        ;->0x4330  :=0x1e4c
    42b4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:98

	//interrupt
	//EPWM_INT_Enable(EPWM11_SFR,EPWM_COUNT_EQUAL_EPWMRA,FALSE);

	//update
	EPWM_Global_Loading_Enable(EPWM11_SFR,FALSE);
    42b6:	0a 40       	LD        R0, [PC + #10]        ;->0x42dc  :=0x40001a00
    42b8:	10 10       	MOV       R1, #0
    42ba:	1f 45       	LD        R5, [PC + #31]        ;->0x4334  :=0x1f14
    42bc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:99
	EPWM_Updata_Event_Enable(EPWM11_SFR,TRUE);
    42be:	08 40       	LD        R0, [PC + #8]         ;->0x42dc  :=0x40001a00
    42c0:	11 10       	MOV       R1, #1
    42c2:	1e 45       	LD        R5, [PC + #30]        ;->0x4338  :=0x14d4
    42c4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:100
	EPWM_Updata_Event_Generate_Enable(EPWM11_SFR,TRUE);
    42c6:	06 40       	LD        R0, [PC + #6]         ;->0x42dc  :=0x40001a00
    42c8:	11 10       	MOV       R1, #1
    42ca:	1d 45       	LD        R5, [PC + #29]        ;->0x433c  :=0x1448
    42cc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:103


	EPWM_Enable(EPWM11_SFR,FALSE);
    42ce:	04 40       	LD        R0, [PC + #4]         ;->0x42dc  :=0x40001a00
    42d0:	10 10       	MOV       R1, #0
    42d2:	1c 45       	LD        R5, [PC + #28]        ;->0x4340  :=0x1708
    42d4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:104
}
    42d6:	0d 5d       	POP       LR
    42d8:	1d 5c       	JMP       LR
    42da:	00 00       	NOP      NOP      
    42dc:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x42dc  :=0x40001a00
    42e0:	84 16 00 00 	.long     0x00001684 ->000005764  [!!!@2@:MOV       R8, #100	@@: NOP      
    42e4:	00 16 00 00 	.long     0x00001600 ->000005632  [!!!@2@:MOV       R0, #96	@@: NOP      
    42e8:	50 12 00 00 	.long     0x00001250 ->000004688  [!!!@2@:MOV       R5, #32	@@: NOP      
    42ec:	f4 11 00 00 	.long     0x000011f4 ->000004596  [!!!@2@:MOV       PC, #20	@@: NOP      
    42f0:	60 15 00 00 	.long     0x00001560 ->000005472  [!!!@2@:MOV       R6, #80	@@: NOP      
    42f4:	bc 13 00 00 	.long     0x000013bc ->000005052  [!!!@2@:MOV       R11, #60	@@: NOP      
    42f8:	ac 12 00 00 	.long     0x000012ac ->000004780  [!!!@2@:MOV       R10, #44	@@: NOP      
    42fc:	34 13 00 00 	.long     0x00001334 ->000004916  [!!!@2@:MOV       R3, #52	@@: NOP      
    4300:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    4304:	dc 05 00 00 	.long     0x000005dc ->000001500  [!!!@2@:SJMP      $+476                 ;->0x46bc	@@: NOP      
    4308:	44 18 00 00 	.long     0x00001844 ->000006212  [!!!@2@:MOV       R4, #132	@@: NOP      
    430c:	88 17 00 00 	.long     0x00001788 ->000006024  [!!!@2@:MOV       R8, #120	@@: NOP      
    4310:	2c 19 00 00 	.long     0x0000192c ->000006444  [!!!@2@:MOV       R2, #156	@@: NOP      
    4314:	b0 19 00 00 	.long     0x000019b0 ->000006576  [!!!@2@:MOV       R11, #144	@@: NOP      
    4318:	34 1a 00 00 	.long     0x00001a34 ->000006708  [!!!@2@:MOV       R3, #164	@@: NOP      
    431c:	b8 1a 00 00 	.long     0x00001ab8 ->000006840  [!!!@2@:MOV       R11, #168	@@: NOP      
    4320:	78 1b 00 00 	.long     0x00001b78 ->000007032  [!!!@2@:MOV       R7, #184	@@: NOP      
    4324:	fc 1b 00 00 	.long     0x00001bfc ->000007164  [!!!@2@:MOV       PC, #188	@@: NOP      
    4328:	c4 1c 00 00 	.long     0x00001cc4 ->000007364  [!!!@2@:MOV       R12, #196	@@: NOP      
    432c:	88 1d 00 00 	.long     0x00001d88 ->000007560  [!!!@2@:MOV       R8, #216	@@: NOP      
    4330:	4c 1e 00 00 	.long     0x00001e4c ->000007756  [!!!@2@:MOV       R4, #236	@@: NOP      
    4334:	14 1f 00 00 	.long     0x00001f14 ->000007956  [!!!@2@:MOV       R1, #244	@@: NOP      
    4338:	d4 14 00 00 	.long     0x000014d4 ->000005332  [!!!@2@:MOV       LR, #68	@@: NOP      
    433c:	48 14 00 00 	.long     0x00001448 ->000005192  [!!!@2@:MOV       R4, #72	@@: NOP      
    4340:	08 17 00 00 	.long     0x00001708 ->000005896  [!!!@2@:MOV       R0, #120	@@: NOP      

00004344 <cfg_EPWM12>:
cfg_EPWM12():
..\driver\driver_pwm.c:107

void cfg_EPWM12(void)
{
    4344:	2d 5d       	PUSH      LR
..\driver\driver_pwm.c:108
	EPWM_Work_Mode_Config(EPWM12_SFR,EPWM_TIMER_MODE);
    4346:	34 40       	LD        R0, [PC + #52]        ;->0x4414  :=0x40001300
    4348:	10 10       	MOV       R1, #0
    434a:	34 45       	LD        R5, [PC + #52]        ;->0x4418  :=0x1684
    434c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:109
	EPWM_Work_Clock_Select(EPWM12_SFR,EPWM_CLK_SCLK);  //EPWM_CLK=SCLK
    434e:	32 40       	LD        R0, [PC + #50]        ;->0x4414  :=0x40001300
    4350:	10 10       	MOV       R1, #0
    4352:	33 45       	LD        R5, [PC + #51]        ;->0x441c  :=0x1600
    4354:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:110
	EPWM_TxPRSC_Value_Config(EPWM12_SFR,0);  //1:1
    4356:	30 40       	LD        R0, [PC + #48]        ;->0x4414  :=0x40001300
    4358:	10 10       	MOV       R1, #0
    435a:	32 45       	LD        R5, [PC + #50]        ;->0x4420  :=0x1250
    435c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:111
	EPWM_TxPHS_Value_Config(EPWM12_SFR,2);
    435e:	2e 40       	LD        R0, [PC + #46]        ;->0x4414  :=0x40001300
    4360:	12 10       	MOV       R1, #2
    4362:	31 45       	LD        R5, [PC + #49]        ;->0x4424  :=0x11f4
    4364:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:113

	EPWM_Counter_Mode_Select(EPWM12_SFR,EPWM_COUNT_UP_DOWM_OF);  //UP DOWN MODE
    4366:	2c 40       	LD        R0, [PC + #44]        ;->0x4414  :=0x40001300
    4368:	15 10       	MOV       R1, #5
    436a:	30 45       	LD        R5, [PC + #48]        ;->0x4428  :=0x1560
    436c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:115

	EPWM_Phase_Register_Loading_Enable(EPWM12_SFR,TRUE);
    436e:	2a 40       	LD        R0, [PC + #42]        ;->0x4414  :=0x40001300
    4370:	11 10       	MOV       R1, #1
    4372:	2f 45       	LD        R5, [PC + #47]        ;->0x442c  :=0x13bc
    4374:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:116
	EPWM_Phase_Direction_Config(EPWM12_SFR,EPWM_SYNC_TRIGGER_UP);
    4376:	28 40       	LD        R0, [PC + #40]        ;->0x4414  :=0x40001300
    4378:	11 10       	MOV       R1, #1
    437a:	2e 45       	LD        R5, [PC + #46]        ;->0x4430  :=0x12ac
    437c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:117
	EPWM_SYNC_Event_Out_Select(EPWM12_SFR,EPWM_SYNC_EVENT_OUT_EPWM_SWF);  //SYNCI/SWFSYNC
    437e:	26 40       	LD        R0, [PC + #38]        ;->0x4414  :=0x40001300
    4380:	10 10       	MOV       R1, #0
    4382:	2d 45       	LD        R5, [PC + #45]        ;->0x4434  :=0x1334
    4384:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:119

	EPWM12_SFR->PPX = EPWM_PERIOD;
    4386:	24 45       	LD        R5, [PC + #36]        ;->0x4414  :=0x40001300
    4388:	2c 44       	LD        R4, [PC + #44]        ;->0x4438  :=0xbb8
    438a:	ac a0       	ST.W      [R5 + #2], R4
..\driver\driver_pwm.c:120
	EPWM12_SFR->RA = EPWM_HALF_PERIOD;
    438c:	22 45       	LD        R5, [PC + #34]        ;->0x4414  :=0x40001300
    438e:	2c 44       	LD        R4, [PC + #44]        ;->0x443c  :=0x5dc
    4390:	6c a1       	ST.W      [R5 + #5], R4
..\driver\driver_pwm.c:121
	EPWM12_SFR->RB = EPWM_HALF_PERIOD;
    4392:	21 45       	LD        R5, [PC + #33]        ;->0x4414  :=0x40001300
    4394:	2a 44       	LD        R4, [PC + #42]        ;->0x443c  :=0x5dc
    4396:	ac a1       	ST.W      [R5 + #6], R4
..\driver\driver_pwm.c:123

	EPWM_EPWMxAB_OUTPUT_Select(EPWM12_SFR,EPWM_REGISTER_A,EPWM_CERA_DU_EPWMAB_OUT,EPWM_OUT_HIGH);    //RA-UP HIGH
    4398:	1f 40       	LD        R0, [PC + #31]        ;->0x4414  :=0x40001300
    439a:	10 10       	MOV       R1, #0
    439c:	22 10       	MOV       R2, #2
    439e:	32 10       	MOV       R3, #2
    43a0:	28 45       	LD        R5, [PC + #40]        ;->0x4440  :=0x1844
    43a2:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:124
	EPWM_EPWMxAB_OUTPUT_Select(EPWM12_SFR,EPWM_REGISTER_A,EPWM_CERA_DD_EPWMAB_OUT,EPWM_OUT_LOW);   //RA-DOWN LOW
    43a4:	1c 40       	LD        R0, [PC + #28]        ;->0x4414  :=0x40001300
    43a6:	10 10       	MOV       R1, #0
    43a8:	23 10       	MOV       R2, #3
    43aa:	31 10       	MOV       R3, #1
    43ac:	25 45       	LD        R5, [PC + #37]        ;->0x4440  :=0x1844
    43ae:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:125
	EPWM_Continuous_Mandatory_Output_Config(EPWM12_SFR,EPWM_REGISTER_A,EPWM_OUT_PROHIBIT);
    43b0:	19 40       	LD        R0, [PC + #25]        ;->0x4414  :=0x40001300
    43b2:	10 10       	MOV       R1, #0
    43b4:	23 10       	MOV       R2, #3
    43b6:	24 45       	LD        R5, [PC + #36]        ;->0x4444  :=0x1788
    43b8:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:128

	//DB
	EPWM_Dead_Zone_Input_Select(EPWM12_SFR,EPWM_EPWMA_UP_EPWMA_DOWM);
    43ba:	17 40       	LD        R0, [PC + #23]        ;->0x4414  :=0x40001300
    43bc:	10 10       	MOV       R1, #0
    43be:	23 45       	LD        R5, [PC + #35]        ;->0x4448  :=0x192c
    43c0:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:129
	EPWM_Dead_Zone_Output_Polarity_Select(EPWM12_SFR,EPWM_EPWMA_NTOGGLE_EPWMB_TOGGLE);
    43c2:	15 40       	LD        R0, [PC + #21]        ;->0x4414  :=0x40001300
    43c4:	12 10       	MOV       R1, #2
    43c6:	22 45       	LD        R5, [PC + #34]        ;->0x444c  :=0x19b0
    43c8:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:130
	EPWM_Dead_Zone_Output_Select(EPWM12_SFR,EPWM_UP_ENABLE_DOWN_ENABLE);
    43ca:	13 40       	LD        R0, [PC + #19]        ;->0x4414  :=0x40001300
    43cc:	13 10       	MOV       R1, #3
    43ce:	21 45       	LD        R5, [PC + #33]        ;->0x4450  :=0x1a34
    43d0:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:131
	EPWM_Dead_Zone_Time_Config(EPWM12_SFR,EPWM_UP_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    43d2:	11 40       	LD        R0, [PC + #17]        ;->0x4414  :=0x40001300
    43d4:	11 10       	MOV       R1, #1
    43d6:	28 17       	MOV       R2, #120
    43d8:	1f 45       	LD        R5, [PC + #31]        ;->0x4454  :=0x1ab8
    43da:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:132
	EPWM_Dead_Zone_Time_Config(EPWM12_SFR,EPWM_DOWM_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    43dc:	0e 40       	LD        R0, [PC + #14]        ;->0x4414  :=0x40001300
    43de:	10 10       	MOV       R1, #0
    43e0:	28 17       	MOV       R2, #120
    43e2:	1d 45       	LD        R5, [PC + #29]        ;->0x4454  :=0x1ab8
    43e4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:135

	//TZ
	EPWM_Auto_ShowDown_Source_Select(EPWM12_SFR,EPWM_AUTO_SHOWDOWN_SOURCE_TZ4_HIGH);  //TZ4
    43e6:	0c 40       	LD        R0, [PC + #12]        ;->0x4414  :=0x40001300
    43e8:	14 10       	MOV       R1, #4
    43ea:	1c 45       	LD        R5, [PC + #28]        ;->0x4458  :=0x1b78
    43ec:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:141

	//interrupt
	//EPWM_INT_Enable(EPWM12_SFR,EPWM_COUNT_EQUAL_EPWMRA,FALSE);

	//update
	EPWM_Global_Loading_Enable(EPWM12_SFR,FALSE);
    43ee:	0a 40       	LD        R0, [PC + #10]        ;->0x4414  :=0x40001300
    43f0:	10 10       	MOV       R1, #0
    43f2:	1b 45       	LD        R5, [PC + #27]        ;->0x445c  :=0x1f14
    43f4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:142
	EPWM_Updata_Event_Enable(EPWM12_SFR,TRUE);
    43f6:	08 40       	LD        R0, [PC + #8]         ;->0x4414  :=0x40001300
    43f8:	11 10       	MOV       R1, #1
    43fa:	1a 45       	LD        R5, [PC + #26]        ;->0x4460  :=0x14d4
    43fc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:143
	EPWM_Updata_Event_Generate_Enable(EPWM12_SFR,TRUE);
    43fe:	06 40       	LD        R0, [PC + #6]         ;->0x4414  :=0x40001300
    4400:	11 10       	MOV       R1, #1
    4402:	19 45       	LD        R5, [PC + #25]        ;->0x4464  :=0x1448
    4404:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:146


	EPWM_Enable(EPWM12_SFR,FALSE);
    4406:	04 40       	LD        R0, [PC + #4]         ;->0x4414  :=0x40001300
    4408:	10 10       	MOV       R1, #0
    440a:	18 45       	LD        R5, [PC + #24]        ;->0x4468  :=0x1708
    440c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:147
}
    440e:	0d 5d       	POP       LR
    4410:	1d 5c       	JMP       LR
    4412:	00 00       	NOP      NOP      
    4414:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x4414  :=0x40001300
    4418:	84 16 00 00 	.long     0x00001684 ->000005764  [!!!@2@:MOV       R8, #100	@@: NOP      
    441c:	00 16 00 00 	.long     0x00001600 ->000005632  [!!!@2@:MOV       R0, #96	@@: NOP      
    4420:	50 12 00 00 	.long     0x00001250 ->000004688  [!!!@2@:MOV       R5, #32	@@: NOP      
    4424:	f4 11 00 00 	.long     0x000011f4 ->000004596  [!!!@2@:MOV       PC, #20	@@: NOP      
    4428:	60 15 00 00 	.long     0x00001560 ->000005472  [!!!@2@:MOV       R6, #80	@@: NOP      
    442c:	bc 13 00 00 	.long     0x000013bc ->000005052  [!!!@2@:MOV       R11, #60	@@: NOP      
    4430:	ac 12 00 00 	.long     0x000012ac ->000004780  [!!!@2@:MOV       R10, #44	@@: NOP      
    4434:	34 13 00 00 	.long     0x00001334 ->000004916  [!!!@2@:MOV       R3, #52	@@: NOP      
    4438:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    443c:	dc 05 00 00 	.long     0x000005dc ->000001500  [!!!@2@:SJMP      $+476                 ;->0x47f4	@@: NOP      
    4440:	44 18 00 00 	.long     0x00001844 ->000006212  [!!!@2@:MOV       R4, #132	@@: NOP      
    4444:	88 17 00 00 	.long     0x00001788 ->000006024  [!!!@2@:MOV       R8, #120	@@: NOP      
    4448:	2c 19 00 00 	.long     0x0000192c ->000006444  [!!!@2@:MOV       R2, #156	@@: NOP      
    444c:	b0 19 00 00 	.long     0x000019b0 ->000006576  [!!!@2@:MOV       R11, #144	@@: NOP      
    4450:	34 1a 00 00 	.long     0x00001a34 ->000006708  [!!!@2@:MOV       R3, #164	@@: NOP      
    4454:	b8 1a 00 00 	.long     0x00001ab8 ->000006840  [!!!@2@:MOV       R11, #168	@@: NOP      
    4458:	78 1b 00 00 	.long     0x00001b78 ->000007032  [!!!@2@:MOV       R7, #184	@@: NOP      
    445c:	14 1f 00 00 	.long     0x00001f14 ->000007956  [!!!@2@:MOV       R1, #244	@@: NOP      
    4460:	d4 14 00 00 	.long     0x000014d4 ->000005332  [!!!@2@:MOV       LR, #68	@@: NOP      
    4464:	48 14 00 00 	.long     0x00001448 ->000005192  [!!!@2@:MOV       R4, #72	@@: NOP      
    4468:	08 17 00 00 	.long     0x00001708 ->000005896  [!!!@2@:MOV       R0, #120	@@: NOP      

0000446c <cfg_EPWM13>:
cfg_EPWM13():
..\driver\driver_pwm.c:150

void cfg_EPWM13(void)
{
    446c:	2d 5d       	PUSH      LR
..\driver\driver_pwm.c:151
	EPWM_Work_Mode_Config(EPWM13_SFR,EPWM_TIMER_MODE);
    446e:	34 40       	LD        R0, [PC + #52]        ;->0x453c  :=0x40001380
    4470:	10 10       	MOV       R1, #0
    4472:	34 45       	LD        R5, [PC + #52]        ;->0x4540  :=0x1684
    4474:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:152
	EPWM_Work_Clock_Select(EPWM13_SFR,EPWM_CLK_SCLK);  //EPWM_CLK=SCLK
    4476:	32 40       	LD        R0, [PC + #50]        ;->0x453c  :=0x40001380
    4478:	10 10       	MOV       R1, #0
    447a:	33 45       	LD        R5, [PC + #51]        ;->0x4544  :=0x1600
    447c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:153
	EPWM_TxPRSC_Value_Config(EPWM13_SFR,0);  //1:1
    447e:	30 40       	LD        R0, [PC + #48]        ;->0x453c  :=0x40001380
    4480:	10 10       	MOV       R1, #0
    4482:	32 45       	LD        R5, [PC + #50]        ;->0x4548  :=0x1250
    4484:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:154
	EPWM_TxPHS_Value_Config(EPWM13_SFR,3);
    4486:	2e 40       	LD        R0, [PC + #46]        ;->0x453c  :=0x40001380
    4488:	13 10       	MOV       R1, #3
    448a:	31 45       	LD        R5, [PC + #49]        ;->0x454c  :=0x11f4
    448c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:156

	EPWM_Counter_Mode_Select(EPWM13_SFR,EPWM_COUNT_UP_DOWM_OF);  //UP DOWN MODE
    448e:	2c 40       	LD        R0, [PC + #44]        ;->0x453c  :=0x40001380
    4490:	15 10       	MOV       R1, #5
    4492:	30 45       	LD        R5, [PC + #48]        ;->0x4550  :=0x1560
    4494:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:158

	EPWM_Phase_Register_Loading_Enable(EPWM13_SFR,TRUE);
    4496:	2a 40       	LD        R0, [PC + #42]        ;->0x453c  :=0x40001380
    4498:	11 10       	MOV       R1, #1
    449a:	2f 45       	LD        R5, [PC + #47]        ;->0x4554  :=0x13bc
    449c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:159
	EPWM_Phase_Direction_Config(EPWM13_SFR,EPWM_SYNC_TRIGGER_UP);
    449e:	28 40       	LD        R0, [PC + #40]        ;->0x453c  :=0x40001380
    44a0:	11 10       	MOV       R1, #1
    44a2:	2e 45       	LD        R5, [PC + #46]        ;->0x4558  :=0x12ac
    44a4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:160
	EPWM_SYNC_Event_Out_Select(EPWM13_SFR,EPWM_SYNC_EVENT_OUT_EPWM_SWF);  //SYNCI/SWFSYNC
    44a6:	26 40       	LD        R0, [PC + #38]        ;->0x453c  :=0x40001380
    44a8:	10 10       	MOV       R1, #0
    44aa:	2d 45       	LD        R5, [PC + #45]        ;->0x455c  :=0x1334
    44ac:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:162

	EPWM13_SFR->PPX = EPWM_PERIOD;
    44ae:	24 45       	LD        R5, [PC + #36]        ;->0x453c  :=0x40001380
    44b0:	2c 44       	LD        R4, [PC + #44]        ;->0x4560  :=0xbb8
    44b2:	ac a0       	ST.W      [R5 + #2], R4
..\driver\driver_pwm.c:163
	EPWM13_SFR->RA = EPWM_HALF_PERIOD;
    44b4:	22 45       	LD        R5, [PC + #34]        ;->0x453c  :=0x40001380
    44b6:	2c 44       	LD        R4, [PC + #44]        ;->0x4564  :=0x5dc
    44b8:	6c a1       	ST.W      [R5 + #5], R4
..\driver\driver_pwm.c:164
	EPWM13_SFR->RB = EPWM_HALF_PERIOD;
    44ba:	21 45       	LD        R5, [PC + #33]        ;->0x453c  :=0x40001380
    44bc:	2a 44       	LD        R4, [PC + #42]        ;->0x4564  :=0x5dc
    44be:	ac a1       	ST.W      [R5 + #6], R4
..\driver\driver_pwm.c:166

	EPWM_EPWMxAB_OUTPUT_Select(EPWM13_SFR,EPWM_REGISTER_A,EPWM_CERA_DU_EPWMAB_OUT,EPWM_OUT_HIGH);    //RA-UP HIGH
    44c0:	1f 40       	LD        R0, [PC + #31]        ;->0x453c  :=0x40001380
    44c2:	10 10       	MOV       R1, #0
    44c4:	22 10       	MOV       R2, #2
    44c6:	32 10       	MOV       R3, #2
    44c8:	28 45       	LD        R5, [PC + #40]        ;->0x4568  :=0x1844
    44ca:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:167
	EPWM_EPWMxAB_OUTPUT_Select(EPWM13_SFR,EPWM_REGISTER_A,EPWM_CERA_DD_EPWMAB_OUT,EPWM_OUT_LOW);   //RA-DOWN LOW
    44cc:	1c 40       	LD        R0, [PC + #28]        ;->0x453c  :=0x40001380
    44ce:	10 10       	MOV       R1, #0
    44d0:	23 10       	MOV       R2, #3
    44d2:	31 10       	MOV       R3, #1
    44d4:	25 45       	LD        R5, [PC + #37]        ;->0x4568  :=0x1844
    44d6:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:168
	EPWM_Continuous_Mandatory_Output_Config(EPWM13_SFR,EPWM_REGISTER_A,EPWM_OUT_PROHIBIT);
    44d8:	19 40       	LD        R0, [PC + #25]        ;->0x453c  :=0x40001380
    44da:	10 10       	MOV       R1, #0
    44dc:	23 10       	MOV       R2, #3
    44de:	24 45       	LD        R5, [PC + #36]        ;->0x456c  :=0x1788
    44e0:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:171

	//DB
	EPWM_Dead_Zone_Input_Select(EPWM13_SFR,EPWM_EPWMA_UP_EPWMA_DOWM);
    44e2:	17 40       	LD        R0, [PC + #23]        ;->0x453c  :=0x40001380
    44e4:	10 10       	MOV       R1, #0
    44e6:	23 45       	LD        R5, [PC + #35]        ;->0x4570  :=0x192c
    44e8:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:172
	EPWM_Dead_Zone_Output_Polarity_Select(EPWM13_SFR,EPWM_EPWMA_NTOGGLE_EPWMB_TOGGLE);
    44ea:	15 40       	LD        R0, [PC + #21]        ;->0x453c  :=0x40001380
    44ec:	12 10       	MOV       R1, #2
    44ee:	22 45       	LD        R5, [PC + #34]        ;->0x4574  :=0x19b0
    44f0:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:173
	EPWM_Dead_Zone_Output_Select(EPWM13_SFR,EPWM_UP_ENABLE_DOWN_ENABLE);
    44f2:	13 40       	LD        R0, [PC + #19]        ;->0x453c  :=0x40001380
    44f4:	13 10       	MOV       R1, #3
    44f6:	21 45       	LD        R5, [PC + #33]        ;->0x4578  :=0x1a34
    44f8:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:174
	EPWM_Dead_Zone_Time_Config(EPWM13_SFR,EPWM_UP_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    44fa:	11 40       	LD        R0, [PC + #17]        ;->0x453c  :=0x40001380
    44fc:	11 10       	MOV       R1, #1
    44fe:	28 17       	MOV       R2, #120
    4500:	1f 45       	LD        R5, [PC + #31]        ;->0x457c  :=0x1ab8
    4502:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:175
	EPWM_Dead_Zone_Time_Config(EPWM13_SFR,EPWM_DOWM_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    4504:	0e 40       	LD        R0, [PC + #14]        ;->0x453c  :=0x40001380
    4506:	10 10       	MOV       R1, #0
    4508:	28 17       	MOV       R2, #120
    450a:	1d 45       	LD        R5, [PC + #29]        ;->0x457c  :=0x1ab8
    450c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:178

	//TZ
	EPWM_Auto_ShowDown_Source_Select(EPWM13_SFR,EPWM_AUTO_SHOWDOWN_SOURCE_TZ4_HIGH);  //TZ4
    450e:	0c 40       	LD        R0, [PC + #12]        ;->0x453c  :=0x40001380
    4510:	14 10       	MOV       R1, #4
    4512:	1c 45       	LD        R5, [PC + #28]        ;->0x4580  :=0x1b78
    4514:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:184

	//interrupt
	//EPWM_INT_Enable(EPWM13_SFR,EPWM_COUNT_EQUAL_EPWMRA,FALSE);

	//update
	EPWM_Global_Loading_Enable(EPWM13_SFR,FALSE);
    4516:	0a 40       	LD        R0, [PC + #10]        ;->0x453c  :=0x40001380
    4518:	10 10       	MOV       R1, #0
    451a:	1b 45       	LD        R5, [PC + #27]        ;->0x4584  :=0x1f14
    451c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:185
	EPWM_Updata_Event_Enable(EPWM13_SFR,TRUE);
    451e:	08 40       	LD        R0, [PC + #8]         ;->0x453c  :=0x40001380
    4520:	11 10       	MOV       R1, #1
    4522:	1a 45       	LD        R5, [PC + #26]        ;->0x4588  :=0x14d4
    4524:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:186
	EPWM_Updata_Event_Generate_Enable(EPWM13_SFR,TRUE);
    4526:	06 40       	LD        R0, [PC + #6]         ;->0x453c  :=0x40001380
    4528:	11 10       	MOV       R1, #1
    452a:	19 45       	LD        R5, [PC + #25]        ;->0x458c  :=0x1448
    452c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:188

	EPWM_Enable(EPWM13_SFR,FALSE);
    452e:	04 40       	LD        R0, [PC + #4]         ;->0x453c  :=0x40001380
    4530:	10 10       	MOV       R1, #0
    4532:	18 45       	LD        R5, [PC + #24]        ;->0x4590  :=0x1708
    4534:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:189
}
    4536:	0d 5d       	POP       LR
    4538:	1d 5c       	JMP       LR
    453a:	00 00       	NOP      NOP      
    453c:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x453c  :=0x40001380
    4540:	84 16 00 00 	.long     0x00001684 ->000005764  [!!!@2@:MOV       R8, #100	@@: NOP      
    4544:	00 16 00 00 	.long     0x00001600 ->000005632  [!!!@2@:MOV       R0, #96	@@: NOP      
    4548:	50 12 00 00 	.long     0x00001250 ->000004688  [!!!@2@:MOV       R5, #32	@@: NOP      
    454c:	f4 11 00 00 	.long     0x000011f4 ->000004596  [!!!@2@:MOV       PC, #20	@@: NOP      
    4550:	60 15 00 00 	.long     0x00001560 ->000005472  [!!!@2@:MOV       R6, #80	@@: NOP      
    4554:	bc 13 00 00 	.long     0x000013bc ->000005052  [!!!@2@:MOV       R11, #60	@@: NOP      
    4558:	ac 12 00 00 	.long     0x000012ac ->000004780  [!!!@2@:MOV       R10, #44	@@: NOP      
    455c:	34 13 00 00 	.long     0x00001334 ->000004916  [!!!@2@:MOV       R3, #52	@@: NOP      
    4560:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    4564:	dc 05 00 00 	.long     0x000005dc ->000001500  [!!!@2@:SJMP      $+476                 ;->0x491c	@@: NOP      
    4568:	44 18 00 00 	.long     0x00001844 ->000006212  [!!!@2@:MOV       R4, #132	@@: NOP      
    456c:	88 17 00 00 	.long     0x00001788 ->000006024  [!!!@2@:MOV       R8, #120	@@: NOP      
    4570:	2c 19 00 00 	.long     0x0000192c ->000006444  [!!!@2@:MOV       R2, #156	@@: NOP      
    4574:	b0 19 00 00 	.long     0x000019b0 ->000006576  [!!!@2@:MOV       R11, #144	@@: NOP      
    4578:	34 1a 00 00 	.long     0x00001a34 ->000006708  [!!!@2@:MOV       R3, #164	@@: NOP      
    457c:	b8 1a 00 00 	.long     0x00001ab8 ->000006840  [!!!@2@:MOV       R11, #168	@@: NOP      
    4580:	78 1b 00 00 	.long     0x00001b78 ->000007032  [!!!@2@:MOV       R7, #184	@@: NOP      
    4584:	14 1f 00 00 	.long     0x00001f14 ->000007956  [!!!@2@:MOV       R1, #244	@@: NOP      
    4588:	d4 14 00 00 	.long     0x000014d4 ->000005332  [!!!@2@:MOV       LR, #68	@@: NOP      
    458c:	48 14 00 00 	.long     0x00001448 ->000005192  [!!!@2@:MOV       R4, #72	@@: NOP      
    4590:	08 17 00 00 	.long     0x00001708 ->000005896  [!!!@2@:MOV       R0, #120	@@: NOP      

00004594 <pwm_enable>:
pwm_enable():
..\driver\driver_pwm.c:249



void pwm_enable(void)
{
	EPWM11_SFR->RA = EPWM_HALF_PERIOD;
    4594:	0a 45       	LD        R5, [PC + #10]        ;->0x45bc  :=0x40001a00
    4596:	0b 44       	LD        R4, [PC + #11]        ;->0x45c0  :=0x5dc
    4598:	6c a1       	ST.W      [R5 + #5], R4
..\driver\driver_pwm.c:250
	EPWM12_SFR->RA = EPWM_HALF_PERIOD;
    459a:	0b 45       	LD        R5, [PC + #11]        ;->0x45c4  :=0x40001300
    459c:	09 44       	LD        R4, [PC + #9]         ;->0x45c0  :=0x5dc
    459e:	6c a1       	ST.W      [R5 + #5], R4
..\driver\driver_pwm.c:251
	EPWM13_SFR->RA = EPWM_HALF_PERIOD;
    45a0:	0a 45       	LD        R5, [PC + #10]        ;->0x45c8  :=0x40001380
    45a2:	08 44       	LD        R4, [PC + #8]         ;->0x45c0  :=0x5dc
    45a4:	6c a1       	ST.W      [R5 + #5], R4
..\driver\driver_pwm.c:252
	EPWM11_SFR->PXASCTL = 0x0001;
    45a6:	06 45       	LD        R5, [PC + #6]         ;->0x45bc  :=0x40001a00
    45a8:	41 10       	MOV       R4, #1
    45aa:	2c a3       	ST.W      [R5 + #12], R4
..\driver\driver_pwm.c:253
	EPWM12_SFR->PXASCTL = 0x0001;
    45ac:	06 45       	LD        R5, [PC + #6]         ;->0x45c4  :=0x40001300
    45ae:	41 10       	MOV       R4, #1
    45b0:	2c a3       	ST.W      [R5 + #12], R4
..\driver\driver_pwm.c:254
	EPWM13_SFR->PXASCTL = 0x0001;
    45b2:	06 45       	LD        R5, [PC + #6]         ;->0x45c8  :=0x40001380
    45b4:	41 10       	MOV       R4, #1
    45b6:	2c a3       	ST.W      [R5 + #12], R4
..\driver\driver_pwm.c:255
}
    45b8:	1d 5c       	JMP       LR
    45ba:	00 00       	NOP      NOP      
    45bc:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x45bc  :=0x40001a00
    45c0:	dc 05 00 00 	.long     0x000005dc ->000001500  [!!!@2@:SJMP      $+476                 ;->0x4978	@@: NOP      
    45c4:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x45c4  :=0x40001300
    45c8:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x45c8  :=0x40001380

000045cc <pwm_disable>:
pwm_disable():
..\driver\driver_pwm.c:259

void pwm_disable(void)
{
	EPWM11_SFR->PXASCTL = 0x0009;
    45cc:	05 45       	LD        R5, [PC + #5]         ;->0x45e0  :=0x40001a00
    45ce:	49 10       	MOV       R4, #9
    45d0:	2c a3       	ST.W      [R5 + #12], R4
..\driver\driver_pwm.c:260
	EPWM12_SFR->PXASCTL = 0x0009;
    45d2:	05 45       	LD        R5, [PC + #5]         ;->0x45e4  :=0x40001300
    45d4:	49 10       	MOV       R4, #9
    45d6:	2c a3       	ST.W      [R5 + #12], R4
..\driver\driver_pwm.c:261
	EPWM13_SFR->PXASCTL = 0x0009;
    45d8:	04 45       	LD        R5, [PC + #4]         ;->0x45e8  :=0x40001380
    45da:	49 10       	MOV       R4, #9
    45dc:	2c a3       	ST.W      [R5 + #12], R4
..\driver\driver_pwm.c:262
}
    45de:	1d 5c       	JMP       LR
    45e0:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x45e0  :=0x40001a00
    45e4:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x45e4  :=0x40001300
    45e8:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x45e8  :=0x40001380

000045ec <set_pwm_duty>:
set_pwm_duty():
..\driver\driver_pwm.c:265

void set_pwm_duty(uint16_t duty)
{
    45ec:	e8 30       	SUB       SP, #8
    45ee:	a0 58       	MOV       R5, R0
    45f0:	a2 e2       	ST.H      [SP + #2], R5
..\driver\driver_pwm.c:267
	volatile uint16_t compare_value;
	if(duty>100)
    45f2:	a2 e0       	LD.H      R5, [SP + #2]
    45f4:	54 3e       	CMP       R5, #100
    45f6:	03 f9       	JLS       $+3                   ;->0x45fc
..\driver\driver_pwm.c:269
	{
		duty = 100;
    45f8:	54 16       	MOV       R5, #100
    45fa:	a2 e2       	ST.H      [SP + #2], R5
..\driver\driver_pwm.c:271
	}
	compare_value = (uint32_t)(duty*EPWM_PERIOD)/100;
    45fc:	82 e0       	LD.H      R4, [SP + #2]
    45fe:	0f 45       	LD        R5, [PC + #15]        ;->0x4638  :=0xbb8
    4600:	6c cb       	MULS      R5, R4, R5
    4602:	00 00       	NOP      NOP      
    4604:	85 58       	MOV       R4, R5
    4606:	54 16       	MOV       R5, #100
    4608:	6c d3       	DIVU      R5, R4, R5
    460a:	55 d0       	ZXT.H     R5, R5
    460c:	e5 84       	ST.H      [SP], R5
..\driver\driver_pwm.c:272
	EPWM11_SFR->RA = EPWM_PERIOD - compare_value;
    460e:	0c 44       	LD        R4, [PC + #12]        ;->0x463c  :=0x40001a00
    4610:	5e 81       	LD.H      R5, [SP]
    4612:	55 d0       	ZXT.H     R5, R5
    4614:	09 43       	LD        R3, [PC + #9]         ;->0x4638  :=0xbb8
    4616:	6b c7       	SUB       R5, R3, R5
    4618:	65 a1       	ST.W      [R4 + #5], R5
..\driver\driver_pwm.c:273
	EPWM12_SFR->RA = EPWM_PERIOD - compare_value;
    461a:	0a 44       	LD        R4, [PC + #10]        ;->0x4640  :=0x40001300
    461c:	5e 81       	LD.H      R5, [SP]
    461e:	55 d0       	ZXT.H     R5, R5
    4620:	06 43       	LD        R3, [PC + #6]         ;->0x4638  :=0xbb8
    4622:	6b c7       	SUB       R5, R3, R5
    4624:	65 a1       	ST.W      [R4 + #5], R5
..\driver\driver_pwm.c:274
	EPWM13_SFR->RA = EPWM_PERIOD - compare_value;
    4626:	08 44       	LD        R4, [PC + #8]         ;->0x4644  :=0x40001380
    4628:	5e 81       	LD.H      R5, [SP]
    462a:	55 d0       	ZXT.H     R5, R5
    462c:	03 43       	LD        R3, [PC + #3]         ;->0x4638  :=0xbb8
    462e:	6b c7       	SUB       R5, R3, R5
    4630:	65 a1       	ST.W      [R4 + #5], R5
..\driver\driver_pwm.c:275
}
    4632:	e8 28       	ADD       SP, #8
    4634:	1d 5c       	JMP       LR
    4636:	00 00       	NOP      NOP      
    4638:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    463c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x463c  :=0x40001a00
    4640:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x4640  :=0x40001300
    4644:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x4644  :=0x40001380

00004648 <epwm_module_enable>:
epwm_module_enable():
..\driver\driver_pwm.c:279


void epwm_module_enable(void)
{
    4648:	2d 5d       	PUSH      LR
..\driver\driver_pwm.c:280
	EPWM_Enable(EPWM11_SFR,TRUE);
    464a:	08 40       	LD        R0, [PC + #8]         ;->0x4668  :=0x40001a00
    464c:	11 10       	MOV       R1, #1
    464e:	08 45       	LD        R5, [PC + #8]         ;->0x466c  :=0x1708
    4650:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:281
	EPWM_Enable(EPWM12_SFR,TRUE);
    4652:	08 40       	LD        R0, [PC + #8]         ;->0x4670  :=0x40001300
    4654:	11 10       	MOV       R1, #1
    4656:	06 45       	LD        R5, [PC + #6]         ;->0x466c  :=0x1708
    4658:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:282
	EPWM_Enable(EPWM13_SFR,TRUE);
    465a:	07 40       	LD        R0, [PC + #7]         ;->0x4674  :=0x40001380
    465c:	11 10       	MOV       R1, #1
    465e:	04 45       	LD        R5, [PC + #4]         ;->0x466c  :=0x1708
    4660:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:283
}
    4662:	0d 5d       	POP       LR
    4664:	1d 5c       	JMP       LR
    4666:	00 00       	NOP      NOP      
    4668:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x4668  :=0x40001a00
    466c:	08 17 00 00 	.long     0x00001708 ->000005896  [!!!@2@:MOV       R0, #120	@@: NOP      
    4670:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x4670  :=0x40001300
    4674:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x4674  :=0x40001380

00004678 <cfg_BASIC_TIMER>:
cfg_BASIC_TIMER():
..\driver\driver_timer.c:17

volatile TIME_COUNT_TYPE time_count = {0};


void cfg_BASIC_TIMER(void)
{
    4678:	2d 5d       	PUSH      LR
..\driver\driver_timer.c:18
    cfg_T14();
    467a:	03 45       	LD        R5, [PC + #3]         ;->0x4684  :=0x4688
    467c:	05 5c       	LJMP      R5
..\driver\driver_timer.c:20

}
    467e:	0d 5d       	POP       LR
    4680:	1d 5c       	JMP       LR
    4682:	00 00       	NOP      NOP      
    4684:	88 46 00 00 	.long     0x00004688 ->000018056  [!!!@2@:LD        R6, [PC + #136]       ;->0x48a4  :=0x4678	@@: NOP      

00004688 <cfg_T14>:
cfg_T14():
..\driver\driver_timer.c:24


void cfg_T14(void)
{
    4688:	2d 5d       	PUSH      LR
..\driver\driver_timer.c:25
	TIM_Reset(T14_SFR);												//定时器外设复位，使能外设时钟
    468a:	1f 40       	LD        R0, [PC + #31]        ;->0x4704  :=0x40001800
    468c:	1f 45       	LD        R5, [PC + #31]        ;->0x4708  :=0xb8c
    468e:	05 5c       	LJMP      R5
..\driver\driver_timer.c:26
	BTIM_Updata_Immediately_Config(T14_SFR,TRUE);						//立即更新控制
    4690:	1d 40       	LD        R0, [PC + #29]        ;->0x4704  :=0x40001800
    4692:	11 10       	MOV       R1, #1
    4694:	1e 45       	LD        R5, [PC + #30]        ;->0x470c  :=0xfe0
    4696:	05 5c       	LJMP      R5
..\driver\driver_timer.c:27
	BTIM_Updata_Enable(T14_SFR,TRUE);									//配置更新使能
    4698:	1b 40       	LD        R0, [PC + #27]        ;->0x4704  :=0x40001800
    469a:	11 10       	MOV       R1, #1
    469c:	1d 45       	LD        R5, [PC + #29]        ;->0x4710  :=0x1038
    469e:	05 5c       	LJMP      R5
..\driver\driver_timer.c:28
	BTIM_Work_Mode_Config(T14_SFR,BTIM_TIMER_MODE);					//定时模式选择
    46a0:	19 40       	LD        R0, [PC + #25]        ;->0x4704  :=0x40001800
    46a2:	10 10       	MOV       R1, #0
    46a4:	1c 45       	LD        R5, [PC + #28]        ;->0x4714  :=0xf88
    46a6:	05 5c       	LJMP      R5
..\driver\driver_timer.c:29
	BTIM_Set_Counter(T14_SFR,0);										//定时器计数值
    46a8:	17 40       	LD        R0, [PC + #23]        ;->0x4704  :=0x40001800
    46aa:	10 10       	MOV       R1, #0
    46ac:	1b 45       	LD        R5, [PC + #27]        ;->0x4718  :=0xe24
    46ae:	05 5c       	LJMP      R5
..\driver\driver_timer.c:30
	BTIM_Set_Period(T14_SFR,999);									//定时器周期值999(1ms)
    46b0:	15 40       	LD        R0, [PC + #21]        ;->0x4704  :=0x40001800
    46b2:	1b 41       	LD        R1, [PC + #27]        ;->0x471c  :=0x3e7
    46b4:	1b 45       	LD        R5, [PC + #27]        ;->0x4720  :=0xe58
    46b6:	05 5c       	LJMP      R5
..\driver\driver_timer.c:31
	BTIM_Set_Prescaler(T14_SFR,15);								    //定时器预分频值15+1=16(timer_clk=1M)
    46b8:	13 40       	LD        R0, [PC + #19]        ;->0x4704  :=0x40001800
    46ba:	1f 10       	MOV       R1, #15
    46bc:	1a 45       	LD        R5, [PC + #26]        ;->0x4724  :=0xe8c
    46be:	05 5c       	LJMP      R5
..\driver\driver_timer.c:32
	BTIM_Counter_Mode_Config(T14_SFR,BTIM_COUNT_UP_OF);				//向上计数,上溢产生中断标志
    46c0:	11 40       	LD        R0, [PC + #17]        ;->0x4704  :=0x40001800
    46c2:	1f 1f       	MOV       R1, #255
    46c4:	49 c0       	ADD       R1, R1, #1
    46c6:	19 45       	LD        R5, [PC + #25]        ;->0x4728  :=0xec0
    46c8:	05 5c       	LJMP      R5
..\driver\driver_timer.c:33
	BTIM_Clock_Config(T14_SFR,BTIM_HFCLK);								//选用HFCLK时钟(16M)
    46ca:	0f 40       	LD        R0, [PC + #15]        ;->0x4704  :=0x40001800
    46cc:	18 10       	MOV       R1, #8
    46ce:	18 45       	LD        R5, [PC + #24]        ;->0x472c  :=0xf24
    46d0:	05 5c       	LJMP      R5
..\driver\driver_timer.c:34
	INT_Interrupt_Priority_Config(INT_T14,4,0);					//抢占优先级4,子优先级0
    46d2:	01 12       	MOV       R0, #33
    46d4:	14 10       	MOV       R1, #4
    46d6:	20 10       	MOV       R2, #0
    46d8:	16 45       	LD        R5, [PC + #22]        ;->0x4730  :=0x299c
    46da:	05 5c       	LJMP      R5
..\driver\driver_timer.c:35
	BTIM_Overflow_INT_Enable(T14_SFR,TRUE);							//计数溢出中断使能
    46dc:	0a 40       	LD        R0, [PC + #10]        ;->0x4704  :=0x40001800
    46de:	11 10       	MOV       R1, #1
    46e0:	15 45       	LD        R5, [PC + #21]        ;->0x4734  :=0x1090
    46e2:	05 5c       	LJMP      R5
..\driver\driver_timer.c:36
	INT_Interrupt_Enable(INT_T14,TRUE);						    //外设中断使能
    46e4:	01 12       	MOV       R0, #33
    46e6:	11 10       	MOV       R1, #1
    46e8:	14 45       	LD        R5, [PC + #20]        ;->0x4738  :=0x280c
    46ea:	05 5c       	LJMP      R5
..\driver\driver_timer.c:37
	INT_Clear_Interrupt_Flag(INT_T14);							//清中断标志
    46ec:	01 12       	MOV       R0, #33
    46ee:	14 45       	LD        R5, [PC + #20]        ;->0x473c  :=0x28f0
    46f0:	05 5c       	LJMP      R5
..\driver\driver_timer.c:38
	BTIM_Cmd(T14_SFR,TRUE);											//定时器启动控制使能
    46f2:	05 40       	LD        R0, [PC + #5]         ;->0x4704  :=0x40001800
    46f4:	11 10       	MOV       R1, #1
    46f6:	13 45       	LD        R5, [PC + #19]        ;->0x4740  :=0xdcc
    46f8:	05 5c       	LJMP      R5
..\driver\driver_timer.c:39
	INT_Stack_Align_Config(INT_STACK_SINGLE_ALIGN);					//中断自动堆栈使用单字对齐
    46fa:	00 18       	MOV       R0, #128
    46fc:	12 45       	LD        R5, [PC + #18]        ;->0x4744  :=0x2790
    46fe:	05 5c       	LJMP      R5
..\driver\driver_timer.c:40
}
    4700:	0d 5d       	POP       LR
    4702:	1d 5c       	JMP       LR
    4704:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x4704  :=0x40001800
    4708:	8c 0b 00 00 	.long     0x00000b8c ->000002956  [!!!@2@:LD.W      R3, [SP + #140]	@@: NOP      
    470c:	e0 0f 00 00 	.long     0x00000fe0 ->000004064  [!!!@2@:LD.W      R7, [SP + #224]	@@: NOP      
    4710:	38 10 00 00 	.long     0x00001038 ->000004152  [!!!@2@:MOV       R3, #8	@@: NOP      
    4714:	88 0f 00 00 	.long     0x00000f88 ->000003976  [!!!@2@:LD.W      R7, [SP + #136]	@@: NOP      
    4718:	24 0e 00 00 	.long     0x00000e24 ->000003620  [!!!@2@:LD.W      R6, [SP + #36]	@@: NOP      
    471c:	e7 03 00 00 	.long     0x000003e7 ->000000999  [!!!@4@:JMP       $-1638400             ;->0xffce471c
    4720:	58 0e 00 00 	.long     0x00000e58 ->000003672  [!!!@2@:LD.W      R6, [SP + #88]	@@: NOP      
    4724:	8c 0e 00 00 	.long     0x00000e8c ->000003724  [!!!@2@:LD.W      R6, [SP + #140]	@@: NOP      
    4728:	c0 0e 00 00 	.long     0x00000ec0 ->000003776  [!!!@2@:LD.W      R6, [SP + #192]	@@: NOP      
    472c:	24 0f 00 00 	.long     0x00000f24 ->000003876  [!!!@2@:LD.W      R7, [SP + #36]	@@: NOP      
    4730:	9c 29 00 00 	.long     0x0000299c ->000010652  [!!!@2@:ADD       R9, #28	@@: NOP      
    4734:	90 10 00 00 	.long     0x00001090 ->000004240  [!!!@2@:MOV       R9, #0	@@: NOP      
    4738:	0c 28 00 00 	.long     0x0000280c ->000010252  [!!!@2@:ADD       R0, #12	@@: NOP      
    473c:	f0 28 00 00 	.long     0x000028f0 ->000010480  [!!!@2@:ADD       PC, #0	@@: NOP      
    4740:	cc 0d 00 00 	.long     0x00000dcc ->000003532  [!!!@2@:LD.W      R5, [SP + #204]	@@: NOP      
    4744:	90 27 00 00 	.long     0x00002790 ->000010128  [!!!@2@:ST.W      [SP + #144], R7	@@: NOP      

00004748 <cfg_USART>:
cfg_USART():
..\driver\driver_usart.c:16
void cfg_GPIO_for_USART0(void);
void cfg_USART0(void);


void cfg_USART(void)
{
    4748:	2d 5d       	PUSH      LR
..\driver\driver_usart.c:17
    cfg_GPIO_for_USART0();
    474a:	04 45       	LD        R5, [PC + #4]         ;->0x4758  :=0x4760
    474c:	05 5c       	LJMP      R5
..\driver\driver_usart.c:18
    cfg_USART0();
    474e:	04 45       	LD        R5, [PC + #4]         ;->0x475c  :=0x47a4
    4750:	05 5c       	LJMP      R5
..\driver\driver_usart.c:19
}
    4752:	0d 5d       	POP       LR
    4754:	1d 5c       	JMP       LR
    4756:	00 00       	NOP      NOP      
    4758:	60 47 00 00 	.long     0x00004760 ->000018272  [!!!@2@:LD        R7, [PC + #96]        ;->0x48d8  :=0x5c1d5d7d	@@: NOP      
    475c:	a4 47 00 00 	.long     0x000047a4 ->000018340  [!!!@2@:LD        R7, [PC + #164]       ;->0x49ec  :=0x5c05450e	@@: NOP      

00004760 <cfg_GPIO_for_USART0>:
cfg_GPIO_for_USART0():
..\driver\driver_usart.c:23


void cfg_GPIO_for_USART0(void)
{
    4760:	2d 5d       	PUSH      LR
..\driver\driver_usart.c:24
	GPIO_Write_Mode_Bits(GPIOA_SFR,GPIO_PIN_MASK_3,GPIO_MODE_RMP);  //TX-PA3
    4762:	0c 40       	LD        R0, [PC + #12]        ;->0x4790  :=0x50000000
    4764:	18 10       	MOV       R1, #8
    4766:	22 10       	MOV       R2, #2
    4768:	0b 45       	LD        R5, [PC + #11]        ;->0x4794  :=0x23d0
    476a:	05 5c       	LJMP      R5
..\driver\driver_usart.c:25
	GPIO_Write_Mode_Bits(GPIOE_SFR,GPIO_PIN_MASK_7,GPIO_MODE_RMP);  //RX-PE7
    476c:	0b 40       	LD        R0, [PC + #11]        ;->0x4798  :=0x50000100
    476e:	10 18       	MOV       R1, #128
    4770:	22 10       	MOV       R2, #2
    4772:	09 45       	LD        R5, [PC + #9]         ;->0x4794  :=0x23d0
    4774:	05 5c       	LJMP      R5
..\driver\driver_usart.c:27

	GPIO_Pin_RMP_Config(GPIOA_SFR,GPIO_Pin_Num_3,GPIO_RMP_PAGE3_AF3);  //TX-PA3
    4776:	07 40       	LD        R0, [PC + #7]         ;->0x4790  :=0x50000000
    4778:	13 10       	MOV       R1, #3
    477a:	09 42       	LD        R2, [PC + #9]         ;->0x479c  :=0x303
    477c:	09 45       	LD        R5, [PC + #9]         ;->0x47a0  :=0x258c
    477e:	05 5c       	LJMP      R5
..\driver\driver_usart.c:28
	GPIO_Pin_RMP_Config(GPIOE_SFR,GPIO_Pin_Num_7,GPIO_RMP_PAGE3_AF3);  //RX-PE7
    4780:	06 40       	LD        R0, [PC + #6]         ;->0x4798  :=0x50000100
    4782:	17 10       	MOV       R1, #7
    4784:	06 42       	LD        R2, [PC + #6]         ;->0x479c  :=0x303
    4786:	07 45       	LD        R5, [PC + #7]         ;->0x47a0  :=0x258c
    4788:	05 5c       	LJMP      R5
..\driver\driver_usart.c:29
}
    478a:	0d 5d       	POP       LR
    478c:	1d 5c       	JMP       LR
    478e:	00 00       	NOP      NOP      
    4790:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    4794:	d0 23 00 00 	.long     0x000023d0 ->000009168  [!!!@2@:ST.W      [SP + #208], R3	@@: NOP      
    4798:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    479c:	03 03 00 00 	.long     0x00000303 ->000000771  [!!!@4@:JMP       $+196608              ;->0x6479c
    47a0:	8c 25 00 00 	.long     0x0000258c ->000009612  [!!!@2@:ST.W      [SP + #140], R5	@@: NOP      

000047a4 <cfg_USART0>:
cfg_USART0():
..\driver\driver_usart.c:32

void cfg_USART0(void)
{
    47a4:	2d 5d       	PUSH      LR
..\driver\driver_usart.c:33
	USART_Reset(USART0_SFR);
    47a6:	1c 40       	LD        R0, [PC + #28]        ;->0x4814  :=0x40000980
    47a8:	1c 45       	LD        R5, [PC + #28]        ;->0x4818  :=0x3344
    47aa:	05 5c       	LJMP      R5
..\driver\driver_usart.c:34
    USART_Receive_Order_Config(USART0_SFR, USART_RECEIVE_LSB);
    47ac:	1a 40       	LD        R0, [PC + #26]        ;->0x4814  :=0x40000980
    47ae:	10 10       	MOV       R1, #0
    47b0:	1b 45       	LD        R5, [PC + #27]        ;->0x481c  :=0x366c
    47b2:	05 5c       	LJMP      R5
..\driver\driver_usart.c:35
    USART_Transmit_Order_Config(USART0_SFR, USART_TRANSMIT_LSB);
    47b4:	18 40       	LD        R0, [PC + #24]        ;->0x4814  :=0x40000980
    47b6:	10 10       	MOV       R1, #0
    47b8:	1a 45       	LD        R5, [PC + #26]        ;->0x4820  :=0x35dc
    47ba:	05 5c       	LJMP      R5
..\driver\driver_usart.c:36
    USART_BaudRate_Clock_Config(USART0_SFR, USART_CLK_SCLK);  //SCLK
    47bc:	16 40       	LD        R0, [PC + #22]        ;->0x4814  :=0x40000980
    47be:	10 10       	MOV       R1, #0
    47c0:	19 45       	LD        R5, [PC + #25]        ;->0x4824  :=0x3538
    47c2:	05 5c       	LJMP      R5
..\driver\driver_usart.c:37
    USART_Clock_Source_Config(USART0_SFR, USART_MASTER_CLOCKSOURCE_INTER);  //INTERNAL CLK
    47c4:	14 40       	LD        R0, [PC + #20]        ;->0x4814  :=0x40000980
    47c6:	1f 1f       	MOV       R1, #255
    47c8:	49 c0       	ADD       R1, R1, #1
    47ca:	18 45       	LD        R5, [PC + #24]        ;->0x4828  :=0x36fc
    47cc:	05 5c       	LJMP      R5
..\driver\driver_usart.c:38
    USART_SYNC_Choice_Config(USART0_SFR, USART_MODE_FULLDUPLEXASY);
    47ce:	12 40       	LD        R0, [PC + #18]        ;->0x4814  :=0x40000980
    47d0:	10 10       	MOV       R1, #0
    47d2:	17 45       	LD        R5, [PC + #23]        ;->0x482c  :=0x3790
    47d4:	05 5c       	LJMP      R5
..\driver\driver_usart.c:39
    USART_Transmit_Data_Enable(USART0_SFR, TRUE);
    47d6:	10 40       	LD        R0, [PC + #16]        ;->0x4814  :=0x40000980
    47d8:	11 10       	MOV       R1, #1
    47da:	16 45       	LD        R5, [PC + #22]        ;->0x4830  :=0x3824
    47dc:	05 5c       	LJMP      R5
..\driver\driver_usart.c:40
    USART_Receive_Data_Enable(USART0_SFR, TRUE);
    47de:	0e 40       	LD        R0, [PC + #14]        ;->0x4814  :=0x40000980
    47e0:	11 10       	MOV       R1, #1
    47e2:	15 45       	LD        R5, [PC + #21]        ;->0x4834  :=0x38b4
    47e4:	05 5c       	LJMP      R5
..\driver\driver_usart.c:41
    USART_STOP_Word_Config(USART0_SFR, USART_STOPBITS_1);  //1bit stop
    47e6:	0c 40       	LD        R0, [PC + #12]        ;->0x4814  :=0x40000980
    47e8:	10 10       	MOV       R1, #0
    47ea:	14 45       	LD        R5, [PC + #20]        ;->0x4838  :=0x3944
    47ec:	05 5c       	LJMP      R5
..\driver\driver_usart.c:42
    USART_9Data_Enable(USART0_SFR, FALSE);  //8bit data
    47ee:	0a 40       	LD        R0, [PC + #10]        ;->0x4814  :=0x40000980
    47f0:	10 10       	MOV       R1, #0
    47f2:	13 45       	LD        R5, [PC + #19]        ;->0x483c  :=0x39d8
    47f4:	05 5c       	LJMP      R5
..\driver\driver_usart.c:43
    USART_RESHD_Enable(USART0_SFR, TRUE);
    47f6:	08 40       	LD        R0, [PC + #8]         ;->0x4814  :=0x40000980
    47f8:	11 10       	MOV       R1, #1
    47fa:	12 45       	LD        R5, [PC + #18]        ;->0x4840  :=0x3a68
    47fc:	05 5c       	LJMP      R5
..\driver\driver_usart.c:44
    USART_BaudRate_Integer_Config(USART0_SFR, USART0_BAUD_VALUE);  //65
    47fe:	06 40       	LD        R0, [PC + #6]         ;->0x4814  :=0x40000980
    4800:	11 14       	MOV       R1, #65
    4802:	11 45       	LD        R5, [PC + #17]        ;->0x4844  :=0x3af8
    4804:	05 5c       	LJMP      R5
..\driver\driver_usart.c:45
    USART_Cmd(USART0_SFR, TRUE);
    4806:	04 40       	LD        R0, [PC + #4]         ;->0x4814  :=0x40000980
    4808:	11 10       	MOV       R1, #1
    480a:	10 45       	LD        R5, [PC + #16]        ;->0x4848  :=0x34a8
    480c:	05 5c       	LJMP      R5
..\driver\driver_usart.c:46
}
    480e:	0d 5d       	POP       LR
    4810:	1d 5c       	JMP       LR
    4812:	00 00       	NOP      NOP      
    4814:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x4814  :=0x40000980
    4818:	44 33 00 00 	.long     0x00003344 ->000013124  [!!!@2@:SUB       R4, #52	@@: NOP      
    481c:	6c 36 00 00 	.long     0x0000366c ->000013932  [!!!@2@:SUB       R6, #108	@@: NOP      
    4820:	dc 35 00 00 	.long     0x000035dc ->000013788  [!!!@2@:SUB       LR, #92	@@: NOP      
    4824:	38 35 00 00 	.long     0x00003538 ->000013624  [!!!@2@:SUB       R3, #88	@@: NOP      
    4828:	fc 36 00 00 	.long     0x000036fc ->000014076  [!!!@2@:SUB       PC, #108	@@: NOP      
    482c:	90 37 00 00 	.long     0x00003790 ->000014224  [!!!@2@:SUB       R9, #112	@@: NOP      
    4830:	24 38 00 00 	.long     0x00003824 ->000014372  [!!!@2@:CMP       R2, #4	@@: NOP      
    4834:	b4 38 00 00 	.long     0x000038b4 ->000014516  [!!!@2@:CMP       R11, #4	@@: NOP      
    4838:	44 39 00 00 	.long     0x00003944 ->000014660  [!!!@2@:CMP       R4, #20	@@: NOP      
    483c:	d8 39 00 00 	.long     0x000039d8 ->000014808  [!!!@2@:CMP       LR, #24	@@: NOP      
    4840:	68 3a 00 00 	.long     0x00003a68 ->000014952  [!!!@2@:CMP       R6, #40	@@: NOP      
    4844:	f8 3a 00 00 	.long     0x00003af8 ->000015096  [!!!@2@:CMP       PC, #40	@@: NOP      
    4848:	a8 34 00 00 	.long     0x000034a8 ->000013480  [!!!@2@:SUB       R10, #72	@@: NOP      

0000484c <cfg_HARDWARE>:
cfg_HARDWARE():
..\driver\hardware_init.c:13
#include "system_init.h"
#include "hardware_init.h"


void cfg_HARDWARE(void)
{
    484c:	2d 5d       	PUSH      LR
    484e:	e4 30       	SUB       SP, #4
..\driver\hardware_init.c:14
	volatile uint16_t i = 50000;
    4850:	12 45       	LD        R5, [PC + #18]        ;->0x4898  :=0xffffc350
    4852:	e5 84       	ST.H      [SP], R5
..\driver\hardware_init.c:15
	cfg_CLK();
    4854:	12 45       	LD        R5, [PC + #18]        ;->0x489c  :=0x4a28
    4856:	05 5c       	LJMP      R5
..\driver\hardware_init.c:16
	cfg_GPIO();
    4858:	12 45       	LD        R5, [PC + #18]        ;->0x48a0  :=0x3fa0
    485a:	05 5c       	LJMP      R5
..\driver\hardware_init.c:17
	cfg_BASIC_TIMER();
    485c:	12 45       	LD        R5, [PC + #18]        ;->0x48a4  :=0x4678
    485e:	05 5c       	LJMP      R5
..\driver\hardware_init.c:18
	cfg_ADC();
    4860:	12 45       	LD        R5, [PC + #18]        ;->0x48a8  :=0x3b84
    4862:	05 5c       	LJMP      R5
..\driver\hardware_init.c:20
	//cfg_FLEXMUX();
	cfg_PWM();
    4864:	12 45       	LD        R5, [PC + #18]        ;->0x48ac  :=0x40b4
    4866:	05 5c       	LJMP      R5
..\driver\hardware_init.c:21
	cfg_DMA();
    4868:	12 45       	LD        R5, [PC + #18]        ;->0x48b0  :=0x3f9c
    486a:	05 5c       	LJMP      R5
..\driver\hardware_init.c:22
	cfg_USART();
    486c:	12 45       	LD        R5, [PC + #18]        ;->0x48b4  :=0x4748
    486e:	05 5c       	LJMP      R5
..\driver\hardware_init.c:23
	while(i--);
    4870:	00 00       	NOP      NOP      
    4872:	5e 81       	LD.H      R5, [SP]
    4874:	45 d0       	ZXT.H     R4, R5
    4876:	50 10       	MOV       R5, #0
    4878:	2d c7       	SUB       R5, R5, R4
    487a:	af 7d       	LSR       R5, #31
    487c:	55 d1       	ZXT.B     R5, R5
    487e:	64 cc       	SUB       R4, R4, #1
    4880:	44 d0       	ZXT.H     R4, R4
    4882:	e4 84       	ST.H      [SP], R4
    4884:	50 38       	CMP       R5, #0
    4886:	f6 f1       	JNZ       $-10                  ;->0x4872
..\driver\hardware_init.c:24
	adc_offset_calc();
    4888:	0c 45       	LD        R5, [PC + #12]        ;->0x48b8  :=0x3e84
    488a:	05 5c       	LJMP      R5
..\driver\hardware_init.c:25
	epwm_module_enable();
    488c:	0c 45       	LD        R5, [PC + #12]        ;->0x48bc  :=0x4648
    488e:	05 5c       	LJMP      R5
..\driver\hardware_init.c:26
}
    4890:	e4 28       	ADD       SP, #4
    4892:	0d 5d       	POP       LR
    4894:	1d 5c       	JMP       LR
    4896:	00 00       	NOP      NOP      
    4898:	50 c3 ff ff 	.long     0xffffc350 ->-00015536 
    489c:	28 4a 00 00 	.long     0x00004a28 ->000018984  [!!!@2@:CLR       R5, #0	@@: NOP      
    48a0:	a0 3f 00 00 	.long     0x00003fa0 ->000016288  [!!!@2@:CMP       R10, #112	@@: NOP      
    48a4:	78 46 00 00 	.long     0x00004678 ->000018040  [!!!@2@:LD        R6, [PC + #120]       ;->0x4a84  :=0x5c054512	@@: NOP      
    48a8:	84 3b 00 00 	.long     0x00003b84 ->000015236  [!!!@2@:CMP       R8, #52	@@: NOP      
    48ac:	b4 40 00 00 	.long     0x000040b4 ->000016564  [!!!@2@:LD        R0, [PC + #180]       ;->0x4b7c  :=0x5c1d5d0d	@@: NOP      
    48b0:	9c 3f 00 00 	.long     0x00003f9c ->000016284  [!!!@2@:CMP       R9, #124	@@: NOP      
    48b4:	48 47 00 00 	.long     0x00004748 ->000018248  [!!!@2@:LD        R7, [PC + #72]        ;->0x49d4  :=0x4512c065	@@: NOP      
    48b8:	84 3e 00 00 	.long     0x00003e84 ->000016004  [!!!@2@:CMP       R8, #100	@@: NOP      
    48bc:	48 46 00 00 	.long     0x00004648 ->000017992  [!!!@2@:LD        R6, [PC + #72]        ;->0x49dc  :=0x83e51053	@@: NOP      

000048c0 <_NMI_exception>:
_NMI_exception():
//                                 NMI中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _NMI_exception (void)
{	

}
    48c0:	7d 5d       	CLR       PSW, #29
    48c2:	1d 5c       	JMP       LR

000048c4 <_HardFault_exception>:
_HardFault_exception():
..\driver\kf_it.c:34
//                               硬件错误中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _HardFault_exception (void)
{

}
    48c4:	7d 5d       	CLR       PSW, #29
    48c6:	1d 5c       	JMP       LR

000048c8 <_StackFault_exception>:
_StackFault_exception():
..\driver\kf_it.c:42
//                                堆栈错误中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _StackFault_exception (void)
{

}
    48c8:	7d 5d       	CLR       PSW, #29
    48ca:	1d 5c       	JMP       LR

000048cc <_SVC_exception>:
_SVC_exception():
..\driver\kf_it.c:50
//                               SVC中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _SVC_exception (void)
{

}
    48cc:	7d 5d       	CLR       PSW, #29
    48ce:	1d 5c       	JMP       LR

000048d0 <_SoftSV_exception>:
_SoftSV_exception():
..\driver\kf_it.c:58
//                              SoftSV中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _SoftSV_exception (void)
{

}
    48d0:	7d 5d       	CLR       PSW, #29
    48d2:	1d 5c       	JMP       LR

000048d4 <_SysTick_exception>:
_SysTick_exception():
..\driver\kf_it.c:66
//                              SysTick中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _SysTick_exception (void)
{
	
}
    48d4:	7d 5d       	CLR       PSW, #29
    48d6:	1d 5c       	JMP       LR

000048d8 <_T5_exception>:
_T5_exception():
..\driver\kf_it.c:75
//                              T5中断函数
//*****************************************************************************************	//
void __attribute__((interrupt))_T5_exception (void)
{

}
    48d8:	7d 5d       	CLR       PSW, #29
    48da:	1d 5c       	JMP       LR

000048dc <_T14_exception>:
_T14_exception():
..\driver\kf_it.c:82
//*****************************************************************************************
//                              T14中断函数
//*****************************************************************************************	//
//1ms for task
void __attribute__((interrupt))_T14_exception (void)
{
    48dc:	25 5d       	PUSH      R5
..\driver\kf_it.c:83
	T14_TXIF_CLEAR;  //清T14溢出中断标志位
    48de:	15 45       	LD        R5, [PC + #21]        ;->0x4930  :=0x40001800
    48e0:	14 44       	LD        R4, [PC + #20]        ;->0x4930  :=0x40001800
    48e2:	e4 99       	LD.W      R4, [R4 + #7]
    48e4:	22 48       	SET       R4, #2
    48e6:	ec a1       	ST.W      [R5 + #7], R4
..\driver\kf_it.c:84
	T14_TXIC_CLEAR; //复位清T14溢出中断标志位
    48e8:	12 45       	LD        R5, [PC + #18]        ;->0x4930  :=0x40001800
    48ea:	12 44       	LD        R4, [PC + #18]        ;->0x4930  :=0x40001800
    48ec:	e4 99       	LD.W      R4, [R4 + #7]
    48ee:	22 4a       	CLR       R4, #2
    48f0:	ec a1       	ST.W      [R5 + #7], R4
..\driver\kf_it.c:85
	time_count.time_1ms_count++;
    48f2:	11 45       	LD        R5, [PC + #17]        ;->0x4934  :=0x10001c08
    48f4:	55 81       	LD.H      R5, [R5]
    48f6:	55 d0       	ZXT.H     R5, R5
    48f8:	6d c0       	ADD       R5, R5, #1
    48fa:	55 d0       	ZXT.H     R5, R5
    48fc:	0e 44       	LD        R4, [PC + #14]        ;->0x4934  :=0x10001c08
    48fe:	45 84       	ST.H      [R4], R5
..\driver\kf_it.c:86
	time_count.time_10ms_count++;
    4900:	0d 45       	LD        R5, [PC + #13]        ;->0x4934  :=0x10001c08
    4902:	6d a8       	LD.H      R5, [R5 + #1]
    4904:	55 d0       	ZXT.H     R5, R5
    4906:	6d c0       	ADD       R5, R5, #1
    4908:	55 d0       	ZXT.H     R5, R5
    490a:	0b 44       	LD        R4, [PC + #11]        ;->0x4934  :=0x10001c08
    490c:	65 b0       	ST.H      [R4 + #1], R5
..\driver\kf_it.c:87
	time_count.time_100ms_count++;
    490e:	0a 45       	LD        R5, [PC + #10]        ;->0x4934  :=0x10001c08
    4910:	ad a8       	LD.H      R5, [R5 + #2]
    4912:	55 d0       	ZXT.H     R5, R5
    4914:	6d c0       	ADD       R5, R5, #1
    4916:	55 d0       	ZXT.H     R5, R5
    4918:	07 44       	LD        R4, [PC + #7]         ;->0x4934  :=0x10001c08
    491a:	a5 b0       	ST.H      [R4 + #2], R5
..\driver\kf_it.c:88
	time_count.time_1s_count++;
    491c:	06 45       	LD        R5, [PC + #6]         ;->0x4934  :=0x10001c08
    491e:	ed a8       	LD.H      R5, [R5 + #3]
    4920:	55 d0       	ZXT.H     R5, R5
    4922:	6d c0       	ADD       R5, R5, #1
    4924:	55 d0       	ZXT.H     R5, R5
    4926:	04 44       	LD        R4, [PC + #4]         ;->0x4934  :=0x10001c08
    4928:	e5 b0       	ST.H      [R4 + #3], R5
..\driver\kf_it.c:91


}
    492a:	7d 5d       	CLR       PSW, #29
    492c:	05 5d       	POP       R5
    492e:	1d 5c       	JMP       LR
    4930:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x4930  :=0x40001800
    4934:	08 1c 00 10 	.long     0x10001c08 ->268442632  [!!!@2@:MOV       R0, #200	@@: MOV       R0, #0

00004938 <_T15_exception>:
_T15_exception():
..\driver\kf_it.c:99
//                              T15中断函数
//*****************************************************************************************	//
void __attribute__((interrupt))_T15_exception (void)
{

}
    4938:	7d 5d       	CLR       PSW, #29
    493a:	1d 5c       	JMP       LR

0000493c <_ADC0_exception>:
_ADC0_exception():
..\driver\kf_it.c:105

int32_t adc0_isr_count = 0;
int32_t adc1_isr_count = 0;
int32_t adc2_isr_count = 0;
void __attribute__((interrupt))_ADC0_exception(void)
{
    493c:	2d 5d       	PUSH      LR
    493e:	25 5d       	PUSH      R5
    4940:	e4 30       	SUB       SP, #4
..\driver\kf_it.c:106
	volatile uint8_t sample_error_flag = 0;  //for debug
    4942:	50 10       	MOV       R5, #0
    4944:	e5 83       	ST.B      [SP], R5
..\driver\kf_it.c:107
	LED1_ON;
    4946:	30 45       	LD        R5, [PC + #48]        ;->0x4a04  :=0x50000040
    4948:	2f 44       	LD        R4, [PC + #47]        ;->0x4a04  :=0x50000040
    494a:	64 98       	LD.W      R4, [R4 + #1]
    494c:	a7 4a       	CLR       R4, #15
    494e:	6c a0       	ST.W      [R5 + #1], R4
..\driver\kf_it.c:109
	//ADC0
	if(ADC0_HPENDIF_CHECK)
    4950:	2e 45       	LD        R5, [PC + #46]        ;->0x4a08  :=0x40000580
    4952:	25 9d       	LD.W      R4, [R5 + #20]
    4954:	58 10       	MOV       R5, #8
    4956:	6c d5       	ANL       R5, R4, R5
    4958:	50 38       	CMP       R5, #0
    495a:	11 f0       	JZ        $+17                  ;->0x497c
..\driver\kf_it.c:111
	{
		ADC0_HPENDIF_CLEAR;
    495c:	2b 45       	LD        R5, [PC + #43]        ;->0x4a08  :=0x40000580
    495e:	2b 44       	LD        R4, [PC + #43]        ;->0x4a08  :=0x40000580
    4960:	24 9d       	LD.W      R4, [R4 + #20]
    4962:	26 48       	SET       R4, #6
    4964:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:112
		ADC0_HPENDIC_CLEAR;
    4966:	29 45       	LD        R5, [PC + #41]        ;->0x4a08  :=0x40000580
    4968:	28 44       	LD        R4, [PC + #40]        ;->0x4a08  :=0x40000580
    496a:	24 9d       	LD.W      R4, [R4 + #20]
    496c:	26 4a       	CLR       R4, #6
    496e:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:113
		adc0_isr_count++;
    4970:	27 45       	LD        R5, [PC + #39]        ;->0x4a0c  :=0x10001c10
    4972:	55 82       	LD.W      R5, [R5]
    4974:	65 c0       	ADD       R4, R5, #1
    4976:	26 45       	LD        R5, [PC + #38]        ;->0x4a0c  :=0x10001c10
    4978:	54 85       	ST.W      [R5], R4
    497a:	03 04       	SJMP      $+3                   ;->0x4980
..\driver\kf_it.c:117
	}
	else
	{
		sample_error_flag = 1;
    497c:	51 10       	MOV       R5, #1
    497e:	e5 83       	ST.B      [SP], R5
..\driver\kf_it.c:120
	}
	//ADC1
	if(ADC1_HPENDIF_CHECK)
    4980:	24 45       	LD        R5, [PC + #36]        ;->0x4a10  :=0x40000600
    4982:	25 9d       	LD.W      R4, [R5 + #20]
    4984:	58 10       	MOV       R5, #8
    4986:	6c d5       	ANL       R5, R4, R5
    4988:	50 38       	CMP       R5, #0
    498a:	11 f0       	JZ        $+17                  ;->0x49ac
..\driver\kf_it.c:122
	{
		ADC1_HPENDIF_CLEAR;
    498c:	21 45       	LD        R5, [PC + #33]        ;->0x4a10  :=0x40000600
    498e:	21 44       	LD        R4, [PC + #33]        ;->0x4a10  :=0x40000600
    4990:	24 9d       	LD.W      R4, [R4 + #20]
    4992:	26 48       	SET       R4, #6
    4994:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:123
		ADC1_HPENDIC_CLEAR;
    4996:	1f 45       	LD        R5, [PC + #31]        ;->0x4a10  :=0x40000600
    4998:	1e 44       	LD        R4, [PC + #30]        ;->0x4a10  :=0x40000600
    499a:	24 9d       	LD.W      R4, [R4 + #20]
    499c:	26 4a       	CLR       R4, #6
    499e:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:124
		adc1_isr_count++;
    49a0:	1d 45       	LD        R5, [PC + #29]        ;->0x4a14  :=0x10001c14
    49a2:	55 82       	LD.W      R5, [R5]
    49a4:	65 c0       	ADD       R4, R5, #1
    49a6:	1c 45       	LD        R5, [PC + #28]        ;->0x4a14  :=0x10001c14
    49a8:	54 85       	ST.W      [R5], R4
    49aa:	03 04       	SJMP      $+3                   ;->0x49b0
..\driver\kf_it.c:128
	}
	else
	{
		sample_error_flag = 2;
    49ac:	52 10       	MOV       R5, #2
    49ae:	e5 83       	ST.B      [SP], R5
..\driver\kf_it.c:131
	}
	//ADC2
	if(ADC2_HPENDIF_CHECK)
    49b0:	1a 45       	LD        R5, [PC + #26]        ;->0x4a18  :=0x40000680
    49b2:	25 9d       	LD.W      R4, [R5 + #20]
    49b4:	58 10       	MOV       R5, #8
    49b6:	6c d5       	ANL       R5, R4, R5
    49b8:	50 38       	CMP       R5, #0
    49ba:	11 f0       	JZ        $+17                  ;->0x49dc
..\driver\kf_it.c:133
	{
		ADC2_HPENDIF_CLEAR;
    49bc:	17 45       	LD        R5, [PC + #23]        ;->0x4a18  :=0x40000680
    49be:	17 44       	LD        R4, [PC + #23]        ;->0x4a18  :=0x40000680
    49c0:	24 9d       	LD.W      R4, [R4 + #20]
    49c2:	26 48       	SET       R4, #6
    49c4:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:134
		ADC2_HPENDIC_CLEAR;
    49c6:	15 45       	LD        R5, [PC + #21]        ;->0x4a18  :=0x40000680
    49c8:	14 44       	LD        R4, [PC + #20]        ;->0x4a18  :=0x40000680
    49ca:	24 9d       	LD.W      R4, [R4 + #20]
    49cc:	26 4a       	CLR       R4, #6
    49ce:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:135
		adc2_isr_count++;
    49d0:	13 45       	LD        R5, [PC + #19]        ;->0x4a1c  :=0x10001c18
    49d2:	55 82       	LD.W      R5, [R5]
    49d4:	65 c0       	ADD       R4, R5, #1
    49d6:	12 45       	LD        R5, [PC + #18]        ;->0x4a1c  :=0x10001c18
    49d8:	54 85       	ST.W      [R5], R4
    49da:	03 04       	SJMP      $+3                   ;->0x49e0
..\driver\kf_it.c:139
	}
	else
	{
		sample_error_flag = 3;
    49dc:	53 10       	MOV       R5, #3
    49de:	e5 83       	ST.B      [SP], R5
..\driver\kf_it.c:141
	}
	if(sample_error_flag==0)
    49e0:	5e 80       	LD.B      R5, [SP]
    49e2:	55 d1       	ZXT.B     R5, R5
    49e4:	50 38       	CMP       R5, #0
    49e6:	03 f1       	JNZ       $+3                   ;->0x49ec
..\driver\kf_it.c:143
	{
        motor_control_isr();
    49e8:	0e 45       	LD        R5, [PC + #14]        ;->0x4a20  :=0x100000e0
    49ea:	05 5c       	LJMP      R5
..\driver\kf_it.c:146
	}
#if(USER_DEBUG_TOOL_SELECT==USER_DEBUG_TOOL_ON)
	commu_update();
    49ec:	0e 45       	LD        R5, [PC + #14]        ;->0x4a24  :=0x4dbc
    49ee:	05 5c       	LJMP      R5
..\driver\kf_it.c:148
#endif
	LED1_OFF;
    49f0:	05 45       	LD        R5, [PC + #5]         ;->0x4a04  :=0x50000040
    49f2:	05 44       	LD        R4, [PC + #5]         ;->0x4a04  :=0x50000040
    49f4:	64 98       	LD.W      R4, [R4 + #1]
    49f6:	a7 48       	SET       R4, #15
    49f8:	6c a0       	ST.W      [R5 + #1], R4
..\driver\kf_it.c:149
}
    49fa:	e4 28       	ADD       SP, #4
    49fc:	7d 5d       	CLR       PSW, #29
    49fe:	05 5d       	POP       R5
    4a00:	0d 5d       	POP       LR
    4a02:	1d 5c       	JMP       LR
    4a04:	40 00 00 50 	.long     0x50000040 ->1342177344 
    4a08:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x4d08	@@: LD        R0, [PC + #0]         ;->0x4a08  :=0x40000580
    4a0c:	10 1c 00 10 	.long     0x10001c10 ->268442640  [!!!@2@:MOV       R1, #192	@@: MOV       R0, #0
    4a10:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x4610	@@: LD        R0, [PC + #0]         ;->0x4a10  :=0x40000600
    4a14:	14 1c 00 10 	.long     0x10001c14 ->268442644  [!!!@2@:MOV       R1, #196	@@: MOV       R0, #0
    4a18:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x4718	@@: LD        R0, [PC + #0]         ;->0x4a18  :=0x40000680
    4a1c:	18 1c 00 10 	.long     0x10001c18 ->268442648  [!!!@2@:MOV       R1, #200	@@: MOV       R0, #0
    4a20:	e0 00 00 10 	.long     0x100000e0 ->268435680 
    4a24:	bc 4d 00 00 	.long     0x00004dbc ->000019900  [!!!@2@:SET       [R7], #28	@@: NOP      

00004a28 <cfg_CLK>:
cfg_CLK():
..\driver\system_init.c:7
#include "system_init.h"

uint32_t ST_Delay_num = 120; //节拍定时器延时

void cfg_CLK(void)
{
    4a28:	2d 5d       	PUSH      LR
..\driver\system_init.c:8
	SCLK_Config();  //系统时钟配置
    4a2a:	09 45       	LD        R5, [PC + #9]         ;->0x4a4c  :=0x4a60
    4a2c:	05 5c       	LJMP      R5
..\driver\system_init.c:9
	HFCK_Config();  //高频外设配置
    4a2e:	09 45       	LD        R5, [PC + #9]         ;->0x4a50  :=0x4b44
    4a30:	05 5c       	LJMP      R5
..\driver\system_init.c:10
	LFCK_Config();	//低频外设配置
    4a32:	09 45       	LD        R5, [PC + #9]         ;->0x4a54  :=0x4b68
    4a34:	05 5c       	LJMP      R5
..\driver\system_init.c:11
	FLASH_CFG = 0x000000C4;
    4a36:	09 45       	LD        R5, [PC + #9]         ;->0x4a58  :=0x40200100
    4a38:	44 1c       	MOV       R4, #196
    4a3a:	6c a1       	ST.W      [R5 + #5], R4
..\driver\system_init.c:12
	CACHE_CTLR |= 0x0001;
    4a3c:	08 44       	LD        R4, [PC + #8]         ;->0x4a5c  :=0x402000c0
    4a3e:	08 45       	LD        R5, [PC + #8]         ;->0x4a5c  :=0x402000c0
    4a40:	55 82       	LD.W      R5, [R5]
    4a42:	28 48       	SET       R5, #0
    4a44:	45 85       	ST.W      [R4], R5
..\driver\system_init.c:13
}
    4a46:	0d 5d       	POP       LR
    4a48:	1d 5c       	JMP       LR
    4a4a:	00 00       	NOP      NOP      
    4a4c:	60 4a 00 00 	.long     0x00004a60 ->000019040  [!!!@2@:CLR       R12, #0	@@: NOP      
    4a50:	44 4b 00 00 	.long     0x00004b44 ->000019268  [!!!@2@:CLR       R8, #20	@@: NOP      
    4a54:	68 4b 00 00 	.long     0x00004b68 ->000019304  [!!!@2@:CLR       LR, #16	@@: NOP      
    4a58:	00 01 20 40 	.long     0x40200100 ->1075839232  [!!!@2@:CMN       R0, R0	@@: LD        R0, [PC + #32]        ;->0x4ad8  :=0x2e14
    4a5c:	c0 00 20 40 	.long     0x402000c0 ->1075839168 

00004a60 <SCLK_Config>:
SCLK_Config():
..\driver\system_init.c:19


#define EXTRENAL_CRYSTAL_H

void SCLK_Config(void)
{
    4a60:	2d 5d       	PUSH      LR
..\driver\system_init.c:21
#ifdef EXTRENAL_CRYSTAL_H
	OSC_CTL0 |= 0x01;         //允许备份域可读写
    4a62:	51 10       	MOV       R5, #1
    4a64:	ae 7b       	LSL       R5, #30
    4a66:	41 10       	MOV       R4, #1
    4a68:	a6 7b       	LSL       R4, #30
    4a6a:	44 82       	LD.W      R4, [R4]
    4a6c:	20 48       	SET       R4, #0
    4a6e:	54 85       	ST.W      [R5], R4
..\driver\system_init.c:22
	PM_EXTHF_PIN_Selection_Config(PM_EXTHF_PIN1_IO_PORT);
    4a70:	00 10       	MOV       R0, #0
    4a72:	14 45       	LD        R5, [PC + #20]        ;->0x4ac0  :=0x3098
    4a74:	05 5c       	LJMP      R5
..\driver\system_init.c:23
	OSC_EXTHF_Start_Delay_Config(EXT_START_DELAY_65535);
    4a76:	09 10       	MOV       R0, #9
    4a78:	13 45       	LD        R5, [PC + #19]        ;->0x4ac4  :=0x2e68
    4a7a:	05 5c       	LJMP      R5
..\driver\system_init.c:24
	OSC_EXTHF_Software_Enable(TRUE);
    4a7c:	01 10       	MOV       R0, #1
    4a7e:	13 45       	LD        R5, [PC + #19]        ;->0x4ac8  :=0x2ef8
    4a80:	05 5c       	LJMP      R5
..\driver\system_init.c:25
	while(!OSC_Get_EXTHF_INT_Flag());
    4a82:	00 00       	NOP      NOP      
    4a84:	12 45       	LD        R5, [PC + #18]        ;->0x4acc  :=0x2f34
    4a86:	05 5c       	LJMP      R5
    4a88:	a0 58       	MOV       R5, R0
    4a8a:	50 38       	CMP       R5, #0
    4a8c:	fc f0       	JZ        $-4                   ;->0x4a84
..\driver\system_init.c:26
	OSC_PLL_Input_Source_Config(PLL_INPUT_EXTHF);
    4a8e:	01 10       	MOV       R0, #1
    4a90:	10 45       	LD        R5, [PC + #16]        ;->0x4ad0  :=0x2ba8
    4a92:	05 5c       	LJMP      R5
..\driver\system_init.c:32
#else
	OSC_INTHF_Software_Enable(TRUE);
	while(!OSC_Get_INTHF_INT_Flag());
	OSC_PLL_Input_Source_Config(PLL_INPUT_INTHF);
#endif
	OSC_PLL_Multiple_Value_Select(30,2,2);  //120M
    4a94:	0e 11       	MOV       R0, #30
    4a96:	12 10       	MOV       R1, #2
    4a98:	22 10       	MOV       R2, #2
    4a9a:	0f 45       	LD        R5, [PC + #15]        ;->0x4ad4  :=0x2d38
    4a9c:	05 5c       	LJMP      R5
..\driver\system_init.c:33
	OSC_PLL_Start_Delay_Config(PLL_START_DELAY_32768);
    4a9e:	09 10       	MOV       R0, #9
    4aa0:	0e 45       	LD        R5, [PC + #14]        ;->0x4ad8  :=0x2e14
    4aa2:	05 5c       	LJMP      R5
..\driver\system_init.c:34
	OSC_PLL_Software_Enable(TRUE);//PLL软件使能
    4aa4:	01 10       	MOV       R0, #1
    4aa6:	0e 45       	LD        R5, [PC + #14]        ;->0x4adc  :=0x2ebc
    4aa8:	05 5c       	LJMP      R5
..\driver\system_init.c:35
	OSC_PLL_RST();//复位控制
    4aaa:	0e 45       	LD        R5, [PC + #14]        ;->0x4ae0  :=0x2e08
    4aac:	05 5c       	LJMP      R5
..\driver\system_init.c:36
	Delay_ms_ST(1);
    4aae:	01 10       	MOV       R0, #1
    4ab0:	0d 45       	LD        R5, [PC + #13]        ;->0x4ae4  :=0x4aec
    4ab2:	05 5c       	LJMP      R5
..\driver\system_init.c:37
	OSC_SCK_Source_Config(SCLK_SOURCE_PLL);//选择PLL倍频作为系统时钟
    4ab4:	04 10       	MOV       R0, #4
    4ab6:	0d 45       	LD        R5, [PC + #13]        ;->0x4ae8  :=0x2ce8
    4ab8:	05 5c       	LJMP      R5
..\driver\system_init.c:38
}
    4aba:	0d 5d       	POP       LR
    4abc:	1d 5c       	JMP       LR
    4abe:	00 00       	NOP      NOP      
    4ac0:	98 30 00 00 	.long     0x00003098 ->000012440  [!!!@2@:SUB       R9, #8	@@: NOP      
    4ac4:	68 2e 00 00 	.long     0x00002e68 ->000011880  [!!!@2@:ADD       R6, #104	@@: NOP      
    4ac8:	f8 2e 00 00 	.long     0x00002ef8 ->000012024  [!!!@2@:ADD       PC, #104	@@: NOP      
    4acc:	34 2f 00 00 	.long     0x00002f34 ->000012084  [!!!@2@:ADD       R3, #116	@@: NOP      
    4ad0:	a8 2b 00 00 	.long     0x00002ba8 ->000011176  [!!!@2@:ADD       R10, #56	@@: NOP      
    4ad4:	38 2d 00 00 	.long     0x00002d38 ->000011576  [!!!@2@:ADD       R3, #88	@@: NOP      
    4ad8:	14 2e 00 00 	.long     0x00002e14 ->000011796  [!!!@2@:ADD       R1, #100	@@: NOP      
    4adc:	bc 2e 00 00 	.long     0x00002ebc ->000011964  [!!!@2@:ADD       R11, #108	@@: NOP      
    4ae0:	08 2e 00 00 	.long     0x00002e08 ->000011784  [!!!@2@:ADD       R0, #104	@@: NOP      
    4ae4:	ec 4a 00 00 	.long     0x00004aec ->000019180  [!!!@2@:CLR       LR, #12	@@: NOP      
    4ae8:	e8 2c 00 00 	.long     0x00002ce8 ->000011496  [!!!@2@:ADD       SP, #72	@@: NOP      

00004aec <Delay_ms_ST>:
Delay_ms_ST():
..\driver\system_init.c:66
}



void Delay_ms_ST(uint32_t delay_temp)
{
    4aec:	2d 5d       	PUSH      LR
    4aee:	e4 30       	SUB       SP, #4
    4af0:	e0 85       	ST.W      [SP], R0
..\driver\system_init.c:67
	SYSTICK_Configuration(SYSTICK_SYS_CLOCK_DIV_1,FALSE,ST_Delay_num*1000);
    4af2:	10 45       	LD        R5, [PC + #16]        ;->0x4b30  :=0x10001c1c
    4af4:	55 82       	LD.W      R5, [R5]
    4af6:	10 44       	LD        R4, [PC + #16]        ;->0x4b34  :=0x3e8
    4af8:	2d cb       	MULS      R5, R5, R4
    4afa:	00 00       	NOP      NOP      
    4afc:	04 10       	MOV       R0, #4
    4afe:	10 10       	MOV       R1, #0
    4b00:	45 58       	MOV       R2, R5
    4b02:	0e 45       	LD        R5, [PC + #14]        ;->0x4b38  :=0x323c
    4b04:	05 5c       	LJMP      R5
..\driver\system_init.c:68
	SYSTICK_Cmd(TRUE);
    4b06:	01 10       	MOV       R0, #1
    4b08:	0d 45       	LD        R5, [PC + #13]        ;->0x4b3c  :=0x32d4
    4b0a:	05 5c       	LJMP      R5
..\driver\system_init.c:69
	while(delay_temp)
    4b0c:	09 04       	SJMP      $+9                   ;->0x4b1e
..\driver\system_init.c:71
	{
		if(SYSTICK_Get_Count_Zero_Flag() == SET)
    4b0e:	0d 45       	LD        R5, [PC + #13]        ;->0x4b40  :=0x3310
    4b10:	05 5c       	LJMP      R5
    4b12:	a0 58       	MOV       R5, R0
    4b14:	51 38       	CMP       R5, #1
    4b16:	04 f1       	JNZ       $+4                   ;->0x4b1e
..\driver\system_init.c:73
		{
			delay_temp--;
    4b18:	5e 82       	LD.W      R5, [SP]
    4b1a:	6d cc       	SUB       R5, R5, #1
    4b1c:	e5 85       	ST.W      [SP], R5
..\driver\system_init.c:69

void Delay_ms_ST(uint32_t delay_temp)
{
	SYSTICK_Configuration(SYSTICK_SYS_CLOCK_DIV_1,FALSE,ST_Delay_num*1000);
	SYSTICK_Cmd(TRUE);
	while(delay_temp)
    4b1e:	5e 82       	LD.W      R5, [SP]
    4b20:	50 38       	CMP       R5, #0
    4b22:	f6 f1       	JNZ       $-10                  ;->0x4b0e
..\driver\system_init.c:76
		if(SYSTICK_Get_Count_Zero_Flag() == SET)
		{
			delay_temp--;
		}
	}
	SYSTICK_Cmd(FALSE);
    4b24:	00 10       	MOV       R0, #0
    4b26:	06 45       	LD        R5, [PC + #6]         ;->0x4b3c  :=0x32d4
    4b28:	05 5c       	LJMP      R5
..\driver\system_init.c:77
}
    4b2a:	e4 28       	ADD       SP, #4
    4b2c:	0d 5d       	POP       LR
    4b2e:	1d 5c       	JMP       LR
    4b30:	1c 1c 00 10 	.long     0x10001c1c ->268442652  [!!!@2@:MOV       R1, #204	@@: MOV       R0, #0
    4b34:	e8 03 00 00 	.long     0x000003e8 ->000001000  [!!!@4@:JMP       $-1572864             ;->0xffd04b34
    4b38:	3c 32 00 00 	.long     0x0000323c ->000012860  [!!!@2@:SUB       R3, #44	@@: NOP      
    4b3c:	d4 32 00 00 	.long     0x000032d4 ->000013012  [!!!@2@:SUB       LR, #36	@@: NOP      
    4b40:	10 33 00 00 	.long     0x00003310 ->000013072  [!!!@2@:SUB       R1, #48	@@: NOP      

00004b44 <HFCK_Config>:
HFCK_Config():
..\driver\system_init.c:92
		}
	}
	SYSTICK_Cmd(FALSE);
}
void HFCK_Config(void)
{
    4b44:	2d 5d       	PUSH      LR
..\driver\system_init.c:94
#ifdef EXTRENAL_CRYSTAL_H
	OSC_HFCK_Source_Config(HFCK_SOURCE_EXTHF); //外部晶振
    4b46:	02 10       	MOV       R0, #2
    4b48:	05 45       	LD        R5, [PC + #5]         ;->0x4b5c  :=0x2be4
    4b4a:	05 5c       	LJMP      R5
..\driver\system_init.c:98
#else
	OSC_HFCK_Source_Config(HFCK_SOURCE_INTHF); //内部高频
#endif
	OSC_HFCK_Division_Config (HFCK_DIVISION_1);
    4b4c:	00 10       	MOV       R0, #0
    4b4e:	05 45       	LD        R5, [PC + #5]         ;->0x4b60  :=0x2b58
    4b50:	05 5c       	LJMP      R5
..\driver\system_init.c:99
	OSC_HFCK_Enable(TRUE);
    4b52:	01 10       	MOV       R0, #1
    4b54:	04 45       	LD        R5, [PC + #4]         ;->0x4b64  :=0x2c38
    4b56:	05 5c       	LJMP      R5
..\driver\system_init.c:100
}
    4b58:	0d 5d       	POP       LR
    4b5a:	1d 5c       	JMP       LR
    4b5c:	e4 2b 00 00 	.long     0x00002be4 ->000011236  [!!!@2@:ADD       SP, #52	@@: NOP      
    4b60:	58 2b 00 00 	.long     0x00002b58 ->000011096  [!!!@2@:ADD       R5, #56	@@: NOP      
    4b64:	38 2c 00 00 	.long     0x00002c38 ->000011320  [!!!@2@:ADD       R3, #72	@@: NOP      

00004b68 <LFCK_Config>:
LFCK_Config():
..\driver\system_init.c:102
void LFCK_Config(void)
{
    4b68:	2d 5d       	PUSH      LR
..\driver\system_init.c:103
	OSC_LFCK_Source_Config(LFCK_INPUT_INTLF); //32K内部低频
    4b6a:	00 10       	MOV       R0, #0
    4b6c:	05 45       	LD        R5, [PC + #5]         ;->0x4b80  :=0x2c74
    4b6e:	05 5c       	LJMP      R5
..\driver\system_init.c:104
	OSC_LFCK_Division_Config (LFCK_DIVISION_1);
    4b70:	00 10       	MOV       R0, #0
    4b72:	05 45       	LD        R5, [PC + #5]         ;->0x4b84  :=0x2b08
    4b74:	05 5c       	LJMP      R5
..\driver\system_init.c:105
	OSC_LFCK_Enable(TRUE);
    4b76:	01 10       	MOV       R0, #1
    4b78:	04 45       	LD        R5, [PC + #4]         ;->0x4b88  :=0x2cac
    4b7a:	05 5c       	LJMP      R5
..\driver\system_init.c:106
}
    4b7c:	0d 5d       	POP       LR
    4b7e:	1d 5c       	JMP       LR
    4b80:	74 2c 00 00 	.long     0x00002c74 ->000011380  [!!!@2@:ADD       R7, #68	@@: NOP      
    4b84:	08 2b 00 00 	.long     0x00002b08 ->000011016  [!!!@2@:ADD       R0, #56	@@: NOP      
    4b88:	ac 2c 00 00 	.long     0x00002cac ->000011436  [!!!@2@:ADD       R10, #76	@@: NOP      

00004b8c <.text$CHECK_RESTRICTION$sdata_local_1>:
    4b8c:	0d 0a 0d 0a b2 ce ca fd d0 a3 d1 e9 45 52 52 4f     ............ERRO
    4b9c:	52 21 21 21 21 0d 0a 0d 0a 00                       R!!!!.....

00004ba6 <CHECK_RESTRICTION>:
CHECK_RESTRICTION():
..\driver\system_init.c:109

void CHECK_RESTRICTION(int expr)  //参数校验
{
    4ba6:	2d 5d       	PUSH      LR
    4ba8:	e4 30       	SUB       SP, #4
    4baa:	e0 85       	ST.W      [SP], R0
..\driver\system_init.c:110
	while(!expr)
    4bac:	5e 82       	LD.W      R5, [SP]
    4bae:	50 38       	CMP       R5, #0
    4bb0:	05 f1       	JNZ       $+5                   ;->0x4bba
..\driver\system_init.c:112
	{
		printf("\r\n\r\n参数校验ERROR!!!!\r\n\r\n");
    4bb2:	04 40       	LD        R0, [PC + #4]         ;->0x4bc0  :=0x4b8c
    4bb4:	04 45       	LD        R5, [PC + #4]         ;->0x4bc4  :=0x7588
    4bb6:	05 5c       	LJMP      R5
..\driver\system_init.c:113
		while(1);
    4bb8:	00 04       	SJMP      $+0                   ;->0x4bb8
..\driver\system_init.c:115
	}
}
    4bba:	e4 28       	ADD       SP, #4
    4bbc:	0d 5d       	POP       LR
    4bbe:	1d 5c       	JMP       LR
    4bc0:	8c 4b 00 00 	.long     0x00004b8c ->000019340  [!!!@2@:CLR       R1, #28	@@: NOP      
    4bc4:	88 75 00 00 	.long     0x00007588 ->000030088  [!!!@2@:ST.H      [R8++], R8	@@: NOP      

00004bc8 <alarm_process>:
alarm_process():
..\application\alarm.c:18
    error_state.error_code = 0;
}

void alarm_process(void)
{
	if(sys_control.sys_enable_flag==1)
    4bc8:	0a 45       	LD        R5, [PC + #10]        ;->0x4bf0  :=0x10003f64
    4bca:	55 80       	LD.B      R5, [R5]
..\application\alarm.c:25
	 /*   start_error_check();
	    stall_error_check();
	    phase_lost_check();
	    over_voltage_check();  */
	}
	if(error_state.error_code!=0)
    4bcc:	0a 45       	LD        R5, [PC + #10]        ;->0x4bf4  :=0x10001c20
    4bce:	55 81       	LD.H      R5, [R5]
    4bd0:	55 d0       	ZXT.H     R5, R5
    4bd2:	50 38       	CMP       R5, #0
    4bd4:	07 f0       	JZ        $+7                   ;->0x4be2
..\application\alarm.c:27
	{
		LED2_ON;
    4bd6:	09 45       	LD        R5, [PC + #9]         ;->0x4bf8  :=0x50000040
    4bd8:	08 44       	LD        R4, [PC + #8]         ;->0x4bf8  :=0x50000040
    4bda:	64 98       	LD.W      R4, [R4 + #1]
    4bdc:	a6 4a       	CLR       R4, #14
    4bde:	6c a0       	ST.W      [R5 + #1], R4
    4be0:	06 04       	SJMP      $+6                   ;->0x4bec
..\application\alarm.c:31
	}
	else
	{
		LED2_OFF;
    4be2:	06 45       	LD        R5, [PC + #6]         ;->0x4bf8  :=0x50000040
    4be4:	05 44       	LD        R4, [PC + #5]         ;->0x4bf8  :=0x50000040
    4be6:	64 98       	LD.W      R4, [R4 + #1]
    4be8:	a6 48       	SET       R4, #14
    4bea:	6c a0       	ST.W      [R5 + #1], R4
..\application\alarm.c:33
	}
}
    4bec:	1d 5c       	JMP       LR
    4bee:	00 00       	NOP      NOP      
    4bf0:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0
    4bf4:	20 1c 00 10 	.long     0x10001c20 ->268442656  [!!!@2@:MOV       R2, #192	@@: MOV       R0, #0
    4bf8:	40 00 00 50 	.long     0x50000040 ->1342177344 

00004bfc <over_current_check>:
over_current_check():
..\application\alarm.c:36

void over_current_check(void)
{
    4bfc:	2d 5d       	PUSH      LR
..\application\alarm.c:37
    if(adc_data.Ia_pu<error_param.over_current_min||adc_data.Ia_pu>error_param.over_current_max||adc_data.Ib_pu<error_param.over_current_min||adc_data.Ib_pu>error_param.over_current_max)
    4bfe:	22 45       	LD        R5, [PC + #34]        ;->0x4c84  :=0x10003ee0
    4c00:	ad a9       	LD.H      R5, [R5 + #6]
    4c02:	45 d0       	ZXT.H     R4, R5
    4c04:	21 45       	LD        R5, [PC + #33]        ;->0x4c88  :=0x10003f1c
    4c06:	6d a8       	LD.H      R5, [R5 + #1]
    4c08:	55 d0       	ZXT.H     R5, R5
    4c0a:	44 61       	SXT.H     R4, R4
    4c0c:	55 61       	SXT.H     R5, R5
    4c0e:	45 70       	CMP       R4, R5
    4c10:	1f fb       	JLT       $+31                  ;->0x4c4e
    4c12:	1d 45       	LD        R5, [PC + #29]        ;->0x4c84  :=0x10003ee0
    4c14:	ad a9       	LD.H      R5, [R5 + #6]
    4c16:	45 d0       	ZXT.H     R4, R5
    4c18:	1c 45       	LD        R5, [PC + #28]        ;->0x4c88  :=0x10003f1c
    4c1a:	55 81       	LD.H      R5, [R5]
    4c1c:	55 d0       	ZXT.H     R5, R5
    4c1e:	44 61       	SXT.H     R4, R4
    4c20:	55 61       	SXT.H     R5, R5
    4c22:	45 70       	CMP       R4, R5
    4c24:	15 fc       	JGT       $+21                  ;->0x4c4e
    4c26:	18 45       	LD        R5, [PC + #24]        ;->0x4c84  :=0x10003ee0
    4c28:	ed a9       	LD.H      R5, [R5 + #7]
    4c2a:	45 d0       	ZXT.H     R4, R5
    4c2c:	17 45       	LD        R5, [PC + #23]        ;->0x4c88  :=0x10003f1c
    4c2e:	6d a8       	LD.H      R5, [R5 + #1]
    4c30:	55 d0       	ZXT.H     R5, R5
    4c32:	44 61       	SXT.H     R4, R4
    4c34:	55 61       	SXT.H     R5, R5
    4c36:	45 70       	CMP       R4, R5
    4c38:	0b fb       	JLT       $+11                  ;->0x4c4e
    4c3a:	13 45       	LD        R5, [PC + #19]        ;->0x4c84  :=0x10003ee0
    4c3c:	ed a9       	LD.H      R5, [R5 + #7]
    4c3e:	45 d0       	ZXT.H     R4, R5
    4c40:	12 45       	LD        R5, [PC + #18]        ;->0x4c88  :=0x10003f1c
    4c42:	55 81       	LD.H      R5, [R5]
    4c44:	55 d0       	ZXT.H     R5, R5
    4c46:	44 61       	SXT.H     R4, R4
    4c48:	55 61       	SXT.H     R5, R5
    4c4a:	45 70       	CMP       R4, R5
    4c4c:	17 fd       	JLE       $+23                  ;->0x4c7a
..\application\alarm.c:39
    {
    	error_param.over_current_count++;
    4c4e:	0f 45       	LD        R5, [PC + #15]        ;->0x4c88  :=0x10003f1c
    4c50:	ed a8       	LD.H      R5, [R5 + #3]
    4c52:	55 d0       	ZXT.H     R5, R5
    4c54:	6d c0       	ADD       R5, R5, #1
    4c56:	55 d0       	ZXT.H     R5, R5
    4c58:	0c 44       	LD        R4, [PC + #12]        ;->0x4c88  :=0x10003f1c
    4c5a:	e5 b0       	ST.H      [R4 + #3], R5
..\application\alarm.c:40
    	if(error_param.over_current_count>USER_OVER_CURRENT_TIME)  //
    4c5c:	0b 45       	LD        R5, [PC + #11]        ;->0x4c88  :=0x10003f1c
    4c5e:	ed a8       	LD.H      R5, [R5 + #3]
    4c60:	55 d0       	ZXT.H     R5, R5
    4c62:	5a 38       	CMP       R5, #10
    4c64:	0e f9       	JLS       $+14                  ;->0x4c80
..\application\alarm.c:42
    	{
    	    pwm_disable();
    4c66:	0a 45       	LD        R5, [PC + #10]        ;->0x4c8c  :=0x45cc
    4c68:	05 5c       	LJMP      R5
..\application\alarm.c:43
    	    error_state.bit.over_current_error = 1;
    4c6a:	0a 45       	LD        R5, [PC + #10]        ;->0x4c90  :=0x10001c20
    4c6c:	45 81       	LD.H      R4, [R5]
    4c6e:	20 48       	SET       R4, #0
    4c70:	54 84       	ST.H      [R5], R4
..\application\alarm.c:44
    	    error_param.over_current_count = 0;
    4c72:	06 44       	LD        R4, [PC + #6]         ;->0x4c88  :=0x10003f1c
    4c74:	50 10       	MOV       R5, #0
    4c76:	e5 b0       	ST.H      [R4 + #3], R5
..\application\alarm.c:40
void over_current_check(void)
{
    if(adc_data.Ia_pu<error_param.over_current_min||adc_data.Ia_pu>error_param.over_current_max||adc_data.Ib_pu<error_param.over_current_min||adc_data.Ib_pu>error_param.over_current_max)
    {
    	error_param.over_current_count++;
    	if(error_param.over_current_count>USER_OVER_CURRENT_TIME)  //
    4c78:	04 04       	SJMP      $+4                   ;->0x4c80
..\application\alarm.c:49
    	    error_param.over_current_count = 0;
    	}
    }
    else
    {
    	error_param.over_current_count = 0;
    4c7a:	04 44       	LD        R4, [PC + #4]         ;->0x4c88  :=0x10003f1c
    4c7c:	50 10       	MOV       R5, #0
    4c7e:	e5 b0       	ST.H      [R4 + #3], R5
..\application\alarm.c:51
    }
}
    4c80:	0d 5d       	POP       LR
    4c82:	1d 5c       	JMP       LR
    4c84:	e0 3e 00 10 	.long     0x10003ee0 ->268451552  [!!!@2@:CMP       SP, #96	@@: MOV       R0, #0
    4c88:	1c 3f 00 10 	.long     0x10003f1c ->268451612  [!!!@2@:CMP       R1, #124	@@: MOV       R0, #0
    4c8c:	cc 45 00 00 	.long     0x000045cc ->000017868  [!!!@2@:LD        R5, [PC + #204]       ;->0x4fbc  :=0x105098e5	@@: NOP      
    4c90:	20 1c 00 10 	.long     0x10001c20 ->268442656  [!!!@2@:MOV       R2, #192	@@: MOV       R0, #0

00004c94 <current_offset_check>:
current_offset_check():
..\application\alarm.c:71
		error_param.over_voltage_count = 0;
	}
}

void current_offset_check(void)
{
    4c94:	2d 5d       	PUSH      LR
..\application\alarm.c:72
	if(Q15abs(2048-adc_data.Ia_offset)>USER_CURRENT_OFFSET_MAX||Q15abs(2048-adc_data.Ib_offset)>USER_CURRENT_OFFSET_MAX)
    4c96:	15 45       	LD        R5, [PC + #21]        ;->0x4ce8  :=0x10003ee0
    4c98:	55 82       	LD.W      R5, [R5]
    4c9a:	45 d0       	ZXT.H     R4, R5
    4c9c:	51 10       	MOV       R5, #1
    4c9e:	ab 7a       	LSL       R5, #11
    4ca0:	2d c7       	SUB       R5, R5, R4
    4ca2:	55 d0       	ZXT.H     R5, R5
    4ca4:	55 d0       	ZXT.H     R5, R5
    4ca6:	55 61       	SXT.H     R5, R5
    4ca8:	05 58       	MOV       R0, R5
    4caa:	11 45       	LD        R5, [PC + #17]        ;->0x4cec  :=0x100005c4
    4cac:	05 5c       	LJMP      R5
    4cae:	a0 58       	MOV       R5, R0
    4cb0:	85 58       	MOV       R4, R5
    4cb2:	5c 1c       	MOV       R5, #204
    4cb4:	45 70       	CMP       R4, R5
    4cb6:	12 f8       	JHI       $+18                  ;->0x4cda
    4cb8:	0c 45       	LD        R5, [PC + #12]        ;->0x4ce8  :=0x10003ee0
    4cba:	6d 98       	LD.W      R5, [R5 + #1]
    4cbc:	45 d0       	ZXT.H     R4, R5
    4cbe:	51 10       	MOV       R5, #1
    4cc0:	ab 7a       	LSL       R5, #11
    4cc2:	2d c7       	SUB       R5, R5, R4
    4cc4:	55 d0       	ZXT.H     R5, R5
    4cc6:	55 d0       	ZXT.H     R5, R5
    4cc8:	55 61       	SXT.H     R5, R5
    4cca:	05 58       	MOV       R0, R5
    4ccc:	08 45       	LD        R5, [PC + #8]         ;->0x4cec  :=0x100005c4
    4cce:	05 5c       	LJMP      R5
    4cd0:	a0 58       	MOV       R5, R0
    4cd2:	85 58       	MOV       R4, R5
    4cd4:	5c 1c       	MOV       R5, #204
    4cd6:	45 70       	CMP       R4, R5
    4cd8:	05 f9       	JLS       $+5                   ;->0x4ce2
..\application\alarm.c:74
	{
		error_state.bit.offset_error = 1;
    4cda:	06 45       	LD        R5, [PC + #6]         ;->0x4cf0  :=0x10001c20
    4cdc:	45 81       	LD.H      R4, [R5]
    4cde:	a0 48       	SET       R4, #8
    4ce0:	54 84       	ST.H      [R5], R4
..\application\alarm.c:76
	}
}
    4ce2:	0d 5d       	POP       LR
    4ce4:	1d 5c       	JMP       LR
    4ce6:	00 00       	NOP      NOP      
    4ce8:	e0 3e 00 10 	.long     0x10003ee0 ->268451552  [!!!@2@:CMP       SP, #96	@@: MOV       R0, #0
    4cec:	c4 05 00 10 	.long     0x100005c4 ->268436932  [!!!@2@:SJMP      $+452                 ;->0x5074	@@: MOV       R0, #0
    4cf0:	20 1c 00 10 	.long     0x10001c20 ->268442656  [!!!@2@:MOV       R2, #192	@@: MOV       R0, #0

00004cf4 <application_init>:
application_init():
..\application\application_init.c:13
#include "application_init.h"



void application_init(void)
{
    4cf4:	2d 5d       	PUSH      LR
..\application\application_init.c:14
    param_init();
    4cf6:	06 45       	LD        R5, [PC + #6]         ;->0x4d0c  :=0x4ec8
    4cf8:	05 5c       	LJMP      R5
..\application\application_init.c:15
    SMCInit(&smc1);
    4cfa:	06 40       	LD        R0, [PC + #6]         ;->0x4d10  :=0x1000402c
    4cfc:	06 45       	LD        R5, [PC + #6]         ;->0x4d14  :=0x5068
    4cfe:	05 5c       	LJMP      R5
..\application\application_init.c:16
    commu_init();
    4d00:	06 45       	LD        R5, [PC + #6]         ;->0x4d18  :=0x4d7c
    4d02:	05 5c       	LJMP      R5
..\application\application_init.c:17
	speed_param_init();
    4d04:	06 45       	LD        R5, [PC + #6]         ;->0x4d1c  :=0x510c
    4d06:	05 5c       	LJMP      R5
..\application\application_init.c:18
}
    4d08:	0d 5d       	POP       LR
    4d0a:	1d 5c       	JMP       LR
    4d0c:	c8 4e 00 00 	.long     0x00004ec8 ->000020168  [!!!@2@:CLR       [R9], #8	@@: NOP      
    4d10:	2c 40 00 10 	.long     0x1000402c ->268451884  [!!!@2@:LD        R0, [PC + #44]        ;->0x4dc0  :=0xd0558155	@@: MOV       R0, #0
    4d14:	68 50 00 00 	.long     0x00005068 ->000020584  [!!!@2@:JB        [LR], #0	@@: NOP      
    4d18:	7c 4d 00 00 	.long     0x00004d7c ->000019836  [!!!@2@:SET       [PC], #20	@@: NOP      
    4d1c:	0c 51 00 00 	.long     0x0000510c ->000020748  [!!!@2@:JB        [R1], #20	@@: NOP      

00004d20 <sendSerialFcn>:
sendSerialFcn():
..\application\commu.c:14

void sin_gen(void);

//send
static void(sendSerialFcn)(uint8_t data)
{
    4d20:	e4 30       	SUB       SP, #4
    4d22:	a0 58       	MOV       R5, R0
    4d24:	e5 83       	ST.B      [SP], R5
..\application\commu.c:15
	X2C_Usart_SEL->TBUFR = data;
    4d26:	03 45       	LD        R5, [PC + #3]         ;->0x4d30  :=0x40000980
    4d28:	4e 80       	LD.B      R4, [SP]
    4d2a:	ec a0       	ST.W      [R5 + #3], R4
..\application\commu.c:16
}
    4d2c:	e4 28       	ADD       SP, #4
    4d2e:	1d 5c       	JMP       LR
    4d30:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x4d30  :=0x40000980

00004d34 <receiveSerialFcn>:
receiveSerialFcn():
..\application\commu.c:21

//receive
static uint8_t (receiveSerialFcn)()
{
	return X2C_Usart_SEL->RBUFR;
    4d34:	03 45       	LD        R5, [PC + #3]         ;->0x4d40  :=0x40000980
    4d36:	ed 98       	LD.W      R5, [R5 + #3]
    4d38:	55 d1       	ZXT.B     R5, R5
..\application\commu.c:22
}
    4d3a:	05 58       	MOV       R0, R5
    4d3c:	1d 5c       	JMP       LR
    4d3e:	00 00       	NOP      NOP      
    4d40:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x4d40  :=0x40000980

00004d44 <isReceiveDataAvailableFcn>:
isReceiveDataAvailableFcn():
..\application\commu.c:26
//check receive state
static uint8_t (isReceiveDataAvailableFcn)()
{
	if(X2C_Usart_SEL->STR & USART_STR_RDRIF)
    4d44:	06 45       	LD        R5, [PC + #6]         ;->0x4d5c  :=0x40000980
    4d46:	a5 98       	LD.W      R4, [R5 + #2]
    4d48:	51 10       	MOV       R5, #1
    4d4a:	ab 7a       	LSL       R5, #11
    4d4c:	6c d5       	ANL       R5, R4, R5
    4d4e:	50 38       	CMP       R5, #0
    4d50:	03 f0       	JZ        $+3                   ;->0x4d56
..\application\commu.c:28
	{
		return SET;
    4d52:	51 10       	MOV       R5, #1
    4d54:	02 04       	SJMP      $+2                   ;->0x4d58
..\application\commu.c:32
	}
	else
	{
		return RESET;
    4d56:	50 10       	MOV       R5, #0
..\application\commu.c:34
	}
}
    4d58:	05 58       	MOV       R0, R5
    4d5a:	1d 5c       	JMP       LR
    4d5c:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x4d5c  :=0x40000980

00004d60 <isSendReadyFcn>:
isSendReadyFcn():
..\application\commu.c:38
//check send state
static uint8_t (isSendReadyFcn)()
{
	if(X2C_Usart_SEL->STR & USART_STR_TXEIF)
    4d60:	06 45       	LD        R5, [PC + #6]         ;->0x4d78  :=0x40000980
    4d62:	a5 98       	LD.W      R4, [R5 + #2]
    4d64:	51 10       	MOV       R5, #1
    4d66:	ad 7a       	LSL       R5, #13
    4d68:	6c d5       	ANL       R5, R4, R5
    4d6a:	50 38       	CMP       R5, #0
    4d6c:	03 f0       	JZ        $+3                   ;->0x4d72
..\application\commu.c:40
	{
		return SET;
    4d6e:	51 10       	MOV       R5, #1
    4d70:	02 04       	SJMP      $+2                   ;->0x4d74
..\application\commu.c:44
	}
	else
	{
		return RESET;
    4d72:	50 10       	MOV       R5, #0
..\application\commu.c:46
	}
}
    4d74:	05 58       	MOV       R0, R5
    4d76:	1d 5c       	JMP       LR
    4d78:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x4d78  :=0x40000980

00004d7c <commu_init>:
commu_init():
..\application\commu.c:49

void commu_init(void)
{
    4d7c:	2d 5d       	PUSH      LR
..\application\commu.c:50
	X2CScope_HookUARTFunctions(sendSerialFcn,receiveSerialFcn,isReceiveDataAvailableFcn,isSendReadyFcn);
    4d7e:	06 40       	LD        R0, [PC + #6]         ;->0x4d94  :=0x4d20
    4d80:	06 41       	LD        R1, [PC + #6]         ;->0x4d98  :=0x4d34
    4d82:	07 42       	LD        R2, [PC + #7]         ;->0x4d9c  :=0x4d44
    4d84:	07 43       	LD        R3, [PC + #7]         ;->0x4da0  :=0x4d60
    4d86:	08 45       	LD        R5, [PC + #8]         ;->0x4da4  :=0x5a3c
    4d88:	05 5c       	LJMP      R5
..\application\commu.c:51
    X2CScope_Initialise();
    4d8a:	08 45       	LD        R5, [PC + #8]         ;->0x4da8  :=0x5954
    4d8c:	05 5c       	LJMP      R5
..\application\commu.c:52
}
    4d8e:	0d 5d       	POP       LR
    4d90:	1d 5c       	JMP       LR
    4d92:	00 00       	NOP      NOP      
    4d94:	20 4d 00 00 	.long     0x00004d20 ->000019744  [!!!@2@:SET       [R4], #16	@@: NOP      
    4d98:	34 4d 00 00 	.long     0x00004d34 ->000019764  [!!!@2@:SET       [R6], #20	@@: NOP      
    4d9c:	44 4d 00 00 	.long     0x00004d44 ->000019780  [!!!@2@:SET       [R8], #20	@@: NOP      
    4da0:	60 4d 00 00 	.long     0x00004d60 ->000019808  [!!!@2@:SET       [R12], #16	@@: NOP      
    4da4:	3c 5a 00 00 	.long     0x00005a3c ->000023100  [!!!@2@:MOV       R17, R28	@@: NOP      
    4da8:	54 59 00 00 	.long     0x00005954 ->000022868  [!!!@2@:MOV       R10, R20	@@: NOP      

00004dac <commu_task>:
commu_task():
..\application\commu.c:55

void commu_task(void)
{
    4dac:	2d 5d       	PUSH      LR
..\application\commu.c:56
	X2CScope_Communicate();
    4dae:	03 45       	LD        R5, [PC + #3]         ;->0x4db8  :=0x5a1c
    4db0:	05 5c       	LJMP      R5
..\application\commu.c:57
}
    4db2:	0d 5d       	POP       LR
    4db4:	1d 5c       	JMP       LR
    4db6:	00 00       	NOP      NOP      
    4db8:	1c 5a 00 00 	.long     0x00005a1c ->000023068  [!!!@2@:MOV       R16, R28	@@: NOP      

00004dbc <commu_update>:
commu_update():
..\application\commu.c:60

void commu_update(void)
{
    4dbc:	2d 5d       	PUSH      LR
..\application\commu.c:61
	commu_data.update_count++;
    4dbe:	0e 45       	LD        R5, [PC + #14]        ;->0x4df4  :=0x10003f54
    4dc0:	55 81       	LD.H      R5, [R5]
    4dc2:	55 d0       	ZXT.H     R5, R5
    4dc4:	6d c0       	ADD       R5, R5, #1
    4dc6:	55 d0       	ZXT.H     R5, R5
    4dc8:	0b 44       	LD        R4, [PC + #11]        ;->0x4df4  :=0x10003f54
    4dca:	45 84       	ST.H      [R4], R5
..\application\commu.c:62
	if(commu_data.update_count>=commu_data.update_time)
    4dcc:	0a 45       	LD        R5, [PC + #10]        ;->0x4df4  :=0x10003f54
    4dce:	55 81       	LD.H      R5, [R5]
    4dd0:	45 d0       	ZXT.H     R4, R5
    4dd2:	09 45       	LD        R5, [PC + #9]         ;->0x4df4  :=0x10003f54
    4dd4:	6d a8       	LD.H      R5, [R5 + #1]
    4dd6:	55 d0       	ZXT.H     R5, R5
    4dd8:	44 61       	SXT.H     R4, R4
    4dda:	55 61       	SXT.H     R5, R5
    4ddc:	45 70       	CMP       R4, R5
    4dde:	06 fb       	JLT       $+6                   ;->0x4dea
..\application\commu.c:64
	{
		commu_data.update_count = 0;
    4de0:	05 44       	LD        R4, [PC + #5]         ;->0x4df4  :=0x10003f54
    4de2:	50 10       	MOV       R5, #0
    4de4:	45 84       	ST.H      [R4], R5
..\application\commu.c:65
		X2CScope_Update();
    4de6:	05 45       	LD        R5, [PC + #5]         ;->0x4df8  :=0x5a2c
    4de8:	05 5c       	LJMP      R5
..\application\commu.c:68
	}
#if(USER_DEBUG_SIN_SELECT==USER_DEBUG_SIN_ON)
	sin_gen();
    4dea:	05 45       	LD        R5, [PC + #5]         ;->0x4dfc  :=0x4e00
    4dec:	05 5c       	LJMP      R5
..\application\commu.c:70
#endif
}
    4dee:	0d 5d       	POP       LR
    4df0:	1d 5c       	JMP       LR
    4df2:	00 00       	NOP      NOP      
    4df4:	54 3f 00 10 	.long     0x10003f54 ->268451668  [!!!@2@:CMP       R5, #116	@@: MOV       R0, #0
    4df8:	2c 5a 00 00 	.long     0x00005a2c ->000023084  [!!!@2@:MOV       R17, R12	@@: NOP      
    4dfc:	00 4e 00 00 	.long     0x00004e00 ->000019968  [!!!@2@:CLR       [R0], #0	@@: NOP      

00004e00 <sin_gen>:
sin_gen():
..\application\commu.c:93

volatile SIN_DATA_TYPE sin_data;

void sin_gen(void)
{
    sin_data.sin_count1++;
    4e00:	2f 45       	LD        R5, [PC + #47]        ;->0x4ebc  :=0x10003f58
    4e02:	55 80       	LD.B      R5, [R5]
    4e04:	55 d1       	ZXT.B     R5, R5
    4e06:	6d c0       	ADD       R5, R5, #1
    4e08:	55 d1       	ZXT.B     R5, R5
    4e0a:	2d 44       	LD        R4, [PC + #45]        ;->0x4ebc  :=0x10003f58
    4e0c:	45 83       	ST.B      [R4], R5
..\application\commu.c:94
	if(sin_data.sin_count1>=sin_data.sin_time1)
    4e0e:	2c 45       	LD        R5, [PC + #44]        ;->0x4ebc  :=0x10003f58
    4e10:	55 80       	LD.B      R5, [R5]
    4e12:	55 d1       	ZXT.B     R5, R5
    4e14:	2a 44       	LD        R4, [PC + #42]        ;->0x4ebc  :=0x10003f58
    4e16:	a4 88       	LD.B      R4, [R4 + #2]
    4e18:	44 d1       	ZXT.B     R4, R4
    4e1a:	45 70       	CMP       R4, R5
    4e1c:	20 f8       	JHI       $+32                  ;->0x4e5c
..\application\commu.c:96
	{
		sin_data.sin_count1 = 0;
    4e1e:	28 44       	LD        R4, [PC + #40]        ;->0x4ebc  :=0x10003f58
    4e20:	50 10       	MOV       R5, #0
    4e22:	45 83       	ST.B      [R4], R5
..\application\commu.c:97
		sin_data.sin_index1++;
    4e24:	26 45       	LD        R5, [PC + #38]        ;->0x4ebc  :=0x10003f58
    4e26:	ad a8       	LD.H      R5, [R5 + #2]
    4e28:	55 d0       	ZXT.H     R5, R5
    4e2a:	6d c0       	ADD       R5, R5, #1
    4e2c:	55 d0       	ZXT.H     R5, R5
    4e2e:	24 44       	LD        R4, [PC + #36]        ;->0x4ebc  :=0x10003f58
    4e30:	a5 b0       	ST.H      [R4 + #2], R5
..\application\commu.c:98
		if(sin_data.sin_index1>=2048)
    4e32:	23 45       	LD        R5, [PC + #35]        ;->0x4ebc  :=0x10003f58
    4e34:	ad a8       	LD.H      R5, [R5 + #2]
    4e36:	55 d0       	ZXT.H     R5, R5
    4e38:	55 61       	SXT.H     R5, R5
    4e3a:	22 44       	LD        R4, [PC + #34]        ;->0x4ec0  :=0x7ff
    4e3c:	54 70       	CMP       R5, R4
    4e3e:	04 fd       	JLE       $+4                   ;->0x4e46
..\application\commu.c:100
		{
			sin_data.sin_index1 = 0;
    4e40:	1f 44       	LD        R4, [PC + #31]        ;->0x4ebc  :=0x10003f58
    4e42:	50 10       	MOV       R5, #0
    4e44:	a5 b0       	ST.H      [R4 + #2], R5
..\application\commu.c:102
		}
	    sin_data.sin_value1 = SinTable[sin_data.sin_index1];
    4e46:	1e 45       	LD        R5, [PC + #30]        ;->0x4ebc  :=0x10003f58
    4e48:	ad a8       	LD.H      R5, [R5 + #2]
    4e4a:	55 d0       	ZXT.H     R5, R5
    4e4c:	55 61       	SXT.H     R5, R5
    4e4e:	1e 44       	LD        R4, [PC + #30]        ;->0x4ec4  :=0x10000c08
    4e50:	6d c3       	ADD       R5, R5, R5
    4e52:	6c c3       	ADD       R5, R4, R5
    4e54:	55 81       	LD.H      R5, [R5]
    4e56:	55 d0       	ZXT.H     R5, R5
    4e58:	19 44       	LD        R4, [PC + #25]        ;->0x4ebc  :=0x10003f58
    4e5a:	25 b1       	ST.H      [R4 + #4], R5
..\application\commu.c:104
	}
	sin_data.sin_count2++;
    4e5c:	18 45       	LD        R5, [PC + #24]        ;->0x4ebc  :=0x10003f58
    4e5e:	6d 88       	LD.B      R5, [R5 + #1]
    4e60:	55 d1       	ZXT.B     R5, R5
    4e62:	6d c0       	ADD       R5, R5, #1
    4e64:	55 d1       	ZXT.B     R5, R5
    4e66:	16 44       	LD        R4, [PC + #22]        ;->0x4ebc  :=0x10003f58
    4e68:	65 90       	ST.B      [R4 + #1], R5
..\application\commu.c:105
	if(sin_data.sin_count2>=sin_data.sin_time2)
    4e6a:	15 45       	LD        R5, [PC + #21]        ;->0x4ebc  :=0x10003f58
    4e6c:	6d 88       	LD.B      R5, [R5 + #1]
    4e6e:	55 d1       	ZXT.B     R5, R5
    4e70:	13 44       	LD        R4, [PC + #19]        ;->0x4ebc  :=0x10003f58
    4e72:	e4 88       	LD.B      R4, [R4 + #3]
    4e74:	44 d1       	ZXT.B     R4, R4
    4e76:	45 70       	CMP       R4, R5
    4e78:	20 f8       	JHI       $+32                  ;->0x4eb8
..\application\commu.c:107
	{
		sin_data.sin_count2 = 0;
    4e7a:	11 44       	LD        R4, [PC + #17]        ;->0x4ebc  :=0x10003f58
    4e7c:	50 10       	MOV       R5, #0
    4e7e:	65 90       	ST.B      [R4 + #1], R5
..\application\commu.c:108
		sin_data.sin_index2++;
    4e80:	0f 45       	LD        R5, [PC + #15]        ;->0x4ebc  :=0x10003f58
    4e82:	ed a8       	LD.H      R5, [R5 + #3]
    4e84:	55 d0       	ZXT.H     R5, R5
    4e86:	6d c0       	ADD       R5, R5, #1
    4e88:	55 d0       	ZXT.H     R5, R5
    4e8a:	0d 44       	LD        R4, [PC + #13]        ;->0x4ebc  :=0x10003f58
    4e8c:	e5 b0       	ST.H      [R4 + #3], R5
..\application\commu.c:109
		if(sin_data.sin_index2>=2048)
    4e8e:	0c 45       	LD        R5, [PC + #12]        ;->0x4ebc  :=0x10003f58
    4e90:	ed a8       	LD.H      R5, [R5 + #3]
    4e92:	55 d0       	ZXT.H     R5, R5
    4e94:	55 61       	SXT.H     R5, R5
    4e96:	0b 44       	LD        R4, [PC + #11]        ;->0x4ec0  :=0x7ff
    4e98:	54 70       	CMP       R5, R4
    4e9a:	04 fd       	JLE       $+4                   ;->0x4ea2
..\application\commu.c:111
		{
			sin_data.sin_index2 = 0;
    4e9c:	08 44       	LD        R4, [PC + #8]         ;->0x4ebc  :=0x10003f58
    4e9e:	50 10       	MOV       R5, #0
    4ea0:	e5 b0       	ST.H      [R4 + #3], R5
..\application\commu.c:113
		}
	    sin_data.sin_value2 = SinTable[sin_data.sin_index2];
    4ea2:	07 45       	LD        R5, [PC + #7]         ;->0x4ebc  :=0x10003f58
    4ea4:	ed a8       	LD.H      R5, [R5 + #3]
    4ea6:	55 d0       	ZXT.H     R5, R5
    4ea8:	55 61       	SXT.H     R5, R5
    4eaa:	07 44       	LD        R4, [PC + #7]         ;->0x4ec4  :=0x10000c08
    4eac:	6d c3       	ADD       R5, R5, R5
    4eae:	6c c3       	ADD       R5, R4, R5
    4eb0:	55 81       	LD.H      R5, [R5]
    4eb2:	55 d0       	ZXT.H     R5, R5
    4eb4:	02 44       	LD        R4, [PC + #2]         ;->0x4ebc  :=0x10003f58
    4eb6:	65 b1       	ST.H      [R4 + #5], R5
..\application\commu.c:115
	}
}
    4eb8:	1d 5c       	JMP       LR
    4eba:	00 00       	NOP      NOP      
    4ebc:	58 3f 00 10 	.long     0x10003f58 ->268451672  [!!!@2@:CMP       R5, #120	@@: MOV       R0, #0
    4ec0:	ff 07 00 00 	.long     0x000007ff ->000002047  [!!!@2@:SJMP      $-1                   ;->0x4ebe	@@: NOP      
    4ec4:	08 0c 00 10 	.long     0x10000c08 ->268438536  [!!!@2@:LD.W      R4, [SP + #8]	@@: MOV       R0, #0

00004ec8 <param_init>:
param_init():
..\application\param.c:18
volatile tPIParm     PIParmQ;	// 提供转矩的电流分量Iq
volatile tPIParm     PIParmW;	// 转速、角速度
volatile SMC smc1;

void param_init(void)
{
    4ec8:	2d 5d       	PUSH      LR
..\application\param.c:19
	control_param.debug_start_speed = (uint32_t)(USER_DEBUG_SPEED*POLEPAIRS*LOOPTIMEINSEC*65536*65536/60.0);
    4eca:	4b 45       	LD        R5, [PC + #75]        ;->0x4ff4  :=0x10003f70
    4ecc:	4b 44       	LD        R4, [PC + #75]        ;->0x4ff8  :=0x15d867
    4ece:	6c a0       	ST.W      [R5 + #1], R4
..\application\param.c:20
	control_param.start_speed = (uint32_t)(USER_OPEN_RUN_SPEED*POLEPAIRS*LOOPTIMEINSEC*65536*65536/60.0);
    4ed0:	49 45       	LD        R5, [PC + #73]        ;->0x4ff4  :=0x10003f70
    4ed2:	4b 44       	LD        R4, [PC + #75]        ;->0x4ffc  :=0x2bb0cf
    4ed4:	ac a0       	ST.W      [R5 + #2], R4
..\application\param.c:21
	control_param.startup_lock_time = LOCKTIME;
    4ed6:	48 44       	LD        R4, [PC + #72]        ;->0x4ff4  :=0x10003f70
    4ed8:	4a 45       	LD        R5, [PC + #74]        ;->0x5000  :=0x4e20
    4eda:	e5 b2       	ST.H      [R4 + #11], R5
..\application\param.c:22
	control_param.IRP_per_calc = IRP_PERCALC;
    4edc:	46 45       	LD        R5, [PC + #70]        ;->0x4ff4  :=0x10003f70
    4ede:	33 12       	MOV       R3, #35
    4ee0:	e5 c2       	ADD       R4, R5, R3
    4ee2:	5a 10       	MOV       R5, #10
    4ee4:	45 83       	ST.B      [R4], R5
..\application\param.c:23
	control_param._pi_calc = Q15(_PI/IRP_PERCALC);
    4ee6:	44 44       	LD        R4, [PC + #68]        ;->0x4ff4  :=0x10003f70
    4ee8:	47 45       	LD        R5, [PC + #71]        ;->0x5004  :=0x2836
    4eea:	e5 b4       	ST.H      [R4 + #19], R5
..\application\param.c:24
	control_param.omega0_rad_calc = Q15(OMEGA0*_PI/IRP_PERCALC);
    4eec:	42 44       	LD        R4, [PC + #66]        ;->0x4ff4  :=0x10003f70
    4eee:	59 18       	MOV       R5, #137
    4ef0:	a5 b4       	ST.H      [R4 + #18], R5
..\application\param.c:26

    ParkParm.qIaOffset = adc_data.Ia_offset;
    4ef2:	46 45       	LD        R5, [PC + #70]        ;->0x5008  :=0x10003ee0
    4ef4:	55 82       	LD.W      R5, [R5]
    4ef6:	55 d0       	ZXT.H     R5, R5
    4ef8:	45 44       	LD        R4, [PC + #69]        ;->0x500c  :=0x10003fb2
    4efa:	65 b3       	ST.H      [R4 + #13], R5
..\application\param.c:27
    ParkParm.qIbOffset = adc_data.Ib_offset;
    4efc:	43 45       	LD        R5, [PC + #67]        ;->0x5008  :=0x10003ee0
    4efe:	6d 98       	LD.W      R5, [R5 + #1]
    4f00:	55 d0       	ZXT.H     R5, R5
    4f02:	43 44       	LD        R4, [PC + #67]        ;->0x500c  :=0x10003fb2
    4f04:	a5 b3       	ST.H      [R4 + #14], R5
..\application\param.c:28
    current_offset_check();
    4f06:	43 45       	LD        R5, [PC + #67]        ;->0x5010  :=0x4c94
    4f08:	05 5c       	LJMP      R5
..\application\param.c:30

    error_param.over_current_max = (float)(USER_OVER_CURRENT/USER_ADC_SCALE_CURRENT)*2048.0 + 2048.0;
    4f0a:	43 44       	LD        R4, [PC + #67]        ;->0x5014  :=0x10003f1c
    4f0c:	43 45       	LD        R5, [PC + #67]        ;->0x5018  :=0xd52
    4f0e:	45 84       	ST.H      [R4], R5
..\application\param.c:31
    error_param.over_current_min = 2048.0 - (float)(USER_OVER_CURRENT/USER_ADC_SCALE_CURRENT)*2048.0;
    4f10:	41 44       	LD        R4, [PC + #65]        ;->0x5014  :=0x10003f1c
    4f12:	43 45       	LD        R5, [PC + #67]        ;->0x501c  :=0x2ad
    4f14:	65 b0       	ST.H      [R4 + #1], R5
..\application\param.c:32
    if(error_param.over_current_max>4095||error_param.over_current_min<0)
    4f16:	40 45       	LD        R5, [PC + #64]        ;->0x5014  :=0x10003f1c
    4f18:	55 81       	LD.H      R5, [R5]
    4f1a:	55 d0       	ZXT.H     R5, R5
    4f1c:	55 61       	SXT.H     R5, R5
    4f1e:	41 44       	LD        R4, [PC + #65]        ;->0x5020  :=0xfff
    4f20:	54 70       	CMP       R5, R4
    4f22:	07 fc       	JGT       $+7                   ;->0x4f30
    4f24:	3c 45       	LD        R5, [PC + #60]        ;->0x5014  :=0x10003f1c
    4f26:	6d a8       	LD.H      R5, [R5 + #1]
    4f28:	55 d0       	ZXT.H     R5, R5
    4f2a:	55 61       	SXT.H     R5, R5
    4f2c:	50 38       	CMP       R5, #0
    4f2e:	05 f5       	JPL       $+5                   ;->0x4f38
..\application\param.c:34
    {
    	error_state.bit.param_init_error = 1;
    4f30:	3d 45       	LD        R5, [PC + #61]        ;->0x5024  :=0x10001c20
    4f32:	45 81       	LD.H      R4, [R5]
    4f34:	a1 48       	SET       R4, #9
    4f36:	54 84       	ST.H      [R5], R4
..\application\param.c:37
    }

    error_param.over_voltage_max = (float)(USER_OVER_VOLTAGE/USER_ADC_SCALE_VOLTAGE)*4096.0;
    4f38:	37 44       	LD        R4, [PC + #55]        ;->0x5014  :=0x10003f1c
    4f3a:	3c 45       	LD        R5, [PC + #60]        ;->0x5028  :=0xc28
    4f3c:	a5 b0       	ST.H      [R4 + #2], R5
..\application\param.c:38
    if(error_param.over_voltage_max>4095||error_param.over_voltage_max<0)
    4f3e:	36 45       	LD        R5, [PC + #54]        ;->0x5014  :=0x10003f1c
    4f40:	ad a8       	LD.H      R5, [R5 + #2]
    4f42:	55 d0       	ZXT.H     R5, R5
    4f44:	55 61       	SXT.H     R5, R5
    4f46:	37 44       	LD        R4, [PC + #55]        ;->0x5020  :=0xfff
    4f48:	54 70       	CMP       R5, R4
    4f4a:	07 fc       	JGT       $+7                   ;->0x4f58
    4f4c:	32 45       	LD        R5, [PC + #50]        ;->0x5014  :=0x10003f1c
    4f4e:	ad a8       	LD.H      R5, [R5 + #2]
    4f50:	55 d0       	ZXT.H     R5, R5
    4f52:	55 61       	SXT.H     R5, R5
    4f54:	50 38       	CMP       R5, #0
    4f56:	05 f5       	JPL       $+5                   ;->0x4f60
..\application\param.c:40
    {
    	error_state.bit.param_init_error = 1;
    4f58:	33 45       	LD        R5, [PC + #51]        ;->0x5024  :=0x10001c20
    4f5a:	45 81       	LD.H      R4, [R5]
    4f5c:	a1 48       	SET       R4, #9
    4f5e:	54 84       	ST.H      [R5], R4
..\application\param.c:43
    }

    error_param.start_omega_acc_max = USER_OVER_SPEED_MAX*4.0/60.0*USER_MOTOR_POLE_PAIRS*0.001*0.001*65536.0;
    4f60:	2d 44       	LD        R4, [PC + #45]        ;->0x5014  :=0x10003f1c
    4f62:	58 16       	MOV       R5, #104
    4f64:	65 b4       	ST.H      [R4 + #17], R5
..\application\param.c:45

    error_param.stall_omega_max = USER_OVER_SPEED_MAX/60.0*USER_MOTOR_POLE_PAIRS*SPEEDLOOPTIME*65536;
    4f66:	2c 44       	LD        R4, [PC + #44]        ;->0x5014  :=0x10003f1c
    4f68:	31 45       	LD        R5, [PC + #49]        ;->0x502c  :=0x3333
    4f6a:	e5 b1       	ST.H      [R4 + #7], R5
..\application\param.c:47

	SVGenParm.iPWMPeriod = USER_PWM_PERIOD;
    4f6c:	31 44       	LD        R4, [PC + #49]        ;->0x5030  :=0x10003fa4
    4f6e:	32 45       	LD        R5, [PC + #50]        ;->0x5034  :=0xbb8
    4f70:	45 84       	ST.H      [R4], R5
..\application\param.c:49

    control_param.motor_direction = USER_RUN_DIRECTION;
    4f72:	21 45       	LD        R5, [PC + #33]        ;->0x4ff4  :=0x10003f70
    4f74:	30 12       	MOV       R3, #32
    4f76:	e5 c2       	ADD       R4, R5, R3
    4f78:	50 10       	MOV       R5, #0
    4f7a:	45 83       	ST.B      [R4], R5
..\application\param.c:52

    // ============= PI D Term ===============
    PIParmD.qKp = Q15(USER_ID_KP); //DKP;
    4f7c:	2f 44       	LD        R4, [PC + #47]        ;->0x5038  :=0x10003fd8
    4f7e:	51 10       	MOV       R5, #1
    4f80:	ae 7a       	LSL       R5, #14
    4f82:	65 a0       	ST.W      [R4 + #1], R5
..\application\param.c:53
    PIParmD.qKi = Q15(USER_ID_KI); //DKI;
    4f84:	2d 45       	LD        R5, [PC + #45]        ;->0x5038  :=0x10003fd8
    4f86:	2e 44       	LD        R4, [PC + #46]        ;->0x503c  :=0x28f
    4f88:	ac a0       	ST.W      [R5 + #2], R4
..\application\param.c:54
    PIParmD.qOutMax = Q15(USER_ID_OUTMAX); //DOUTMAX;
    4f8a:	2c 44       	LD        R4, [PC + #44]        ;->0x5038  :=0x10003fd8
    4f8c:	51 10       	MOV       R5, #1
    4f8e:	ae 7a       	LSL       R5, #14
    4f90:	e5 a0       	ST.W      [R4 + #3], R5
..\application\param.c:55
    PIParmD.qOutMin = -PIParmD.qOutMax;
    4f92:	2a 45       	LD        R5, [PC + #42]        ;->0x5038  :=0x10003fd8
    4f94:	e5 98       	LD.W      R4, [R5 + #3]
    4f96:	50 10       	MOV       R5, #0
    4f98:	25 c7       	SUB       R4, R5, R4
    4f9a:	28 45       	LD        R5, [PC + #40]        ;->0x5038  :=0x10003fd8
    4f9c:	2c a1       	ST.W      [R5 + #4], R4
..\application\param.c:57

    InitPI(&PIParmD);
    4f9e:	27 40       	LD        R0, [PC + #39]        ;->0x5038  :=0x10003fd8
    4fa0:	28 45       	LD        R5, [PC + #40]        ;->0x5040  :=0x5054
    4fa2:	05 5c       	LJMP      R5
..\application\param.c:60

    // ============= PI Q Term ===============
    PIParmQ.qKp = Q15(USER_IQ_KP); //QKP;
    4fa4:	28 44       	LD        R4, [PC + #40]        ;->0x5044  :=0x10003ff4
    4fa6:	51 10       	MOV       R5, #1
    4fa8:	ae 7a       	LSL       R5, #14
    4faa:	65 a0       	ST.W      [R4 + #1], R5
..\application\param.c:61
    PIParmQ.qKi = Q15(USER_IQ_KI); //QKI;
    4fac:	26 45       	LD        R5, [PC + #38]        ;->0x5044  :=0x10003ff4
    4fae:	24 44       	LD        R4, [PC + #36]        ;->0x503c  :=0x28f
    4fb0:	ac a0       	ST.W      [R5 + #2], R4
..\application\param.c:62
    PIParmQ.qOutMax = Q15(USER_IQ_OUTMAX); //QOUTMAX;
    4fb2:	25 44       	LD        R4, [PC + #37]        ;->0x5044  :=0x10003ff4
    4fb4:	51 10       	MOV       R5, #1
    4fb6:	ae 7a       	LSL       R5, #14
    4fb8:	e5 a0       	ST.W      [R4 + #3], R5
..\application\param.c:63
    PIParmQ.qOutMin = -PIParmQ.qOutMax;
    4fba:	23 45       	LD        R5, [PC + #35]        ;->0x5044  :=0x10003ff4
    4fbc:	e5 98       	LD.W      R4, [R5 + #3]
    4fbe:	50 10       	MOV       R5, #0
    4fc0:	25 c7       	SUB       R4, R5, R4
    4fc2:	21 45       	LD        R5, [PC + #33]        ;->0x5044  :=0x10003ff4
    4fc4:	2c a1       	ST.W      [R5 + #4], R4
..\application\param.c:65

    InitPI(&PIParmQ);
    4fc6:	20 40       	LD        R0, [PC + #32]        ;->0x5044  :=0x10003ff4
    4fc8:	1e 45       	LD        R5, [PC + #30]        ;->0x5040  :=0x5054
    4fca:	05 5c       	LJMP      R5
..\application\param.c:68

    // ============= PI W Term ===============
    PIParmW.qKp = Q15(USER_SPD_KP); //WKP;
    4fcc:	1f 45       	LD        R5, [PC + #31]        ;->0x5048  :=0x10004010
    4fce:	20 44       	LD        R4, [PC + #32]        ;->0x504c  :=0x6666
    4fd0:	6c a0       	ST.W      [R5 + #1], R4
..\application\param.c:69
    PIParmW.qKi = Q15(USER_SPD_KI); //WKI;
    4fd2:	1e 45       	LD        R5, [PC + #30]        ;->0x5048  :=0x10004010
    4fd4:	41 12       	MOV       R4, #33
    4fd6:	ac a0       	ST.W      [R5 + #2], R4
..\application\param.c:70
    PIParmW.qOutMax = Q15(USER_SPD_OUTMAX); //WOUTMAX;
    4fd8:	1c 45       	LD        R5, [PC + #28]        ;->0x5048  :=0x10004010
    4fda:	1e 44       	LD        R4, [PC + #30]        ;->0x5050  :=0x7eb7
    4fdc:	ec a0       	ST.W      [R5 + #3], R4
..\application\param.c:71
    PIParmW.qOutMin = -PIParmW.qOutMax;
    4fde:	1b 45       	LD        R5, [PC + #27]        ;->0x5048  :=0x10004010
    4fe0:	e5 98       	LD.W      R4, [R5 + #3]
    4fe2:	50 10       	MOV       R5, #0
    4fe4:	25 c7       	SUB       R4, R5, R4
    4fe6:	19 45       	LD        R5, [PC + #25]        ;->0x5048  :=0x10004010
    4fe8:	2c a1       	ST.W      [R5 + #4], R4
..\application\param.c:73

    InitPI(&PIParmW);
    4fea:	18 40       	LD        R0, [PC + #24]        ;->0x5048  :=0x10004010
    4fec:	15 45       	LD        R5, [PC + #21]        ;->0x5040  :=0x5054
    4fee:	05 5c       	LJMP      R5
..\application\param.c:74
}
    4ff0:	0d 5d       	POP       LR
    4ff2:	1d 5c       	JMP       LR
    4ff4:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
    4ff8:	67 d8 15 00 	.long     0x0015d867 ->001431655 
    4ffc:	cf b0 2b 00 	.long     0x002bb0cf ->002863311 
    5000:	20 4e 00 00 	.long     0x00004e20 ->000020000  [!!!@2@:CLR       [R4], #0	@@: NOP      
    5004:	36 28 00 00 	.long     0x00002836 ->000010294  [!!!@2@:ADD       R3, #6	@@: NOP      
    5008:	e0 3e 00 10 	.long     0x10003ee0 ->268451552  [!!!@2@:CMP       SP, #96	@@: MOV       R0, #0
    500c:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
    5010:	94 4c 00 00 	.long     0x00004c94 ->000019604  [!!!@2@:SET       [R2], #12	@@: NOP      
    5014:	1c 3f 00 10 	.long     0x10003f1c ->268451612  [!!!@2@:CMP       R1, #124	@@: MOV       R0, #0
    5018:	52 0d 00 00 	.long     0x00000d52 ->000003410  [!!!@2@:LD.W      R5, [SP + #82]	@@: NOP      
    501c:	ad 02 00 00 	.long     0x000002ad ->000000685  [!!!@2@:SVC      	@@: NOP      
    5020:	ff 0f 00 00 	.long     0x00000fff ->000004095  [!!!@2@:LD.W      R7, [SP + #255]	@@: NOP      
    5024:	20 1c 00 10 	.long     0x10001c20 ->268442656  [!!!@2@:MOV       R2, #192	@@: MOV       R0, #0
    5028:	28 0c 00 00 	.long     0x00000c28 ->000003112  [!!!@2@:LD.W      R4, [SP + #40]	@@: NOP      
    502c:	33 33 00 00 	.long     0x00003333 ->000013107  [!!!@2@:SUB       R3, #51	@@: NOP      
    5030:	a4 3f 00 10 	.long     0x10003fa4 ->268451748  [!!!@2@:CMP       R10, #116	@@: MOV       R0, #0
    5034:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    5038:	d8 3f 00 10 	.long     0x10003fd8 ->268451800  [!!!@2@:CMP       LR, #120	@@: MOV       R0, #0
    503c:	8f 02 00 00 	.long     0x0000028f ->000000655  [!!!@2@:SVC      	@@: NOP      
    5040:	54 50 00 00 	.long     0x00005054 ->000020564  [!!!@2@:JB        [R10], #4	@@: NOP      
    5044:	f4 3f 00 10 	.long     0x10003ff4 ->268451828  [!!!@2@:CMP       PC, #116	@@: MOV       R0, #0
    5048:	10 40 00 10 	.long     0x10004010 ->268451856  [!!!@2@:LD        R0, [PC + #16]        ;->0x5088  :=0x1849825e	@@: MOV       R0, #0
    504c:	66 66 00 00 	.long     0x00006666 ->000026214  [!!!@2@:SUB       R6, R6	@@: NOP      
    5050:	b7 7e 00 00 	.long     0x00007eb7 ->000032439  [!!!@2@:ROR       R6, #15	@@: NOP      

00005054 <InitPI>:
InitPI():
..\application\param.c:78


void InitPI( tPIParm *pParm)
{
    5054:	e4 30       	SUB       SP, #4
    5056:	e0 85       	ST.W      [SP], R0
..\application\param.c:79
	pParm->qdSum = 0;
    5058:	5e 82       	LD.W      R5, [SP]
    505a:	40 10       	MOV       R4, #0
    505c:	6c a1       	ST.W      [R5 + #5], R4
..\application\param.c:80
	pParm->qOut  = 0;
    505e:	5e 82       	LD.W      R5, [SP]
    5060:	40 10       	MOV       R4, #0
    5062:	ac a1       	ST.W      [R5 + #6], R4
..\application\param.c:81
}
    5064:	e4 28       	ADD       SP, #4
    5066:	1d 5c       	JMP       LR

00005068 <SMCInit>:
SMCInit():
..\application\smc.c:8

#include "application_init.h"


void SMCInit(SMC *s)
{
    5068:	e4 30       	SUB       SP, #4
    506a:	e0 85       	ST.W      [SP], R0
..\application\smc.c:12
	if (Q15(USER_MOTOR_RS*LOOPTIMEINSEC) > Q15(USER_MOTOR_LS))
		s->Fsmopos = Q15(0.0);
	else
		s->Fsmopos = Q15(1 - USER_MOTOR_RS*LOOPTIMEINSEC/USER_MOTOR_LS);
    506c:	5e 82       	LD.W      R5, [SP]
    506e:	0c 44       	LD        R4, [PC + #12]        ;->0x509c  :=0x7bbb
    5070:	ac b1       	ST.H      [R5 + #6], R4
..\application\smc.c:17

	if (Q15(LOOPTIMEINSEC) > Q15(USER_MOTOR_LS))
		s->Gsmopos = Q15(0.99999);//0x7FFF
	else
		s->Gsmopos = Q15(LOOPTIMEINSEC/USER_MOTOR_LS*USER_FULL_SCALE_VOLTAGE/USER_ADC_SCALE_CURRENT);
    5072:	5e 82       	LD.W      R5, [SP]
    5074:	0b 44       	LD        R4, [PC + #11]        ;->0x50a0  :=0xda0
    5076:	2c b1       	ST.H      [R5 + #4], R4
..\application\smc.c:19

	s->Kslide = Q15(SMCGAIN);//0X6CCC
    5078:	4e 82       	LD.W      R4, [SP]
    507a:	51 10       	MOV       R5, #1
    507c:	ae 7a       	LSL       R5, #14
    507e:	a5 b3       	ST.H      [R4 + #14], R5
..\application\smc.c:20
	s->MaxSMCError = Q15(MAXLINEARSMC);//0XA4
    5080:	4e 82       	LD.W      R4, [SP]
    5082:	51 10       	MOV       R5, #1
    5084:	ae 7a       	LSL       R5, #14
    5086:	e5 b3       	ST.H      [R4 + #15], R5
..\application\smc.c:21
	s->FiltOmCoef = Q15(OMEGA0 * _PI / IRP_PERCALC);
    5088:	5e 82       	LD.W      R5, [SP]
    508a:	49 18       	MOV       R4, #137
    508c:	2c b5       	ST.H      [R5 + #20], R4
..\application\smc.c:22
	s->ThetaOffset = CONSTANT_PHASE_SHIFT;
    508e:	4e 82       	LD.W      R4, [SP]
    5090:	51 10       	MOV       R5, #1
    5092:	ae 7a       	LSL       R5, #14
    5094:	65 b5       	ST.H      [R4 + #21], R5
..\application\smc.c:23
}
    5096:	e4 28       	ADD       SP, #4
    5098:	1d 5c       	JMP       LR
    509a:	00 00       	NOP      NOP      
    509c:	bb 7b 00 00 	.long     0x00007bbb ->000031675  [!!!@2@:LSL       R7, #27	@@: NOP      
    50a0:	a0 0d 00 00 	.long     0x00000da0 ->000003488  [!!!@2@:LD.W      R5, [SP + #160]	@@: NOP      

000050a4 <smc_param_init>:
smc_param_init():
..\application\smc.c:29



void smc_param_init(void)
{
	smc1.Valpha = 0;
    50a4:	19 44       	LD        R4, [PC + #25]        ;->0x5108  :=0x1000402c
    50a6:	50 10       	MOV       R5, #0
    50a8:	45 84       	ST.H      [R4], R5
..\application\smc.c:30
	smc1.Ealpha = 0;
    50aa:	18 44       	LD        R4, [PC + #24]        ;->0x5108  :=0x1000402c
    50ac:	50 10       	MOV       R5, #0
    50ae:	65 b0       	ST.H      [R4 + #1], R5
..\application\smc.c:31
	smc1.EalphaFinal = 0;
    50b0:	16 44       	LD        R4, [PC + #22]        ;->0x5108  :=0x1000402c
    50b2:	50 10       	MOV       R5, #0
    50b4:	a5 b0       	ST.H      [R4 + #2], R5
..\application\smc.c:32
	smc1.Zalpha = 0;
    50b6:	15 44       	LD        R4, [PC + #21]        ;->0x5108  :=0x1000402c
    50b8:	50 10       	MOV       R5, #0
    50ba:	e5 b0       	ST.H      [R4 + #3], R5
..\application\smc.c:33
	smc1.EstIalpha = 0;
    50bc:	13 44       	LD        R4, [PC + #19]        ;->0x5108  :=0x1000402c
    50be:	50 10       	MOV       R5, #0
    50c0:	65 b1       	ST.H      [R4 + #5], R5
..\application\smc.c:34
	smc1.Vbeta = 0;
    50c2:	12 44       	LD        R4, [PC + #18]        ;->0x5108  :=0x1000402c
    50c4:	50 10       	MOV       R5, #0
    50c6:	e5 b1       	ST.H      [R4 + #7], R5
..\application\smc.c:35
	smc1.Ebeta = 0;
    50c8:	10 44       	LD        R4, [PC + #16]        ;->0x5108  :=0x1000402c
    50ca:	50 10       	MOV       R5, #0
    50cc:	25 b2       	ST.H      [R4 + #8], R5
..\application\smc.c:36
	smc1.EbetaFinal = 0;
    50ce:	0f 44       	LD        R4, [PC + #15]        ;->0x5108  :=0x1000402c
    50d0:	50 10       	MOV       R5, #0
    50d2:	65 b2       	ST.H      [R4 + #9], R5
..\application\smc.c:37
	smc1.Zbeta = 0;
    50d4:	0d 44       	LD        R4, [PC + #13]        ;->0x5108  :=0x1000402c
    50d6:	50 10       	MOV       R5, #0
    50d8:	a5 b2       	ST.H      [R4 + #10], R5
..\application\smc.c:38
	smc1.EstIbeta = 0;
    50da:	0c 44       	LD        R4, [PC + #12]        ;->0x5108  :=0x1000402c
    50dc:	50 10       	MOV       R5, #0
    50de:	e5 b2       	ST.H      [R4 + #11], R5
..\application\smc.c:39
	smc1.Ialpha = 0;
    50e0:	0a 44       	LD        R4, [PC + #10]        ;->0x5108  :=0x1000402c
    50e2:	50 10       	MOV       R5, #0
    50e4:	25 b3       	ST.H      [R4 + #12], R5
..\application\smc.c:40
	smc1.IalphaError = 0;
    50e6:	09 44       	LD        R4, [PC + #9]         ;->0x5108  :=0x1000402c
    50e8:	50 10       	MOV       R5, #0
    50ea:	65 b3       	ST.H      [R4 + #13], R5
..\application\smc.c:41
	smc1.Ibeta = 0;
    50ec:	07 44       	LD        R4, [PC + #7]         ;->0x5108  :=0x1000402c
    50ee:	50 10       	MOV       R5, #0
    50f0:	25 b4       	ST.H      [R4 + #16], R5
..\application\smc.c:42
	smc1.IbetaError = 0;
    50f2:	06 44       	LD        R4, [PC + #6]         ;->0x5108  :=0x1000402c
    50f4:	50 10       	MOV       R5, #0
    50f6:	65 b4       	ST.H      [R4 + #17], R5
..\application\smc.c:43
	smc1.Theta = 0;
    50f8:	04 44       	LD        R4, [PC + #4]         ;->0x5108  :=0x1000402c
    50fa:	50 10       	MOV       R5, #0
    50fc:	a5 b5       	ST.H      [R4 + #22], R5
..\application\smc.c:44
	smc1.Omega = 0;
    50fe:	03 44       	LD        R4, [PC + #3]         ;->0x5108  :=0x1000402c
    5100:	50 10       	MOV       R5, #0
    5102:	e5 b5       	ST.H      [R4 + #23], R5
..\application\smc.c:45
}
    5104:	1d 5c       	JMP       LR
    5106:	00 00       	NOP      NOP      
    5108:	2c 40 00 10 	.long     0x1000402c ->268451884  [!!!@2@:LD        R0, [PC + #44]        ;->0x51b8  :=0x45095d2d	@@: MOV       R0, #0

0000510c <speed_param_init>:
speed_param_init():
..\application\speed.c:14
void run_speed_process(void);


void speed_param_init(void)
{
    speed_data.speed_give = 0;
    510c:	25 44       	LD        R4, [PC + #37]        ;->0x51a0  :=0x10004060
    510e:	50 10       	MOV       R5, #0
    5110:	45 85       	ST.W      [R4], R5
..\application\speed.c:15
    speed_data.speed_base = USER_SPEED_BASE;
    5112:	24 45       	LD        R5, [PC + #36]        ;->0x51a0  :=0x10004060
    5114:	24 44       	LD        R4, [PC + #36]        ;->0x51a4  :=0x1770
    5116:	ac a0       	ST.W      [R5 + #2], R4
..\application\speed.c:16
    speed_data.speed_acc_time = USER_SPEED_ACC_TIME;
    5118:	22 45       	LD        R5, [PC + #34]        ;->0x51a0  :=0x10004060
    511a:	49 10       	MOV       R4, #9
    511c:	ec a2       	ST.W      [R5 + #11], R4
..\application\speed.c:17
    speed_data.speed_omega_coef = 1118481*USER_MOTOR_POLE_PAIRS/SPEEDLOOPFREQ;  //*1024
    511e:	21 45       	LD        R5, [PC + #33]        ;->0x51a0  :=0x10004060
    5120:	22 44       	LD        R4, [PC + #34]        ;->0x51a8  :=0x8bc
    5122:	2c a3       	ST.W      [R5 + #12], R4
..\application\speed.c:18
    speed_data.omega_base = (speed_data.speed_base*speed_data.speed_omega_coef)>>10;
    5124:	1f 45       	LD        R5, [PC + #31]        ;->0x51a0  :=0x10004060
    5126:	a5 98       	LD.W      R4, [R5 + #2]
    5128:	1e 45       	LD        R5, [PC + #30]        ;->0x51a0  :=0x10004060
    512a:	2d 9b       	LD.W      R5, [R5 + #12]
    512c:	6c cb       	MULS      R5, R4, R5
    512e:	00 00       	NOP      NOP      
    5130:	3a 10       	MOV       R3, #10
    5132:	e5 de       	ASR       R4, R5, R3
    5134:	1b 45       	LD        R5, [PC + #27]        ;->0x51a0  :=0x10004060
    5136:	ac a1       	ST.W      [R5 + #6], R4
..\application\speed.c:19
    speed_data.omega_q15_coef = 33554432/speed_data.omega_base;  //*1024
    5138:	1a 45       	LD        R5, [PC + #26]        ;->0x51a0  :=0x10004060
    513a:	a5 99       	LD.W      R4, [R5 + #6]
    513c:	51 10       	MOV       R5, #1
    513e:	a9 7b       	LSL       R5, #25
    5140:	25 cf       	DIVS      R4, R5, R4
    5142:	00 00       	NOP      NOP      
    5144:	17 45       	LD        R5, [PC + #23]        ;->0x51a0  :=0x10004060
    5146:	ec a1       	ST.W      [R5 + #7], R4
..\application\speed.c:20
    speed_data.speed_omega_q15_coef = (speed_data.speed_omega_coef*speed_data.omega_q15_coef)>>10;  //*1024
    5148:	16 45       	LD        R5, [PC + #22]        ;->0x51a0  :=0x10004060
    514a:	25 9b       	LD.W      R4, [R5 + #12]
    514c:	15 45       	LD        R5, [PC + #21]        ;->0x51a0  :=0x10004060
    514e:	ed 99       	LD.W      R5, [R5 + #7]
    5150:	6c cb       	MULS      R5, R4, R5
    5152:	00 00       	NOP      NOP      
    5154:	3a 10       	MOV       R3, #10
    5156:	e5 de       	ASR       R4, R5, R3
    5158:	12 45       	LD        R5, [PC + #18]        ;->0x51a0  :=0x10004060
    515a:	6c a3       	ST.W      [R5 + #13], R4
..\application\speed.c:21
    speed_data.omega_min_pu = (USER_SPEED_MIN*speed_data.speed_omega_q15_coef)>>10;  //Q15
    515c:	11 45       	LD        R5, [PC + #17]        ;->0x51a0  :=0x10004060
    515e:	65 9b       	LD.W      R4, [R5 + #13]
    5160:	13 45       	LD        R5, [PC + #19]        ;->0x51ac  :=0x3e8
    5162:	6c cb       	MULS      R5, R4, R5
    5164:	00 00       	NOP      NOP      
    5166:	3a 10       	MOV       R3, #10
    5168:	e5 de       	ASR       R4, R5, R3
    516a:	0e 45       	LD        R5, [PC + #14]        ;->0x51a0  :=0x10004060
    516c:	6c a2       	ST.W      [R5 + #9], R4
..\application\speed.c:22
    speed_data.omega_max_pu = (USER_SPEED_MAX*speed_data.speed_omega_q15_coef)>>10;  //Q15
    516e:	0d 45       	LD        R5, [PC + #13]        ;->0x51a0  :=0x10004060
    5170:	65 9b       	LD.W      R4, [R5 + #13]
    5172:	10 45       	LD        R5, [PC + #16]        ;->0x51b0  :=0xfa0
    5174:	6c cb       	MULS      R5, R4, R5
    5176:	00 00       	NOP      NOP      
    5178:	3a 10       	MOV       R3, #10
    517a:	e5 de       	ASR       R4, R5, R3
    517c:	09 45       	LD        R5, [PC + #9]         ;->0x51a0  :=0x10004060
    517e:	ac a2       	ST.W      [R5 + #10], R4
..\application\speed.c:23
    speed_data.omega_acc_pu = speed_data.omega_max_pu/USER_SPEED_ACC_TIME/1000; //Q15
    5180:	08 45       	LD        R5, [PC + #8]         ;->0x51a0  :=0x10004060
    5182:	a5 9a       	LD.W      R4, [R5 + #10]
    5184:	0c 45       	LD        R5, [PC + #12]        ;->0x51b4  :=0x2328
    5186:	64 cf       	DIVS      R4, R4, R5
    5188:	00 00       	NOP      NOP      
    518a:	06 45       	LD        R5, [PC + #6]         ;->0x51a0  :=0x10004060
    518c:	2c a2       	ST.W      [R5 + #8], R4
..\application\speed.c:24
    if(speed_data.omega_acc_pu<1)
    518e:	05 45       	LD        R5, [PC + #5]         ;->0x51a0  :=0x10004060
    5190:	2d 9a       	LD.W      R5, [R5 + #8]
    5192:	50 38       	CMP       R5, #0
    5194:	04 fc       	JGT       $+4                   ;->0x519c
..\application\speed.c:26
    {
    	speed_data.omega_acc_pu = 1;
    5196:	03 45       	LD        R5, [PC + #3]         ;->0x51a0  :=0x10004060
    5198:	41 10       	MOV       R4, #1
    519a:	2c a2       	ST.W      [R5 + #8], R4
..\application\speed.c:28
    }
}
    519c:	1d 5c       	JMP       LR
    519e:	00 00       	NOP      NOP      
    51a0:	60 40 00 10 	.long     0x10004060 ->268451936  [!!!@2@:LD        R0, [PC + #96]        ;->0x5320  :=0xd0558155	@@: MOV       R0, #0
    51a4:	70 17 00 00 	.long     0x00001770 ->000006000  [!!!@2@:MOV       R7, #112	@@: NOP      
    51a8:	bc 08 00 00 	.long     0x000008bc ->000002236  [!!!@2@:LD.W      R0, [SP + #188]	@@: NOP      
    51ac:	e8 03 00 00 	.long     0x000003e8 ->000001000  [!!!@4@:JMP       $-1572864             ;->0xffd051ac
    51b0:	a0 0f 00 00 	.long     0x00000fa0 ->000004000  [!!!@2@:LD.W      R7, [SP + #160]	@@: NOP      
    51b4:	28 23 00 00 	.long     0x00002328 ->000009000  [!!!@2@:ST.W      [SP + #40], R3	@@: NOP      

000051b8 <speed_state_machine>:
speed_state_machine():
..\application\speed.c:32


void speed_state_machine(void)
{
    51b8:	2d 5d       	PUSH      LR
..\application\speed.c:33
    switch(sys_control.speed_mode)
    51ba:	09 45       	LD        R5, [PC + #9]         ;->0x51dc  :=0x10003f64
    51bc:	ad 98       	LD.W      R5, [R5 + #2]
    51be:	50 38       	CMP       R5, #0
    51c0:	04 f0       	JZ        $+4                   ;->0x51c8
    51c2:	51 38       	CMP       R5, #1
    51c4:	05 f0       	JZ        $+5                   ;->0x51ce
    51c6:	07 04       	SJMP      $+7                   ;->0x51d4
..\application\speed.c:35
    {
    case SPEED_STATE_INIT:  run_speed_init_process();  break;
    51c8:	06 45       	LD        R5, [PC + #6]         ;->0x51e0  :=0x51e8
    51ca:	05 5c       	LJMP      R5
    51cc:	05 04       	SJMP      $+5                   ;->0x51d6
..\application\speed.c:36
    case SPEED_STATE_RUN:   run_speed_process();       break;
    51ce:	06 45       	LD        R5, [PC + #6]         ;->0x51e4  :=0x100001ec
    51d0:	05 5c       	LJMP      R5
    51d2:	02 04       	SJMP      $+2                   ;->0x51d6
..\application\speed.c:37
    default: break;
    51d4:	00 00       	NOP      NOP      
..\application\speed.c:39
    }
}
    51d6:	0d 5d       	POP       LR
    51d8:	1d 5c       	JMP       LR
    51da:	00 00       	NOP      NOP      
    51dc:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0
    51e0:	e8 51 00 00 	.long     0x000051e8 ->000020968  [!!!@2@:JB        [LR], #24	@@: NOP      
    51e4:	ec 01 00 10 	.long     0x100001ec ->268435948  [!!!@2@:CMN       SP, R12	@@: MOV       R0, #0

000051e8 <run_speed_init_process>:
run_speed_init_process():
..\application\speed.c:42

void run_speed_init_process(void)
{
    51e8:	2d 5d       	PUSH      LR
..\application\speed.c:43
	if(control_param.motor_direction==USER_MOTOR_RUN_CW)
    51ea:	18 45       	LD        R5, [PC + #24]        ;->0x5248  :=0x10003f70
    51ec:	50 2a       	ADD       R5, #32
    51ee:	55 80       	LD.B      R5, [R5]
    51f0:	55 d1       	ZXT.B     R5, R5
    51f2:	50 38       	CMP       R5, #0
    51f4:	08 f1       	JNZ       $+8                   ;->0x5204
..\application\speed.c:45
	{
	    speed_data.speed_give = Q15abs(USER_SET_SPEED);
    51f6:	16 40       	LD        R0, [PC + #22]        ;->0x524c  :=0x7d0
    51f8:	16 45       	LD        R5, [PC + #22]        ;->0x5250  :=0x100005c4
    51fa:	05 5c       	LJMP      R5
    51fc:	a0 58       	MOV       R5, R0
    51fe:	16 44       	LD        R4, [PC + #22]        ;->0x5254  :=0x10004060
    5200:	45 85       	ST.W      [R4], R5
    5202:	09 04       	SJMP      $+9                   ;->0x5214
..\application\speed.c:49
	}
	else
	{
		speed_data.speed_give = -Q15abs(USER_SET_SPEED);
    5204:	12 40       	LD        R0, [PC + #18]        ;->0x524c  :=0x7d0
    5206:	13 45       	LD        R5, [PC + #19]        ;->0x5250  :=0x100005c4
    5208:	05 5c       	LJMP      R5
    520a:	a0 58       	MOV       R5, R0
    520c:	40 10       	MOV       R4, #0
    520e:	64 c7       	SUB       R4, R4, R5
    5210:	11 45       	LD        R5, [PC + #17]        ;->0x5254  :=0x10004060
    5212:	54 85       	ST.W      [R5], R4
..\application\speed.c:51
	}
	speed_data.omega_give_pu = (smc1.Omega*speed_data.omega_q15_coef)>>10;
    5214:	11 45       	LD        R5, [PC + #17]        ;->0x5258  :=0x1000402c
    5216:	ed ad       	LD.H      R5, [R5 + #23]
    5218:	55 d0       	ZXT.H     R5, R5
    521a:	55 61       	SXT.H     R5, R5
    521c:	0e 44       	LD        R4, [PC + #14]        ;->0x5254  :=0x10004060
    521e:	e4 99       	LD.W      R4, [R4 + #7]
    5220:	2d cb       	MULS      R5, R5, R4
    5222:	00 00       	NOP      NOP      
    5224:	3a 10       	MOV       R3, #10
    5226:	e5 de       	ASR       R4, R5, R3
    5228:	0b 45       	LD        R5, [PC + #11]        ;->0x5254  :=0x10004060
    522a:	2c a1       	ST.W      [R5 + #4], R4
..\application\speed.c:52
	PIParmW.qdSum = (int32_t)ParkParm.qVqRef<<15;
    522c:	0c 45       	LD        R5, [PC + #12]        ;->0x525c  :=0x10003fb2
    522e:	6d ac       	LD.H      R5, [R5 + #17]
    5230:	55 d0       	ZXT.H     R5, R5
    5232:	55 61       	SXT.H     R5, R5
    5234:	3f 10       	MOV       R3, #15
    5236:	e5 da       	LSL       R4, R5, R3
    5238:	0a 45       	LD        R5, [PC + #10]        ;->0x5260  :=0x10004010
    523a:	6c a1       	ST.W      [R5 + #5], R4
..\application\speed.c:53
	sys_control.speed_mode = SPEED_STATE_RUN;
    523c:	0a 45       	LD        R5, [PC + #10]        ;->0x5264  :=0x10003f64
    523e:	41 10       	MOV       R4, #1
    5240:	ac a0       	ST.W      [R5 + #2], R4
..\application\speed.c:54
}
    5242:	0d 5d       	POP       LR
    5244:	1d 5c       	JMP       LR
    5246:	00 00       	NOP      NOP      
    5248:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
    524c:	d0 07 00 00 	.long     0x000007d0 ->000002000  [!!!@2@:SJMP      $-48                  ;->0x51ec	@@: NOP      
    5250:	c4 05 00 10 	.long     0x100005c4 ->268436932  [!!!@2@:SJMP      $+452                 ;->0x55d8	@@: MOV       R0, #0
    5254:	60 40 00 10 	.long     0x10004060 ->268451936  [!!!@2@:LD        R0, [PC + #96]        ;->0x53d4  :=0x440fb1a5	@@: MOV       R0, #0
    5258:	2c 40 00 10 	.long     0x1000402c ->268451884  [!!!@2@:LD        R0, [PC + #44]        ;->0x5308  :=0x5648	@@: MOV       R0, #0
    525c:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
    5260:	10 40 00 10 	.long     0x10004010 ->268451856  [!!!@2@:LD        R0, [PC + #16]        ;->0x52a0  :=0x52cc	@@: MOV       R0, #0
    5264:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0

00005268 <state_machine>:
state_machine():
..\application\state_machine.c:20

int16_t run_mode;

//execute in main loop 1ms task
void state_machine(void)
{
    5268:	2d 5d       	PUSH      LR
..\application\state_machine.c:21
	switch(sys_control.state_mode)
    526a:	05 45       	LD        R5, [PC + #5]         ;->0x527c  :=0x10003f64
    526c:	6d 98       	LD.W      R5, [R5 + #1]
    526e:	58 38       	CMP       R5, #8
    5270:	34 f8       	JHI       $+52                  ;->0x52d8
    5272:	2a 7a       	LSL       R5, #2
    5274:	03 44       	LD        R4, [PC + #3]         ;->0x5280  :=0x5284
    5276:	2d c3       	ADD       R5, R5, R4
    5278:	55 82       	LD.W      R5, [R5]
    527a:	15 5c       	JMP       R5
    527c:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0
    5280:	84 52 00 00 	.long     0x00005284 ->000021124  [!!!@2@:JNB       [R0], #12	@@: NOP      

00005284 <.text$state_machine$sdata_local_1>:
    5284:	a8 52 00 00 ae 52 00 00 b4 52 00 00 d8 52 00 00     .R...R...R...R..
    5294:	ba 52 00 00 c0 52 00 00 c6 52 00 00 cc 52 00 00     .R...R...R...R..
    52a4:	d2 52 00 00                                         .R..

000052a8 <.text$state_machine$scode_loacal_3>:
..\application\state_machine.c:23
	{
	case STATE_IDLE:                     run_idle_process();            break;
    52a8:	12 45       	LD        R5, [PC + #18]        ;->0x52f0  :=0x5360
    52aa:	05 5c       	LJMP      R5
    52ac:	19 04       	SJMP      $+25                  ;->0x52de
..\application\state_machine.c:24
	case STATE_PARAM_SET:                run_param_set_process();       break;
    52ae:	12 45       	LD        R5, [PC + #18]        ;->0x52f4  :=0x537c
    52b0:	05 5c       	LJMP      R5
    52b2:	16 04       	SJMP      $+22                  ;->0x52de
..\application\state_machine.c:25
	case STATE_RUN_PWM_TEST:             run_pwm_test_process();        break;
    52b4:	11 45       	LD        R5, [PC + #17]        ;->0x52f8  :=0x5430
    52b6:	05 5c       	LJMP      R5
    52b8:	13 04       	SJMP      $+19                  ;->0x52de
..\application\state_machine.c:26
	case STATE_RUN_OPEN_DEBUG:           run_open_debug_process();      break;
    52ba:	11 45       	LD        R5, [PC + #17]        ;->0x52fc  :=0x5440
    52bc:	05 5c       	LJMP      R5
    52be:	10 04       	SJMP      $+16                  ;->0x52de
..\application\state_machine.c:27
	case STATE_RUN_OPEN_LOOP:            run_open_loop_process();       break;
    52c0:	10 45       	LD        R5, [PC + #16]        ;->0x5300  :=0x54d0
    52c2:	05 5c       	LJMP      R5
    52c4:	0d 04       	SJMP      $+13                  ;->0x52de
..\application\state_machine.c:28
	case STATE_RUN_CURRENT_LOOP:         run_current_loop_process();    break;
    52c6:	10 45       	LD        R5, [PC + #16]        ;->0x5304  :=0x557c
    52c8:	05 5c       	LJMP      R5
    52ca:	0a 04       	SJMP      $+10                  ;->0x52de
..\application\state_machine.c:29
	case STATE_RUN_SPEED_LOOP:           run_speed_loop_process();      break;
    52cc:	0f 45       	LD        R5, [PC + #15]        ;->0x5308  :=0x5648
    52ce:	05 5c       	LJMP      R5
    52d0:	07 04       	SJMP      $+7                   ;->0x52de
..\application\state_machine.c:30
	case STATE_FAULT:                    run_fault_process();           break;
    52d2:	0f 45       	LD        R5, [PC + #15]        ;->0x530c  :=0x5658
    52d4:	05 5c       	LJMP      R5
    52d6:	04 04       	SJMP      $+4                   ;->0x52de
..\application\state_machine.c:31
	default: sys_control.state_mode = STATE_IDLE;
    52d8:	0e 45       	LD        R5, [PC + #14]        ;->0x5310  :=0x10003f64
    52da:	40 10       	MOV       R4, #0
    52dc:	6c a0       	ST.W      [R5 + #1], R4
..\application\state_machine.c:33
	}
	state_machine_transition();
    52de:	0e 45       	LD        R5, [PC + #14]        ;->0x5314  :=0x531c
    52e0:	05 5c       	LJMP      R5
..\application\state_machine.c:34
	run_mode = (int16_t)sys_control.state_mode;
    52e2:	0c 45       	LD        R5, [PC + #12]        ;->0x5310  :=0x10003f64
    52e4:	6d 98       	LD.W      R5, [R5 + #1]
    52e6:	55 d0       	ZXT.H     R5, R5
    52e8:	0c 44       	LD        R4, [PC + #12]        ;->0x5318  :=0x10004098
    52ea:	45 84       	ST.H      [R4], R5
..\application\state_machine.c:35
}
    52ec:	0d 5d       	POP       LR
    52ee:	1d 5c       	JMP       LR
    52f0:	60 53 00 00 	.long     0x00005360 ->000021344  [!!!@2@:JNB       [R12], #16	@@: NOP      
    52f4:	7c 53 00 00 	.long     0x0000537c ->000021372  [!!!@2@:JNB       [PC], #20	@@: NOP      
    52f8:	30 54 00 00 	.long     0x00005430 ->000021552  [!!!@2@:JB        R6, #0	@@: NOP      
    52fc:	40 54 00 00 	.long     0x00005440 ->000021568  [!!!@2@:JB        R8, #0	@@: NOP      
    5300:	d0 54 00 00 	.long     0x000054d0 ->000021712  [!!!@2@:JB        R10, #8	@@: NOP      
    5304:	7c 55 00 00 	.long     0x0000557c ->000021884  [!!!@2@:JB        PC, #20	@@: NOP      
    5308:	48 56 00 00 	.long     0x00005648 ->000022088  [!!!@2@:JNB       R9, #0	@@: NOP      
    530c:	58 56 00 00 	.long     0x00005658 ->000022104  [!!!@2@:JNB       R11, #0	@@: NOP      
    5310:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0
    5314:	1c 53 00 00 	.long     0x0000531c ->000021276  [!!!@2@:JNB       [R3], #20	@@: NOP      
    5318:	98 40 00 10 	.long     0x10004098 ->268451992  [!!!@2@:LD        R0, [PC + #152]       ;->0x5578  :=0x10003f64	@@: MOV       R0, #0

0000531c <state_machine_transition>:
state_machine_transition():
..\application\state_machine.c:38

void state_machine_transition(void)
{
    531c:	2d 5d       	PUSH      LR
..\application\state_machine.c:40
	//error or system disable condition
    if(error_state.error_code!=0)
    531e:	0e 45       	LD        R5, [PC + #14]        ;->0x5354  :=0x10001c20
    5320:	55 81       	LD.H      R5, [R5]
    5322:	55 d0       	ZXT.H     R5, R5
    5324:	50 38       	CMP       R5, #0
    5326:	0a f0       	JZ        $+10                  ;->0x533a
..\application\state_machine.c:42
    {
    	pwm_disable();
    5328:	0c 45       	LD        R5, [PC + #12]        ;->0x5358  :=0x45cc
    532a:	05 5c       	LJMP      R5
..\application\state_machine.c:43
    	sys_control.sys_enable_flag = FALSE;
    532c:	0c 44       	LD        R4, [PC + #12]        ;->0x535c  :=0x10003f64
    532e:	50 10       	MOV       R5, #0
    5330:	45 83       	ST.B      [R4], R5
..\application\state_machine.c:44
    	sys_control.state_mode = STATE_FAULT;
    5332:	0b 45       	LD        R5, [PC + #11]        ;->0x535c  :=0x10003f64
    5334:	48 10       	MOV       R4, #8
    5336:	6c a0       	ST.W      [R5 + #1], R4
    5338:	0b 04       	SJMP      $+11                  ;->0x534e
..\application\state_machine.c:46
    }
    else if(sys_control.sys_enable_flag==FALSE)
    533a:	09 45       	LD        R5, [PC + #9]         ;->0x535c  :=0x10003f64
    533c:	55 80       	LD.B      R5, [R5]
    533e:	55 d1       	ZXT.B     R5, R5
    5340:	50 38       	CMP       R5, #0
    5342:	06 f1       	JNZ       $+6                   ;->0x534e
..\application\state_machine.c:48
    {
    	pwm_disable();
    5344:	05 45       	LD        R5, [PC + #5]         ;->0x5358  :=0x45cc
    5346:	05 5c       	LJMP      R5
..\application\state_machine.c:49
    	sys_control.state_mode = STATE_IDLE;
    5348:	05 45       	LD        R5, [PC + #5]         ;->0x535c  :=0x10003f64
    534a:	40 10       	MOV       R4, #0
    534c:	6c a0       	ST.W      [R5 + #1], R4
..\application\state_machine.c:51
    }
}
    534e:	0d 5d       	POP       LR
    5350:	1d 5c       	JMP       LR
    5352:	00 00       	NOP      NOP      
    5354:	20 1c 00 10 	.long     0x10001c20 ->268442656  [!!!@2@:MOV       R2, #192	@@: MOV       R0, #0
    5358:	cc 45 00 00 	.long     0x000045cc ->000017868  [!!!@2@:LD        R5, [PC + #204]       ;->0x5688  :=0x4513b065	@@: NOP      
    535c:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0

00005360 <run_idle_process>:
run_idle_process():
..\application\state_machine.c:55

void run_idle_process(void)
{
	if(sys_control.sys_enable_flag==TRUE)
    5360:	06 45       	LD        R5, [PC + #6]         ;->0x5378  :=0x10003f64
    5362:	55 80       	LD.B      R5, [R5]
    5364:	55 d1       	ZXT.B     R5, R5
    5366:	51 38       	CMP       R5, #1
    5368:	07 f1       	JNZ       $+7                   ;->0x5376
..\application\state_machine.c:57
	{
		sys_control.state_change_flag = 1;
    536a:	04 44       	LD        R4, [PC + #4]         ;->0x5378  :=0x10003f64
    536c:	51 10       	MOV       R5, #1
    536e:	65 90       	ST.B      [R4 + #1], R5
..\application\state_machine.c:65
			pwm_enable();
			sys_control.state_mode = STATE_RUN_PWM_TEST;
		}
		else
		{
			sys_control.state_mode = STATE_PARAM_SET;
    5370:	02 45       	LD        R5, [PC + #2]         ;->0x5378  :=0x10003f64
    5372:	41 10       	MOV       R4, #1
    5374:	6c a0       	ST.W      [R5 + #1], R4
..\application\state_machine.c:68
		}
	}
}
    5376:	1d 5c       	JMP       LR
    5378:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0

0000537c <run_param_set_process>:
run_param_set_process():
..\application\state_machine.c:71

void run_param_set_process(void)
{
    537c:	2d 5d       	PUSH      LR
..\application\state_machine.c:72
	InitPI(&PIParmD);
    537e:	21 40       	LD        R0, [PC + #33]        ;->0x5400  :=0x10003fd8
    5380:	21 45       	LD        R5, [PC + #33]        ;->0x5404  :=0x5054
    5382:	05 5c       	LJMP      R5
..\application\state_machine.c:73
	InitPI(&PIParmQ);
    5384:	21 40       	LD        R0, [PC + #33]        ;->0x5408  :=0x10003ff4
    5386:	20 45       	LD        R5, [PC + #32]        ;->0x5404  :=0x5054
    5388:	05 5c       	LJMP      R5
..\application\state_machine.c:74
	smc_param_init();
    538a:	21 45       	LD        R5, [PC + #33]        ;->0x540c  :=0x50a4
    538c:	05 5c       	LJMP      R5
..\application\state_machine.c:75
	control_param.current_loop_count = 0;
    538e:	21 44       	LD        R4, [PC + #33]        ;->0x5410  :=0x10003f70
    5390:	50 10       	MOV       R5, #0
    5392:	e5 b5       	ST.H      [R4 + #23], R5
..\application\state_machine.c:76
	control_param.current_loop_time = 50;
    5394:	1f 44       	LD        R4, [PC + #31]        ;->0x5410  :=0x10003f70
    5396:	52 13       	MOV       R5, #50
    5398:	25 b6       	ST.H      [R4 + #24], R5
..\application\state_machine.c:77
	control_param.startup_lock = 0;
    539a:	1e 44       	LD        R4, [PC + #30]        ;->0x5410  :=0x10003f70
    539c:	50 10       	MOV       R5, #0
    539e:	a5 b2       	ST.H      [R4 + #10], R5
..\application\state_machine.c:78
	control_param.startup_ramp = 0;
    53a0:	1c 45       	LD        R5, [PC + #28]        ;->0x5410  :=0x10003f70
    53a2:	40 10       	MOV       R4, #0
    53a4:	ac a1       	ST.W      [R5 + #6], R4
..\application\state_machine.c:79
    control_param.current_step = 0;
    53a6:	1b 44       	LD        R4, [PC + #27]        ;->0x5410  :=0x10003f70
    53a8:	50 10       	MOV       R5, #0
    53aa:	25 b2       	ST.H      [R4 + #8], R5
..\application\state_machine.c:80
    ParkParm.qAngle = 0;
    53ac:	1a 44       	LD        R4, [PC + #26]        ;->0x5414  :=0x10003fb2
    53ae:	50 10       	MOV       R5, #0
    53b0:	45 84       	ST.H      [R4], R5
..\application\state_machine.c:81
	sys_control.state_change_flag = 1;
    53b2:	1a 44       	LD        R4, [PC + #26]        ;->0x5418  :=0x10003f64
    53b4:	51 10       	MOV       R5, #1
    53b6:	65 90       	ST.B      [R4 + #1], R5
..\application\state_machine.c:99
		pwm_enable();
		sys_control.state_mode = STATE_RUN_OPEN_DEBUG;
	}
	else
	{
		ParkParm.qVdRef = 0;
    53b8:	17 44       	LD        R4, [PC + #23]        ;->0x5414  :=0x10003fb2
    53ba:	50 10       	MOV       R5, #0
    53bc:	25 b4       	ST.H      [R4 + #16], R5
..\application\state_machine.c:100
		ParkParm.qVqRef = 0;
    53be:	16 44       	LD        R4, [PC + #22]        ;->0x5414  :=0x10003fb2
    53c0:	50 10       	MOV       R5, #0
    53c2:	65 b4       	ST.H      [R4 + #17], R5
..\application\state_machine.c:101
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
    53c4:	13 45       	LD        R5, [PC + #19]        ;->0x5410  :=0x10003f70
    53c6:	50 2a       	ADD       R5, #32
    53c8:	55 80       	LD.B      R5, [R5]
    53ca:	55 d1       	ZXT.B     R5, R5
    53cc:	50 38       	CMP       R5, #0
    53ce:	08 f1       	JNZ       $+8                   ;->0x53de
..\application\state_machine.c:103
		{
		    control_param.start_current_ref = REFINAMPS(USER_INIT_TORQUE);
    53d0:	10 44       	LD        R4, [PC + #16]        ;->0x5410  :=0x10003f70
    53d2:	13 45       	LD        R5, [PC + #19]        ;->0x541c  :=0x2210
    53d4:	a5 b1       	ST.H      [R4 + #6], R5
..\application\state_machine.c:104
		    control_param.current_ref = REFINAMPS(USER_SET_TORQUE);
    53d6:	0f 44       	LD        R4, [PC + #15]        ;->0x5410  :=0x10003f70
    53d8:	12 45       	LD        R5, [PC + #18]        ;->0x5420  :=0x1108
    53da:	e5 b1       	ST.H      [R4 + #7], R5
    53dc:	07 04       	SJMP      $+7                   ;->0x53ea
..\application\state_machine.c:108
		}
		else
		{
			control_param.start_current_ref = -REFINAMPS(USER_INIT_TORQUE);
    53de:	0d 44       	LD        R4, [PC + #13]        ;->0x5410  :=0x10003f70
    53e0:	11 45       	LD        R5, [PC + #17]        ;->0x5424  :=0xffffddf0
    53e2:	a5 b1       	ST.H      [R4 + #6], R5
..\application\state_machine.c:109
			control_param.current_ref = -REFINAMPS(USER_SET_TORQUE);
    53e4:	0b 44       	LD        R4, [PC + #11]        ;->0x5410  :=0x10003f70
    53e6:	11 45       	LD        R5, [PC + #17]        ;->0x5428  :=0xffffeef8
    53e8:	e5 b1       	ST.H      [R4 + #7], R5
..\application\state_machine.c:111
		}
		control_param.end_speed = control_param.start_speed;
    53ea:	0a 45       	LD        R5, [PC + #10]        ;->0x5410  :=0x10003f70
    53ec:	a5 98       	LD.W      R4, [R5 + #2]
    53ee:	09 45       	LD        R5, [PC + #9]         ;->0x5410  :=0x10003f70
    53f0:	ec a1       	ST.W      [R5 + #7], R4
..\application\state_machine.c:112
		pwm_enable();
    53f2:	0f 45       	LD        R5, [PC + #15]        ;->0x542c  :=0x4594
    53f4:	05 5c       	LJMP      R5
..\application\state_machine.c:113
	    sys_control.state_mode = STATE_RUN_OPEN_LOOP;
    53f6:	09 45       	LD        R5, [PC + #9]         ;->0x5418  :=0x10003f64
    53f8:	45 10       	MOV       R4, #5
    53fa:	6c a0       	ST.W      [R5 + #1], R4
..\application\state_machine.c:115
	}
}
    53fc:	0d 5d       	POP       LR
    53fe:	1d 5c       	JMP       LR
    5400:	d8 3f 00 10 	.long     0x10003fd8 ->268451800  [!!!@2@:CMP       LR, #120	@@: MOV       R0, #0
    5404:	54 50 00 00 	.long     0x00005054 ->000020564  [!!!@2@:JB        [R10], #4	@@: NOP      
    5408:	f4 3f 00 10 	.long     0x10003ff4 ->268451828  [!!!@2@:CMP       PC, #116	@@: MOV       R0, #0
    540c:	a4 50 00 00 	.long     0x000050a4 ->000020644  [!!!@2@:JB        [R4], #12	@@: NOP      
    5410:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
    5414:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
    5418:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0
    541c:	10 22 00 00 	.long     0x00002210 ->000008720  [!!!@2@:ST.W      [SP + #16], R2	@@: NOP      
    5420:	08 11 00 00 	.long     0x00001108 ->000004360  [!!!@2@:MOV       R0, #24	@@: NOP      
    5424:	f0 dd ff ff 	.long     0xffffddf0 ->-00008720 
    5428:	f8 ee ff ff 	.long     0xffffeef8 ->-00004360 
    542c:	94 45 00 00 	.long     0x00004594 ->000017812  [!!!@2@:LD        R5, [PC + #148]       ;->0x567c  :=0xd055a86d	@@: NOP      

00005430 <run_pwm_test_process>:
run_pwm_test_process():
..\application\state_machine.c:118

void run_pwm_test_process(void)
{
    5430:	2d 5d       	PUSH      LR
..\application\state_machine.c:119
    set_pwm_duty(USER_PWM_SET_DUTY);
    5432:	0a 10       	MOV       R0, #10
    5434:	02 45       	LD        R5, [PC + #2]         ;->0x543c  :=0x45ec
    5436:	05 5c       	LJMP      R5
..\application\state_machine.c:120
}
    5438:	0d 5d       	POP       LR
    543a:	1d 5c       	JMP       LR
    543c:	ec 45 00 00 	.long     0x000045ec ->000017900  [!!!@2@:LD        R5, [PC + #236]       ;->0x57ec  :=0x10000000	@@: NOP      

00005440 <run_open_debug_process>:
run_open_debug_process():
..\application\state_machine.c:123

void run_open_debug_process(void)
{
    5440:	2d 5d       	PUSH      LR
..\application\state_machine.c:124
	if(ParkParm.qVq<ParkParm.qVqRef)
    5442:	22 45       	LD        R5, [PC + #34]        ;->0x54c8  :=0x10003fb2
    5444:	ad aa       	LD.H      R5, [R5 + #10]
    5446:	45 d0       	ZXT.H     R4, R5
    5448:	20 45       	LD        R5, [PC + #32]        ;->0x54c8  :=0x10003fb2
    544a:	6d ac       	LD.H      R5, [R5 + #17]
    544c:	55 d0       	ZXT.H     R5, R5
    544e:	44 61       	SXT.H     R4, R4
    5450:	55 61       	SXT.H     R5, R5
    5452:	45 70       	CMP       R4, R5
    5454:	1d fa       	JGE       $+29                  ;->0x548e
..\application\state_machine.c:126
	{
	    if(Q15abs(ParkParm.qVqRef-ParkParm.qVq)>=USER_CURRENT_ACC)
    5456:	1d 45       	LD        R5, [PC + #29]        ;->0x54c8  :=0x10003fb2
    5458:	6d ac       	LD.H      R5, [R5 + #17]
    545a:	55 d0       	ZXT.H     R5, R5
    545c:	45 d0       	ZXT.H     R4, R5
    545e:	1b 45       	LD        R5, [PC + #27]        ;->0x54c8  :=0x10003fb2
    5460:	ad aa       	LD.H      R5, [R5 + #10]
    5462:	55 d0       	ZXT.H     R5, R5
    5464:	55 d0       	ZXT.H     R5, R5
    5466:	6c c7       	SUB       R5, R4, R5
    5468:	55 d0       	ZXT.H     R5, R5
    546a:	55 d0       	ZXT.H     R5, R5
    546c:	55 61       	SXT.H     R5, R5
    546e:	05 58       	MOV       R0, R5
    5470:	17 45       	LD        R5, [PC + #23]        ;->0x54cc  :=0x100005c4
    5472:	05 5c       	LJMP      R5
    5474:	a0 58       	MOV       R5, R0
    5476:	59 38       	CMP       R5, #9
    5478:	26 f9       	JLS       $+38                  ;->0x54c4
..\application\state_machine.c:128
		{
		    ParkParm.qVq += USER_CURRENT_ACC;
    547a:	14 45       	LD        R5, [PC + #20]        ;->0x54c8  :=0x10003fb2
    547c:	ad aa       	LD.H      R5, [R5 + #10]
    547e:	55 d0       	ZXT.H     R5, R5
    5480:	55 d0       	ZXT.H     R5, R5
    5482:	5a 28       	ADD       R5, #10
    5484:	55 d0       	ZXT.H     R5, R5
    5486:	55 d0       	ZXT.H     R5, R5
    5488:	10 44       	LD        R4, [PC + #16]        ;->0x54c8  :=0x10003fb2
    548a:	a5 b2       	ST.H      [R4 + #10], R5
    548c:	1c 04       	SJMP      $+28                  ;->0x54c4
..\application\state_machine.c:133
		}
	}
	else
	{
		if(Q15abs(ParkParm.qVqRef-ParkParm.qVq)>=USER_CURRENT_ACC)
    548e:	0f 45       	LD        R5, [PC + #15]        ;->0x54c8  :=0x10003fb2
    5490:	6d ac       	LD.H      R5, [R5 + #17]
    5492:	55 d0       	ZXT.H     R5, R5
    5494:	45 d0       	ZXT.H     R4, R5
    5496:	0d 45       	LD        R5, [PC + #13]        ;->0x54c8  :=0x10003fb2
    5498:	ad aa       	LD.H      R5, [R5 + #10]
    549a:	55 d0       	ZXT.H     R5, R5
    549c:	55 d0       	ZXT.H     R5, R5
    549e:	6c c7       	SUB       R5, R4, R5
    54a0:	55 d0       	ZXT.H     R5, R5
    54a2:	55 d0       	ZXT.H     R5, R5
    54a4:	55 61       	SXT.H     R5, R5
    54a6:	05 58       	MOV       R0, R5
    54a8:	09 45       	LD        R5, [PC + #9]         ;->0x54cc  :=0x100005c4
    54aa:	05 5c       	LJMP      R5
    54ac:	a0 58       	MOV       R5, R0
    54ae:	59 38       	CMP       R5, #9
    54b0:	0a f9       	JLS       $+10                  ;->0x54c4
..\application\state_machine.c:135
		{
		    ParkParm.qVq -= USER_CURRENT_ACC;
    54b2:	06 45       	LD        R5, [PC + #6]         ;->0x54c8  :=0x10003fb2
    54b4:	ad aa       	LD.H      R5, [R5 + #10]
    54b6:	55 d0       	ZXT.H     R5, R5
    54b8:	55 d0       	ZXT.H     R5, R5
    54ba:	5a 30       	SUB       R5, #10
    54bc:	55 d0       	ZXT.H     R5, R5
    54be:	55 d0       	ZXT.H     R5, R5
    54c0:	02 44       	LD        R4, [PC + #2]         ;->0x54c8  :=0x10003fb2
    54c2:	a5 b2       	ST.H      [R4 + #10], R5
..\application\state_machine.c:138
		}
	}
}
    54c4:	0d 5d       	POP       LR
    54c6:	1d 5c       	JMP       LR
    54c8:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
    54cc:	c4 05 00 10 	.long     0x100005c4 ->268436932  [!!!@2@:SJMP      $+452                 ;->0x5854	@@: MOV       R0, #0

000054d0 <run_open_loop_process>:
run_open_loop_process():
..\application\state_machine.c:141

void run_open_loop_process(void)
{
    54d0:	2d 5d       	PUSH      LR
..\application\state_machine.c:142
	if(ParkParm.qVqRef<control_param.start_current_ref)
    54d2:	27 45       	LD        R5, [PC + #39]        ;->0x556c  :=0x10003fb2
    54d4:	6d ac       	LD.H      R5, [R5 + #17]
    54d6:	45 d0       	ZXT.H     R4, R5
    54d8:	26 45       	LD        R5, [PC + #38]        ;->0x5570  :=0x10003f70
    54da:	ad a9       	LD.H      R5, [R5 + #6]
    54dc:	55 d0       	ZXT.H     R5, R5
    54de:	44 61       	SXT.H     R4, R4
    54e0:	55 61       	SXT.H     R5, R5
    54e2:	45 70       	CMP       R4, R5
    54e4:	1d fa       	JGE       $+29                  ;->0x551e
..\application\state_machine.c:144
	{
		if(Q15abs(control_param.start_current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    54e6:	23 45       	LD        R5, [PC + #35]        ;->0x5570  :=0x10003f70
    54e8:	ad a9       	LD.H      R5, [R5 + #6]
    54ea:	55 d0       	ZXT.H     R5, R5
    54ec:	45 d0       	ZXT.H     R4, R5
    54ee:	20 45       	LD        R5, [PC + #32]        ;->0x556c  :=0x10003fb2
    54f0:	6d ac       	LD.H      R5, [R5 + #17]
    54f2:	55 d0       	ZXT.H     R5, R5
    54f4:	55 d0       	ZXT.H     R5, R5
    54f6:	6c c7       	SUB       R5, R4, R5
    54f8:	55 d0       	ZXT.H     R5, R5
    54fa:	55 d0       	ZXT.H     R5, R5
    54fc:	55 61       	SXT.H     R5, R5
    54fe:	05 58       	MOV       R0, R5
    5500:	1d 45       	LD        R5, [PC + #29]        ;->0x5574  :=0x100005c4
    5502:	05 5c       	LJMP      R5
    5504:	a0 58       	MOV       R5, R0
    5506:	59 38       	CMP       R5, #9
    5508:	26 f9       	JLS       $+38                  ;->0x5554
..\application\state_machine.c:146
		{
		    ParkParm.qVqRef += USER_CURRENT_ACC;
    550a:	19 45       	LD        R5, [PC + #25]        ;->0x556c  :=0x10003fb2
    550c:	6d ac       	LD.H      R5, [R5 + #17]
    550e:	55 d0       	ZXT.H     R5, R5
    5510:	55 d0       	ZXT.H     R5, R5
    5512:	5a 28       	ADD       R5, #10
    5514:	55 d0       	ZXT.H     R5, R5
    5516:	55 d0       	ZXT.H     R5, R5
    5518:	15 44       	LD        R4, [PC + #21]        ;->0x556c  :=0x10003fb2
    551a:	65 b4       	ST.H      [R4 + #17], R5
    551c:	1c 04       	SJMP      $+28                  ;->0x5554
..\application\state_machine.c:151
		}
	}
	else
	{
		if(Q15abs(control_param.start_current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    551e:	15 45       	LD        R5, [PC + #21]        ;->0x5570  :=0x10003f70
    5520:	ad a9       	LD.H      R5, [R5 + #6]
    5522:	55 d0       	ZXT.H     R5, R5
    5524:	45 d0       	ZXT.H     R4, R5
    5526:	12 45       	LD        R5, [PC + #18]        ;->0x556c  :=0x10003fb2
    5528:	6d ac       	LD.H      R5, [R5 + #17]
    552a:	55 d0       	ZXT.H     R5, R5
    552c:	55 d0       	ZXT.H     R5, R5
    552e:	6c c7       	SUB       R5, R4, R5
    5530:	55 d0       	ZXT.H     R5, R5
    5532:	55 d0       	ZXT.H     R5, R5
    5534:	55 61       	SXT.H     R5, R5
    5536:	05 58       	MOV       R0, R5
    5538:	0f 45       	LD        R5, [PC + #15]        ;->0x5574  :=0x100005c4
    553a:	05 5c       	LJMP      R5
    553c:	a0 58       	MOV       R5, R0
    553e:	59 38       	CMP       R5, #9
    5540:	0a f9       	JLS       $+10                  ;->0x5554
..\application\state_machine.c:153
		{
		    ParkParm.qVqRef -= USER_CURRENT_ACC;
    5542:	0b 45       	LD        R5, [PC + #11]        ;->0x556c  :=0x10003fb2
    5544:	6d ac       	LD.H      R5, [R5 + #17]
    5546:	55 d0       	ZXT.H     R5, R5
    5548:	55 d0       	ZXT.H     R5, R5
    554a:	5a 30       	SUB       R5, #10
    554c:	55 d0       	ZXT.H     R5, R5
    554e:	55 d0       	ZXT.H     R5, R5
    5550:	07 44       	LD        R4, [PC + #7]         ;->0x556c  :=0x10003fb2
    5552:	65 b4       	ST.H      [R4 + #17], R5
..\application\state_machine.c:156
		}
	}
	if(control_param.current_step==2)
    5554:	07 45       	LD        R5, [PC + #7]         ;->0x5570  :=0x10003f70
    5556:	2d aa       	LD.H      R5, [R5 + #8]
    5558:	55 d0       	ZXT.H     R5, R5
    555a:	55 61       	SXT.H     R5, R5
    555c:	52 38       	CMP       R5, #2
    555e:	04 f1       	JNZ       $+4                   ;->0x5566
..\application\state_machine.c:160
	{
		if(USER_RUN_MODE!=USER_RUN_MODE_OPEN_LOOP)
		{
			sys_control.state_mode = STATE_RUN_CURRENT_LOOP;
    5560:	06 45       	LD        R5, [PC + #6]         ;->0x5578  :=0x10003f64
    5562:	46 10       	MOV       R4, #6
    5564:	6c a0       	ST.W      [R5 + #1], R4
..\application\state_machine.c:163
		}
	}
}
    5566:	0d 5d       	POP       LR
    5568:	1d 5c       	JMP       LR
    556a:	00 00       	NOP      NOP      
    556c:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
    5570:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
    5574:	c4 05 00 10 	.long     0x100005c4 ->268436932  [!!!@2@:SJMP      $+452                 ;->0x58fc	@@: MOV       R0, #0
    5578:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0

0000557c <run_current_loop_process>:
run_current_loop_process():
..\application\state_machine.c:168



void run_current_loop_process(void)
{
    557c:	2d 5d       	PUSH      LR
..\application\state_machine.c:169
	if(ParkParm.qVqRef<control_param.current_ref)
    557e:	2f 45       	LD        R5, [PC + #47]        ;->0x5638  :=0x10003fb2
    5580:	6d ac       	LD.H      R5, [R5 + #17]
    5582:	45 d0       	ZXT.H     R4, R5
    5584:	2e 45       	LD        R5, [PC + #46]        ;->0x563c  :=0x10003f70
    5586:	ed a9       	LD.H      R5, [R5 + #7]
    5588:	55 d0       	ZXT.H     R5, R5
    558a:	44 61       	SXT.H     R4, R4
    558c:	55 61       	SXT.H     R5, R5
    558e:	45 70       	CMP       R4, R5
    5590:	1d fa       	JGE       $+29                  ;->0x55ca
..\application\state_machine.c:171
	{
		if(Q15abs(control_param.current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    5592:	2b 45       	LD        R5, [PC + #43]        ;->0x563c  :=0x10003f70
    5594:	ed a9       	LD.H      R5, [R5 + #7]
    5596:	55 d0       	ZXT.H     R5, R5
    5598:	45 d0       	ZXT.H     R4, R5
    559a:	28 45       	LD        R5, [PC + #40]        ;->0x5638  :=0x10003fb2
    559c:	6d ac       	LD.H      R5, [R5 + #17]
    559e:	55 d0       	ZXT.H     R5, R5
    55a0:	55 d0       	ZXT.H     R5, R5
    55a2:	6c c7       	SUB       R5, R4, R5
    55a4:	55 d0       	ZXT.H     R5, R5
    55a6:	55 d0       	ZXT.H     R5, R5
    55a8:	55 61       	SXT.H     R5, R5
    55aa:	05 58       	MOV       R0, R5
    55ac:	25 45       	LD        R5, [PC + #37]        ;->0x5640  :=0x100005c4
    55ae:	05 5c       	LJMP      R5
    55b0:	a0 58       	MOV       R5, R0
    55b2:	59 38       	CMP       R5, #9
    55b4:	26 f9       	JLS       $+38                  ;->0x5600
..\application\state_machine.c:173
		{
		    ParkParm.qVqRef += USER_CURRENT_ACC;
    55b6:	21 45       	LD        R5, [PC + #33]        ;->0x5638  :=0x10003fb2
    55b8:	6d ac       	LD.H      R5, [R5 + #17]
    55ba:	55 d0       	ZXT.H     R5, R5
    55bc:	55 d0       	ZXT.H     R5, R5
    55be:	5a 28       	ADD       R5, #10
    55c0:	55 d0       	ZXT.H     R5, R5
    55c2:	55 d0       	ZXT.H     R5, R5
    55c4:	1d 44       	LD        R4, [PC + #29]        ;->0x5638  :=0x10003fb2
    55c6:	65 b4       	ST.H      [R4 + #17], R5
    55c8:	1c 04       	SJMP      $+28                  ;->0x5600
..\application\state_machine.c:178
		}
	}
	else
	{
		if(Q15abs(control_param.current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    55ca:	1d 45       	LD        R5, [PC + #29]        ;->0x563c  :=0x10003f70
    55cc:	ed a9       	LD.H      R5, [R5 + #7]
    55ce:	55 d0       	ZXT.H     R5, R5
    55d0:	45 d0       	ZXT.H     R4, R5
    55d2:	1a 45       	LD        R5, [PC + #26]        ;->0x5638  :=0x10003fb2
    55d4:	6d ac       	LD.H      R5, [R5 + #17]
    55d6:	55 d0       	ZXT.H     R5, R5
    55d8:	55 d0       	ZXT.H     R5, R5
    55da:	6c c7       	SUB       R5, R4, R5
    55dc:	55 d0       	ZXT.H     R5, R5
    55de:	55 d0       	ZXT.H     R5, R5
    55e0:	55 61       	SXT.H     R5, R5
    55e2:	05 58       	MOV       R0, R5
    55e4:	17 45       	LD        R5, [PC + #23]        ;->0x5640  :=0x100005c4
    55e6:	05 5c       	LJMP      R5
    55e8:	a0 58       	MOV       R5, R0
    55ea:	59 38       	CMP       R5, #9
    55ec:	0a f9       	JLS       $+10                  ;->0x5600
..\application\state_machine.c:180
		{
		    ParkParm.qVqRef -= USER_CURRENT_ACC;
    55ee:	13 45       	LD        R5, [PC + #19]        ;->0x5638  :=0x10003fb2
    55f0:	6d ac       	LD.H      R5, [R5 + #17]
    55f2:	55 d0       	ZXT.H     R5, R5
    55f4:	55 d0       	ZXT.H     R5, R5
    55f6:	5a 30       	SUB       R5, #10
    55f8:	55 d0       	ZXT.H     R5, R5
    55fa:	55 d0       	ZXT.H     R5, R5
    55fc:	0f 44       	LD        R4, [PC + #15]        ;->0x5638  :=0x10003fb2
    55fe:	65 b4       	ST.H      [R4 + #17], R5
..\application\state_machine.c:185
		}
	}
	if(USER_RUN_MODE==USER_RUN_MODE_SPEED_LOOP)
	{
	    control_param.current_loop_count++;
    5600:	0f 45       	LD        R5, [PC + #15]        ;->0x563c  :=0x10003f70
    5602:	ed ad       	LD.H      R5, [R5 + #23]
    5604:	55 d0       	ZXT.H     R5, R5
    5606:	6d c0       	ADD       R5, R5, #1
    5608:	55 d0       	ZXT.H     R5, R5
    560a:	0d 44       	LD        R4, [PC + #13]        ;->0x563c  :=0x10003f70
    560c:	e5 b5       	ST.H      [R4 + #23], R5
..\application\state_machine.c:186
	    if(control_param.current_loop_count>control_param.current_loop_time)
    560e:	0c 45       	LD        R5, [PC + #12]        ;->0x563c  :=0x10003f70
    5610:	ed ad       	LD.H      R5, [R5 + #23]
    5612:	45 d0       	ZXT.H     R4, R5
    5614:	0a 45       	LD        R5, [PC + #10]        ;->0x563c  :=0x10003f70
    5616:	2d ae       	LD.H      R5, [R5 + #24]
    5618:	55 d0       	ZXT.H     R5, R5
    561a:	44 61       	SXT.H     R4, R4
    561c:	55 61       	SXT.H     R5, R5
    561e:	45 70       	CMP       R4, R5
    5620:	0a fd       	JLE       $+10                  ;->0x5634
..\application\state_machine.c:188
	    {
		    control_param.current_loop_count = 0;
    5622:	07 44       	LD        R4, [PC + #7]         ;->0x563c  :=0x10003f70
    5624:	50 10       	MOV       R5, #0
    5626:	e5 b5       	ST.H      [R4 + #23], R5
..\application\state_machine.c:189
		    sys_control.speed_mode = SPEED_STATE_INIT;
    5628:	07 45       	LD        R5, [PC + #7]         ;->0x5644  :=0x10003f64
    562a:	40 10       	MOV       R4, #0
    562c:	ac a0       	ST.W      [R5 + #2], R4
..\application\state_machine.c:190
	        sys_control.state_mode = STATE_RUN_SPEED_LOOP;
    562e:	06 45       	LD        R5, [PC + #6]         ;->0x5644  :=0x10003f64
    5630:	47 10       	MOV       R4, #7
    5632:	6c a0       	ST.W      [R5 + #1], R4
..\application\state_machine.c:193
	    }
	}
}
    5634:	0d 5d       	POP       LR
    5636:	1d 5c       	JMP       LR
    5638:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
    563c:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
    5640:	c4 05 00 10 	.long     0x100005c4 ->268436932  [!!!@2@:SJMP      $+452                 ;->0x59c8	@@: MOV       R0, #0
    5644:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0

00005648 <run_speed_loop_process>:
run_speed_loop_process():
..\application\state_machine.c:196

void run_speed_loop_process(void)
{
    5648:	2d 5d       	PUSH      LR
..\application\state_machine.c:197
    speed_state_machine();
    564a:	03 45       	LD        R5, [PC + #3]         ;->0x5654  :=0x51b8
    564c:	05 5c       	LJMP      R5
..\application\state_machine.c:198
}
    564e:	0d 5d       	POP       LR
    5650:	1d 5c       	JMP       LR
    5652:	00 00       	NOP      NOP      
    5654:	b8 51 00 00 	.long     0x000051b8 ->000020920  [!!!@2@:JB        [R7], #24	@@: NOP      

00005658 <run_fault_process>:
run_fault_process():
..\application\state_machine.c:203

void run_fault_process(void)
{

}
    5658:	1d 5c       	JMP       LR
	...

0000565c <task_process>:
task_process():
..\application\task.c:10

void motor_start_process(void);
void pot_process(void);

void task_process(void)
{
    565c:	2d 5d       	PUSH      LR
..\application\task.c:13
	//communication
#if(USER_DEBUG_TOOL_SELECT==USER_DEBUG_TOOL_ON)
	commu_task();
    565e:	1a 45       	LD        R5, [PC + #26]        ;->0x56c4  :=0x4dac
    5660:	05 5c       	LJMP      R5
..\application\task.c:16
#endif
	//1ms task
	if(time_count.time_1ms_count>=TIME_1MS_COUNT)
    5662:	1a 45       	LD        R5, [PC + #26]        ;->0x56c8  :=0x10001c08
    5664:	55 81       	LD.H      R5, [R5]
    5666:	55 d0       	ZXT.H     R5, R5
    5668:	50 38       	CMP       R5, #0
    566a:	08 f0       	JZ        $+8                   ;->0x567a
..\application\task.c:18
	{
		time_count.time_1ms_count = 0;
    566c:	17 44       	LD        R4, [PC + #23]        ;->0x56c8  :=0x10001c08
    566e:	50 10       	MOV       R5, #0
    5670:	45 84       	ST.H      [R4], R5
..\application\task.c:20
		//process
        state_machine();
    5672:	17 45       	LD        R5, [PC + #23]        ;->0x56cc  :=0x5268
    5674:	05 5c       	LJMP      R5
..\application\task.c:21
        alarm_process();
    5676:	17 45       	LD        R5, [PC + #23]        ;->0x56d0  :=0x4bc8
    5678:	05 5c       	LJMP      R5
..\application\task.c:24
	}
	//10ms task
	if(time_count.time_10ms_count>=TIME_10MS_COUNT)
    567a:	14 45       	LD        R5, [PC + #20]        ;->0x56c8  :=0x10001c08
    567c:	6d a8       	LD.H      R5, [R5 + #1]
    567e:	55 d0       	ZXT.H     R5, R5
    5680:	59 38       	CMP       R5, #9
    5682:	06 f9       	JLS       $+6                   ;->0x568e
..\application\task.c:26
	{
		time_count.time_10ms_count = 0;
    5684:	11 44       	LD        R4, [PC + #17]        ;->0x56c8  :=0x10001c08
    5686:	50 10       	MOV       R5, #0
    5688:	65 b0       	ST.H      [R4 + #1], R5
..\application\task.c:28
		//process
		motor_start_process();
    568a:	13 45       	LD        R5, [PC + #19]        ;->0x56d4  :=0x56e0
    568c:	05 5c       	LJMP      R5
..\application\task.c:32

	}
	//100ms task
	if(time_count.time_100ms_count>=TIME_100MS_COUNT)
    568e:	0f 45       	LD        R5, [PC + #15]        ;->0x56c8  :=0x10001c08
    5690:	ad a8       	LD.H      R5, [R5 + #2]
    5692:	55 d0       	ZXT.H     R5, R5
    5694:	53 3e       	CMP       R5, #99
    5696:	04 f9       	JLS       $+4                   ;->0x569e
..\application\task.c:34
	{
        time_count.time_100ms_count = 0;
    5698:	0c 44       	LD        R4, [PC + #12]        ;->0x56c8  :=0x10001c08
    569a:	50 10       	MOV       R5, #0
    569c:	a5 b0       	ST.H      [R4 + #2], R5
..\application\task.c:38
        //process
	}
	//1s task
	if(time_count.time_1s_count>=TIME_1S_COUNT)
    569e:	0b 45       	LD        R5, [PC + #11]        ;->0x56c8  :=0x10001c08
    56a0:	ed a8       	LD.H      R5, [R5 + #3]
    56a2:	55 d0       	ZXT.H     R5, R5
    56a4:	0d 44       	LD        R4, [PC + #13]        ;->0x56d8  :=0x3e7
    56a6:	54 70       	CMP       R5, R4
    56a8:	0b f9       	JLS       $+11                  ;->0x56be
..\application\task.c:40
	{
		time_count.time_1s_count = 0;
    56aa:	08 44       	LD        R4, [PC + #8]         ;->0x56c8  :=0x10001c08
    56ac:	50 10       	MOV       R5, #0
    56ae:	e5 b0       	ST.H      [R4 + #3], R5
..\application\task.c:42
		//process
		LED3_TOGGLE;
    56b0:	0b 44       	LD        R4, [PC + #11]        ;->0x56dc  :=0x50000040
    56b2:	0b 45       	LD        R5, [PC + #11]        ;->0x56dc  :=0x50000040
    56b4:	5d 98       	LD.W      R3, [R5 + #1]
    56b6:	51 10       	MOV       R5, #1
    56b8:	ad 7a       	LSL       R5, #13
    56ba:	6b d9       	XRL       R5, R3, R5
    56bc:	65 a0       	ST.W      [R4 + #1], R5
..\application\task.c:44
	}
}
    56be:	0d 5d       	POP       LR
    56c0:	1d 5c       	JMP       LR
    56c2:	00 00       	NOP      NOP      
    56c4:	ac 4d 00 00 	.long     0x00004dac ->000019884  [!!!@2@:SET       [R5], #28	@@: NOP      
    56c8:	08 1c 00 10 	.long     0x10001c08 ->268442632  [!!!@2@:MOV       R0, #200	@@: MOV       R0, #0
    56cc:	68 52 00 00 	.long     0x00005268 ->000021096  [!!!@2@:JNB       [LR], #0	@@: NOP      
    56d0:	c8 4b 00 00 	.long     0x00004bc8 ->000019400  [!!!@2@:CLR       R9, #24	@@: NOP      
    56d4:	e0 56 00 00 	.long     0x000056e0 ->000022240  [!!!@2@:JNB       R12, #8	@@: NOP      
    56d8:	e7 03 00 00 	.long     0x000003e7 ->000000999  [!!!@4@:JMP       $-1638400             ;->0xffce56d8
    56dc:	40 00 00 50 	.long     0x50000040 ->1342177344 

000056e0 <motor_start_process>:
motor_start_process():
..\application\task.c:47

void motor_start_process(void)
{
    56e0:	2d 5d       	PUSH      LR
..\application\task.c:48
	if(READ_KEY1==KEY_ON&&sys_control.sys_enable_flag==FALSE&&control_param.start_count>50)
    56e2:	26 40       	LD        R0, [PC + #38]        ;->0x5778  :=0x50000180
    56e4:	11 10       	MOV       R1, #1
    56e6:	8f 7a       	LSL       R1, #15
    56e8:	25 45       	LD        R5, [PC + #37]        ;->0x577c  :=0x24d8
    56ea:	05 5c       	LJMP      R5
    56ec:	a0 58       	MOV       R5, R0
    56ee:	50 38       	CMP       R5, #0
    56f0:	12 f1       	JNZ       $+18                  ;->0x5714
    56f2:	24 45       	LD        R5, [PC + #36]        ;->0x5780  :=0x10003f64
    56f4:	55 80       	LD.B      R5, [R5]
    56f6:	55 d1       	ZXT.B     R5, R5
    56f8:	50 38       	CMP       R5, #0
    56fa:	0d f1       	JNZ       $+13                  ;->0x5714
    56fc:	22 45       	LD        R5, [PC + #34]        ;->0x5784  :=0x10003f70
    56fe:	55 81       	LD.H      R5, [R5]
    5700:	55 d0       	ZXT.H     R5, R5
    5702:	55 61       	SXT.H     R5, R5
    5704:	52 3b       	CMP       R5, #50
    5706:	07 fd       	JLE       $+7                   ;->0x5714
..\application\task.c:50
	{
		control_param.start_count = 0;
    5708:	1f 44       	LD        R4, [PC + #31]        ;->0x5784  :=0x10003f70
    570a:	50 10       	MOV       R5, #0
    570c:	45 84       	ST.H      [R4], R5
..\application\task.c:51
		sys_control.sys_enable_flag = TRUE;
    570e:	1d 44       	LD        R4, [PC + #29]        ;->0x5780  :=0x10003f64
    5710:	51 10       	MOV       R5, #1
    5712:	45 83       	ST.B      [R4], R5
..\application\task.c:53
	}
	if(READ_KEY1==KEY_ON&&sys_control.sys_enable_flag==TRUE&&control_param.start_count>50)
    5714:	19 40       	LD        R0, [PC + #25]        ;->0x5778  :=0x50000180
    5716:	11 10       	MOV       R1, #1
    5718:	8f 7a       	LSL       R1, #15
    571a:	19 45       	LD        R5, [PC + #25]        ;->0x577c  :=0x24d8
    571c:	05 5c       	LJMP      R5
    571e:	a0 58       	MOV       R5, R0
    5720:	50 38       	CMP       R5, #0
    5722:	13 f1       	JNZ       $+19                  ;->0x5748
    5724:	17 45       	LD        R5, [PC + #23]        ;->0x5780  :=0x10003f64
    5726:	55 80       	LD.B      R5, [R5]
    5728:	55 d1       	ZXT.B     R5, R5
    572a:	51 38       	CMP       R5, #1
    572c:	0e f1       	JNZ       $+14                  ;->0x5748
    572e:	16 45       	LD        R5, [PC + #22]        ;->0x5784  :=0x10003f70
    5730:	55 81       	LD.H      R5, [R5]
    5732:	55 d0       	ZXT.H     R5, R5
    5734:	55 61       	SXT.H     R5, R5
    5736:	52 3b       	CMP       R5, #50
    5738:	08 fd       	JLE       $+8                   ;->0x5748
..\application\task.c:55
	{
		control_param.start_count = 0;
    573a:	13 44       	LD        R4, [PC + #19]        ;->0x5784  :=0x10003f70
    573c:	50 10       	MOV       R5, #0
    573e:	45 84       	ST.H      [R4], R5
..\application\task.c:56
		sys_control.sys_enable_flag = FALSE;
    5740:	10 44       	LD        R4, [PC + #16]        ;->0x5780  :=0x10003f64
    5742:	50 10       	MOV       R5, #0
    5744:	45 83       	ST.B      [R4], R5
    5746:	16 04       	SJMP      $+22                  ;->0x5772
..\application\task.c:58
	}
	else if(READ_KEY1==KEY_OFF&&control_param.start_count<100)
    5748:	0c 40       	LD        R0, [PC + #12]        ;->0x5778  :=0x50000180
    574a:	11 10       	MOV       R1, #1
    574c:	8f 7a       	LSL       R1, #15
    574e:	0c 45       	LD        R5, [PC + #12]        ;->0x577c  :=0x24d8
    5750:	05 5c       	LJMP      R5
    5752:	a0 58       	MOV       R5, R0
    5754:	51 38       	CMP       R5, #1
    5756:	0e f1       	JNZ       $+14                  ;->0x5772
    5758:	0b 45       	LD        R5, [PC + #11]        ;->0x5784  :=0x10003f70
    575a:	55 81       	LD.H      R5, [R5]
    575c:	55 d0       	ZXT.H     R5, R5
    575e:	55 61       	SXT.H     R5, R5
    5760:	53 3e       	CMP       R5, #99
    5762:	08 fc       	JGT       $+8                   ;->0x5772
..\application\task.c:60
	{
		control_param.start_count++;
    5764:	08 45       	LD        R5, [PC + #8]         ;->0x5784  :=0x10003f70
    5766:	55 81       	LD.H      R5, [R5]
    5768:	55 d0       	ZXT.H     R5, R5
    576a:	6d c0       	ADD       R5, R5, #1
    576c:	55 d0       	ZXT.H     R5, R5
    576e:	06 44       	LD        R4, [PC + #6]         ;->0x5784  :=0x10003f70
    5770:	45 84       	ST.H      [R4], R5
..\application\task.c:62
	}
}
    5772:	0d 5d       	POP       LR
    5774:	1d 5c       	JMP       LR
    5776:	00 00       	NOP      NOP      
    5778:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    577c:	d8 24 00 00 	.long     0x000024d8 ->000009432  [!!!@2@:ST.W      [SP + #216], R4	@@: NOP      
    5780:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0
    5784:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0

00005788 <startup>:
startup():
..\_config\startup.c:20
#endif
//####################################################################//
extern int main();
//####################################################################//
void startup()
{
    5788:	2d 5d       	PUSH      LR
    578a:	ec 30       	SUB       SP, #12
..\_config\startup.c:27
#ifdef  Project_Type__cplusplus
	void (*pf)(void);
#endif
//############# 		init work for the chip 		    #############//
//	HWREG(0x40000000)=1;
	HWREG(0x40000000)=0;
    578c:	51 10       	MOV       R5, #1
    578e:	ae 7b       	LSL       R5, #30
    5790:	40 10       	MOV       R4, #0
    5792:	54 85       	ST.W      [R5], R4
..\_config\startup.c:29
//############# init variable who have initialization	#############//
	s = (unsigned int*)&__text_end__;		
    5794:	15 45       	LD        R5, [PC + #21]        ;->0x57e8  :=0x8184
    5796:	e5 85       	ST.W      [SP], R5
..\_config\startup.c:30
	begin = (unsigned int*)&__data_start__;
    5798:	15 45       	LD        R5, [PC + #21]        ;->0x57ec  :=0x10000000
    579a:	01 25       	ST.W      [SP + #1], R5
..\_config\startup.c:31
	end = (unsigned int*)&__bss_start__;
    579c:	15 45       	LD        R5, [PC + #21]        ;->0x57f0  :=0x10001e20
    579e:	02 25       	ST.W      [SP + #2], R5
..\_config\startup.c:32
	while(begin < end)
    57a0:	0b 04       	SJMP      $+11                  ;->0x57b6
..\_config\startup.c:33
		*begin++ = *s++;
    57a2:	5e 82       	LD.W      R5, [SP]
    57a4:	55 82       	LD.W      R5, [R5]
    57a6:	01 0c       	LD.W      R4, [SP + #1]
    57a8:	45 85       	ST.W      [R4], R5
    57aa:	01 0d       	LD.W      R5, [SP + #1]
    57ac:	2d c1       	ADD       R5, R5, #4
    57ae:	01 25       	ST.W      [SP + #1], R5
    57b0:	5e 82       	LD.W      R5, [SP]
    57b2:	2d c1       	ADD       R5, R5, #4
    57b4:	e5 85       	ST.W      [SP], R5
..\_config\startup.c:32
	HWREG(0x40000000)=0;
//############# init variable who have initialization	#############//
	s = (unsigned int*)&__text_end__;		
	begin = (unsigned int*)&__data_start__;
	end = (unsigned int*)&__bss_start__;
	while(begin < end)
    57b6:	01 0d       	LD.W      R5, [SP + #1]
    57b8:	02 0c       	LD.W      R4, [SP + #2]
    57ba:	45 70       	CMP       R4, R5
    57bc:	f3 f8       	JHI       $-13                  ;->0x57a2
..\_config\startup.c:46
		pf();
	}
#endif		
//############# init variable who have no initialization	#############//
#if 1	 //  0 not init this type variable
	begin = (unsigned int*)&__bss_start__;
    57be:	0d 45       	LD        R5, [PC + #13]        ;->0x57f0  :=0x10001e20
    57c0:	01 25       	ST.W      [SP + #1], R5
..\_config\startup.c:47
	end = (unsigned int*)&__bss_end__;
    57c2:	0d 45       	LD        R5, [PC + #13]        ;->0x57f4  :=0x100040b0
    57c4:	02 25       	ST.W      [SP + #2], R5
..\_config\startup.c:48
	while(begin < end)
    57c6:	07 04       	SJMP      $+7                   ;->0x57d4
..\_config\startup.c:49
		*begin++ = 0;
    57c8:	01 0c       	LD.W      R4, [SP + #1]
    57ca:	50 10       	MOV       R5, #0
    57cc:	45 85       	ST.W      [R4], R5
    57ce:	01 0d       	LD.W      R5, [SP + #1]
    57d0:	2d c1       	ADD       R5, R5, #4
    57d2:	01 25       	ST.W      [SP + #1], R5
..\_config\startup.c:48
#endif		
//############# init variable who have no initialization	#############//
#if 1	 //  0 not init this type variable
	begin = (unsigned int*)&__bss_start__;
	end = (unsigned int*)&__bss_end__;
	while(begin < end)
    57d4:	01 0d       	LD.W      R5, [SP + #1]
    57d6:	02 0c       	LD.W      R4, [SP + #2]
    57d8:	45 70       	CMP       R4, R5
    57da:	f7 f8       	JHI       $-9                   ;->0x57c8
..\_config\startup.c:52
		*begin++ = 0;
#endif		
//############# begin to run main function	#############//		
	main();
    57dc:	07 45       	LD        R5, [PC + #7]         ;->0x57f8  :=0x57fc
    57de:	05 5c       	LJMP      R5
..\_config\startup.c:53
}
    57e0:	ec 28       	ADD       SP, #12
    57e2:	0d 5d       	POP       LR
    57e4:	1d 5c       	JMP       LR
    57e6:	00 00       	NOP      NOP      
    57e8:	84 81 00 00 	.long     0x00008184 ->000033156  [!!!@2@:LD.H      R8, [R4]	@@: NOP      
    57ec:	00 00 00 10 	.long     0x10000000 ->268435456  [!!!@2@:NOP      	@@: MOV       R0, #0
    57f0:	20 1e 00 10 	.long     0x10001e20 ->268443168  [!!!@2@:MOV       R2, #224	@@: MOV       R0, #0
    57f4:	b0 40 00 10 	.long     0x100040b0 ->268452016  [!!!@2@:LD        R0, [PC + #176]       ;->0x5ab4  :=0xe7520000	@@: MOV       R0, #0
    57f8:	fc 57 00 00 	.long     0x000057fc ->000022524  [!!!@2@:JNB       PC, #28	@@: NOP      

000057fc <main>:
main():
..\main.c:12
int32_t adc_current_scale = 0;
int32_t adc_voltage_scale = 0;


void main()
{
    57fc:	2d 5d       	PUSH      LR
..\main.c:13
	INT_All_Enable(FALSE);
    57fe:	00 10       	MOV       R0, #0
    5800:	09 45       	LD        R5, [PC + #9]         ;->0x5824  :=0x27d0
    5802:	05 5c       	LJMP      R5
..\main.c:14
	cfg_HARDWARE();
    5804:	09 45       	LD        R5, [PC + #9]         ;->0x5828  :=0x484c
    5806:	05 5c       	LJMP      R5
..\main.c:15
	application_init();
    5808:	09 45       	LD        R5, [PC + #9]         ;->0x582c  :=0x4cf4
    580a:	05 5c       	LJMP      R5
..\main.c:16
	INT_All_Enable(TRUE);
    580c:	01 10       	MOV       R0, #1
    580e:	06 45       	LD        R5, [PC + #6]         ;->0x5824  :=0x27d0
    5810:	05 5c       	LJMP      R5
..\main.c:18

	adc_current_scale = USER_ADC_SCALE_CURRENT;
    5812:	08 44       	LD        R4, [PC + #8]         ;->0x5830  :=0x10001c24
    5814:	5b 14       	MOV       R5, #75
    5816:	45 85       	ST.W      [R4], R5
..\main.c:19
	adc_voltage_scale = USER_ADC_SCALE_VOLTAGE;
    5818:	07 44       	LD        R4, [PC + #7]         ;->0x5834  :=0x10001c28
    581a:	5f 12       	MOV       R5, #47
    581c:	45 85       	ST.W      [R4], R5
..\main.c:23

	while(1)
	{
        task_process();
    581e:	07 45       	LD        R5, [PC + #7]         ;->0x5838  :=0x565c
    5820:	05 5c       	LJMP      R5
..\main.c:24
	}		
    5822:	fe 07       	SJMP      $-2                   ;->0x581e
    5824:	d0 27 00 00 	.long     0x000027d0 ->000010192  [!!!@2@:ST.W      [SP + #208], R7	@@: NOP      
    5828:	4c 48 00 00 	.long     0x0000484c ->000018508  [!!!@2@:SET       R9, #4	@@: NOP      
    582c:	f4 4c 00 00 	.long     0x00004cf4 ->000019700  [!!!@2@:SET       [SP], #12	@@: NOP      
    5830:	24 1c 00 10 	.long     0x10001c24 ->268442660  [!!!@2@:MOV       R2, #196	@@: MOV       R0, #0
    5834:	28 1c 00 10 	.long     0x10001c28 ->268442664  [!!!@2@:MOV       R2, #200	@@: MOV       R0, #0
    5838:	5c 56 00 00 	.long     0x0000565c ->000022108  [!!!@2@:JNB       R11, #4	@@: NOP      

0000583c <atan2CORDIC>:
atan2CORDIC():
..\application\libkf32foc.c:195
	asm(".EQU 	NEG_PI_BY_2 ,	0xC000	""\n\t");
	asm(".EQU 	PI_BY_2 	,	0x3FFF	""\n\t");
	asm(".EQU 	PI 			,	0x7FFF	""\n\t");
	asm(".EQU 	NEG_PI 		,	0x8000	""\n\t");

	asm("		    PUSH	R6		""\n\t");
    583c:	26 5d       	PUSH      R6
..\application\libkf32foc.c:196
	asm("			PUSH	R7		""\n\t");
    583e:	27 5d       	PUSH      R7
..\application\libkf32foc.c:197
	asm("			PUSH	R8		""\n\t");
    5840:	28 5d       	PUSH      R8
..\application\libkf32foc.c:198
	asm("			PUSH	R9		""\n\t");
    5842:	29 5d       	PUSH      R9
..\application\libkf32foc.c:199
	asm("			PUSH	R10		""\n\t");
    5844:	2a 5d       	PUSH      R10
..\application\libkf32foc.c:200
	asm("			PUSH	R11		""\n\t");
    5846:	2b 5d       	PUSH      R11
..\application\libkf32foc.c:202

	asm("			MOVL	R8,#0x8000		""\n\t");
    5848:	28 5c 00 80 	MOVL      R8, #32768
..\application\libkf32foc.c:203
	asm("			SXT.H	R8,R8			""\n\t");
    584c:	88 61       	SXT.H     R8, R8
..\application\libkf32foc.c:204
	asm("			CMP		R0, R8			""\n\t");//判断EalphaFinal是否为负1
    584e:	08 70       	CMP       R0, R8
..\application\libkf32foc.c:205
	asm("			JNZ		checkI			""\n\t");
    5850:	05 f1       	JNZ       $+5                   ;->0x585a
..\application\libkf32foc.c:206
	asm("			MOVL	R0,#NEG_PI_BY_2	""\n\t");//EalphaFinal等于-1时
    5852:	20 5c 00 c0 	MOVL      R0, #49152
..\application\libkf32foc.c:207
	asm("			SXT.H	R0,R0			""\n\t");
    5856:	00 61       	SXT.H     R0, R0
..\application\libkf32foc.c:208
	asm("			JMP		exitCORDICRoutine   ""\n\t");
    5858:	4b 04       	SJMP      $+75                  ;->0x58ee

0000585a <checkI>:
..\application\libkf32foc.c:210
	asm("       checkI:					""\n\t");//EalphaFinal不等于-1时
	asm("			CMP		R1, R8				""\n\t");
    585a:	18 70       	CMP       R1, R8
..\application\libkf32foc.c:211
	asm("			JNZ		mainCORDICRoutine	""\n\t");
    585c:	05 f1       	JNZ       $+5                   ;->0x5866
..\application\libkf32foc.c:212
	asm("			MOVL	R0,#PI				""\n\t");
    585e:	20 5c ff 7f 	MOVL      R0, #32767
..\application\libkf32foc.c:213
	asm("			SXT.H	R0,R0			    ""\n\t");
    5862:	00 61       	SXT.H     R0, R0
..\application\libkf32foc.c:214
	asm("			JMP		exitCORDICRoutine	""\n\t");
    5864:	45 04       	SJMP      $+69                  ;->0x58ee

00005866 <mainCORDICRoutine>:
..\application\libkf32foc.c:216
	asm("		mainCORDICRoutine:				""\n\t");//EalphaFinal和EbetaFinal都不等于负1
	asm("			MOVL	R7,#0x0		""\n\t");//ACCUM_PHASE (R7)
    5866:	27 5c 00 00 	MOVL      R7, #0
..\application\libkf32foc.c:217
	asm("			CMP		R1,#0		""\n\t");//adjust q and i to be in quadrant I
    586a:	10 38       	CMP       R1, #0
..\application\libkf32foc.c:218
	asm("			JGE		setupIter	""\n\t");//如果非负则转移,即大于等于
    586c:	11 fa       	JGE       $+17                  ;->0x588e
..\application\libkf32foc.c:219
	asm("			MOV		R9,R1		""\n\t");
    586e:	21 59       	MOV       R9, R1
..\application\libkf32foc.c:220
	asm("			CMP		R0,#0		""\n\t");
    5870:	00 38       	CMP       R0, #0
..\application\libkf32foc.c:221
	asm("			JLE		quadIII		""\n\t");
    5872:	08 fd       	JLE       $+8                   ;->0x5882
..\application\libkf32foc.c:222
	asm("			MOV		R1, R0		""\n\t");
    5874:	20 58       	MOV       R1, R0
..\application\libkf32foc.c:223
	asm("			NOT		R0,R9		""\n\t");
    5876:	09 68       	NOT       R0, R9
..\application\libkf32foc.c:224
	asm("			ADD		R0,#1		""\n\t");
    5878:	01 28       	ADD       R0, #1
..\application\libkf32foc.c:225
	asm("			MOVL	R7,#NEG_PI_BY_2	""\n\t");//ACCUM_PHASE (R7)
    587a:	27 5c 00 c0 	MOVL      R7, #49152
..\application\libkf32foc.c:226
	asm("			SXT.H	R7,R7			""\n\t");//2018.09.19添加
    587e:	77 61       	SXT.H     R7, R7
..\application\libkf32foc.c:227
	asm("			JMP		setupIter	""\n\t");
    5880:	07 04       	SJMP      $+7                   ;->0x588e

00005882 <quadIII>:
..\application\libkf32foc.c:229
	asm("		quadIII:				""\n\t");
	asm("			NOT		R1,R0		""\n\t");
    5882:	10 68       	NOT       R1, R0
..\application\libkf32foc.c:230
	asm("			ADD		R1,#1		""\n\t");
    5884:	11 28       	ADD       R1, #1
..\application\libkf32foc.c:231
	asm("			MOV		R0,R9		""\n\t");
    5886:	09 58       	MOV       R0, R9
..\application\libkf32foc.c:232
	asm("			MOVL	R7,#PI_BY_2	""\n\t");//ACCUM_PHASE (R7)
    5888:	27 5c ff 3f 	MOVL      R7, #16383
..\application\libkf32foc.c:233
	asm("			SXT.H	R7,R7			""\n\t"    );
    588c:	77 61       	SXT.H     R7, R7

0000588e <setupIter>:
..\application\libkf32foc.c:235
	asm("		setupIter:						""\n\t");
	asm("			MOV		R3,R0			""\n\t");//ACC1
    588e:	60 58       	MOV       R3, R0
..\application\libkf32foc.c:236
	asm("			MOV		R2,R1			""\n\t");//ACC0
    5890:	41 58       	MOV       R2, R1
..\application\libkf32foc.c:237
	asm("			ASR		R3,#1			""\n\t");
    5892:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:238
	asm("			ASR		R2,#1			""\n\t");
    5894:	11 78       	ASR       R2, #1
..\application\libkf32foc.c:239
	asm("			LSL		R3,#16			""\n\t");
    5896:	18 7b       	LSL       R3, #16
..\application\libkf32foc.c:240
	asm("			LSL		R2,#16			""\n\t");
    5898:	10 7b       	LSL       R2, #16
..\application\libkf32foc.c:241
	asm("			MOV		R8,#CORDIC_DATA		""\n\t");
    589a:	28 5c 2c 1c 	MOVL      R8, #7212
    589e:	48 5c 00 10 	MOVH      R8, #4096
..\application\libkf32foc.c:242
	asm("			MOVL	R5,#0x7FFF			""\n\t");//; w5 = K = 1.0
    58a2:	25 5c ff 7f 	MOVL      R5, #32767
..\application\libkf32foc.c:243
	asm("			SXT.H	R5,R5			""\n\t"    );
    58a6:	55 61       	SXT.H     R5, R5
..\application\libkf32foc.c:245
//	asm("			DO 		#9,endCORDICRoutine_do	""\n\t");
	asm("			MOV	R11,#9		""\n\t"    );
    58a8:	b9 10       	MOV       R11, #9

000058aa <endCORDICRoutine_do>:
..\application\libkf32foc.c:247
	asm("endCORDICRoutine_do:	""\n\t");
	asm("			MOV	R9,R2		""\n\t"    );
    58aa:	22 59       	MOV       R9, R2
..\application\libkf32foc.c:248
	asm("			MOV	R6,R3			""\n\t");
    58ac:	c3 58       	MOV       R6, R3
..\application\libkf32foc.c:249
	asm("			ASR	R9,#16		""\n\t"    );
    58ae:	48 79       	ASR       R9, #16
..\application\libkf32foc.c:250
	asm("			ASR	R6,#16			""\n\t");
    58b0:	30 79       	ASR       R6, #16
..\application\libkf32foc.c:251
	asm("			CMP		R6,#0				""\n\t");
    58b2:	60 38       	CMP       R6, #0
..\application\libkf32foc.c:252
	asm("			JLT		rotate_pos			""\n\t");//if Q < 0 goto rotate positive
    58b4:	0c fb       	JLT       $+12                  ;->0x58cc

000058b6 <rotate_neg>:
..\application\libkf32foc.c:254
	asm("		rotate_neg:						""\n\t"    );
	asm("			MULS	R4,R5,R6			""\n\t"    );
    58b6:	a5 cb       	MULS      R4, R5, R6
..\application\libkf32foc.c:255
	asm("			LSL	R4,#1			""\n\t"    );
    58b8:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:256
	asm("			ADD		R2,R4			""\n\t"    );
    58ba:	24 64       	ADD       R2, R4
..\application\libkf32foc.c:257
	asm("			MOV		R6,R9		""\n\t"            );
    58bc:	c9 58       	MOV       R6, R9
..\application\libkf32foc.c:258
	asm("			MULS	R4,R5,R6			""\n\t"    );
    58be:	a5 cb       	MULS      R4, R5, R6
..\application\libkf32foc.c:259
	asm("			LSL	R4,#1			""\n\t"    );
    58c0:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:260
	asm("			SUB		R3,R4			""\n\t"    );
    58c2:	34 66       	SUB       R3, R4
..\application\libkf32foc.c:261
	asm("			LD.H	R4,[R8]			""\n\t"    );
    58c4:	48 81       	LD.H      R4, [R8]
..\application\libkf32foc.c:262
	asm("			ADD	R8,#2			""\n\t"    );
    58c6:	82 28       	ADD       R8, #2
..\application\libkf32foc.c:264
//	asm("  			SXT.H  	R4,R4               " "\n"     );
	asm("			SUBC	R7,R7,R4				""\n\t");//ACCUM_PHASE
    58c8:	3f c9       	SUBC      R7, R7, R4
..\application\libkf32foc.c:265
	asm("			JMP		endCORDICRoutine	""\n\t" );
    58ca:	0b 04       	SJMP      $+11                  ;->0x58e0

000058cc <rotate_pos>:
..\application\libkf32foc.c:267
	asm("		rotate_pos:						""\n\t" );
	asm("			MULS	R4,R5,R6			""\n\t" );
    58cc:	a5 cb       	MULS      R4, R5, R6
..\application\libkf32foc.c:268
	asm("			LSL	R4,#1			""\n\t"    );
    58ce:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:269
	asm("			SUB		R2,R4			""\n\t"    );
    58d0:	24 66       	SUB       R2, R4
..\application\libkf32foc.c:270
	asm("			MOV		R6,R9		""\n\t"         );
    58d2:	c9 58       	MOV       R6, R9
..\application\libkf32foc.c:271
	asm("			MULS	R4,R5,R6			""\n\t");
    58d4:	a5 cb       	MULS      R4, R5, R6
..\application\libkf32foc.c:272
	asm("			LSL	R4,#1			""\n\t"    );
    58d6:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:273
	asm("			ADD		R3,R4			""\n\t"    );
    58d8:	34 64       	ADD       R3, R4
..\application\libkf32foc.c:274
	asm("			LD.H	R4,[R8]			""\n\t"    );
    58da:	48 81       	LD.H      R4, [R8]
..\application\libkf32foc.c:275
	asm("			ADD	R8,#2			""\n\t"    );
    58dc:	82 28       	ADD       R8, #2
..\application\libkf32foc.c:277
//	asm("  			SXT.H   R4,R4               " "\n" );
	asm("			ADD 	R7,R4,R7			""\n\t");//ACCUM_PHASE (R7)
    58de:	fc c3       	ADD       R7, R4, R7

000058e0 <endCORDICRoutine>:
..\application\libkf32foc.c:279
	asm("		endCORDICRoutine:			""\n\t");
	asm("			ASR		R5, #1			""\n\t");//; K = K / 2
    58e0:	29 78       	ASR       R5, #1
..\application\libkf32foc.c:281
//	asm("		endCORDICRoutine_do:			""\n\t");
	asm("			CMP		R11, #0			""\n\t");
    58e2:	b0 38       	CMP       R11, #0
..\application\libkf32foc.c:282
	asm("			JLE		endLOOP_do			""\n\t");
    58e4:	03 fd       	JLE       $+3                   ;->0x58ea
..\application\libkf32foc.c:283
	asm("			SUB		R11, #1			""\n\t");
    58e6:	b1 30       	SUB       R11, #1
..\application\libkf32foc.c:284
	asm("			JMP		endCORDICRoutine_do			""\n\t");
    58e8:	e1 07       	SJMP      $-31                  ;->0x58aa

000058ea <endLOOP_do>:
..\application\libkf32foc.c:286
	asm("		endLOOP_do:					""\n\t");
	asm("			NOT		R0,R7			""\n\t");//ACCUM_PHASE (R7)
    58ea:	07 68       	NOT       R0, R7
..\application\libkf32foc.c:287
	asm("			ADD		R0,#1			""\n\t");//ACCUM_PHASE (R7)
    58ec:	01 28       	ADD       R0, #1

000058ee <exitCORDICRoutine>:
..\application\libkf32foc.c:291
	asm("		exitCORDICRoutine:			""\n\t");


	asm("			MOV	    R10,#DATA_atan2CORDIC""\n\t" );
    58ee:	2a 5c 9a 40 	MOVL      R10, #16538
    58f2:	4a 5c 00 10 	MOVH      R10, #4096
..\application\libkf32foc.c:292
	asm("			ST.H	[R10] , R0 		""\n\t");
    58f6:	a0 84       	ST.H      [R10], R0
..\application\libkf32foc.c:294

	asm("			POP		R11				""\n\t");
    58f8:	0b 5d       	POP       R11
..\application\libkf32foc.c:295
	asm("			POP		R10				""\n\t");
    58fa:	0a 5d       	POP       R10
..\application\libkf32foc.c:296
	asm("			POP		R9				""\n\t");
    58fc:	09 5d       	POP       R9
..\application\libkf32foc.c:297
	asm("			POP 	R8				""\n\t");
    58fe:	08 5d       	POP       R8
..\application\libkf32foc.c:298
	asm("			POP 	R7				""\n\t");
    5900:	07 5d       	POP       R7
..\application\libkf32foc.c:299
	asm("			POP 	R6				""\n\t");
    5902:	06 5d       	POP       R6
..\application\libkf32foc.c:300
	return	DATA_atan2CORDIC;
    5904:	02 45       	LD        R5, [PC + #2]         ;->0x590c  :=0x1000409a
    5906:	05 81       	LD.H      R0, [R5]
..\application\libkf32foc.c:301
}
    5908:	00 d0       	ZXT.H     R0, R0
    590a:	1d 5c       	JMP       LR
    590c:	9a 40 00 10 	.long     0x1000409a ->268451994  [!!!@2@:LD        R0, [PC + #154]       ;->0x5b74  :=0xd122c14c	@@: MOV       R0, #0

00005910 <sendSerialWrapper>:
sendSerialWrapper():
..\X2Csrc\__X2CScopeWrapper.c:57
    5910:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:58
    5912:	04 45       	LD        R5, [PC + #4]         ;->0x5920  :=0x10001d94
    5914:	55 82       	LD.W      R5, [R5]
    5916:	01 d1       	ZXT.B     R0, R1
    5918:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:59
    591a:	0d 5d       	POP       LR
    591c:	1d 5c       	JMP       LR
    591e:	00 00       	NOP      NOP      
    5920:	94 1d 00 10 	.long     0x10001d94 ->268443028  [!!!@2@:MOV       R9, #212	@@: MOV       R0, #0

00005924 <receiveSerialWrapper>:
receiveSerialWrapper():
..\X2Csrc\__X2CScopeWrapper.c:61
    5924:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:62
    5926:	03 45       	LD        R5, [PC + #3]         ;->0x5930  :=0x10001d98
    5928:	05 82       	LD.W      R0, [R5]
    592a:	00 5c       	LJMP      R0
..\X2Csrc\__X2CScopeWrapper.c:63
    592c:	0d 5d       	POP       LR
    592e:	1d 5c       	JMP       LR
    5930:	98 1d 00 10 	.long     0x10001d98 ->268443032  [!!!@2@:MOV       R9, #216	@@: MOV       R0, #0

00005934 <isReceiveDataAvailableWrapper>:
isReceiveDataAvailableWrapper():
..\X2Csrc\__X2CScopeWrapper.c:65
    5934:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:66
    5936:	03 45       	LD        R5, [PC + #3]         ;->0x5940  :=0x10001d9c
    5938:	05 82       	LD.W      R0, [R5]
    593a:	00 5c       	LJMP      R0
..\X2Csrc\__X2CScopeWrapper.c:67
    593c:	0d 5d       	POP       LR
    593e:	1d 5c       	JMP       LR
    5940:	9c 1d 00 10 	.long     0x10001d9c ->268443036  [!!!@2@:MOV       R9, #220	@@: MOV       R0, #0

00005944 <isSendReadyWrapper>:
isSendReadyWrapper():
..\X2Csrc\__X2CScopeWrapper.c:69
    5944:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:70
    5946:	03 45       	LD        R5, [PC + #3]         ;->0x5950  :=0x10001da0
    5948:	05 82       	LD.W      R0, [R5]
    594a:	00 5c       	LJMP      R0
..\X2Csrc\__X2CScopeWrapper.c:71
    594c:	0d 5d       	POP       LR
    594e:	1d 5c       	JMP       LR
    5950:	a0 1d 00 10 	.long     0x10001da0 ->268443040  [!!!@2@:MOV       R10, #208	@@: MOV       R0, #0

00005954 <X2CScope_Initialise>:
X2CScope_Initialise():
..\X2Csrc\__X2CScopeWrapper.c:3
    5954:	83 5f       	PUSH      {R6-R7,LR}
..\X2Csrc\__X2CScopeWrapper.c:6
    5956:	1d 45       	LD        R5, [PC + #29]        ;->0x59c8  :=0x685c
    5958:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:8
    595a:	1d 47       	LD        R7, [PC + #29]        ;->0x59cc  :=0x10001c50
    595c:	07 58       	MOV       R0, R7
    595e:	1d 45       	LD        R5, [PC + #29]        ;->0x59d0  :=0x62c0
    5960:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:10
    5962:	1d 46       	LD        R6, [PC + #29]        ;->0x59d4  :=0x10001c68
    5964:	06 58       	MOV       R0, R6
    5966:	1d 41       	LD        R1, [PC + #29]        ;->0x59d8  :=0x10001c94
    5968:	2f 1f       	MOV       R2, #255
    596a:	31 10       	MOV       R3, #1
    596c:	1c 45       	LD        R5, [PC + #28]        ;->0x59dc  :=0x628c
    596e:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:12
    5970:	06 58       	MOV       R0, R6
    5972:	1c 45       	LD        R5, [PC + #28]        ;->0x59e0  :=0x6810
    5974:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:15
    5976:	06 58       	MOV       R0, R6
    5978:	1b 45       	LD        R5, [PC + #27]        ;->0x59e4  :=0x6830
    597a:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:18
    597c:	06 58       	MOV       R0, R6
    597e:	1b 45       	LD        R5, [PC + #27]        ;->0x59e8  :=0x5d94
    5980:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:19
    5982:	06 58       	MOV       R0, R6
    5984:	1a 45       	LD        R5, [PC + #26]        ;->0x59ec  :=0x5db0
    5986:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:22
    5988:	06 58       	MOV       R0, R6
    598a:	1a 45       	LD        R5, [PC + #26]        ;->0x59f0  :=0x6884
    598c:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:23
    598e:	06 58       	MOV       R0, R6
    5990:	27 58       	MOV       R1, R7
    5992:	19 45       	LD        R5, [PC + #25]        ;->0x59f4  :=0x62f4
    5994:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:24
    5996:	19 46       	LD        R6, [PC + #25]        ;->0x59f8  :=0x10001c4c
    5998:	06 82       	LD.W      R0, [R6]
    599a:	11 10       	MOV       R1, #1
    599c:	c1 a0       	ST.W      [R0 + #3], R1
..\X2Csrc\__X2CScopeWrapper.c:26
    599e:	18 45       	LD        R5, [PC + #24]        ;->0x59fc  :=0x68ac
    59a0:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:28
    59a2:	56 82       	LD.W      R5, [R6]
    59a4:	17 44       	LD        R4, [PC + #23]        ;->0x5a00  :=0x8050
    59a6:	6c a0       	ST.W      [R5 + #1], R4
..\X2Csrc\__X2CScopeWrapper.c:29
    59a8:	17 44       	LD        R4, [PC + #23]        ;->0x5a04  :=0x8040
    59aa:	54 85       	ST.W      [R5], R4
..\X2Csrc\__X2CScopeWrapper.c:75
    59ac:	17 45       	LD        R5, [PC + #23]        ;->0x5a08  :=0x5910
    59ae:	75 85       	ST.W      [R7], R5
..\X2Csrc\__X2CScopeWrapper.c:76
    59b0:	17 45       	LD        R5, [PC + #23]        ;->0x5a0c  :=0x5924
    59b2:	7d a0       	ST.W      [R7 + #1], R5
..\X2Csrc\__X2CScopeWrapper.c:77
    59b4:	17 45       	LD        R5, [PC + #23]        ;->0x5a10  :=0x5934
    59b6:	bd a0       	ST.W      [R7 + #2], R5
..\X2Csrc\__X2CScopeWrapper.c:78
    59b8:	17 45       	LD        R5, [PC + #23]        ;->0x5a14  :=0x5944
    59ba:	fd a0       	ST.W      [R7 + #3], R5
..\X2Csrc\__X2CScopeWrapper.c:33
    59bc:	17 45       	LD        R5, [PC + #23]        ;->0x5a18  :=0x68bc
    59be:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:34
    59c0:	03 5e       	POP       {R6-R7}
    59c2:	0d 5d       	POP       LR
    59c4:	1d 5c       	JMP       LR
    59c6:	00 00       	NOP      NOP      
    59c8:	5c 68 00 00 	.long     0x0000685c ->000026716  [!!!@2@:NOT       R5, R12	@@: NOP      
    59cc:	50 1c 00 10 	.long     0x10001c50 ->268442704  [!!!@2@:MOV       R5, #192	@@: MOV       R0, #0
    59d0:	c0 62 00 00 	.long     0x000062c0 ->000025280  [!!!@2@:SXT.B     R12, R0	@@: NOP      
    59d4:	68 1c 00 10 	.long     0x10001c68 ->268442728  [!!!@2@:MOV       R6, #200	@@: MOV       R0, #0
    59d8:	94 1c 00 10 	.long     0x10001c94 ->268442772  [!!!@2@:MOV       R9, #196	@@: MOV       R0, #0
    59dc:	8c 62 00 00 	.long     0x0000628c ->000025228  [!!!@2@:SXT.B     R8, R12	@@: NOP      
    59e0:	10 68 00 00 	.long     0x00006810 ->000026640  [!!!@2@:NOT       R1, R0	@@: NOP      
    59e4:	30 68 00 00 	.long     0x00006830 ->000026672  [!!!@2@:NOT       R3, R0	@@: NOP      
    59e8:	94 5d 00 00 	.long     0x00005d94 ->000023956 
    59ec:	b0 5d 00 00 	.long     0x00005db0 ->000023984 
    59f0:	84 68 00 00 	.long     0x00006884 ->000026756  [!!!@2@:NOT       R8, R4	@@: NOP      
    59f4:	f4 62 00 00 	.long     0x000062f4 ->000025332  [!!!@2@:SXT.B     PC, R4	@@: NOP      
    59f8:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
    59fc:	ac 68 00 00 	.long     0x000068ac ->000026796  [!!!@2@:NOT       R10, R12	@@: NOP      
    5a00:	50 80 00 00 	.long     0x00008050 ->000032848  [!!!@2@:LD.B      R5, [R0]	@@: NOP      
    5a04:	40 80 00 00 	.long     0x00008040 ->000032832  [!!!@2@:LD.B      R4, [R0]	@@: NOP      
    5a08:	10 59 00 00 	.long     0x00005910 ->000022800  [!!!@2@:MOV       R8, R16	@@: NOP      
    5a0c:	24 59 00 00 	.long     0x00005924 ->000022820  [!!!@2@:MOV       R9, R4	@@: NOP      
    5a10:	34 59 00 00 	.long     0x00005934 ->000022836  [!!!@2@:MOV       R9, R20	@@: NOP      
    5a14:	44 59 00 00 	.long     0x00005944 ->000022852  [!!!@2@:MOV       R10, R4	@@: NOP      
    5a18:	bc 68 00 00 	.long     0x000068bc ->000026812  [!!!@2@:NOT       R11, R12	@@: NOP      

00005a1c <X2CScope_Communicate>:
X2CScope_Communicate():
..\X2Csrc\__X2CScopeWrapper.c:36
    5a1c:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:37
    5a1e:	03 40       	LD        R0, [PC + #3]         ;->0x5a28  :=0x10001c68
    5a20:	50 82       	LD.W      R5, [R0]
    5a22:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:38
    5a24:	0d 5d       	POP       LR
    5a26:	1d 5c       	JMP       LR
    5a28:	68 1c 00 10 	.long     0x10001c68 ->268442728  [!!!@2@:MOV       R6, #200	@@: MOV       R0, #0

00005a2c <X2CScope_Update>:
X2CScope_Update():
..\X2Csrc\__X2CScopeWrapper.c:40
    5a2c:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:41
    5a2e:	03 45       	LD        R5, [PC + #3]         ;->0x5a38  :=0x68d0
    5a30:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:42
    5a32:	0d 5d       	POP       LR
    5a34:	1d 5c       	JMP       LR
    5a36:	00 00       	NOP      NOP      
    5a38:	d0 68 00 00 	.long     0x000068d0 ->000026832  [!!!@2@:NOT       LR, R0	@@: NOP      

00005a3c <X2CScope_HookUARTFunctions>:
X2CScope_HookUARTFunctions():
..\X2Csrc\__X2CScopeWrapper.c:51
    5a3c:	05 45       	LD        R5, [PC + #5]         ;->0x5a50  :=0x10001d94
    5a3e:	50 85       	ST.W      [R5], R0
..\X2Csrc\__X2CScopeWrapper.c:52
    5a40:	05 45       	LD        R5, [PC + #5]         ;->0x5a54  :=0x10001d98
    5a42:	51 85       	ST.W      [R5], R1
..\X2Csrc\__X2CScopeWrapper.c:53
    5a44:	05 45       	LD        R5, [PC + #5]         ;->0x5a58  :=0x10001d9c
    5a46:	52 85       	ST.W      [R5], R2
..\X2Csrc\__X2CScopeWrapper.c:54
    5a48:	05 45       	LD        R5, [PC + #5]         ;->0x5a5c  :=0x10001da0
    5a4a:	53 85       	ST.W      [R5], R3
..\X2Csrc\__X2CScopeWrapper.c:55
    5a4c:	1d 5c       	JMP       LR
    5a4e:	00 00       	NOP      NOP      
    5a50:	94 1d 00 10 	.long     0x10001d94 ->268443028  [!!!@2@:MOV       R9, #212	@@: MOV       R0, #0
    5a54:	98 1d 00 10 	.long     0x10001d98 ->268443032  [!!!@2@:MOV       R9, #216	@@: MOV       R0, #0
    5a58:	9c 1d 00 10 	.long     0x10001d9c ->268443036  [!!!@2@:MOV       R9, #220	@@: MOV       R0, #0
    5a5c:	a0 1d 00 10 	.long     0x10001da0 ->268443040  [!!!@2@:MOV       R10, #208	@@: MOV       R0, #0

00005a60 <getBlockData>:
getBlockData():
..\X2Csrc\__BlockServicesX2C.c:297
    5a60:	87 5f       	PUSH      {R6-R8,LR}
    5a62:	c0 58       	MOV       R6, R0
..\X2Csrc\__BlockServicesX2C.c:307
    5a64:	d0 98       	LD.W      R2, [R0 + #3]
    5a66:	02 59       	MOV       R8, R2
..\X2Csrc\__BlockServicesX2C.c:308
    5a68:	9a 88       	LD.B      R3, [R2 + #2]
    5a6a:	43 d1       	ZXT.B     R4, R3
    5a6c:	a0 7a       	LSL       R4, #8
..\X2Csrc\__BlockServicesX2C.c:309
    5a6e:	d2 88       	LD.B      R2, [R2 + #3]
    5a70:	52 d1       	ZXT.B     R5, R2
    5a72:	28 7b       	LSL       R5, #16
..\X2Csrc\__BlockServicesX2C.c:307
    5a74:	64 c3       	ADD       R4, R4, R5
    5a76:	68 58       	MOV       R3, R8
    5a78:	5b 88       	LD.B      R3, [R3 + #1]
    5a7a:	53 d1       	ZXT.B     R5, R3
..\X2Csrc\__BlockServicesX2C.c:308
    5a7c:	64 c3       	ADD       R4, R4, R5
..\X2Csrc\__BlockServicesX2C.c:310
    5a7e:	48 58       	MOV       R2, R8
    5a80:	12 89       	LD.B      R2, [R2 + #4]
    5a82:	52 d1       	ZXT.B     R5, R2
    5a84:	a8 7b       	LSL       R5, #24
..\X2Csrc\__BlockServicesX2C.c:309
    5a86:	44 c3       	ADD       R0, R4, R5
..\X2Csrc\__BlockServicesX2C.c:315
    5a88:	7c e7       	LD.H      R7, [R4 + R5]
..\X2Csrc\__BlockServicesX2C.c:318
    5a8a:	18 45       	LD        R5, [PC + #24]        ;->0x5ae8  :=0x10001c4c
    5a8c:	35 82       	LD.W      R3, [R5]
    5a8e:	6b 98       	LD.W      R5, [R3 + #1]
    5a90:	55 81       	LD.H      R5, [R5]
    5a92:	57 70       	CMP       R5, R7
    5a94:	36 f0       	JZ        $+54                  ;->0x5b00
    5a96:	6b 98       	LD.W      R5, [R3 + #1]
    5a98:	55 81       	LD.H      R5, [R5]
    5a9a:	50 38       	CMP       R5, #0
    5a9c:	10 f0       	JZ        $+16                  ;->0x5abc
    5a9e:	40 10       	MOV       R4, #0
    5aa0:	18 11       	MOV       R1, #24
    5aa2:	05 04       	SJMP      $+5                   ;->0x5aac
    5aa4:	53 98       	LD.W      R2, [R3 + #1]
    5aa6:	52 e7       	LD.H      R2, [R2 + R5]
    5aa8:	20 38       	CMP       R2, #0
    5aaa:	09 f0       	JZ        $+9                   ;->0x5abc
..\X2Csrc\__BlockServicesX2C.c:320
    5aac:	64 c0       	ADD       R4, R4, #1
    5aae:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__BlockServicesX2C.c:318
    5ab0:	53 98       	LD.W      R2, [R3 + #1]
    5ab2:	6c ca       	MULS      R5, R4, R1
    5ab4:	00 00       	NOP      NOP      
    5ab6:	52 e7       	LD.H      R2, [R2 + R5]
    5ab8:	27 70       	CMP       R2, R7
    5aba:	f5 f1       	JNZ       $-11                  ;->0x5aa4
..\X2Csrc\__BlockServicesX2C.c:322
    5abc:	63 98       	LD.W      R4, [R3 + #1]
    5abe:	64 e7       	LD.H      R4, [R4 + R5]
    5ac0:	40 38       	CMP       R4, #0
    5ac2:	15 f0       	JZ        $+21                  ;->0x5aec
..\X2Csrc\__BlockServicesX2C.c:329
    5ac4:	63 98       	LD.W      R4, [R3 + #1]
    5ac6:	6c c3       	ADD       R5, R4, R5
    5ac8:	ed 98       	LD.W      R5, [R5 + #3]
    5aca:	68 58       	MOV       R3, R8
    5acc:	8b c0       	ADD       R1, R3, #2
    5ace:	05 5c       	LJMP      R5
    5ad0:	80 c0       	ADD       R0, R0, #2
    5ad2:	30 92       	ST.B      [R6 + #8], R0
..\X2Csrc\__BlockServicesX2C.c:330
    5ad4:	50 10       	MOV       R5, #0
    5ad6:	e6 98       	LD.W      R4, [R6 + #3]
    5ad8:	65 90       	ST.B      [R4 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:331
    5ada:	6e 98       	LD.W      R5, [R6 + #1]
    5adc:	06 58       	MOV       R0, R6
    5ade:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:333
    5ae0:	07 5e       	POP       {R6-R8}
    5ae2:	0d 5d       	POP       LR
    5ae4:	1d 5c       	JMP       LR
    5ae6:	00 00       	NOP      NOP      
    5ae8:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__BlockServicesX2C.c:325
    5aec:	06 58       	MOV       R0, R6
    5aee:	11 14       	MOV       R1, #65
    5af0:	03 45       	LD        R5, [PC + #3]         ;->0x5afc  :=0x67fc
    5af2:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:333
    5af4:	07 5e       	POP       {R6-R8}
    5af6:	0d 5d       	POP       LR
    5af8:	1d 5c       	JMP       LR
    5afa:	00 00       	NOP      NOP      
    5afc:	fc 67 00 00 	.long     0x000067fc ->000026620  [!!!@2@:SUBC      PC, R12	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:318
    5b00:	50 10       	MOV       R5, #0
    5b02:	dd 07       	SJMP      $-35                  ;->0x5abc

00005b04 <putBlockData>:
putBlockData():
..\X2Csrc\__BlockServicesX2C.c:239
    5b04:	87 5f       	PUSH      {R6-R8,LR}
    5b06:	c0 58       	MOV       R6, R0
..\X2Csrc\__BlockServicesX2C.c:252
    5b08:	d8 98       	LD.W      R3, [R0 + #3]
    5b0a:	03 59       	MOV       R8, R3
..\X2Csrc\__BlockServicesX2C.c:253
    5b0c:	ab 88       	LD.B      R5, [R3 + #2]
    5b0e:	45 d1       	ZXT.B     R4, R5
    5b10:	a0 7a       	LSL       R4, #8
..\X2Csrc\__BlockServicesX2C.c:254
    5b12:	db 88       	LD.B      R3, [R3 + #3]
    5b14:	53 d1       	ZXT.B     R5, R3
    5b16:	28 7b       	LSL       R5, #16
..\X2Csrc\__BlockServicesX2C.c:252
    5b18:	64 c3       	ADD       R4, R4, R5
    5b1a:	68 58       	MOV       R3, R8
    5b1c:	5b 88       	LD.B      R3, [R3 + #1]
    5b1e:	53 d1       	ZXT.B     R5, R3
..\X2Csrc\__BlockServicesX2C.c:253
    5b20:	64 c3       	ADD       R4, R4, R5
..\X2Csrc\__BlockServicesX2C.c:255
    5b22:	68 58       	MOV       R3, R8
    5b24:	1b 89       	LD.B      R3, [R3 + #4]
    5b26:	53 d1       	ZXT.B     R5, R3
    5b28:	a8 7b       	LSL       R5, #24
..\X2Csrc\__BlockServicesX2C.c:254
    5b2a:	44 c3       	ADD       R0, R4, R5
..\X2Csrc\__BlockServicesX2C.c:260
    5b2c:	7c e7       	LD.H      R7, [R4 + R5]
..\X2Csrc\__BlockServicesX2C.c:263
    5b2e:	1a 45       	LD        R5, [PC + #26]        ;->0x5b94  :=0x10001c4c
    5b30:	35 82       	LD.W      R3, [R5]
    5b32:	6b 98       	LD.W      R5, [R3 + #1]
    5b34:	55 81       	LD.H      R5, [R5]
    5b36:	57 70       	CMP       R5, R7
    5b38:	44 f0       	JZ        $+68                  ;->0x5bc0
    5b3a:	6b 98       	LD.W      R5, [R3 + #1]
    5b3c:	55 81       	LD.H      R5, [R5]
    5b3e:	50 38       	CMP       R5, #0
    5b40:	10 f0       	JZ        $+16                  ;->0x5b60
    5b42:	40 10       	MOV       R4, #0
    5b44:	18 11       	MOV       R1, #24
    5b46:	05 04       	SJMP      $+5                   ;->0x5b50
    5b48:	53 98       	LD.W      R2, [R3 + #1]
    5b4a:	52 e7       	LD.H      R2, [R2 + R5]
    5b4c:	20 38       	CMP       R2, #0
    5b4e:	09 f0       	JZ        $+9                   ;->0x5b60
..\X2Csrc\__BlockServicesX2C.c:265
    5b50:	64 c0       	ADD       R4, R4, #1
    5b52:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__BlockServicesX2C.c:263
    5b54:	53 98       	LD.W      R2, [R3 + #1]
    5b56:	6c ca       	MULS      R5, R4, R1
    5b58:	00 00       	NOP      NOP      
    5b5a:	52 e7       	LD.H      R2, [R2 + R5]
    5b5c:	27 70       	CMP       R2, R7
    5b5e:	f5 f1       	JNZ       $-11                  ;->0x5b48
..\X2Csrc\__BlockServicesX2C.c:267
    5b60:	63 98       	LD.W      R4, [R3 + #1]
    5b62:	64 e7       	LD.H      R4, [R4 + R5]
    5b64:	40 38       	CMP       R4, #0
    5b66:	23 f0       	JZ        $+35                  ;->0x5bac
..\X2Csrc\__BlockServicesX2C.c:272
    5b68:	63 98       	LD.W      R4, [R3 + #1]
    5b6a:	6c c3       	ADD       R5, R4, R5
    5b6c:	16 8a       	LD.B      R2, [R6 + #8]
    5b6e:	52 cd       	SUB       R2, R2, #5
    5b70:	2d 99       	LD.W      R5, [R5 + #4]
    5b72:	88 58       	MOV       R4, R8
    5b74:	4c c1       	ADD       R1, R4, #5
    5b76:	22 d1       	ZXT.B     R2, R2
    5b78:	05 5c       	LJMP      R5
    5b7a:	00 38       	CMP       R0, #0
    5b7c:	0e f1       	JNZ       $+14                  ;->0x5b98
..\X2Csrc\__BlockServicesX2C.c:280
    5b7e:	52 10       	MOV       R5, #2
    5b80:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__BlockServicesX2C.c:281
    5b82:	ee 98       	LD.W      R5, [R6 + #3]
    5b84:	68 90       	ST.B      [R5 + #1], R0
..\X2Csrc\__BlockServicesX2C.c:282
    5b86:	6e 98       	LD.W      R5, [R6 + #1]
    5b88:	06 58       	MOV       R0, R6
    5b8a:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:285
    5b8c:	07 5e       	POP       {R6-R8}
    5b8e:	0d 5d       	POP       LR
    5b90:	1d 5c       	JMP       LR
    5b92:	00 00       	NOP      NOP      
    5b94:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__BlockServicesX2C.c:276
    5b98:	06 58       	MOV       R0, R6
    5b9a:	14 11       	MOV       R1, #20
    5b9c:	03 45       	LD        R5, [PC + #3]         ;->0x5ba8  :=0x67fc
    5b9e:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:285
    5ba0:	07 5e       	POP       {R6-R8}
    5ba2:	0d 5d       	POP       LR
    5ba4:	1d 5c       	JMP       LR
    5ba6:	00 00       	NOP      NOP      
    5ba8:	fc 67 00 00 	.long     0x000067fc ->000026620  [!!!@2@:SUBC      PC, R12	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:270
    5bac:	06 58       	MOV       R0, R6
    5bae:	11 14       	MOV       R1, #65
    5bb0:	03 45       	LD        R5, [PC + #3]         ;->0x5bbc  :=0x67fc
    5bb2:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:285
    5bb4:	07 5e       	POP       {R6-R8}
    5bb6:	0d 5d       	POP       LR
    5bb8:	1d 5c       	JMP       LR
    5bba:	00 00       	NOP      NOP      
    5bbc:	fc 67 00 00 	.long     0x000067fc ->000026620  [!!!@2@:SUBC      PC, R12	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:263
    5bc0:	50 10       	MOV       R5, #0
    5bc2:	cf 07       	SJMP      $-49                  ;->0x5b60

00005bc4 <getRAMBlock>:
getRAMBlock():
..\X2Csrc\__BlockServicesX2C.c:139
    5bc4:	81 5f       	PUSH      {R6,LR}
..\X2Csrc\__BlockServicesX2C.c:155
    5bc6:	e8 98       	LD.W      R5, [R0 + #3]
    5bc8:	c5 58       	MOV       R6, R5
    5bca:	4d 89       	LD.B      R1, [R5 + #5]
..\X2Csrc\__BlockServicesX2C.c:156
    5bcc:	95 89       	LD.B      R2, [R5 + #6]
..\X2Csrc\__BlockServicesX2C.c:158
    5bce:	59 c0       	ADD       R3, R1, #1
    5bd0:	60 8a       	LD.B      R4, [R0 + #9]
    5bd2:	34 70       	CMP       R3, R4
    5bd4:	13 fa       	JGE       $+19                  ;->0x5bfa
..\X2Csrc\__BlockServicesX2C.c:171
    5bd6:	9d 88       	LD.B      R3, [R5 + #2]
    5bd8:	98 7a       	LSL       R3, #8
..\X2Csrc\__BlockServicesX2C.c:172
    5bda:	e5 88       	LD.B      R4, [R5 + #3]
    5bdc:	20 7b       	LSL       R4, #16
..\X2Csrc\__BlockServicesX2C.c:170
    5bde:	23 c3       	ADD       R4, R3, R4
    5be0:	5d 88       	LD.B      R3, [R5 + #1]
..\X2Csrc\__BlockServicesX2C.c:171
    5be2:	e4 c2       	ADD       R4, R4, R3
..\X2Csrc\__BlockServicesX2C.c:173
    5be4:	1d 89       	LD.B      R3, [R5 + #4]
    5be6:	98 7b       	LSL       R3, #24
..\X2Csrc\__BlockServicesX2C.c:172
    5be8:	e4 c2       	ADD       R4, R4, R3
..\X2Csrc\__BlockServicesX2C.c:178
    5bea:	22 38       	CMP       R2, #2
    5bec:	10 f0       	JZ        $+16                  ;->0x5c0c
    5bee:	24 38       	CMP       R2, #4
    5bf0:	3a f0       	JZ        $+58                  ;->0x5c64
    5bf2:	21 38       	CMP       R2, #1
    5bf4:	27 f0       	JZ        $+39                  ;->0x5c42
    5bf6:	14 11       	MOV       R1, #20
    5bf8:	02 04       	SJMP      $+2                   ;->0x5bfc
..\X2Csrc\__BlockServicesX2C.c:158
    5bfa:	15 11       	MOV       R1, #21
..\X2Csrc\__BlockServicesX2C.c:225
    5bfc:	03 45       	LD        R5, [PC + #3]         ;->0x5c08  :=0x67fc
    5bfe:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:227
    5c00:	06 5d       	POP       R6
    5c02:	0d 5d       	POP       LR
    5c04:	1d 5c       	JMP       LR
    5c06:	00 00       	NOP      NOP      
    5c08:	fc 67 00 00 	.long     0x000067fc ->000026620  [!!!@2@:SUBC      PC, R12	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:192
    5c0c:	20 10       	MOV       R2, #0
    5c0e:	10 38       	CMP       R1, #0
    5c10:	03 f1       	JNZ       $+3                   ;->0x5c16
    5c12:	0f 04       	SJMP      $+15                  ;->0x5c30
    5c14:	e8 98       	LD.W      R5, [R0 + #3]
..\X2Csrc\__BlockServicesX2C.c:194
    5c16:	ad c2       	ADD       R5, R5, R2
    5c18:	34 81       	LD.H      R3, [R4]
    5c1a:	ab 90       	ST.B      [R5 + #2], R3
..\X2Csrc\__BlockServicesX2C.c:195
    5c1c:	f0 98       	LD.W      R6, [R0 + #3]
    5c1e:	ae c2       	ADD       R5, R6, R2
    5c20:	34 74       	LD.H      R3, [R4++]
    5c22:	98 7c       	LSR       R3, #8
    5c24:	eb 90       	ST.B      [R5 + #3], R3
..\X2Csrc\__BlockServicesX2C.c:192
    5c26:	92 c0       	ADD       R2, R2, #2
    5c28:	22 d0       	ZXT.H     R2, R2
    5c2a:	12 70       	CMP       R1, R2
    5c2c:	f4 f8       	JHI       $-12                  ;->0x5c14
    5c2e:	f0 98       	LD.W      R6, [R0 + #3]
..\X2Csrc\__BlockServicesX2C.c:219
    5c30:	89 c0       	ADD       R1, R1, #2
    5c32:	01 92       	ST.B      [R0 + #8], R1
..\X2Csrc\__BlockServicesX2C.c:220
    5c34:	50 10       	MOV       R5, #0
    5c36:	75 90       	ST.B      [R6 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:221
    5c38:	68 98       	LD.W      R5, [R0 + #1]
    5c3a:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:227
    5c3c:	06 5d       	POP       R6
    5c3e:	0d 5d       	POP       LR
    5c40:	1d 5c       	JMP       LR
..\X2Csrc\__BlockServicesX2C.c:183
    5c42:	10 38       	CMP       R1, #0
    5c44:	f6 f0       	JZ        $-10                  ;->0x5c30
..\X2Csrc\__BlockServicesX2C.c:138
    5c46:	71 cc       	SUB       R6, R1, #1
    5c48:	66 d0       	ZXT.H     R6, R6
    5c4a:	76 c0       	ADD       R6, R6, #1
    5c4c:	36 c3       	ADD       R6, R6, R4
    5c4e:	22 10       	MOV       R2, #2
    5c50:	12 c7       	SUB       R2, R2, R4
    5c52:	02 04       	SJMP      $+2                   ;->0x5c56
    5c54:	e8 98       	LD.W      R5, [R0 + #3]
..\X2Csrc\__BlockServicesX2C.c:185
    5c56:	34 80       	LD.B      R3, [R4]
    5c58:	2d c3       	ADD       R5, R5, R4
    5c5a:	ab ea       	ST.B      [R5 + R2], R3
    5c5c:	64 c0       	ADD       R4, R4, #1
..\X2Csrc\__BlockServicesX2C.c:183
    5c5e:	46 70       	CMP       R4, R6
    5c60:	fa f1       	JNZ       $-6                   ;->0x5c54
    5c62:	e6 07       	SJMP      $-26                  ;->0x5c2e
..\X2Csrc\__BlockServicesX2C.c:202
    5c64:	10 38       	CMP       R1, #0
    5c66:	e5 f0       	JZ        $-27                  ;->0x5c30
    5c68:	64 58       	MOV       R3, R4
    5c6a:	40 10       	MOV       R4, #0
    5c6c:	02 04       	SJMP      $+2                   ;->0x5c70
    5c6e:	e8 98       	LD.W      R5, [R0 + #3]
..\X2Csrc\__BlockServicesX2C.c:204
    5c70:	2d c3       	ADD       R5, R5, R4
    5c72:	23 82       	LD.W      R2, [R3]
    5c74:	aa 90       	ST.B      [R5 + #2], R2
..\X2Csrc\__BlockServicesX2C.c:205
    5c76:	f0 98       	LD.W      R6, [R0 + #3]
    5c78:	2e c3       	ADD       R5, R6, R4
    5c7a:	23 82       	LD.W      R2, [R3]
    5c7c:	90 7c       	LSR       R2, #8
    5c7e:	ea 90       	ST.B      [R5 + #3], R2
..\X2Csrc\__BlockServicesX2C.c:206
    5c80:	d0 98       	LD.W      R2, [R0 + #3]
    5c82:	2a c3       	ADD       R5, R2, R4
    5c84:	23 82       	LD.W      R2, [R3]
    5c86:	10 7d       	LSR       R2, #16
    5c88:	2a 91       	ST.B      [R5 + #4], R2
..\X2Csrc\__BlockServicesX2C.c:207
    5c8a:	f0 98       	LD.W      R6, [R0 + #3]
    5c8c:	2e c3       	ADD       R5, R6, R4
    5c8e:	23 72       	LD.W      R2, [R3++]
    5c90:	90 7d       	LSR       R2, #24
    5c92:	6a 91       	ST.B      [R5 + #5], R2
..\X2Csrc\__BlockServicesX2C.c:202
    5c94:	24 c1       	ADD       R4, R4, #4
    5c96:	44 d0       	ZXT.H     R4, R4
    5c98:	14 70       	CMP       R1, R4
    5c9a:	ea f8       	JHI       $-22                  ;->0x5c6e
    5c9c:	c9 07       	SJMP      $-55                  ;->0x5c2e
	...

00005ca0 <putRAMBlock>:
putRAMBlock():
..\X2Csrc\__BlockServicesX2C.c:46
    5ca0:	83 5f       	PUSH      {R6-R7,LR}
    5ca2:	60 58       	MOV       R3, R0
..\X2Csrc\__BlockServicesX2C.c:70
    5ca4:	e8 98       	LD.W      R5, [R0 + #3]
    5ca6:	c5 58       	MOV       R6, R5
..\X2Csrc\__BlockServicesX2C.c:71
    5ca8:	95 88       	LD.B      R2, [R5 + #2]
    5caa:	90 7a       	LSL       R2, #8
..\X2Csrc\__BlockServicesX2C.c:72
    5cac:	e5 88       	LD.B      R4, [R5 + #3]
    5cae:	20 7b       	LSL       R4, #16
..\X2Csrc\__BlockServicesX2C.c:70
    5cb0:	22 c3       	ADD       R4, R2, R4
    5cb2:	55 88       	LD.B      R2, [R5 + #1]
..\X2Csrc\__BlockServicesX2C.c:71
    5cb4:	a4 c2       	ADD       R4, R4, R2
..\X2Csrc\__BlockServicesX2C.c:73
    5cb6:	15 89       	LD.B      R2, [R5 + #4]
    5cb8:	90 7b       	LSL       R2, #24
..\X2Csrc\__BlockServicesX2C.c:72
    5cba:	a4 c2       	ADD       R4, R4, R2
..\X2Csrc\__BlockServicesX2C.c:78
    5cbc:	08 8a       	LD.B      R1, [R0 + #8]
    5cbe:	89 cd       	SUB       R1, R1, #6
    5cc0:	11 d1       	ZXT.B     R1, R1
..\X2Csrc\__BlockServicesX2C.c:79
    5cc2:	55 89       	LD.B      R2, [R5 + #5]
..\X2Csrc\__BlockServicesX2C.c:81
    5cc4:	b9 d2       	DIVU      R7, R1, R2
    5cc6:	bf ca       	MULS      R7, R7, R2
    5cc8:	00 00       	NOP      NOP      
    5cca:	f9 c7       	SUB       R7, R1, R7
    5ccc:	77 d1       	ZXT.B     R7, R7
    5cce:	70 38       	CMP       R7, #0
    5cd0:	07 f1       	JNZ       $+7                   ;->0x5cde
..\X2Csrc\__BlockServicesX2C.c:87
    5cd2:	22 38       	CMP       R2, #2
    5cd4:	47 f0       	JZ        $+71                  ;->0x5d62
    5cd6:	24 38       	CMP       R2, #4
    5cd8:	0c f0       	JZ        $+12                  ;->0x5cf0
    5cda:	21 38       	CMP       R2, #1
    5cdc:	2b f0       	JZ        $+43                  ;->0x5d32
..\X2Csrc\__BlockServicesX2C.c:122
    5cde:	14 11       	MOV       R1, #20
    5ce0:	03 45       	LD        R5, [PC + #3]         ;->0x5cec  :=0x67fc
    5ce2:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:130
    5ce4:	03 5e       	POP       {R6-R7}
    5ce6:	0d 5d       	POP       LR
    5ce8:	1d 5c       	JMP       LR
    5cea:	00 00       	NOP      NOP      
    5cec:	fc 67 00 00 	.long     0x000067fc ->000026620  [!!!@2@:SUBC      PC, R12	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:111
    5cf0:	0a 7c       	LSR       R1, #2
    5cf2:	10 38       	CMP       R1, #0
    5cf4:	15 f0       	JZ        $+21                  ;->0x5d1e
..\X2Csrc\__BlockServicesX2C.c:45
    5cf6:	ad c1       	ADD       R5, R5, #6
    5cf8:	49 cc       	SUB       R1, R1, #1
    5cfa:	01 d0       	ZXT.H     R0, R1
    5cfc:	02 7a       	LSL       R0, #2
    5cfe:	04 c2       	ADD       R0, R4, R0
    5d00:	00 c1       	ADD       R0, R0, #4
..\X2Csrc\__BlockServicesX2C.c:114
    5d02:	4d 88       	LD.B      R1, [R5 + #1]
    5d04:	88 7a       	LSL       R1, #8
..\X2Csrc\__BlockServicesX2C.c:115
    5d06:	95 88       	LD.B      R2, [R5 + #2]
    5d08:	10 7b       	LSL       R2, #16
..\X2Csrc\__BlockServicesX2C.c:113
    5d0a:	91 c2       	ADD       R2, R1, R2
    5d0c:	15 80       	LD.B      R1, [R5]
..\X2Csrc\__BlockServicesX2C.c:114
    5d0e:	52 c2       	ADD       R2, R2, R1
..\X2Csrc\__BlockServicesX2C.c:116
    5d10:	cd 88       	LD.B      R1, [R5 + #3]
    5d12:	88 7b       	LSL       R1, #24
..\X2Csrc\__BlockServicesX2C.c:115
    5d14:	52 c2       	ADD       R2, R2, R1
..\X2Csrc\__BlockServicesX2C.c:113
    5d16:	42 73       	ST.W      [R4++], R2
    5d18:	2d c1       	ADD       R5, R5, #4
..\X2Csrc\__BlockServicesX2C.c:111
    5d1a:	40 70       	CMP       R4, R0
    5d1c:	f3 f1       	JNZ       $-13                  ;->0x5d02
..\X2Csrc\__BlockServicesX2C.c:127
    5d1e:	52 10       	MOV       R5, #2
    5d20:	1d 92       	ST.B      [R3 + #8], R5
..\X2Csrc\__BlockServicesX2C.c:128
    5d22:	50 10       	MOV       R5, #0
    5d24:	75 90       	ST.B      [R6 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:129
    5d26:	6b 98       	LD.W      R5, [R3 + #1]
    5d28:	03 58       	MOV       R0, R3
    5d2a:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:130
    5d2c:	03 5e       	POP       {R6-R7}
    5d2e:	0d 5d       	POP       LR
    5d30:	1d 5c       	JMP       LR
..\X2Csrc\__BlockServicesX2C.c:92
    5d32:	10 38       	CMP       R1, #0
    5d34:	f5 f0       	JZ        $-11                  ;->0x5d1e
..\X2Csrc\__BlockServicesX2C.c:45
    5d36:	41 cc       	SUB       R0, R1, #1
    5d38:	00 d0       	ZXT.H     R0, R0
    5d3a:	40 c0       	ADD       R0, R0, #1
    5d3c:	00 c3       	ADD       R0, R0, R4
    5d3e:	16 10       	MOV       R1, #6
    5d40:	09 c7       	SUB       R1, R1, R4
    5d42:	02 04       	SJMP      $+2                   ;->0x5d46
    5d44:	eb 98       	LD.W      R5, [R3 + #3]
..\X2Csrc\__BlockServicesX2C.c:94
    5d46:	54 c2       	ADD       R2, R4, R1
    5d48:	ad e4       	LD.B      R5, [R5 + R2]
    5d4a:	45 77       	ST.B      [R4++], R5
..\X2Csrc\__BlockServicesX2C.c:92
    5d4c:	40 70       	CMP       R4, R0
    5d4e:	fb f1       	JNZ       $-5                   ;->0x5d44
    5d50:	f3 98       	LD.W      R6, [R3 + #3]
..\X2Csrc\__BlockServicesX2C.c:127
    5d52:	52 10       	MOV       R5, #2
    5d54:	1d 92       	ST.B      [R3 + #8], R5
..\X2Csrc\__BlockServicesX2C.c:128
    5d56:	50 10       	MOV       R5, #0
    5d58:	75 90       	ST.B      [R6 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:129
    5d5a:	6b 98       	LD.W      R5, [R3 + #1]
    5d5c:	03 58       	MOV       R0, R3
    5d5e:	05 5c       	LJMP      R5
    5d60:	e6 07       	SJMP      $-26                  ;->0x5d2c
..\X2Csrc\__BlockServicesX2C.c:101
    5d62:	09 7c       	LSR       R1, #1
    5d64:	10 38       	CMP       R1, #0
    5d66:	dc f0       	JZ        $-36                  ;->0x5d1e
..\X2Csrc\__BlockServicesX2C.c:45
    5d68:	ad c1       	ADD       R5, R5, #6
    5d6a:	49 cc       	SUB       R1, R1, #1
    5d6c:	11 d0       	ZXT.H     R1, R1
    5d6e:	49 c2       	ADD       R1, R1, R1
    5d70:	44 c2       	ADD       R0, R4, R1
    5d72:	80 c0       	ADD       R0, R0, #2
..\X2Csrc\__BlockServicesX2C.c:103
    5d74:	55 88       	LD.B      R2, [R5 + #1]
    5d76:	90 7a       	LSL       R2, #8
    5d78:	15 80       	LD.B      R1, [R5]
    5d7a:	52 c2       	ADD       R2, R2, R1
    5d7c:	42 75       	ST.H      [R4++], R2
    5d7e:	ad c0       	ADD       R5, R5, #2
..\X2Csrc\__BlockServicesX2C.c:101
    5d80:	40 70       	CMP       R4, R0
    5d82:	f9 f1       	JNZ       $-7                   ;->0x5d74
..\X2Csrc\__BlockServicesX2C.c:127
    5d84:	52 10       	MOV       R5, #2
    5d86:	1d 92       	ST.B      [R3 + #8], R5
..\X2Csrc\__BlockServicesX2C.c:128
    5d88:	50 10       	MOV       R5, #0
    5d8a:	75 90       	ST.B      [R6 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:129
    5d8c:	6b 98       	LD.W      R5, [R3 + #1]
    5d8e:	03 58       	MOV       R0, R3
    5d90:	05 5c       	LJMP      R5
    5d92:	cd 07       	SJMP      $-51                  ;->0x5d2c

00005d94 <addBlockServices>:
addBlockServices():
..\X2Csrc\__BlockServicesX2C.c:23
    5d94:	28 99       	LD.W      R5, [R0 + #4]
..\X2Csrc\__BlockServicesX2C.c:25
    5d96:	04 44       	LD        R4, [PC + #4]         ;->0x5da4  :=0x5bc4
    5d98:	6c a2       	ST.W      [R5 + #9], R4
..\X2Csrc\__BlockServicesX2C.c:26
    5d9a:	04 44       	LD        R4, [PC + #4]         ;->0x5da8  :=0x5a60
    5d9c:	ec a1       	ST.W      [R5 + #7], R4
..\X2Csrc\__BlockServicesX2C.c:27
    5d9e:	04 44       	LD        R4, [PC + #4]         ;->0x5dac  :=0x5b04
    5da0:	2c a2       	ST.W      [R5 + #8], R4
..\X2Csrc\__BlockServicesX2C.c:28
    5da2:	1d 5c       	JMP       LR
    5da4:	c4 5b 00 00 	.long     0x00005bc4 ->000023492  [!!!@2@:MOV       R30, R4	@@: NOP      
    5da8:	60 5a 00 00 	.long     0x00005a60 ->000023136  [!!!@2@:MOV       R19, R0	@@: NOP      
    5dac:	04 5b 00 00 	.long     0x00005b04 ->000023300  [!!!@2@:MOV       R24, R4	@@: NOP      

00005db0 <addExtendedBlockServices>:
addExtendedBlockServices():
..\X2Csrc\__BlockServicesX2C.c:37
    5db0:	28 99       	LD.W      R5, [R0 + #4]
..\X2Csrc\__BlockServicesX2C.c:38
    5db2:	02 44       	LD        R4, [PC + #2]         ;->0x5db8  :=0x5ca0
    5db4:	ac a2       	ST.W      [R5 + #10], R4
..\X2Csrc\__BlockServicesX2C.c:39
    5db6:	1d 5c       	JMP       LR
    5db8:	a0 5c 00 00 	.long     0x00005ca0 ->000023712 

00005dbc <enableSend>:
enableSend():
    5dbc:	51 10       	MOV       R5, #1
    5dbe:	45 a2       	ST.W      [R0 + #9], R5
..\X2Csrc\__LNet.c:40
    5dc0:	50 10       	MOV       R5, #0
    5dc2:	05 a2       	ST.W      [R0 + #8], R5
..\X2Csrc\__LNet.c:41
    5dc4:	1d 5c       	JMP       LR
	...

00005dc8 <communicate>:
communicate():
..\X2Csrc\__LNet.c:51
    5dc8:	ff 5f       	PUSH      {R6-R12,LR}
    5dca:	c0 58       	MOV       R6, R0
    5dcc:	78 9a       	LD.W      R7, [R0 + #9]
..\X2Csrc\__LNet.c:60
    5dce:	1b 42       	LD        R2, [PC + #27]        ;->0x5e38  :=0x5f6c
    5dd0:	22 59       	MOV       R9, R2
..\X2Csrc\__LNet.c:105
    5dd2:	1b 43       	LD        R3, [PC + #27]        ;->0x5e3c  :=0x10001da8
    5dd4:	43 59       	MOV       R10, R3
..\X2Csrc\__LNet.c:84
    5dd6:	80 58       	MOV       R4, R0
    5dd8:	49 2a       	ADD       R4, #41
    5dda:	04 59       	MOV       R8, R4
..\X2Csrc\__LNet.c:255
    5ddc:	19 45       	LD        R5, [PC + #25]        ;->0x5e40  :=0x10001da4
    5dde:	85 59       	MOV       R12, R5
..\X2Csrc\__LNet.c:256
    5de0:	b3 10       	MOV       R11, #3
..\X2Csrc\__LNet.c:58
    5de2:	71 38       	CMP       R7, #1
    5de4:	1a f1       	JNZ       $+26                  ;->0x5e18
    5de6:	46 99       	LD.W      R0, [R6 + #5]
    5de8:	e8 98       	LD.W      R5, [R0 + #3]
    5dea:	05 5c       	LJMP      R5
    5dec:	00 38       	CMP       R0, #0
    5dee:	14 f0       	JZ        $+20                  ;->0x5e16
..\X2Csrc\__LNet.c:60
    5df0:	2e 9a       	LD.W      R5, [R6 + #8]
    5df2:	55 38       	CMP       R5, #5
    5df4:	02 f8       	JHI       $+2                   ;->0x5df8
    5df6:	b0 04       	SJMP      $+176                 ;->0x5f56
..\X2Csrc\__LNet.c:46
    5df8:	70 10       	MOV       R7, #0
    5dfa:	77 a2       	ST.W      [R6 + #9], R7
..\X2Csrc\__LNet.c:47
    5dfc:	f7 a1       	ST.W      [R6 + #7], R7
..\X2Csrc\__LNet.c:130
    5dfe:	46 99       	LD.W      R0, [R6 + #5]
    5e00:	a8 98       	LD.W      R5, [R0 + #2]
    5e02:	05 5c       	LJMP      R5
    5e04:	00 38       	CMP       R0, #0
    5e06:	0b f0       	JZ        $+11                  ;->0x5e1c
..\X2Csrc\__LNet.c:133
    5e08:	46 99       	LD.W      R0, [R6 + #5]
    5e0a:	68 98       	LD.W      R5, [R0 + #1]
    5e0c:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:135
    5e0e:	ee 99       	LD.W      R5, [R6 + #7]
    5e10:	55 38       	CMP       R5, #5
    5e12:	1b f9       	JLS       $+27                  ;->0x5e48
..\X2Csrc\__LNet.c:239
    5e14:	f7 a1       	ST.W      [R6 + #7], R7
    5e16:	7e 9a       	LD.W      R7, [R6 + #9]
..\X2Csrc\__LNet.c:130
    5e18:	70 38       	CMP       R7, #0
    5e1a:	f2 f0       	JZ        $-14                  ;->0x5dfe
..\X2Csrc\__LNet.c:276
    5e1c:	0a 43       	LD        R3, [PC + #10]        ;->0x5e44  :=0x10001c4c
    5e1e:	43 59       	MOV       R10, R3
    5e20:	53 82       	LD.W      R5, [R3]
    5e22:	e5 9a       	LD.W      R4, [R5 + #11]
    5e24:	40 38       	CMP       R4, #0
    5e26:	06 f0       	JZ        $+6                   ;->0x5e32
    5e28:	e5 9a       	LD.W      R4, [R5 + #11]
    5e2a:	64 98       	LD.W      R4, [R4 + #1]
    5e2c:	44 38       	CMP       R4, #4
    5e2e:	02 f1       	JNZ       $+2                   ;->0x5e32
    5e30:	7e 05       	SJMP      $+382                 ;->0x612c
..\X2Csrc\__LNet.c:247
    5e32:	7f 5e       	POP       {R6-R12}
    5e34:	0d 5d       	POP       LR
    5e36:	1d 5c       	JMP       LR
    5e38:	6c 5f 00 00 	.long     0x00005f6c ->000024428  [!!!@2@:PUSH      {R8-R9,R11-R12}	@@: NOP      
    5e3c:	a8 1d 00 10 	.long     0x10001da8 ->268443048  [!!!@2@:MOV       R10, #216	@@: MOV       R0, #0
    5e40:	a4 1d 00 10 	.long     0x10001da4 ->268443044  [!!!@2@:MOV       R10, #212	@@: MOV       R0, #0
    5e44:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__LNet.c:135
    5e48:	2a 7a       	LSL       R5, #2
    5e4a:	02 44       	LD        R4, [PC + #2]         ;->0x5e50  :=0x5e54
    5e4c:	6c e9       	LD.W      R5, [R4 + R5]
    5e4e:	15 5c       	JMP       R5
    5e50:	54 5e 00 00 	.long     0x00005e54 ->000024148  [!!!@2@:POP       {R8,R10,R12}	@@: NOP      

00005e54 <.text$communicate$sdata_local_1>:
    5e54:	04 5f 00 00 c4 5e 00 00 b4 5e 00 00 7c 5e 00 00     ._...^...^..|^..
    5e64:	6c 5e 00 00 16 5f 00 00                             l^..._..

00005e6c <.text$communicate$scode_loacal_3>:
..\X2Csrc\__LNet.c:189
    5e6c:	00 38       	CMP       R0, #0
    5e6e:	02 f0       	JZ        $+2                   ;->0x5e72
    5e70:	fd 04       	SJMP      $+253                 ;->0x606a
..\X2Csrc\__LNet.c:191
    5e72:	3c 45       	LD        R5, [PC + #60]        ;->0x5f60  :=0x10001da8
    5e74:	35 82       	LD.W      R3, [R5]
    5e76:	f3 a1       	ST.W      [R6 + #7], R3
    5e78:	7e 9a       	LD.W      R7, [R6 + #9]
    5e7a:	cf 07       	SJMP      $-49                  ;->0x5e18
..\X2Csrc\__LNet.c:171
    5e7c:	38 12       	MOV       R3, #40
    5e7e:	ee c2       	ADD       R5, R6, R3
    5e80:	45 80       	LD.B      R4, [R5]
    5e82:	20 c3       	ADD       R4, R0, R4
    5e84:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:172
    5e86:	49 12       	MOV       R4, #41
    5e88:	2e c3       	ADD       R5, R6, R4
    5e8a:	45 80       	LD.B      R4, [R5]
    5e8c:	d6 98       	LD.W      R2, [R6 + #3]
    5e8e:	10 eb       	ST.B      [R2 + R4], R0
..\X2Csrc\__LNet.c:173
    5e90:	45 80       	LD.B      R4, [R5]
    5e92:	64 c0       	ADD       R4, R4, #1
    5e94:	44 d1       	ZXT.B     R4, R4
    5e96:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:175
    5e98:	2e 8a       	LD.B      R5, [R6 + #8]
    5e9a:	54 70       	CMP       R5, R4
    5e9c:	02 f9       	JLS       $+2                   ;->0x5ea0
    5e9e:	fc 04       	SJMP      $+252                 ;->0x6096
..\X2Csrc\__LNet.c:253
    5ea0:	05 3d       	CMP       R0, #85
    5ea2:	02 f1       	JNZ       $+2                   ;->0x5ea6
    5ea4:	21 05       	SJMP      $+289                 ;->0x60e6
    5ea6:	02 38       	CMP       R0, #2
    5ea8:	02 f1       	JNZ       $+2                   ;->0x5eac
    5eaa:	1e 05       	SJMP      $+286                 ;->0x60e6
..\X2Csrc\__LNet.c:262
    5eac:	55 10       	MOV       R5, #5
    5eae:	f5 a1       	ST.W      [R6 + #7], R5
    5eb0:	7e 9a       	LD.W      R7, [R6 + #9]
    5eb2:	b3 07       	SJMP      $-77                  ;->0x5e18
..\X2Csrc\__LNet.c:158
    5eb4:	2e 8e       	LD.B      R5, [R6 + #24]
    5eb6:	50 70       	CMP       R5, R0
    5eb8:	02 f1       	JNZ       $+2                   ;->0x5ebc
    5eba:	2d 05       	SJMP      $+301                 ;->0x6114
..\X2Csrc\__LNet.c:201
    5ebc:	50 10       	MOV       R5, #0
    5ebe:	f5 a1       	ST.W      [R6 + #7], R5
    5ec0:	7e 9a       	LD.W      R7, [R6 + #9]
    5ec2:	ab 07       	SJMP      $-85                  ;->0x5e18
..\X2Csrc\__LNet.c:378
    5ec4:	00 38       	CMP       R0, #0
    5ec6:	02 f1       	JNZ       $+2                   ;->0x5eca
    5ec8:	ef 04       	SJMP      $+239                 ;->0x60a6
..\X2Csrc\__LNet.c:380
    5eca:	6e 8a       	LD.B      R5, [R6 + #9]
    5ecc:	05 70       	CMP       R0, R5
    5ece:	02 f9       	JLS       $+2                   ;->0x5ed2
    5ed0:	46 05       	SJMP      $+326                 ;->0x615c
..\X2Csrc\__LNet.c:388
    5ed2:	48 12       	MOV       R4, #40
    5ed4:	2e c3       	ADD       R5, R6, R4
    5ed6:	25 15       	MOV       R2, #85
    5ed8:	a0 c2       	ADD       R4, R0, R2
    5eda:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:389
    5edc:	30 92       	ST.B      [R6 + #8], R0
..\X2Csrc\__LNet.c:390
    5ede:	39 12       	MOV       R3, #41
    5ee0:	ee c2       	ADD       R5, R6, R3
    5ee2:	40 10       	MOV       R4, #0
    5ee4:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:391
    5ee6:	52 10       	MOV       R5, #2
    5ee8:	f5 a1       	ST.W      [R6 + #7], R5
..\X2Csrc\__LNet.c:253
    5eea:	02 70       	CMP       R0, R2
    5eec:	03 f0       	JZ        $+3                   ;->0x5ef2
    5eee:	02 38       	CMP       R0, #2
    5ef0:	93 f1       	JNZ       $-109                 ;->0x5e16
..\X2Csrc\__LNet.c:255
    5ef2:	1d 45       	LD        R5, [PC + #29]        ;->0x5f64  :=0x10001da4
    5ef4:	50 83       	ST.B      [R5], R0
..\X2Csrc\__LNet.c:256
    5ef6:	42 10       	MOV       R4, #2
    5ef8:	1a 45       	LD        R5, [PC + #26]        ;->0x5f60  :=0x10001da8
    5efa:	54 85       	ST.W      [R5], R4
..\X2Csrc\__LNet.c:257
    5efc:	54 10       	MOV       R5, #4
    5efe:	f5 a1       	ST.W      [R6 + #7], R5
    5f00:	7e 9a       	LD.W      R7, [R6 + #9]
    5f02:	8b 07       	SJMP      $-117                 ;->0x5e18
..\X2Csrc\__LNet.c:140
    5f04:	05 3d       	CMP       R0, #85
    5f06:	88 f1       	JNZ       $-120                 ;->0x5e16
..\X2Csrc\__LNet.c:142
    5f08:	38 12       	MOV       R3, #40
    5f0a:	ee c2       	ADD       R5, R6, R3
    5f0c:	50 83       	ST.B      [R5], R0
..\X2Csrc\__LNet.c:143
    5f0e:	51 10       	MOV       R5, #1
    5f10:	f5 a1       	ST.W      [R6 + #7], R5
    5f12:	7e 9a       	LD.W      R7, [R6 + #9]
    5f14:	82 07       	SJMP      $-126                 ;->0x5e18
..\X2Csrc\__LNet.c:209
    5f16:	58 12       	MOV       R5, #40
    5f18:	66 c3       	ADD       R4, R6, R5
    5f1a:	54 80       	LD.B      R5, [R4]
..\X2Csrc\__LNet.c:211
    5f1c:	55 3d       	CMP       R5, #85
    5f1e:	11 f0       	JZ        $+17                  ;->0x5f40
    5f20:	52 38       	CMP       R5, #2
    5f22:	0f f0       	JZ        $+15                  ;->0x5f40
..\X2Csrc\__LNet.c:216
    5f24:	05 70       	CMP       R0, R5
    5f26:	12 f1       	JNZ       $+18                  ;->0x5f4a
..\X2Csrc\__LNet.c:219
    5f28:	ee 98       	LD.W      R5, [R6 + #3]
    5f2a:	55 80       	LD.B      R5, [R5]
    5f2c:	5a 39       	CMP       R5, #26
    5f2e:	02 f9       	JLS       $+2                   ;->0x5f32
    5f30:	cf 04       	SJMP      $+207                 ;->0x60ce
..\X2Csrc\__LNet.c:223
    5f32:	2a 7a       	LSL       R5, #2
    5f34:	16 99       	LD.W      R2, [R6 + #4]
    5f36:	6a e9       	LD.W      R5, [R2 + R5]
    5f38:	06 58       	MOV       R0, R6
    5f3a:	05 5c       	LJMP      R5
    5f3c:	7e 9a       	LD.W      R7, [R6 + #9]
    5f3e:	6d 07       	SJMP      $-147                 ;->0x5e18
..\X2Csrc\__LNet.c:213
    5f40:	55 68       	NOT       R5, R5
    5f42:	55 d1       	ZXT.B     R5, R5
    5f44:	45 83       	ST.B      [R4], R5
..\X2Csrc\__LNet.c:216
    5f46:	05 70       	CMP       R0, R5
    5f48:	f0 f0       	JZ        $-16                  ;->0x5f28
..\X2Csrc\__LNet.c:234
    5f4a:	06 58       	MOV       R0, R6
    5f4c:	13 11       	MOV       R1, #19
    5f4e:	07 45       	LD        R5, [PC + #7]         ;->0x5f68  :=0x67fc
    5f50:	05 5c       	LJMP      R5
    5f52:	7e 9a       	LD.W      R7, [R6 + #9]
    5f54:	62 07       	SJMP      $-158                 ;->0x5e18
..\X2Csrc\__LNet.c:60
    5f56:	2a 7a       	LSL       R5, #2
    5f58:	49 58       	MOV       R2, R9
    5f5a:	6a e9       	LD.W      R5, [R2 + R5]
    5f5c:	15 5c       	JMP       R5
    5f5e:	00 00       	NOP      NOP      
    5f60:	a8 1d 00 10 	.long     0x10001da8 ->268443048  [!!!@2@:MOV       R10, #216	@@: MOV       R0, #0
    5f64:	a4 1d 00 10 	.long     0x10001da4 ->268443044  [!!!@2@:MOV       R10, #212	@@: MOV       R0, #0
    5f68:	fc 67 00 00 	.long     0x000067fc ->000026620  [!!!@2@:SUBC      PC, R12	@@: NOP      

00005f6c <.text$communicate$sdata_local_2>:
    5f6c:	f2 5f 00 00 0c 60 00 00 ce 5f 00 00 94 5f 00 00     ._...`..._..._..
    5f7c:	84 5f 00 00 30 60 00 00                             ._..0`..

00005f84 <.text$communicate$scode_loacal_4>:
..\X2Csrc\__LNet.c:104
    5f84:	46 99       	LD.W      R0, [R6 + #5]
    5f86:	50 82       	LD.W      R5, [R0]
    5f88:	10 10       	MOV       R1, #0
    5f8a:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:105
    5f8c:	5a 82       	LD.W      R5, [R10]
    5f8e:	35 a2       	ST.W      [R6 + #8], R5
    5f90:	7e 9a       	LD.W      R7, [R6 + #9]
..\X2Csrc\__LNet.c:106
    5f92:	28 07       	SJMP      $-216                 ;->0x5de2
..\X2Csrc\__LNet.c:84
    5f94:	48 80       	LD.B      R4, [R8]
    5f96:	ee 98       	LD.W      R5, [R6 + #3]
..\X2Csrc\__LNet.c:85
    5f98:	28 12       	MOV       R2, #40
    5f9a:	9e c2       	ADD       R3, R6, R2
    5f9c:	0d e5       	LD.B      R1, [R5 + R4]
    5f9e:	23 80       	LD.B      R2, [R3]
    5fa0:	91 c2       	ADD       R2, R1, R2
    5fa2:	32 83       	ST.B      [R3], R2
..\X2Csrc\__LNet.c:87
    5fa4:	46 99       	LD.W      R0, [R6 + #5]
    5fa6:	30 82       	LD.W      R3, [R0]
    5fa8:	0d e5       	LD.B      R1, [R5 + R4]
    5faa:	03 5c       	LJMP      R3
..\X2Csrc\__LNet.c:90
    5fac:	48 80       	LD.B      R4, [R8]
    5fae:	6c c0       	ADD       R5, R4, #1
    5fb0:	1e 8a       	LD.B      R3, [R6 + #8]
    5fb2:	53 70       	CMP       R5, R3
    5fb4:	4f fb       	JLT       $+79                  ;->0x6052
..\X2Csrc\__LNet.c:92
    5fb6:	de 98       	LD.W      R3, [R6 + #3]
    5fb8:	23 e5       	LD.B      R4, [R3 + R4]
    5fba:	44 d1       	ZXT.B     R4, R4
..\X2Csrc\__LNet.c:253
    5fbc:	45 3d       	CMP       R4, #85
    5fbe:	02 f1       	JNZ       $+2                   ;->0x5fc2
    5fc0:	8d 04       	SJMP      $+141                 ;->0x60da
    5fc2:	42 38       	CMP       R4, #2
    5fc4:	02 f1       	JNZ       $+2                   ;->0x5fc8
    5fc6:	8a 04       	SJMP      $+138                 ;->0x60da
..\X2Csrc\__LNet.c:262
    5fc8:	45 10       	MOV       R4, #5
    5fca:	34 a2       	ST.W      [R6 + #8], R4
    5fcc:	4c 04       	SJMP      $+76                  ;->0x6064
..\X2Csrc\__LNet.c:78
    5fce:	0e 8e       	LD.B      R1, [R6 + #24]
    5fd0:	28 12       	MOV       R2, #40
    5fd2:	ae c2       	ADD       R5, R6, R2
    5fd4:	45 80       	LD.B      R4, [R5]
    5fd6:	21 c3       	ADD       R4, R1, R4
    5fd8:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:79
    5fda:	46 99       	LD.W      R0, [R6 + #5]
    5fdc:	50 82       	LD.W      R5, [R0]
    5fde:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:80
    5fe0:	2e 8e       	LD.B      R5, [R6 + #24]
..\X2Csrc\__LNet.c:253
    5fe2:	55 3d       	CMP       R5, #85
    5fe4:	68 f0       	JZ        $+104                 ;->0x60b4
    5fe6:	52 38       	CMP       R5, #2
    5fe8:	66 f0       	JZ        $+102                 ;->0x60b4
..\X2Csrc\__LNet.c:262
    5fea:	8b 58       	MOV       R4, R11
    5fec:	34 a2       	ST.W      [R6 + #8], R4
    5fee:	7e 9a       	LD.W      R7, [R6 + #9]
    5ff0:	f9 06       	SJMP      $-263                 ;->0x5de2
..\X2Csrc\__LNet.c:65
    5ff2:	38 12       	MOV       R3, #40
    5ff4:	ee c2       	ADD       R5, R6, R3
    5ff6:	15 15       	MOV       R1, #85
    5ff8:	51 83       	ST.B      [R5], R1
..\X2Csrc\__LNet.c:66
    5ffa:	50 10       	MOV       R5, #0
    5ffc:	85 83       	ST.B      [R8], R5
..\X2Csrc\__LNet.c:67
    5ffe:	46 99       	LD.W      R0, [R6 + #5]
    6000:	50 82       	LD.W      R5, [R0]
    6002:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:68
    6004:	51 10       	MOV       R5, #1
    6006:	35 a2       	ST.W      [R6 + #8], R5
    6008:	7e 9a       	LD.W      R7, [R6 + #9]
..\X2Csrc\__LNet.c:69
    600a:	ec 06       	SJMP      $-276                 ;->0x5de2
..\X2Csrc\__LNet.c:72
    600c:	0e 8a       	LD.B      R1, [R6 + #8]
    600e:	48 12       	MOV       R4, #40
    6010:	2e c3       	ADD       R5, R6, R4
    6012:	45 80       	LD.B      R4, [R5]
    6014:	21 c3       	ADD       R4, R1, R4
    6016:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:73
    6018:	46 99       	LD.W      R0, [R6 + #5]
    601a:	50 82       	LD.W      R5, [R0]
    601c:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:74
    601e:	2e 8a       	LD.B      R5, [R6 + #8]
..\X2Csrc\__LNet.c:253
    6020:	55 3d       	CMP       R5, #85
    6022:	4f f0       	JZ        $+79                  ;->0x60c0
    6024:	52 38       	CMP       R5, #2
    6026:	4d f0       	JZ        $+77                  ;->0x60c0
..\X2Csrc\__LNet.c:262
    6028:	52 10       	MOV       R5, #2
    602a:	35 a2       	ST.W      [R6 + #8], R5
    602c:	7e 9a       	LD.W      R7, [R6 + #9]
    602e:	da 06       	SJMP      $-294                 ;->0x5de2
..\X2Csrc\__LNet.c:109
    6030:	28 12       	MOV       R2, #40
    6032:	a6 c2       	ADD       R4, R6, R2
    6034:	14 80       	LD.B      R1, [R4]
..\X2Csrc\__LNet.c:110
    6036:	15 3d       	CMP       R1, #85
    6038:	3a f0       	JZ        $+58                  ;->0x60ac
    603a:	12 38       	CMP       R1, #2
    603c:	38 f0       	JZ        $+56                  ;->0x60ac
..\X2Csrc\__LNet.c:114
    603e:	46 99       	LD.W      R0, [R6 + #5]
    6040:	50 82       	LD.W      R5, [R0]
    6042:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:117
    6044:	46 99       	LD.W      R0, [R6 + #5]
    6046:	68 99       	LD.W      R5, [R0 + #5]
    6048:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:46
    604a:	70 10       	MOV       R7, #0
    604c:	77 a2       	ST.W      [R6 + #9], R7
..\X2Csrc\__LNet.c:47
    604e:	f7 a1       	ST.W      [R6 + #7], R7
    6050:	d7 06       	SJMP      $-297                 ;->0x5dfe
..\X2Csrc\__LNet.c:97
    6052:	d6 98       	LD.W      R2, [R6 + #3]
    6054:	22 e5       	LD.B      R4, [R2 + R4]
    6056:	44 d1       	ZXT.B     R4, R4
..\X2Csrc\__LNet.c:253
    6058:	45 3d       	CMP       R4, #85
    605a:	4f f0       	JZ        $+79                  ;->0x60f8
    605c:	42 38       	CMP       R4, #2
    605e:	4d f0       	JZ        $+77                  ;->0x60f8
..\X2Csrc\__LNet.c:262
    6060:	8b 58       	MOV       R4, R11
    6062:	34 a2       	ST.W      [R6 + #8], R4
..\X2Csrc\__LNet.c:100
    6064:	85 83       	ST.B      [R8], R5
    6066:	7e 9a       	LD.W      R7, [R6 + #9]
..\X2Csrc\__LNet.c:101
    6068:	bd 06       	SJMP      $-323                 ;->0x5de2
..\X2Csrc\__LNet.c:195
    606a:	39 45       	LD        R5, [PC + #57]        ;->0x614c  :=0x10001da4
    606c:	55 80       	LD.B      R5, [R5]
    606e:	55 3d       	CMP       R5, #85
    6070:	02 f0       	JZ        $+2                   ;->0x6074
    6072:	25 07       	SJMP      $-219                 ;->0x5ebc
..\X2Csrc\__LNet.c:380
    6074:	6e 8a       	LD.B      R5, [R6 + #9]
    6076:	05 70       	CMP       R0, R5
    6078:	72 f8       	JHI       $+114                 ;->0x615c
..\X2Csrc\__LNet.c:388
    607a:	28 12       	MOV       R2, #40
    607c:	ae c2       	ADD       R5, R6, R2
    607e:	35 15       	MOV       R3, #85
    6080:	e0 c2       	ADD       R4, R0, R3
    6082:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:389
    6084:	30 92       	ST.B      [R6 + #8], R0
..\X2Csrc\__LNet.c:390
    6086:	49 12       	MOV       R4, #41
    6088:	2e c3       	ADD       R5, R6, R4
    608a:	40 10       	MOV       R4, #0
    608c:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:391
    608e:	52 10       	MOV       R5, #2
    6090:	f5 a1       	ST.W      [R6 + #7], R5
    6092:	7e 9a       	LD.W      R7, [R6 + #9]
    6094:	c2 06       	SJMP      $-318                 ;->0x5e18
..\X2Csrc\__LNet.c:253
    6096:	05 3d       	CMP       R0, #85
    6098:	35 f0       	JZ        $+53                  ;->0x6102
    609a:	02 38       	CMP       R0, #2
    609c:	33 f0       	JZ        $+51                  ;->0x6102
..\X2Csrc\__LNet.c:262
    609e:	53 10       	MOV       R5, #3
    60a0:	f5 a1       	ST.W      [R6 + #7], R5
    60a2:	7e 9a       	LD.W      R7, [R6 + #9]
    60a4:	ba 06       	SJMP      $-326                 ;->0x5e18
..\X2Csrc\__LNet.c:398
    60a6:	f0 a1       	ST.W      [R6 + #7], R0
    60a8:	7e 9a       	LD.W      R7, [R6 + #9]
    60aa:	b7 06       	SJMP      $-329                 ;->0x5e18
..\X2Csrc\__LNet.c:112
    60ac:	11 68       	NOT       R1, R1
    60ae:	11 d1       	ZXT.B     R1, R1
    60b0:	41 83       	ST.B      [R4], R1
    60b2:	c6 07       	SJMP      $-58                  ;->0x603e
..\X2Csrc\__LNet.c:255
    60b4:	c5 83       	ST.B      [R12], R5
..\X2Csrc\__LNet.c:256
    60b6:	ab 85       	ST.W      [R10], R11
..\X2Csrc\__LNet.c:257
    60b8:	34 10       	MOV       R3, #4
    60ba:	33 a2       	ST.W      [R6 + #8], R3
    60bc:	7e 9a       	LD.W      R7, [R6 + #9]
    60be:	92 06       	SJMP      $-366                 ;->0x5de2
..\X2Csrc\__LNet.c:255
    60c0:	c5 83       	ST.B      [R12], R5
..\X2Csrc\__LNet.c:256
    60c2:	52 10       	MOV       R5, #2
    60c4:	a5 85       	ST.W      [R10], R5
..\X2Csrc\__LNet.c:257
    60c6:	54 10       	MOV       R5, #4
    60c8:	35 a2       	ST.W      [R6 + #8], R5
    60ca:	7e 9a       	LD.W      R7, [R6 + #9]
    60cc:	8b 06       	SJMP      $-373                 ;->0x5de2
..\X2Csrc\__LNet.c:228
    60ce:	06 58       	MOV       R0, R6
    60d0:	11 12       	MOV       R1, #33
    60d2:	20 45       	LD        R5, [PC + #32]        ;->0x6150  :=0x67fc
    60d4:	05 5c       	LJMP      R5
    60d6:	7e 9a       	LD.W      R7, [R6 + #9]
    60d8:	a0 06       	SJMP      $-352                 ;->0x5e18
..\X2Csrc\__LNet.c:255
    60da:	c4 83       	ST.B      [R12], R4
..\X2Csrc\__LNet.c:256
    60dc:	45 10       	MOV       R4, #5
    60de:	a4 85       	ST.W      [R10], R4
..\X2Csrc\__LNet.c:257
    60e0:	44 10       	MOV       R4, #4
    60e2:	34 a2       	ST.W      [R6 + #8], R4
    60e4:	c0 07       	SJMP      $-64                  ;->0x6064
..\X2Csrc\__LNet.c:255
    60e6:	1a 45       	LD        R5, [PC + #26]        ;->0x614c  :=0x10001da4
    60e8:	50 83       	ST.B      [R5], R0
..\X2Csrc\__LNet.c:256
    60ea:	45 10       	MOV       R4, #5
    60ec:	1a 45       	LD        R5, [PC + #26]        ;->0x6154  :=0x10001da8
    60ee:	54 85       	ST.W      [R5], R4
..\X2Csrc\__LNet.c:257
    60f0:	54 10       	MOV       R5, #4
    60f2:	f5 a1       	ST.W      [R6 + #7], R5
    60f4:	7e 9a       	LD.W      R7, [R6 + #9]
    60f6:	91 06       	SJMP      $-367                 ;->0x5e18
..\X2Csrc\__LNet.c:255
    60f8:	c4 83       	ST.B      [R12], R4
..\X2Csrc\__LNet.c:256
    60fa:	ab 85       	ST.W      [R10], R11
..\X2Csrc\__LNet.c:257
    60fc:	34 10       	MOV       R3, #4
    60fe:	33 a2       	ST.W      [R6 + #8], R3
    6100:	b2 07       	SJMP      $-78                  ;->0x6064
..\X2Csrc\__LNet.c:255
    6102:	13 45       	LD        R5, [PC + #19]        ;->0x614c  :=0x10001da4
    6104:	50 83       	ST.B      [R5], R0
..\X2Csrc\__LNet.c:256
    6106:	43 10       	MOV       R4, #3
    6108:	13 45       	LD        R5, [PC + #19]        ;->0x6154  :=0x10001da8
    610a:	54 85       	ST.W      [R5], R4
..\X2Csrc\__LNet.c:257
    610c:	54 10       	MOV       R5, #4
    610e:	f5 a1       	ST.W      [R6 + #7], R5
    6110:	7e 9a       	LD.W      R7, [R6 + #9]
    6112:	83 06       	SJMP      $-381                 ;->0x5e18
..\X2Csrc\__LNet.c:160
    6114:	28 12       	MOV       R2, #40
    6116:	a6 c2       	ADD       R4, R6, R2
    6118:	34 80       	LD.B      R3, [R4]
    611a:	d8 c2       	ADD       R3, R0, R3
    611c:	43 83       	ST.B      [R4], R3
..\X2Csrc\__LNet.c:253
    611e:	05 3d       	CMP       R0, #85
    6120:	03 f0       	JZ        $+3                   ;->0x6126
    6122:	02 38       	CMP       R0, #2
    6124:	bd f1       	JNZ       $-67                  ;->0x609e
..\X2Csrc\__LNet.c:255
    6126:	0a 44       	LD        R4, [PC + #10]        ;->0x614c  :=0x10001da4
    6128:	45 83       	ST.B      [R4], R5
    612a:	ee 07       	SJMP      $-18                  ;->0x6106
..\X2Csrc\__LNet.c:285
    612c:	e5 9a       	LD.W      R4, [R5 + #11]
    612e:	dd 9a       	LD.W      R3, [R5 + #11]
    6130:	46 2c       	ADD       R4, #70
    6132:	34 2c       	ADD       R3, #68
..\X2Csrc\__LNet.c:284
    6134:	44 81       	LD.H      R4, [R4]
    6136:	33 81       	LD.H      R3, [R3]
    6138:	34 70       	CMP       R3, R4
    613a:	1b f9       	JLS       $+27                  ;->0x6170
..\X2Csrc\__LNet.c:360
    613c:	07 45       	LD        R5, [PC + #7]         ;->0x6158  :=0x10001dac
    613e:	25 82       	LD.W      R2, [R5]
    6140:	62 c0       	ADD       R4, R2, #1
    6142:	54 85       	ST.W      [R5], R4
..\X2Csrc\__LNet.c:247
    6144:	7f 5e       	POP       {R6-R12}
    6146:	0d 5d       	POP       LR
    6148:	1d 5c       	JMP       LR
    614a:	00 00       	NOP      NOP      
    614c:	a4 1d 00 10 	.long     0x10001da4 ->268443044  [!!!@2@:MOV       R10, #212	@@: MOV       R0, #0
    6150:	fc 67 00 00 	.long     0x000067fc ->000026620  [!!!@2@:SUBC      PC, R12	@@: NOP      
    6154:	a8 1d 00 10 	.long     0x10001da8 ->268443048  [!!!@2@:MOV       R10, #216	@@: MOV       R0, #0
    6158:	ac 1d 00 10 	.long     0x10001dac ->268443052  [!!!@2@:MOV       R10, #220	@@: MOV       R0, #0
..\X2Csrc\__LNet.c:382
    615c:	50 10       	MOV       R5, #0
    615e:	f5 a1       	ST.W      [R6 + #7], R5
..\X2Csrc\__LNet.c:406
    6160:	e6 98       	LD.W      R4, [R6 + #3]
    6162:	45 83       	ST.B      [R4], R5
..\X2Csrc\__LNet.c:407
    6164:	06 58       	MOV       R0, R6
    6166:	15 11       	MOV       R1, #21
    6168:	48 45       	LD        R5, [PC + #72]        ;->0x6288  :=0x67fc
    616a:	05 5c       	LJMP      R5
    616c:	7e 9a       	LD.W      R7, [R6 + #9]
    616e:	55 06       	SJMP      $-427                 ;->0x5e18
..\X2Csrc\__LNet.c:289
    6170:	ed 9a       	LD.W      R5, [R5 + #11]
    6172:	56 2c       	ADD       R5, #70
    6174:	40 10       	MOV       R4, #0
    6176:	54 84       	ST.H      [R5], R4
..\X2Csrc\__LNet.c:292
    6178:	46 99       	LD.W      R0, [R6 + #5]
    617a:	50 82       	LD.W      R5, [R0]
    617c:	12 10       	MOV       R1, #2
    617e:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:293
    6180:	46 99       	LD.W      R0, [R6 + #5]
    6182:	e8 98       	LD.W      R5, [R0 + #3]
    6184:	05 5c       	LJMP      R5
    6186:	00 38       	CMP       R0, #0
    6188:	fc f0       	JZ        $-4                   ;->0x6180
..\X2Csrc\__LNet.c:294
    618a:	46 99       	LD.W      R0, [R6 + #5]
    618c:	5a 82       	LD.W      R5, [R10]
    618e:	e5 9a       	LD.W      R4, [R5 + #11]
    6190:	50 82       	LD.W      R5, [R0]
    6192:	4c 8a       	LD.B      R1, [R4 + #9]
    6194:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:295
    6196:	46 99       	LD.W      R0, [R6 + #5]
    6198:	e8 98       	LD.W      R5, [R0 + #3]
    619a:	05 5c       	LJMP      R5
    619c:	00 38       	CMP       R0, #0
    619e:	fc f0       	JZ        $-4                   ;->0x6196
..\X2Csrc\__LNet.c:296
    61a0:	46 99       	LD.W      R0, [R6 + #5]
    61a2:	50 82       	LD.W      R5, [R0]
    61a4:	0e 8e       	LD.B      R1, [R6 + #24]
    61a6:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:297
    61a8:	46 99       	LD.W      R0, [R6 + #5]
    61aa:	e8 98       	LD.W      R5, [R0 + #3]
    61ac:	05 5c       	LJMP      R5
    61ae:	00 38       	CMP       R0, #0
    61b0:	fc f0       	JZ        $-4                   ;->0x61a8
..\X2Csrc\__LNet.c:299
    61b2:	46 99       	LD.W      R0, [R6 + #5]
    61b4:	5a 82       	LD.W      R5, [R10]
    61b6:	e5 9a       	LD.W      R4, [R5 + #11]
    61b8:	48 2c       	ADD       R4, #72
    61ba:	50 82       	LD.W      R5, [R0]
    61bc:	14 80       	LD.B      R1, [R4]
    61be:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:300
    61c0:	46 99       	LD.W      R0, [R6 + #5]
    61c2:	e8 98       	LD.W      R5, [R0 + #3]
    61c4:	05 5c       	LJMP      R5
    61c6:	00 38       	CMP       R0, #0
    61c8:	fc f0       	JZ        $-4                   ;->0x61c0
..\X2Csrc\__LNet.c:301
    61ca:	46 99       	LD.W      R0, [R6 + #5]
    61cc:	5a 82       	LD.W      R5, [R10]
    61ce:	ed 9a       	LD.W      R5, [R5 + #11]
    61d0:	58 2c       	ADD       R5, #72
    61d2:	15 81       	LD.H      R1, [R5]
    61d4:	50 82       	LD.W      R5, [R0]
    61d6:	88 7c       	LSR       R1, #8
    61d8:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:302
    61da:	46 99       	LD.W      R0, [R6 + #5]
    61dc:	e8 98       	LD.W      R5, [R0 + #3]
    61de:	05 5c       	LJMP      R5
    61e0:	00 38       	CMP       R0, #0
    61e2:	fc f0       	JZ        $-4                   ;->0x61da
..\X2Csrc\__LNet.c:304
    61e4:	5a 82       	LD.W      R5, [R10]
    61e6:	d5 9a       	LD.W      R2, [R5 + #11]
..\X2Csrc\__LNet.c:305
    61e8:	dd 9a       	LD.W      R3, [R5 + #11]
..\X2Csrc\__LNet.c:306
    61ea:	e5 9a       	LD.W      R4, [R5 + #11]
..\X2Csrc\__LNet.c:304
    61ec:	4a 8a       	LD.B      R1, [R2 + #9]
    61ee:	16 8e       	LD.B      R2, [R6 + #24]
    61f0:	89 c2       	ADD       R1, R1, R2
    61f2:	21 59       	MOV       R9, R1
    61f4:	92 28       	ADD       R9, #2
..\X2Csrc\__LNet.c:305
    61f6:	38 2c       	ADD       R3, #72
..\X2Csrc\__LNet.c:304
    61f8:	33 80       	LD.B      R3, [R3]
    61fa:	93 64       	ADD       R9, R3
..\X2Csrc\__LNet.c:306
    61fc:	48 2c       	ADD       R4, #72
..\X2Csrc\__LNet.c:304
    61fe:	44 81       	LD.H      R4, [R4]
    6200:	a0 7c       	LSR       R4, #8
    6202:	94 64       	ADD       R9, R4
    6204:	99 d1       	ZXT.B     R9, R9
..\X2Csrc\__LNet.c:308
    6206:	b0 10       	MOV       R11, #0
..\X2Csrc\__LNet.c:312
    6208:	70 10       	MOV       R7, #0
    620a:	4b 58       	MOV       R2, R11
    620c:	e2 c0       	ADD       R4, R2, #3
..\X2Csrc\__LNet.c:327
    620e:	22 7a       	LSL       R4, #2
    6210:	84 59       	MOV       R12, R4
    6212:	ed 9a       	LD.W      R5, [R5 + #11]
    6214:	6c 58       	MOV       R3, R12
    6216:	ed e8       	LD.W      R5, [R5 + R3]
    6218:	ed e5       	LD.B      R5, [R5 + R7]
    621a:	85 d1       	ZXT.B     R8, R5
..\X2Csrc\__LNet.c:328
    621c:	46 99       	LD.W      R0, [R6 + #5]
    621e:	50 82       	LD.W      R5, [R0]
    6220:	28 58       	MOV       R1, R8
    6222:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:329
    6224:	46 99       	LD.W      R0, [R6 + #5]
    6226:	e8 98       	LD.W      R5, [R0 + #3]
    6228:	05 5c       	LJMP      R5
    622a:	00 38       	CMP       R0, #0
    622c:	fc f0       	JZ        $-4                   ;->0x6224
..\X2Csrc\__LNet.c:330
    622e:	98 64       	ADD       R9, R8
    6230:	99 d1       	ZXT.B     R9, R9
..\X2Csrc\__LNet.c:334
    6232:	7f c0       	ADD       R7, R7, #1
    6234:	77 d0       	ZXT.H     R7, R7
..\X2Csrc\__LNet.c:336
    6236:	5a 82       	LD.W      R5, [R10]
    6238:	e5 9a       	LD.W      R4, [R5 + #11]
    623a:	4b 64       	ADD       R4, R11
    623c:	4c 2a       	ADD       R4, #44
    623e:	44 80       	LD.B      R4, [R4]
    6240:	47 70       	CMP       R4, R7
    6242:	e8 f8       	JHI       $-24                  ;->0x6212
..\X2Csrc\__LNet.c:338
    6244:	b1 28       	ADD       R11, #1
    6246:	bb d0       	ZXT.H     R11, R11
..\X2Csrc\__LNet.c:340
    6248:	e5 9a       	LD.W      R4, [R5 + #11]
    624a:	24 8a       	LD.B      R4, [R4 + #8]
    624c:	4b 70       	CMP       R4, R11
    624e:	dd f8       	JHI       $-35                  ;->0x6208
..\X2Csrc\__LNet.c:343
    6250:	1d 1f       	MOV       R1, #253
    6252:	92 38       	CMP       R9, #2
    6254:	02 f0       	JZ        $+2                   ;->0x6258
    6256:	29 58       	MOV       R1, R9
..\X2Csrc\__LNet.c:347
    6258:	46 99       	LD.W      R0, [R6 + #5]
    625a:	50 82       	LD.W      R5, [R0]
    625c:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:348
    625e:	46 99       	LD.W      R0, [R6 + #5]
    6260:	e8 98       	LD.W      R5, [R0 + #3]
    6262:	05 5c       	LJMP      R5
    6264:	00 38       	CMP       R0, #0
    6266:	fc f0       	JZ        $-4                   ;->0x625e
..\X2Csrc\__LNet.c:353
    6268:	70 10       	MOV       R7, #0
    626a:	07 04       	SJMP      $+7                   ;->0x6278
..\X2Csrc\__LNet.c:352
    626c:	46 99       	LD.W      R0, [R6 + #5]
    626e:	68 98       	LD.W      R5, [R0 + #1]
    6270:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:353
    6272:	5a 82       	LD.W      R5, [R10]
    6274:	ed 9a       	LD.W      R5, [R5 + #11]
    6276:	6f a0       	ST.W      [R5 + #1], R7
..\X2Csrc\__LNet.c:350
    6278:	46 99       	LD.W      R0, [R6 + #5]
    627a:	a8 98       	LD.W      R5, [R0 + #2]
    627c:	05 5c       	LJMP      R5
    627e:	00 38       	CMP       R0, #0
    6280:	f6 f1       	JNZ       $-10                  ;->0x626c
..\X2Csrc\__LNet.c:247
    6282:	7f 5e       	POP       {R6-R12}
    6284:	0d 5d       	POP       LR
    6286:	1d 5c       	JMP       LR
    6288:	fc 67 00 00 	.long     0x000067fc ->000026620  [!!!@2@:SUBC      PC, R12	@@: NOP      

0000628c <initLNet>:
initLNet():
..\X2Csrc\__LNet.c:420
    628c:	c1 a0       	ST.W      [R0 + #3], R1
..\X2Csrc\__LNet.c:421
    628e:	42 92       	ST.B      [R0 + #9], R2
..\X2Csrc\__LNet.c:422
    6290:	03 96       	ST.B      [R0 + #24], R3
..\X2Csrc\__LNet.c:425
    6292:	05 45       	LD        R5, [PC + #5]         ;->0x62a4  :=0x5dc8
    6294:	05 85       	ST.W      [R0], R5
..\X2Csrc\__LNet.c:426
    6296:	05 45       	LD        R5, [PC + #5]         ;->0x62a8  :=0x5dbc
    6298:	45 a0       	ST.W      [R0 + #1], R5
..\X2Csrc\__LNet.c:46
    629a:	50 10       	MOV       R5, #0
    629c:	45 a2       	ST.W      [R0 + #9], R5
..\X2Csrc\__LNet.c:47
    629e:	c5 a1       	ST.W      [R0 + #7], R5
..\X2Csrc\__LNet.c:431
    62a0:	1d 5c       	JMP       LR
    62a2:	00 00       	NOP      NOP      
    62a4:	c8 5d 00 00 	.long     0x00005dc8 ->000024008 
    62a8:	bc 5d 00 00 	.long     0x00005dbc ->000023996 

000062ac <sendSerial>:
sendSerial():
..\X2Csrc\__SerialGeneric.c:45
    62ac:	1d 5c       	JMP       LR

000062ae <receiveSerial>:
receiveSerial():
..\X2Csrc\__SerialGeneric.c:50
    62ae:	00 10       	MOV       R0, #0
    62b0:	1d 5c       	JMP       LR

000062b2 <isReceiveDataAvailable>:
isReceiveDataAvailable():
..\X2Csrc\__SerialGeneric.c:55
    62b2:	00 10       	MOV       R0, #0
    62b4:	1d 5c       	JMP       LR

000062b6 <isSendReady>:
isSendReady():
..\X2Csrc\__SerialGeneric.c:60
    62b6:	00 10       	MOV       R0, #0
    62b8:	1d 5c       	JMP       LR

000062ba <getTxFifoFree>:
getTxFifoFree():
..\X2Csrc\__SerialGeneric.c:65
    62ba:	00 10       	MOV       R0, #0
    62bc:	1d 5c       	JMP       LR

000062be <flush>:
flush():
..\X2Csrc\__SerialGeneric.c:70
    62be:	1d 5c       	JMP       LR

000062c0 <initSerialGeneric>:
initSerialGeneric():
..\X2Csrc\__SerialGeneric.c:25
    62c0:	07 45       	LD        R5, [PC + #7]         ;->0x62dc  :=0x62ac
    62c2:	05 85       	ST.W      [R0], R5
..\X2Csrc\__SerialGeneric.c:26
    62c4:	07 45       	LD        R5, [PC + #7]         ;->0x62e0  :=0x62ae
    62c6:	45 a0       	ST.W      [R0 + #1], R5
..\X2Csrc\__SerialGeneric.c:27
    62c8:	07 45       	LD        R5, [PC + #7]         ;->0x62e4  :=0x62b2
    62ca:	85 a0       	ST.W      [R0 + #2], R5
..\X2Csrc\__SerialGeneric.c:28
    62cc:	07 45       	LD        R5, [PC + #7]         ;->0x62e8  :=0x62b6
    62ce:	c5 a0       	ST.W      [R0 + #3], R5
..\X2Csrc\__SerialGeneric.c:31
    62d0:	07 45       	LD        R5, [PC + #7]         ;->0x62ec  :=0x62ba
    62d2:	05 a1       	ST.W      [R0 + #4], R5
..\X2Csrc\__SerialGeneric.c:32
    62d4:	07 45       	LD        R5, [PC + #7]         ;->0x62f0  :=0x62be
    62d6:	45 a1       	ST.W      [R0 + #5], R5
..\X2Csrc\__SerialGeneric.c:33
    62d8:	1d 5c       	JMP       LR
    62da:	00 00       	NOP      NOP      
    62dc:	ac 62 00 00 	.long     0x000062ac ->000025260  [!!!@2@:SXT.B     R10, R12	@@: NOP      
    62e0:	ae 62 00 00 	.long     0x000062ae ->000025262  [!!!@2@:SXT.B     R10, SP	@@: NOP      
    62e4:	b2 62 00 00 	.long     0x000062b2 ->000025266  [!!!@2@:SXT.B     R11, R2	@@: NOP      
    62e8:	b6 62 00 00 	.long     0x000062b6 ->000025270  [!!!@2@:SXT.B     R11, R6	@@: NOP      
    62ec:	ba 62 00 00 	.long     0x000062ba ->000025274  [!!!@2@:SXT.B     R11, R10	@@: NOP      
    62f0:	be 62 00 00 	.long     0x000062be ->000025278  [!!!@2@:SXT.B     R11, SP	@@: NOP      

000062f4 <linkSerial>:
linkSerial():
..\X2Csrc\__SerialGeneric.c:38
    62f4:	41 a1       	ST.W      [R0 + #5], R1
..\X2Csrc\__SerialGeneric.c:39
    62f6:	1d 5c       	JMP       LR

000062f8 <sendSvNotAvailable>:
sendSvNotAvailable():
..\X2Csrc\__Services.c:219
    62f8:	2d 5d       	PUSH      LR
..\X2Csrc\__Services.c:220
    62fa:	42 10       	MOV       R4, #2
    62fc:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:221
    62fe:	41 12       	MOV       R4, #33
    6300:	c8 98       	LD.W      R1, [R0 + #3]
    6302:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:222
    6304:	68 98       	LD.W      R5, [R0 + #1]
    6306:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:223
    6308:	0d 5d       	POP       LR
    630a:	1d 5c       	JMP       LR

0000630c <getDeviceInfo>:
getDeviceInfo():
..\X2Csrc\__Services.c:237
    630c:	83 5f       	PUSH      {R6-R7,LR}
    630e:	a0 58       	MOV       R5, R0
..\X2Csrc\__Services.c:242
    6310:	60 8a       	LD.B      R4, [R0 + #9]
    6312:	4d 3a       	CMP       R4, #45
    6314:	02 f8       	JHI       $+2                   ;->0x6318
    6316:	b5 04       	SJMP      $+181                 ;->0x6480
..\X2Csrc\__Services.c:248
    6318:	4e 12       	MOV       R4, #46
    631a:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:249
    631c:	30 10       	MOV       R3, #0
    631e:	e0 98       	LD.W      R4, [R0 + #3]
    6320:	63 90       	ST.B      [R4 + #1], R3
..\X2Csrc\__Services.c:252
    6322:	45 10       	MOV       R4, #5
    6324:	c0 98       	LD.W      R0, [R0 + #3]
    6326:	84 90       	ST.B      [R0 + #2], R4
..\X2Csrc\__Services.c:253
    6328:	e5 98       	LD.W      R4, [R5 + #3]
    632a:	e3 90       	ST.B      [R4 + #3], R3
..\X2Csrc\__Services.c:257
    632c:	54 41       	LD        R1, [PC + #84]        ;->0x647c  :=0x10001c4c
    632e:	41 82       	LD.W      R4, [R1]
    6330:	94 ac       	LD.H      R2, [R4 + #18]
    6332:	c5 98       	LD.W      R0, [R5 + #3]
    6334:	02 91       	ST.B      [R0 + #4], R2
..\X2Csrc\__Services.c:258
    6336:	94 ac       	LD.H      R2, [R4 + #18]
    6338:	90 7c       	LSR       R2, #8
    633a:	c5 98       	LD.W      R0, [R5 + #3]
    633c:	42 91       	ST.B      [R0 + #5], R2
..\X2Csrc\__Services.c:261
    633e:	55 8a       	LD.B      R2, [R5 + #9]
    6340:	c5 98       	LD.W      R0, [R5 + #3]
    6342:	82 91       	ST.B      [R0 + #6], R2
..\X2Csrc\__Services.c:263
    6344:	c5 98       	LD.W      R0, [R5 + #3]
    6346:	c3 91       	ST.B      [R0 + #7], R3
..\X2Csrc\__Services.c:264
    6348:	fd 98       	LD.W      R7, [R5 + #3]
    634a:	3b 92       	ST.B      [R7 + #8], R3
..\X2Csrc\__Services.c:270
    634c:	3e 14       	MOV       R3, #78
    634e:	f5 98       	LD.W      R6, [R5 + #3]
    6350:	73 92       	ST.B      [R6 + #9], R3
..\X2Csrc\__Services.c:271
    6352:	3f 16       	MOV       R3, #111
    6354:	d5 98       	LD.W      R2, [R5 + #3]
    6356:	93 92       	ST.B      [R2 + #10], R3
..\X2Csrc\__Services.c:272
    6358:	36 17       	MOV       R3, #118
    635a:	c5 98       	LD.W      R0, [R5 + #3]
    635c:	c3 92       	ST.B      [R0 + #11], R3
..\X2Csrc\__Services.c:273
    635e:	32 13       	MOV       R3, #50
    6360:	fd 98       	LD.W      R7, [R5 + #3]
    6362:	3b 93       	ST.B      [R7 + #12], R3
..\X2Csrc\__Services.c:274
    6364:	25 13       	MOV       R2, #53
    6366:	f5 98       	LD.W      R6, [R5 + #3]
    6368:	72 93       	ST.B      [R6 + #13], R2
..\X2Csrc\__Services.c:275
    636a:	d5 98       	LD.W      R2, [R5 + #3]
    636c:	93 93       	ST.B      [R2 + #14], R3
..\X2Csrc\__Services.c:276
    636e:	20 13       	MOV       R2, #48
    6370:	c5 98       	LD.W      R0, [R5 + #3]
    6372:	c2 93       	ST.B      [R0 + #15], R2
..\X2Csrc\__Services.c:277
    6374:	c5 98       	LD.W      R0, [R5 + #3]
    6376:	03 94       	ST.B      [R0 + #16], R3
..\X2Csrc\__Services.c:278
    6378:	c5 98       	LD.W      R0, [R5 + #3]
    637a:	42 94       	ST.B      [R0 + #17], R2
..\X2Csrc\__Services.c:283
    637c:	31 13       	MOV       R3, #49
    637e:	fd 98       	LD.W      R7, [R5 + #3]
    6380:	bb 94       	ST.B      [R7 + #18], R3
..\X2Csrc\__Services.c:284
    6382:	36 13       	MOV       R3, #54
    6384:	f5 98       	LD.W      R6, [R5 + #3]
    6386:	f3 94       	ST.B      [R6 + #19], R3
..\X2Csrc\__Services.c:285
    6388:	34 13       	MOV       R3, #52
    638a:	d5 98       	LD.W      R2, [R5 + #3]
    638c:	13 95       	ST.B      [R2 + #20], R3
..\X2Csrc\__Services.c:286
    638e:	39 13       	MOV       R3, #57
    6390:	c3 58       	MOV       R6, R3
    6392:	c5 98       	LD.W      R0, [R5 + #3]
    6394:	43 95       	ST.B      [R0 + #21], R3
..\X2Csrc\__Services.c:288
    6396:	9c 9a       	LD.W      R3, [R4 + #10]
    6398:	30 38       	CMP       R3, #0
    639a:	7d f0       	JZ        $+125                 ;->0x6494
..\X2Csrc\__Services.c:305
    639c:	9c 9a       	LD.W      R3, [R4 + #10]
    639e:	33 80       	LD.B      R3, [R3]
    63a0:	c5 98       	LD.W      R0, [R5 + #3]
    63a2:	83 95       	ST.B      [R0 + #22], R3
..\X2Csrc\__Services.c:306
    63a4:	9c 9a       	LD.W      R3, [R4 + #10]
    63a6:	5b 88       	LD.B      R3, [R3 + #1]
    63a8:	f5 98       	LD.W      R6, [R5 + #3]
    63aa:	f3 95       	ST.B      [R6 + #23], R3
..\X2Csrc\__Services.c:307
    63ac:	9c 9a       	LD.W      R3, [R4 + #10]
    63ae:	9b 88       	LD.B      R3, [R3 + #2]
    63b0:	cd 98       	LD.W      R1, [R5 + #3]
    63b2:	0b 96       	ST.B      [R1 + #24], R3
..\X2Csrc\__Services.c:308
    63b4:	9c 9a       	LD.W      R3, [R4 + #10]
    63b6:	1b 89       	LD.B      R3, [R3 + #4]
    63b8:	fd 98       	LD.W      R7, [R5 + #3]
    63ba:	7b 96       	ST.B      [R7 + #25], R3
..\X2Csrc\__Services.c:309
    63bc:	9c 9a       	LD.W      R3, [R4 + #10]
    63be:	5b 89       	LD.B      R3, [R3 + #5]
    63c0:	d5 98       	LD.W      R2, [R5 + #3]
    63c2:	93 96       	ST.B      [R2 + #26], R3
..\X2Csrc\__Services.c:310
    63c4:	9c 9a       	LD.W      R3, [R4 + #10]
    63c6:	db 89       	LD.B      R3, [R3 + #7]
    63c8:	c5 98       	LD.W      R0, [R5 + #3]
    63ca:	c3 96       	ST.B      [R0 + #27], R3
..\X2Csrc\__Services.c:311
    63cc:	9c 9a       	LD.W      R3, [R4 + #10]
    63ce:	1b 8a       	LD.B      R3, [R3 + #8]
    63d0:	f5 98       	LD.W      R6, [R5 + #3]
    63d2:	33 97       	ST.B      [R6 + #28], R3
..\X2Csrc\__Services.c:312
    63d4:	9c 9a       	LD.W      R3, [R4 + #10]
    63d6:	5b 8a       	LD.B      R3, [R3 + #9]
    63d8:	cd 98       	LD.W      R1, [R5 + #3]
    63da:	4b 97       	ST.B      [R1 + #29], R3
..\X2Csrc\__Services.c:313
    63dc:	9c 9a       	LD.W      R3, [R4 + #10]
    63de:	9b 8a       	LD.B      R3, [R3 + #10]
    63e0:	fd 98       	LD.W      R7, [R5 + #3]
    63e2:	bb 97       	ST.B      [R7 + #30], R3
..\X2Csrc\__Services.c:314
    63e4:	9c 9a       	LD.W      R3, [R4 + #10]
    63e6:	db 8a       	LD.B      R3, [R3 + #11]
    63e8:	d5 98       	LD.W      R2, [R5 + #3]
    63ea:	c3 58       	MOV       R6, R3
    63ec:	d3 97       	ST.B      [R2 + #31], R3
..\X2Csrc\__Services.c:315
    63ee:	9c 9a       	LD.W      R3, [R4 + #10]
    63f0:	13 8b       	LD.B      R2, [R3 + #12]
    63f2:	dd 98       	LD.W      R3, [R5 + #3]
    63f4:	30 2a       	ADD       R3, #32
    63f6:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:316
    63f8:	9c 9a       	LD.W      R3, [R4 + #10]
    63fa:	93 8b       	LD.B      R2, [R3 + #14]
    63fc:	dd 98       	LD.W      R3, [R5 + #3]
    63fe:	31 2a       	ADD       R3, #33
    6400:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:317
    6402:	9c 9a       	LD.W      R3, [R4 + #10]
    6404:	d3 8b       	LD.B      R2, [R3 + #15]
    6406:	dd 98       	LD.W      R3, [R5 + #3]
    6408:	32 2a       	ADD       R3, #34
    640a:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:320
    640c:	d4 98       	LD.W      R2, [R4 + #3]
    640e:	dd 98       	LD.W      R3, [R5 + #3]
    6410:	33 2a       	ADD       R3, #35
    6412:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:321
    6414:	14 aa       	LD.H      R2, [R4 + #8]
    6416:	dd 98       	LD.W      R3, [R5 + #3]
    6418:	34 2a       	ADD       R3, #36
    641a:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:322
    641c:	14 aa       	LD.H      R2, [R4 + #8]
    641e:	dd 98       	LD.W      R3, [R5 + #3]
    6420:	35 2a       	ADD       R3, #37
    6422:	90 7c       	LSR       R2, #8
    6424:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:323
    6426:	54 99       	LD.W      R2, [R4 + #5]
    6428:	dd 98       	LD.W      R3, [R5 + #3]
    642a:	36 2a       	ADD       R3, #38
    642c:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:324
    642e:	54 99       	LD.W      R2, [R4 + #5]
    6430:	dd 98       	LD.W      R3, [R5 + #3]
    6432:	37 2a       	ADD       R3, #39
    6434:	90 7c       	LSR       R2, #8
    6436:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:325
    6438:	54 99       	LD.W      R2, [R4 + #5]
    643a:	dd 98       	LD.W      R3, [R5 + #3]
    643c:	38 2a       	ADD       R3, #40
    643e:	10 7d       	LSR       R2, #16
    6440:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:326
    6442:	54 99       	LD.W      R2, [R4 + #5]
    6444:	dd 98       	LD.W      R3, [R5 + #3]
    6446:	39 2a       	ADD       R3, #41
    6448:	90 7d       	LSR       R2, #24
    644a:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:329
    644c:	dd 98       	LD.W      R3, [R5 + #3]
    644e:	3a 2a       	ADD       R3, #42
    6450:	34 83       	ST.B      [R3], R4
..\X2Csrc\__Services.c:330
    6452:	dd 98       	LD.W      R3, [R5 + #3]
    6454:	3b 2a       	ADD       R3, #43
    6456:	08 10       	MOV       R0, #8
    6458:	14 dc       	LSR       R2, R4, R0
    645a:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:331
    645c:	dd 98       	LD.W      R3, [R5 + #3]
    645e:	3c 2a       	ADD       R3, #44
    6460:	10 11       	MOV       R1, #16
    6462:	54 dc       	LSR       R2, R4, R1
    6464:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:332
    6466:	dd 98       	LD.W      R3, [R5 + #3]
    6468:	3d 2a       	ADD       R3, #45
    646a:	a0 7d       	LSR       R4, #24
    646c:	34 83       	ST.B      [R3], R4
..\X2Csrc\__Services.c:334
    646e:	65 98       	LD.W      R4, [R5 + #1]
    6470:	05 58       	MOV       R0, R5
    6472:	04 5c       	LJMP      R4
..\X2Csrc\__Services.c:335
    6474:	03 5e       	POP       {R6-R7}
    6476:	0d 5d       	POP       LR
    6478:	1d 5c       	JMP       LR
    647a:	00 00       	NOP      NOP      
    647c:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__Services.c:228
    6480:	42 10       	MOV       R4, #2
    6482:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:229
    6484:	45 11       	MOV       R4, #21
    6486:	c8 98       	LD.W      R1, [R0 + #3]
    6488:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:230
    648a:	68 98       	LD.W      R5, [R0 + #1]
    648c:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:335
    648e:	03 5e       	POP       {R6-R7}
    6490:	0d 5d       	POP       LR
    6492:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:288
    6494:	4c 10       	MOV       R4, #12
..\X2Csrc\__Services.c:293
    6496:	0d 12       	MOV       R0, #45
..\X2Csrc\__Services.c:294
    6498:	2f 1f       	MOV       R2, #255
..\X2Csrc\__Services.c:293
    649a:	fd 98       	LD.W      R7, [R5 + #3]
    649c:	1f c3       	ADD       R3, R7, R4
    649e:	98 95       	ST.B      [R3 + #22], R0
..\X2Csrc\__Services.c:294
    64a0:	64 cc       	SUB       R4, R4, #1
    64a2:	44 d1       	ZXT.B     R4, R4
    64a4:	42 70       	CMP       R4, R2
    64a6:	fa f1       	JNZ       $-6                   ;->0x649a
    64a8:	41 82       	LD.W      R4, [R1]
    64aa:	b1 07       	SJMP      $-79                  ;->0x640c

000064ac <saveParameter>:
saveParameter():
..\X2Csrc\__Services.c:341
    64ac:	8f 5f       	PUSH      {R6-R9,LR}
    64ae:	c0 58       	MOV       R6, R0
..\X2Csrc\__Services.c:348
    64b0:	c8 98       	LD.W      R1, [R0 + #3]
    64b2:	b9 88       	LD.B      R7, [R1 + #2]
    64b4:	b8 7a       	LSL       R7, #8
    64b6:	69 88       	LD.B      R5, [R1 + #1]
    64b8:	7f c3       	ADD       R7, R7, R5
    64ba:	77 d0       	ZXT.H     R7, R7
..\X2Csrc\__Services.c:350
    64bc:	37 45       	LD        R5, [PC + #55]        ;->0x6598  :=0x10001c4c
    64be:	55 82       	LD.W      R5, [R5]
    64c0:	25 82       	LD.W      R2, [R5]
..\X2Csrc\__Services.c:551
    64c2:	20 38       	CMP       R2, #0
    64c4:	02 f1       	JNZ       $+2                   ;->0x64c8
    64c6:	95 04       	SJMP      $+149                 ;->0x65f0
..\X2Csrc\__Services.c:560
    64c8:	42 81       	LD.H      R4, [R2]
    64ca:	74 70       	CMP       R7, R4
    64cc:	02 f1       	JNZ       $+2                   ;->0x64d0
    64ce:	95 04       	SJMP      $+149                 ;->0x65f8
    64d0:	40 38       	CMP       R4, #0
    64d2:	65 f0       	JZ        $+101                 ;->0x659c
    64d4:	30 10       	MOV       R3, #0
    64d6:	03 04       	SJMP      $+3                   ;->0x64dc
    64d8:	40 38       	CMP       R4, #0
    64da:	61 f0       	JZ        $+97                  ;->0x659c
..\X2Csrc\__Services.c:562
    64dc:	5b c0       	ADD       R3, R3, #1
    64de:	33 d0       	ZXT.H     R3, R3
..\X2Csrc\__Services.c:560
    64e0:	03 10       	MOV       R0, #3
    64e2:	23 da       	LSL       R4, R3, R0
    64e4:	02 c3       	ADD       R0, R2, R4
    64e6:	22 e7       	LD.H      R4, [R2 + R4]
    64e8:	74 70       	CMP       R7, R4
    64ea:	f7 f1       	JNZ       $-9                   ;->0x64d8
..\X2Csrc\__Services.c:565
    64ec:	40 38       	CMP       R4, #0
    64ee:	57 f0       	JZ        $+87                  ;->0x659c
..\X2Csrc\__Services.c:572
    64f0:	40 98       	LD.W      R0, [R0 + #1]
    64f2:	20 59       	MOV       R9, R0
..\X2Csrc\__Services.c:358
    64f4:	a5 98       	LD.W      R4, [R5 + #2]
    64f6:	40 38       	CMP       R4, #0
    64f8:	1b f0       	JZ        $+27                  ;->0x652e
..\X2Csrc\__Services.c:362
    64fa:	a5 98       	LD.W      R4, [R5 + #2]
    64fc:	44 81       	LD.H      R4, [R4]
    64fe:	47 70       	CMP       R4, R7
    6500:	7e f0       	JZ        $+126                 ;->0x65fc
..\X2Csrc\__Services.c:363
    6502:	a5 98       	LD.W      R4, [R5 + #2]
..\X2Csrc\__Services.c:362
    6504:	34 81       	LD.H      R3, [R4]
    6506:	30 38       	CMP       R3, #0
    6508:	0f f0       	JZ        $+15                  ;->0x6526
    650a:	40 10       	MOV       R4, #0
    650c:	05 04       	SJMP      $+5                   ;->0x6516
..\X2Csrc\__Services.c:363
    650e:	95 98       	LD.W      R2, [R5 + #2]
..\X2Csrc\__Services.c:362
    6510:	d2 e6       	LD.H      R2, [R2 + R3]
    6512:	20 38       	CMP       R2, #0
    6514:	09 f0       	JZ        $+9                   ;->0x6526
..\X2Csrc\__Services.c:365
    6516:	64 c0       	ADD       R4, R4, #1
    6518:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Services.c:362
    651a:	95 98       	LD.W      R2, [R5 + #2]
    651c:	03 10       	MOV       R0, #3
    651e:	1c da       	LSL       R3, R4, R0
    6520:	d2 e6       	LD.H      R2, [R2 + R3]
    6522:	27 70       	CMP       R2, R7
    6524:	f5 f1       	JNZ       $-11                  ;->0x650e
..\X2Csrc\__Services.c:368
    6526:	a5 98       	LD.W      R4, [R5 + #2]
    6528:	e4 e6       	LD.H      R4, [R4 + R3]
    652a:	40 38       	CMP       R4, #0
    652c:	4c f1       	JNZ       $+76                  ;->0x65c4
..\X2Csrc\__Services.c:379
    652e:	65 98       	LD.W      R4, [R5 + #1]
    6530:	40 38       	CMP       R4, #0
    6532:	67 f0       	JZ        $+103                 ;->0x6600
..\X2Csrc\__Services.c:386
    6534:	79 81       	LD.H      R7, [R9]
..\X2Csrc\__Services.c:389
    6536:	65 98       	LD.W      R4, [R5 + #1]
    6538:	44 81       	LD.H      R4, [R4]
    653a:	47 70       	CMP       R4, R7
    653c:	6a f0       	JZ        $+106                 ;->0x6610
    653e:	65 98       	LD.W      R4, [R5 + #1]
    6540:	44 81       	LD.H      R4, [R4]
    6542:	40 38       	CMP       R4, #0
    6544:	11 f0       	JZ        $+17                  ;->0x6566
    6546:	30 10       	MOV       R3, #0
    6548:	88 11       	MOV       R8, #24
    654a:	05 04       	SJMP      $+5                   ;->0x6554
    654c:	55 98       	LD.W      R2, [R5 + #1]
    654e:	12 e7       	LD.H      R2, [R2 + R4]
    6550:	20 38       	CMP       R2, #0
    6552:	0a f0       	JZ        $+10                  ;->0x6566
..\X2Csrc\__Services.c:391
    6554:	5b c0       	ADD       R3, R3, #1
    6556:	33 d0       	ZXT.H     R3, R3
..\X2Csrc\__Services.c:389
    6558:	55 98       	LD.W      R2, [R5 + #1]
    655a:	08 58       	MOV       R0, R8
    655c:	23 ca       	MULS      R4, R3, R0
    655e:	00 00       	NOP      NOP      
    6560:	12 e7       	LD.H      R2, [R2 + R4]
    6562:	27 70       	CMP       R2, R7
    6564:	f4 f1       	JNZ       $-12                  ;->0x654c
..\X2Csrc\__Services.c:394
    6566:	5d 98       	LD.W      R3, [R5 + #1]
    6568:	1b e7       	LD.H      R3, [R3 + R4]
    656a:	30 38       	CMP       R3, #0
    656c:	22 f0       	JZ        $+34                  ;->0x65b0
..\X2Csrc\__Services.c:401
    656e:	6d 98       	LD.W      R5, [R5 + #1]
    6570:	25 c3       	ADD       R4, R5, R4
    6572:	16 8a       	LD.B      R2, [R6 + #8]
    6574:	d2 cc       	SUB       R2, R2, #3
    6576:	2c 99       	LD.W      R5, [R4 + #4]
    6578:	09 58       	MOV       R0, R9
    657a:	c9 c0       	ADD       R1, R1, #3
    657c:	22 d1       	ZXT.B     R2, R2
    657e:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:228
    6580:	52 10       	MOV       R5, #2
    6582:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:401
    6584:	00 38       	CMP       R0, #0
    6586:	37 f1       	JNZ       $+55                  ;->0x65f4
..\X2Csrc\__Services.c:408
    6588:	ee 98       	LD.W      R5, [R6 + #3]
    658a:	68 90       	ST.B      [R5 + #1], R0
..\X2Csrc\__Services.c:409
    658c:	6e 98       	LD.W      R5, [R6 + #1]
    658e:	06 58       	MOV       R0, R6
    6590:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:410
    6592:	0f 5e       	POP       {R6-R9}
    6594:	0d 5d       	POP       LR
    6596:	1d 5c       	JMP       LR
    6598:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__Services.c:568
    659c:	40 14       	MOV       R4, #64
..\X2Csrc\__Services.c:228
    659e:	52 10       	MOV       R5, #2
    65a0:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    65a2:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:230
    65a4:	6e 98       	LD.W      R5, [R6 + #1]
    65a6:	06 58       	MOV       R0, R6
    65a8:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:410
    65aa:	0f 5e       	POP       {R6-R9}
    65ac:	0d 5d       	POP       LR
    65ae:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:228
    65b0:	52 10       	MOV       R5, #2
    65b2:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    65b4:	51 14       	MOV       R5, #65
    65b6:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Services.c:230
    65b8:	6e 98       	LD.W      R5, [R6 + #1]
    65ba:	06 58       	MOV       R0, R6
    65bc:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:410
    65be:	0f 5e       	POP       {R6-R9}
    65c0:	0d 5d       	POP       LR
    65c2:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:371
    65c4:	ad 98       	LD.W      R5, [R5 + #2]
    65c6:	dd c2       	ADD       R3, R5, R3
    65c8:	16 8a       	LD.B      R2, [R6 + #8]
    65ca:	d2 cc       	SUB       R2, R2, #3
    65cc:	6b 98       	LD.W      R5, [R3 + #1]
    65ce:	09 58       	MOV       R0, R9
    65d0:	c9 c0       	ADD       R1, R1, #3
    65d2:	22 d1       	ZXT.B     R2, R2
    65d4:	05 5c       	LJMP      R5
    65d6:	00 38       	CMP       R0, #0
    65d8:	dd f0       	JZ        $-35                  ;->0x6592
..\X2Csrc\__Services.c:228
    65da:	52 10       	MOV       R5, #2
    65dc:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    65de:	52 14       	MOV       R5, #66
    65e0:	d6 98       	LD.W      R2, [R6 + #3]
    65e2:	55 90       	ST.B      [R2 + #1], R5
..\X2Csrc\__Services.c:230
    65e4:	6e 98       	LD.W      R5, [R6 + #1]
    65e6:	06 58       	MOV       R0, R6
    65e8:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:410
    65ea:	0f 5e       	POP       {R6-R9}
    65ec:	0d 5d       	POP       LR
    65ee:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:554
    65f0:	43 14       	MOV       R4, #67
    65f2:	d6 07       	SJMP      $-42                  ;->0x659e
..\X2Csrc\__Services.c:229
    65f4:	54 11       	MOV       R5, #20
    65f6:	f5 07       	SJMP      $-11                  ;->0x65e0
..\X2Csrc\__Services.c:560
    65f8:	02 58       	MOV       R0, R2
    65fa:	79 07       	SJMP      $-135                 ;->0x64ec
..\X2Csrc\__Services.c:362
    65fc:	30 10       	MOV       R3, #0
    65fe:	94 07       	SJMP      $-108                 ;->0x6526
..\X2Csrc\__Services.c:228
    6600:	52 10       	MOV       R5, #2
    6602:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    6604:	54 14       	MOV       R5, #68
    6606:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Services.c:230
    6608:	6e 98       	LD.W      R5, [R6 + #1]
    660a:	06 58       	MOV       R0, R6
    660c:	05 5c       	LJMP      R5
    660e:	c2 07       	SJMP      $-62                  ;->0x6592
..\X2Csrc\__Services.c:389
    6610:	40 10       	MOV       R4, #0
    6612:	aa 07       	SJMP      $-86                  ;->0x6566

00006614 <loadParameter>:
loadParameter():
..\X2Csrc\__Services.c:417
    6614:	87 5f       	PUSH      {R6-R8,LR}
    6616:	c0 58       	MOV       R6, R0
..\X2Csrc\__Services.c:424
    6618:	c8 98       	LD.W      R1, [R0 + #3]
    661a:	81 88       	LD.B      R0, [R1 + #2]
    661c:	80 7a       	LSL       R0, #8
    661e:	69 88       	LD.B      R5, [R1 + #1]
    6620:	40 c3       	ADD       R0, R0, R5
    6622:	00 d0       	ZXT.H     R0, R0
..\X2Csrc\__Services.c:427
    6624:	25 45       	LD        R5, [PC + #37]        ;->0x66b8  :=0x10001c4c
    6626:	25 82       	LD.W      R2, [R5]
    6628:	32 82       	LD.W      R3, [R2]
..\X2Csrc\__Services.c:551
    662a:	30 38       	CMP       R3, #0
    662c:	5c f0       	JZ        $+92                  ;->0x66e4
..\X2Csrc\__Services.c:560
    662e:	53 81       	LD.H      R5, [R3]
    6630:	05 70       	CMP       R0, R5
    6632:	5b f0       	JZ        $+91                  ;->0x66e8
    6634:	50 38       	CMP       R5, #0
    6636:	43 f0       	JZ        $+67                  ;->0x66bc
    6638:	40 10       	MOV       R4, #0
    663a:	03 04       	SJMP      $+3                   ;->0x6640
    663c:	50 38       	CMP       R5, #0
    663e:	3f f0       	JZ        $+63                  ;->0x66bc
..\X2Csrc\__Services.c:562
    6640:	64 c0       	ADD       R4, R4, #1
    6642:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Services.c:560
    6644:	73 10       	MOV       R7, #3
    6646:	ec db       	LSL       R5, R4, R7
    6648:	7b c3       	ADD       R7, R3, R5
    664a:	6b e7       	LD.H      R5, [R3 + R5]
    664c:	05 70       	CMP       R0, R5
    664e:	f7 f1       	JNZ       $-9                   ;->0x663c
..\X2Csrc\__Services.c:565
    6650:	50 38       	CMP       R5, #0
    6652:	35 f0       	JZ        $+53                  ;->0x66bc
..\X2Csrc\__Services.c:572
    6654:	7f 98       	LD.W      R7, [R7 + #1]
    6656:	07 59       	MOV       R8, R7
..\X2Csrc\__Services.c:435
    6658:	6a 98       	LD.W      R5, [R2 + #1]
    665a:	50 38       	CMP       R5, #0
    665c:	48 f0       	JZ        $+72                  ;->0x66ec
..\X2Csrc\__Services.c:441
    665e:	77 81       	LD.H      R7, [R7]
..\X2Csrc\__Services.c:444
    6660:	6a 98       	LD.W      R5, [R2 + #1]
    6662:	55 81       	LD.H      R5, [R5]
    6664:	57 70       	CMP       R5, R7
    6666:	4b f0       	JZ        $+75                  ;->0x66fc
    6668:	6a 98       	LD.W      R5, [R2 + #1]
    666a:	55 81       	LD.H      R5, [R5]
    666c:	50 38       	CMP       R5, #0
    666e:	10 f0       	JZ        $+16                  ;->0x668e
    6670:	40 10       	MOV       R4, #0
    6672:	08 11       	MOV       R0, #24
    6674:	05 04       	SJMP      $+5                   ;->0x667e
    6676:	5a 98       	LD.W      R3, [R2 + #1]
    6678:	5b e7       	LD.H      R3, [R3 + R5]
    667a:	30 38       	CMP       R3, #0
    667c:	09 f0       	JZ        $+9                   ;->0x668e
..\X2Csrc\__Services.c:446
    667e:	64 c0       	ADD       R4, R4, #1
    6680:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Services.c:444
    6682:	5a 98       	LD.W      R3, [R2 + #1]
    6684:	2c ca       	MULS      R5, R4, R0
    6686:	00 00       	NOP      NOP      
    6688:	5b e7       	LD.H      R3, [R3 + R5]
    668a:	37 70       	CMP       R3, R7
    668c:	f5 f1       	JNZ       $-11                  ;->0x6676
..\X2Csrc\__Services.c:449
    668e:	62 98       	LD.W      R4, [R2 + #1]
    6690:	64 e7       	LD.H      R4, [R4 + R5]
    6692:	40 38       	CMP       R4, #0
    6694:	1e f0       	JZ        $+30                  ;->0x66d0
..\X2Csrc\__Services.c:455
    6696:	62 98       	LD.W      R4, [R2 + #1]
    6698:	6c c3       	ADD       R5, R4, R5
    669a:	ed 98       	LD.W      R5, [R5 + #3]
    669c:	08 58       	MOV       R0, R8
    669e:	89 c0       	ADD       R1, R1, #2
    66a0:	05 5c       	LJMP      R5
    66a2:	80 c0       	ADD       R0, R0, #2
    66a4:	30 92       	ST.B      [R6 + #8], R0
..\X2Csrc\__Services.c:456
    66a6:	50 10       	MOV       R5, #0
    66a8:	d6 98       	LD.W      R2, [R6 + #3]
    66aa:	55 90       	ST.B      [R2 + #1], R5
..\X2Csrc\__Services.c:457
    66ac:	6e 98       	LD.W      R5, [R6 + #1]
    66ae:	06 58       	MOV       R0, R6
    66b0:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:458
    66b2:	07 5e       	POP       {R6-R8}
    66b4:	0d 5d       	POP       LR
    66b6:	1d 5c       	JMP       LR
    66b8:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__Services.c:568
    66bc:	40 14       	MOV       R4, #64
..\X2Csrc\__Services.c:228
    66be:	52 10       	MOV       R5, #2
    66c0:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    66c2:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:230
    66c4:	6e 98       	LD.W      R5, [R6 + #1]
    66c6:	06 58       	MOV       R0, R6
    66c8:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:458
    66ca:	07 5e       	POP       {R6-R8}
    66cc:	0d 5d       	POP       LR
    66ce:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:228
    66d0:	52 10       	MOV       R5, #2
    66d2:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    66d4:	51 14       	MOV       R5, #65
    66d6:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Services.c:230
    66d8:	6e 98       	LD.W      R5, [R6 + #1]
    66da:	06 58       	MOV       R0, R6
    66dc:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:458
    66de:	07 5e       	POP       {R6-R8}
    66e0:	0d 5d       	POP       LR
    66e2:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:554
    66e4:	43 14       	MOV       R4, #67
    66e6:	ec 07       	SJMP      $-20                  ;->0x66be
..\X2Csrc\__Services.c:560
    66e8:	e3 58       	MOV       R7, R3
    66ea:	b3 07       	SJMP      $-77                  ;->0x6650
..\X2Csrc\__Services.c:228
    66ec:	52 10       	MOV       R5, #2
    66ee:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    66f0:	54 14       	MOV       R5, #68
    66f2:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Services.c:230
    66f4:	6e 98       	LD.W      R5, [R6 + #1]
    66f6:	06 58       	MOV       R0, R6
    66f8:	05 5c       	LJMP      R5
    66fa:	dc 07       	SJMP      $-36                  ;->0x66b2
..\X2Csrc\__Services.c:444
    66fc:	50 10       	MOV       R5, #0
    66fe:	c8 07       	SJMP      $-56                  ;->0x668e

00006700 <setTargetState>:
setTargetState():
..\X2Csrc\__Services.c:465
    6700:	2d 5d       	PUSH      LR
..\X2Csrc\__Services.c:468
    6702:	e8 98       	LD.W      R5, [R0 + #3]
    6704:	5d 88       	LD.B      R3, [R5 + #1]
..\X2Csrc\__Services.c:489
    6706:	42 12       	MOV       R4, #34
..\X2Csrc\__Services.c:468
    6708:	35 38       	CMP       R3, #5
    670a:	18 f8       	JHI       $+24                  ;->0x673a
    670c:	1a 7a       	LSL       R3, #2
    670e:	02 44       	LD        R4, [PC + #2]         ;->0x6714  :=0x6718
    6710:	e4 e8       	LD.W      R4, [R4 + R3]
    6712:	14 5c       	JMP       R4
    6714:	18 67 00 00 	.long     0x00006718 ->000026392  [!!!@2@:SUBC      R1, R8	@@: NOP      

00006718 <.text$setTargetState$sdata_local_1>:
    6718:	68 67 00 00 84 67 00 00 a0 67 00 00 bc 67 00 00     hg...g...g...g..
    6728:	4c 67 00 00 30 67 00 00                             Lg..0g..

00006730 <.text$setTargetState$scode_loacal_6>:
..\X2Csrc\__Services.c:486
    6730:	06 44       	LD        R4, [PC + #6]         ;->0x6748  :=0x10001c4c
    6732:	44 82       	LD.W      R4, [R4]
    6734:	35 10       	MOV       R3, #5
    6736:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    6738:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    673a:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    673c:	52 10       	MOV       R5, #2
    673e:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    6740:	68 98       	LD.W      R5, [R0 + #1]
    6742:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    6744:	0d 5d       	POP       LR
    6746:	1d 5c       	JMP       LR
    6748:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__Services.c:483
    674c:	06 44       	LD        R4, [PC + #6]         ;->0x6764  :=0x10001c4c
    674e:	44 82       	LD.W      R4, [R4]
    6750:	34 10       	MOV       R3, #4
    6752:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    6754:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    6756:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    6758:	52 10       	MOV       R5, #2
    675a:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    675c:	68 98       	LD.W      R5, [R0 + #1]
    675e:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    6760:	0d 5d       	POP       LR
    6762:	1d 5c       	JMP       LR
    6764:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__Services.c:471
    6768:	06 44       	LD        R4, [PC + #6]         ;->0x6780  :=0x10001c4c
    676a:	34 82       	LD.W      R3, [R4]
    676c:	40 10       	MOV       R4, #0
    676e:	dc a0       	ST.W      [R3 + #3], R4
..\X2Csrc\__Services.c:493
    6770:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    6772:	52 10       	MOV       R5, #2
    6774:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    6776:	68 98       	LD.W      R5, [R0 + #1]
    6778:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    677a:	0d 5d       	POP       LR
    677c:	1d 5c       	JMP       LR
    677e:	00 00       	NOP      NOP      
    6780:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__Services.c:474
    6784:	06 44       	LD        R4, [PC + #6]         ;->0x679c  :=0x10001c4c
    6786:	44 82       	LD.W      R4, [R4]
    6788:	31 10       	MOV       R3, #1
    678a:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    678c:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    678e:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    6790:	52 10       	MOV       R5, #2
    6792:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    6794:	68 98       	LD.W      R5, [R0 + #1]
    6796:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    6798:	0d 5d       	POP       LR
    679a:	1d 5c       	JMP       LR
    679c:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__Services.c:477
    67a0:	06 44       	LD        R4, [PC + #6]         ;->0x67b8  :=0x10001c4c
    67a2:	44 82       	LD.W      R4, [R4]
    67a4:	32 10       	MOV       R3, #2
    67a6:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    67a8:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    67aa:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    67ac:	52 10       	MOV       R5, #2
    67ae:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    67b0:	68 98       	LD.W      R5, [R0 + #1]
    67b2:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    67b4:	0d 5d       	POP       LR
    67b6:	1d 5c       	JMP       LR
    67b8:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__Services.c:480
    67bc:	06 44       	LD        R4, [PC + #6]         ;->0x67d4  :=0x10001c4c
    67be:	44 82       	LD.W      R4, [R4]
    67c0:	33 10       	MOV       R3, #3
    67c2:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    67c4:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    67c6:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    67c8:	52 10       	MOV       R5, #2
    67ca:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    67cc:	68 98       	LD.W      R5, [R0 + #1]
    67ce:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    67d0:	0d 5d       	POP       LR
    67d2:	1d 5c       	JMP       LR
    67d4:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0

000067d8 <getTargetState>:
getTargetState():
..\X2Csrc\__Services.c:502
    67d8:	2d 5d       	PUSH      LR
..\X2Csrc\__Services.c:503
    67da:	40 10       	MOV       R4, #0
    67dc:	c8 98       	LD.W      R1, [R0 + #3]
    67de:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:504
    67e0:	06 44       	LD        R4, [PC + #6]         ;->0x67f8  :=0x10001c4c
    67e2:	44 82       	LD.W      R4, [R4]
    67e4:	e4 98       	LD.W      R4, [R4 + #3]
    67e6:	c8 98       	LD.W      R1, [R0 + #3]
    67e8:	8c 90       	ST.B      [R1 + #2], R4
..\X2Csrc\__Services.c:505
    67ea:	43 10       	MOV       R4, #3
    67ec:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:506
    67ee:	68 98       	LD.W      R5, [R0 + #1]
    67f0:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:507
    67f2:	0d 5d       	POP       LR
    67f4:	1d 5c       	JMP       LR
    67f6:	00 00       	NOP      NOP      
    67f8:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0

000067fc <sendError>:
sendError():
..\X2Csrc\__Services.c:227
    67fc:	2d 5d       	PUSH      LR
..\X2Csrc\__Services.c:228
    67fe:	42 10       	MOV       R4, #2
    6800:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:229
    6802:	d0 98       	LD.W      R2, [R0 + #3]
    6804:	51 90       	ST.B      [R2 + #1], R1
..\X2Csrc\__Services.c:230
    6806:	68 98       	LD.W      R5, [R0 + #1]
    6808:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:231
    680a:	0d 5d       	POP       LR
    680c:	1d 5c       	JMP       LR
	...

00006810 <initServiceTable>:
initServiceTable():
..\X2Csrc\__Services.c:514
    6810:	05 42       	LD        R2, [PC + #5]         ;->0x6824  :=0x10001db0
    6812:	a2 58       	MOV       R5, R2
..\X2Csrc\__Services.c:513
    6814:	05 43       	LD        R3, [PC + #5]         ;->0x6828  :=0x10001e1c
    6816:	06 44       	LD        R4, [PC + #6]         ;->0x682c  :=0x62f8
..\X2Csrc\__Services.c:519
    6818:	54 73       	ST.W      [R5++], R4
..\X2Csrc\__Services.c:517
    681a:	53 70       	CMP       R5, R3
    681c:	fe f1       	JNZ       $-2                   ;->0x6818
..\X2Csrc\__Services.c:523
    681e:	02 a1       	ST.W      [R0 + #4], R2
..\X2Csrc\__Services.c:524
    6820:	1d 5c       	JMP       LR
    6822:	00 00       	NOP      NOP      
    6824:	b0 1d 00 10 	.long     0x10001db0 ->268443056  [!!!@2@:MOV       R11, #208	@@: MOV       R0, #0
    6828:	1c 1e 00 10 	.long     0x10001e1c ->268443164  [!!!@2@:MOV       R1, #236	@@: MOV       R0, #0
    682c:	f8 62 00 00 	.long     0x000062f8 ->000025336  [!!!@2@:SXT.B     PC, R8	@@: NOP      

00006830 <addCoreServices>:
addCoreServices():
..\X2Csrc\__Services.c:531
    6830:	28 99       	LD.W      R5, [R0 + #4]
..\X2Csrc\__Services.c:532
    6832:	06 44       	LD        R4, [PC + #6]         ;->0x6848  :=0x630c
    6834:	54 85       	ST.W      [R5], R4
..\X2Csrc\__Services.c:534
    6836:	06 44       	LD        R4, [PC + #6]         ;->0x684c  :=0x67d8
    6838:	6c a0       	ST.W      [R5 + #1], R4
..\X2Csrc\__Services.c:535
    683a:	06 44       	LD        R4, [PC + #6]         ;->0x6850  :=0x6700
    683c:	ac a0       	ST.W      [R5 + #2], R4
..\X2Csrc\__Services.c:537
    683e:	06 44       	LD        R4, [PC + #6]         ;->0x6854  :=0x64ac
    6840:	ac a4       	ST.W      [R5 + #18], R4
..\X2Csrc\__Services.c:538
    6842:	06 44       	LD        R4, [PC + #6]         ;->0x6858  :=0x6614
    6844:	6c a4       	ST.W      [R5 + #17], R4
..\X2Csrc\__Services.c:539
    6846:	1d 5c       	JMP       LR
    6848:	0c 63 00 00 	.long     0x0000630c ->000025356  [!!!@2@:XCH       R0, R12	@@: NOP      
    684c:	d8 67 00 00 	.long     0x000067d8 ->000026584  [!!!@2@:SUBC      LR, R8	@@: NOP      
    6850:	00 67 00 00 	.long     0x00006700 ->000026368  [!!!@2@:SUBC      R0, R0	@@: NOP      
    6854:	ac 64 00 00 	.long     0x000064ac ->000025772  [!!!@2@:ADD       R10, R12	@@: NOP      
    6858:	14 66 00 00 	.long     0x00006614 ->000026132  [!!!@2@:SUB       R1, R4	@@: NOP      

0000685c <initTableStruct>:
initTableStruct():
..\X2Csrc\__TableStruct.c:27
    685c:	09 45       	LD        R5, [PC + #9]         ;->0x6880  :=0x10001c4c
    685e:	55 82       	LD.W      R5, [R5]
    6860:	40 10       	MOV       R4, #0
    6862:	54 85       	ST.W      [R5], R4
..\X2Csrc\__TableStruct.c:29
    6864:	6c a0       	ST.W      [R5 + #1], R4
..\X2Csrc\__TableStruct.c:31
    6866:	ac a0       	ST.W      [R5 + #2], R4
..\X2Csrc\__TableStruct.c:34
    6868:	ec a0       	ST.W      [R5 + #3], R4
..\X2Csrc\__TableStruct.c:37
    686a:	2c b2       	ST.H      [R5 + #8], R4
..\X2Csrc\__TableStruct.c:38
    686c:	6c a1       	ST.W      [R5 + #5], R4
..\X2Csrc\__TableStruct.c:41
    686e:	2c b3       	ST.H      [R5 + #12], R4
..\X2Csrc\__TableStruct.c:44
    6870:	ec a1       	ST.W      [R5 + #7], R4
    6872:	2c a2       	ST.W      [R5 + #8], R4
..\X2Csrc\__TableStruct.c:48
    6874:	ac b4       	ST.H      [R5 + #18], R4
..\X2Csrc\__TableStruct.c:49
    6876:	ac a2       	ST.W      [R5 + #10], R4
..\X2Csrc\__TableStruct.c:52
    6878:	ec a2       	ST.W      [R5 + #11], R4
..\X2Csrc\__TableStruct.c:54
    687a:	2c a3       	ST.W      [R5 + #12], R4
..\X2Csrc\__TableStruct.c:55
    687c:	1d 5c       	JMP       LR
    687e:	00 00       	NOP      NOP      
    6880:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0

00006884 <addTableStructProtocol>:
addTableStructProtocol():
..\X2Csrc\__TableStruct.c:61
    6884:	04 45       	LD        R5, [PC + #4]         ;->0x6894  :=0x10001c4c
    6886:	55 82       	LD.W      R5, [R5]
    6888:	25 ab       	LD.H      R4, [R5 + #12]
    688a:	44 d0       	ZXT.H     R4, R4
    688c:	41 38       	CMP       R4, #1
    688e:	05 f9       	JLS       $+5                   ;->0x6898
..\X2Csrc\__TableStruct.c:65
    6890:	1d 5c       	JMP       LR
    6892:	00 00       	NOP      NOP      
    6894:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
..\X2Csrc\__TableStruct.c:63
    6898:	25 ab       	LD.H      R4, [R5 + #12]
    689a:	44 d0       	ZXT.H     R4, R4
    689c:	dc c1       	ADD       R3, R4, #7
    689e:	1a 7a       	LSL       R3, #2
    68a0:	e8 ee       	ST.W      [R5 + R3], R0
    68a2:	64 c0       	ADD       R4, R4, #1
    68a4:	44 d0       	ZXT.H     R4, R4
    68a6:	2c b3       	ST.H      [R5 + #12], R4
..\X2Csrc\__TableStruct.c:65
    68a8:	1d 5c       	JMP       LR
	...

000068ac <initVersionInfo>:
initVersionInfo():
..\X2Csrc\__VersionInfo.c:17
    68ac:	11 d0       	ZXT.H     R1, R1
..\X2Csrc\__VersionInfo.c:18
    68ae:	81 b4       	ST.H      [R0 + #18], R1
..\X2Csrc\__VersionInfo.c:19
    68b0:	02 45       	LD        R5, [PC + #2]         ;->0x68b8  :=0x802c
    68b2:	85 a2       	ST.W      [R0 + #10], R5
..\X2Csrc\__VersionInfo.c:20
    68b4:	1d 5c       	JMP       LR
    68b6:	00 00       	NOP      NOP      
    68b8:	2c 80 00 00 	.long     0x0000802c ->000032812  [!!!@2@:LD.B      R2, [R12]	@@: NOP      

000068bc <X2C_Init>:
X2C_Init():
..\X2Csrc\__X2C.c:30
    68bc:	2d 5d       	PUSH      LR
..\X2Csrc\__X2C.c:31
    68be:	03 40       	LD        R0, [PC + #3]         ;->0x68c8  :=0x10001e60
    68c0:	03 45       	LD        R5, [PC + #3]         ;->0x68cc  :=0x6c4c
    68c2:	05 5c       	LJMP      R5
..\X2Csrc\__X2C.c:32
    68c4:	0d 5d       	POP       LR
    68c6:	1d 5c       	JMP       LR
    68c8:	60 1e 00 10 	.long     0x10001e60 ->268443232  [!!!@2@:MOV       R6, #224	@@: MOV       R0, #0
    68cc:	4c 6c 00 00 	.long     0x00006c4c ->000027724  [!!!@2@:LSL       R4, R12	@@: NOP      

000068d0 <X2C_Update>:
X2C_Update():
..\X2Csrc\__X2C.c:35
    68d0:	2d 5d       	PUSH      LR
..\X2Csrc\__X2C.c:36
    68d2:	03 40       	LD        R0, [PC + #3]         ;->0x68dc  :=0x10001e60
    68d4:	03 45       	LD        R5, [PC + #3]         ;->0x68e0  :=0x6ccc
    68d6:	05 5c       	LJMP      R5
..\X2Csrc\__X2C.c:37
    68d8:	0d 5d       	POP       LR
    68da:	1d 5c       	JMP       LR
    68dc:	60 1e 00 10 	.long     0x10001e60 ->268443232  [!!!@2@:MOV       R6, #224	@@: MOV       R0, #0
    68e0:	cc 6c 00 00 	.long     0x00006ccc ->000027852  [!!!@2@:LSL       R12, R12	@@: NOP      

000068e4 <isTriggerEvent>:
isTriggerEvent():
..\X2Csrc\__Scope_Main.c:605
    68e4:	8f 5f       	PUSH      {R6-R9,LR}
    68e6:	e8 30       	SUB       SP, #8
    68e8:	e1 85       	ST.W      [SP], R1
    68ea:	01 22       	ST.W      [SP + #1], R2
..\X2Csrc\__Scope_Main.c:606
    68ec:	44 16       	MOV       R4, #100
    68ee:	28 c3       	ADD       R5, R0, R4
    68f0:	55 80       	LD.B      R5, [R5]
    68f2:	4f 10       	MOV       R4, #15
    68f4:	25 d5       	ANL       R4, R5, R4
..\X2Csrc\__Scope_Main.c:612
    68f6:	30 14       	MOV       R3, #64
    68f8:	dd d4       	ANL       R3, R5, R3
    68fa:	0a f0       	JZ        $+10                  ;->0x690e
..\X2Csrc\__Scope_Main.c:614
    68fc:	44 38       	CMP       R4, #4
    68fe:	42 f0       	JZ        $+66                  ;->0x6982
    6900:	48 38       	CMP       R4, #8
    6902:	55 f0       	JZ        $+85                  ;->0x69ac
..\X2Csrc\__Scope_Main.c:631
    6904:	00 10       	MOV       R0, #0
..\X2Csrc\__Scope_Main.c:921
    6906:	e8 28       	ADD       SP, #8
    6908:	0f 5e       	POP       {R6-R9}
    690a:	0d 5d       	POP       LR
    690c:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:684
    690e:	20 12       	MOV       R2, #32
    6910:	ad d4       	ANL       R5, R5, R2
    6912:	20 f0       	JZ        $+32                  ;->0x6952
..\X2Csrc\__Scope_Main.c:686
    6914:	42 38       	CMP       R4, #2
    6916:	69 f0       	JZ        $+105                 ;->0x69e8
    6918:	42 38       	CMP       R4, #2
    691a:	02 f9       	JLS       $+2                   ;->0x691e
    691c:	8f 04       	SJMP      $+143                 ;->0x6a3a
    691e:	41 38       	CMP       R4, #1
    6920:	f2 f1       	JNZ       $-14                  ;->0x6904
..\X2Csrc\__Scope_Main.c:690
    6922:	48 15       	MOV       R4, #88
    6924:	28 c3       	ADD       R5, R0, R4
    6926:	45 80       	LD.B      R4, [R5]
..\X2Csrc\__Scope_Main.c:691
    6928:	20 15       	MOV       R2, #80
    692a:	a8 c2       	ADD       R5, R0, R2
    692c:	55 80       	LD.B      R5, [R5]
..\X2Csrc\__Scope_Main.c:692
    692e:	1e 80       	LD.B      R1, [SP]
..\X2Csrc\__Scope_Main.c:693
    6930:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:694
    6932:	44 62       	SXT.B     R4, R4
    6934:	55 62       	SXT.B     R5, R5
..\X2Csrc\__Scope_Main.c:631
    6936:	03 58       	MOV       R0, R3
..\X2Csrc\__Scope_Main.c:693
    6938:	21 38       	CMP       R2, #1
    693a:	02 f1       	JNZ       $+2                   ;->0x693e
    693c:	fa 04       	SJMP      $+250                 ;->0x6b30
..\X2Csrc\__Scope_Main.c:702
    693e:	45 70       	CMP       R4, R5
    6940:	e3 fd       	JLE       $-29                  ;->0x6906
    6942:	11 62       	SXT.B     R1, R1
    6944:	51 70       	CMP       R5, R1
    6946:	e0 fb       	JLT       $-32                  ;->0x6906
..\X2Csrc\__Scope_Main.c:627
    6948:	01 10       	MOV       R0, #1
..\X2Csrc\__Scope_Main.c:921
    694a:	e8 28       	ADD       SP, #8
    694c:	0f 5e       	POP       {R6-R9}
    694e:	0d 5d       	POP       LR
    6950:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:797
    6952:	42 38       	CMP       R4, #2
    6954:	60 f0       	JZ        $+96                  ;->0x6a14
    6956:	42 38       	CMP       R4, #2
    6958:	02 f9       	JLS       $+2                   ;->0x695c
    695a:	8b 04       	SJMP      $+139                 ;->0x6a70
    695c:	41 38       	CMP       R4, #1
    695e:	d3 f1       	JNZ       $-45                  ;->0x6904
..\X2Csrc\__Scope_Main.c:801
    6960:	38 15       	MOV       R3, #88
    6962:	e0 c2       	ADD       R4, R0, R3
    6964:	34 80       	LD.B      R3, [R4]
..\X2Csrc\__Scope_Main.c:802
    6966:	20 15       	MOV       R2, #80
    6968:	a0 c2       	ADD       R4, R0, R2
    696a:	44 80       	LD.B      R4, [R4]
..\X2Csrc\__Scope_Main.c:803
    696c:	1e 80       	LD.B      R1, [SP]
..\X2Csrc\__Scope_Main.c:804
    696e:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:631
    6970:	05 58       	MOV       R0, R5
..\X2Csrc\__Scope_Main.c:804
    6972:	21 38       	CMP       R2, #1
    6974:	5b f0       	JZ        $+91                  ;->0x6a2a
..\X2Csrc\__Scope_Main.c:875
    6976:	34 70       	CMP       R3, R4
    6978:	c7 f9       	JLS       $-57                  ;->0x6906
    697a:	14 70       	CMP       R1, R4
    697c:	c5 f8       	JHI       $-59                  ;->0x6906
..\X2Csrc\__Scope_Main.c:627
    697e:	01 10       	MOV       R0, #1
    6980:	e5 07       	SJMP      $-27                  ;->0x694a
..\X2Csrc\__Scope_Main.c:619
    6982:	a8 9d       	LD.W      R5, [R0 + #22]
..\X2Csrc\__Scope_Main.c:620
    6984:	30 9d       	LD.W      R6, [R0 + #20]
..\X2Csrc\__Scope_Main.c:621
    6986:	7e 82       	LD.W      R7, [SP]
..\X2Csrc\__Scope_Main.c:623
    6988:	e0 9c       	LD.W      R4, [R0 + #19]
..\X2Csrc\__Scope_Main.c:625
    698a:	05 58       	MOV       R0, R5
    698c:	26 58       	MOV       R1, R6
..\X2Csrc\__Scope_Main.c:623
    698e:	41 38       	CMP       R4, #1
    6990:	02 f1       	JNZ       $+2                   ;->0x6994
    6992:	fe 04       	SJMP      $+254                 ;->0x6b8e
..\X2Csrc\__Scope_Main.c:636
    6994:	86 45       	LD        R5, [PC + #134]       ;->0x6bac  :=0x7cc4
    6996:	05 5c       	LJMP      R5
    6998:	00 38       	CMP       R0, #0
    699a:	b5 fd       	JLE       $-75                  ;->0x6904
    699c:	06 58       	MOV       R0, R6
    699e:	27 58       	MOV       R1, R7
    69a0:	84 45       	LD        R5, [PC + #132]       ;->0x6bb0  :=0x7cc4
    69a2:	05 5c       	LJMP      R5
    69a4:	00 38       	CMP       R0, #0
    69a6:	af f4       	JMI       $-81                  ;->0x6904
..\X2Csrc\__Scope_Main.c:627
    69a8:	01 10       	MOV       R0, #1
    69aa:	d0 07       	SJMP      $-48                  ;->0x694a
..\X2Csrc\__Scope_Main.c:649
    69ac:	a0 9d       	LD.W      R4, [R0 + #22]
    69ae:	e8 9d       	LD.W      R5, [R0 + #23]
..\X2Csrc\__Scope_Main.c:650
    69b0:	30 9d       	LD.W      R6, [R0 + #20]
    69b2:	78 9d       	LD.W      R7, [R0 + #21]
..\X2Csrc\__Scope_Main.c:651
    69b4:	2e 82       	LD.W      R2, [SP]
    69b6:	01 0b       	LD.W      R3, [SP + #1]
    69b8:	02 59       	MOV       R8, R2
    69ba:	23 59       	MOV       R9, R3
..\X2Csrc\__Scope_Main.c:652
    69bc:	d8 9c       	LD.W      R3, [R0 + #19]
..\X2Csrc\__Scope_Main.c:654
    69be:	04 58       	MOV       R0, R4
    69c0:	25 58       	MOV       R1, R5
..\X2Csrc\__Scope_Main.c:652
    69c2:	31 38       	CMP       R3, #1
    69c4:	02 f1       	JNZ       $+2                   ;->0x69c8
    69c6:	d2 04       	SJMP      $+210                 ;->0x6b6a
..\X2Csrc\__Scope_Main.c:665
    69c8:	46 58       	MOV       R2, R6
    69ca:	67 58       	MOV       R3, R7
    69cc:	7a 45       	LD        R5, [PC + #122]       ;->0x6bb4  :=0x7be0
    69ce:	05 5c       	LJMP      R5
    69d0:	00 38       	CMP       R0, #0
    69d2:	99 fd       	JLE       $-103                 ;->0x6904
    69d4:	06 58       	MOV       R0, R6
    69d6:	27 58       	MOV       R1, R7
    69d8:	48 58       	MOV       R2, R8
    69da:	69 58       	MOV       R3, R9
    69dc:	77 45       	LD        R5, [PC + #119]       ;->0x6bb8  :=0x7be0
    69de:	05 5c       	LJMP      R5
    69e0:	00 38       	CMP       R0, #0
    69e2:	91 f4       	JMI       $-111                 ;->0x6904
..\X2Csrc\__Scope_Main.c:627
    69e4:	01 10       	MOV       R0, #1
    69e6:	b2 07       	SJMP      $-78                  ;->0x694a
..\X2Csrc\__Scope_Main.c:713
    69e8:	48 15       	MOV       R4, #88
    69ea:	28 c3       	ADD       R5, R0, R4
    69ec:	45 81       	LD.H      R4, [R5]
..\X2Csrc\__Scope_Main.c:714
    69ee:	20 15       	MOV       R2, #80
    69f0:	a8 c2       	ADD       R5, R0, R2
    69f2:	55 81       	LD.H      R5, [R5]
..\X2Csrc\__Scope_Main.c:715
    69f4:	1e 81       	LD.H      R1, [SP]
..\X2Csrc\__Scope_Main.c:716
    69f6:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:717
    69f8:	44 61       	SXT.H     R4, R4
    69fa:	55 61       	SXT.H     R5, R5
..\X2Csrc\__Scope_Main.c:631
    69fc:	03 58       	MOV       R0, R3
..\X2Csrc\__Scope_Main.c:716
    69fe:	21 38       	CMP       R2, #1
    6a00:	02 f1       	JNZ       $+2                   ;->0x6a04
    6a02:	84 04       	SJMP      $+132                 ;->0x6b0a
..\X2Csrc\__Scope_Main.c:725
    6a04:	45 70       	CMP       R4, R5
    6a06:	80 fd       	JLE       $-128                 ;->0x6906
    6a08:	11 61       	SXT.H     R1, R1
    6a0a:	51 70       	CMP       R5, R1
    6a0c:	02 fa       	JGE       $+2                   ;->0x6a10
    6a0e:	7c 07       	SJMP      $-132                 ;->0x6906
..\X2Csrc\__Scope_Main.c:627
    6a10:	01 10       	MOV       R0, #1
    6a12:	9c 07       	SJMP      $-100                 ;->0x694a
..\X2Csrc\__Scope_Main.c:830
    6a14:	38 15       	MOV       R3, #88
    6a16:	e0 c2       	ADD       R4, R0, R3
    6a18:	34 81       	LD.H      R3, [R4]
..\X2Csrc\__Scope_Main.c:831
    6a1a:	20 15       	MOV       R2, #80
    6a1c:	a0 c2       	ADD       R4, R0, R2
    6a1e:	44 81       	LD.H      R4, [R4]
..\X2Csrc\__Scope_Main.c:832
    6a20:	1e 81       	LD.H      R1, [SP]
..\X2Csrc\__Scope_Main.c:833
    6a22:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:631
    6a24:	05 58       	MOV       R0, R5
..\X2Csrc\__Scope_Main.c:833
    6a26:	21 38       	CMP       R2, #1
    6a28:	a7 f1       	JNZ       $-89                  ;->0x6976
..\X2Csrc\__Scope_Main.c:864
    6a2a:	43 70       	CMP       R4, R3
    6a2c:	02 f8       	JHI       $+2                   ;->0x6a30
    6a2e:	6c 07       	SJMP      $-148                 ;->0x6906
    6a30:	41 70       	CMP       R4, R1
    6a32:	02 f9       	JLS       $+2                   ;->0x6a36
    6a34:	69 07       	SJMP      $-151                 ;->0x6906
..\X2Csrc\__Scope_Main.c:627
    6a36:	01 10       	MOV       R0, #1
    6a38:	89 07       	SJMP      $-119                 ;->0x694a
..\X2Csrc\__Scope_Main.c:686
    6a3a:	44 38       	CMP       R4, #4
    6a3c:	3d f0       	JZ        $+61                  ;->0x6ab6
    6a3e:	48 38       	CMP       R4, #8
    6a40:	02 f0       	JZ        $+2                   ;->0x6a44
    6a42:	61 07       	SJMP      $-159                 ;->0x6904
..\X2Csrc\__Scope_Main.c:765
    6a44:	b0 9d       	LD.W      R6, [R0 + #22]
    6a46:	e0 9d       	LD.W      R4, [R0 + #23]
..\X2Csrc\__Scope_Main.c:766
    6a48:	08 9d       	LD.W      R1, [R0 + #20]
    6a4a:	68 9d       	LD.W      R5, [R0 + #21]
..\X2Csrc\__Scope_Main.c:767
    6a4c:	7e 82       	LD.W      R7, [SP]
    6a4e:	01 0a       	LD.W      R2, [SP + #1]
..\X2Csrc\__Scope_Main.c:768
    6a50:	d8 9c       	LD.W      R3, [R0 + #19]
    6a52:	31 38       	CMP       R3, #1
    6a54:	55 f0       	JZ        $+85                  ;->0x6afe
..\X2Csrc\__Scope_Main.c:781
    6a56:	45 70       	CMP       R4, R5
    6a58:	62 fd       	JLE       $+98                  ;->0x6b1c
    6a5a:	25 70       	CMP       R2, R5
    6a5c:	02 fd       	JLE       $+2                   ;->0x6a60
    6a5e:	53 07       	SJMP      $-173                 ;->0x6904
..\X2Csrc\__Scope_Main.c:904
    6a60:	25 70       	CMP       R2, R5
    6a62:	02 f0       	JZ        $+2                   ;->0x6a66
    6a64:	72 07       	SJMP      $-142                 ;->0x6948
    6a66:	71 70       	CMP       R7, R1
    6a68:	02 f9       	JLS       $+2                   ;->0x6a6c
    6a6a:	4d 07       	SJMP      $-179                 ;->0x6904
..\X2Csrc\__Scope_Main.c:627
    6a6c:	01 10       	MOV       R0, #1
    6a6e:	6e 07       	SJMP      $-146                 ;->0x694a
..\X2Csrc\__Scope_Main.c:797
    6a70:	44 38       	CMP       R4, #4
    6a72:	19 f0       	JZ        $+25                  ;->0x6aa4
    6a74:	48 38       	CMP       R4, #8
    6a76:	02 f0       	JZ        $+2                   ;->0x6a7a
    6a78:	46 07       	SJMP      $-186                 ;->0x6904
..\X2Csrc\__Scope_Main.c:888
    6a7a:	b0 9d       	LD.W      R6, [R0 + #22]
    6a7c:	e0 9d       	LD.W      R4, [R0 + #23]
..\X2Csrc\__Scope_Main.c:889
    6a7e:	08 9d       	LD.W      R1, [R0 + #20]
    6a80:	68 9d       	LD.W      R5, [R0 + #21]
..\X2Csrc\__Scope_Main.c:890
    6a82:	7e 82       	LD.W      R7, [SP]
    6a84:	01 0a       	LD.W      R2, [SP + #1]
..\X2Csrc\__Scope_Main.c:891
    6a86:	d8 9c       	LD.W      R3, [R0 + #19]
    6a88:	31 38       	CMP       R3, #1
    6a8a:	25 f0       	JZ        $+37                  ;->0x6ad4
..\X2Csrc\__Scope_Main.c:904
    6a8c:	45 70       	CMP       R4, R5
    6a8e:	07 f8       	JHI       $+7                   ;->0x6a9c
    6a90:	45 70       	CMP       R4, R5
    6a92:	02 f0       	JZ        $+2                   ;->0x6a96
    6a94:	38 07       	SJMP      $-200                 ;->0x6904
    6a96:	61 70       	CMP       R6, R1
    6a98:	02 f8       	JHI       $+2                   ;->0x6a9c
    6a9a:	35 07       	SJMP      $-203                 ;->0x6904
    6a9c:	25 70       	CMP       R2, R5
    6a9e:	02 f9       	JLS       $+2                   ;->0x6aa2
    6aa0:	32 07       	SJMP      $-206                 ;->0x6904
    6aa2:	df 07       	SJMP      $-33                  ;->0x6a60
..\X2Csrc\__Scope_Main.c:859
    6aa4:	98 9d       	LD.W      R3, [R0 + #22]
..\X2Csrc\__Scope_Main.c:860
    6aa6:	20 9d       	LD.W      R4, [R0 + #20]
..\X2Csrc\__Scope_Main.c:861
    6aa8:	1e 82       	LD.W      R1, [SP]
..\X2Csrc\__Scope_Main.c:862
    6aaa:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:631
    6aac:	05 58       	MOV       R0, R5
..\X2Csrc\__Scope_Main.c:862
    6aae:	21 38       	CMP       R2, #1
    6ab0:	02 f0       	JZ        $+2                   ;->0x6ab4
    6ab2:	62 07       	SJMP      $-158                 ;->0x6976
    6ab4:	bb 07       	SJMP      $-69                  ;->0x6a2a
..\X2Csrc\__Scope_Main.c:736
    6ab6:	a0 9d       	LD.W      R4, [R0 + #22]
..\X2Csrc\__Scope_Main.c:737
    6ab8:	28 9d       	LD.W      R5, [R0 + #20]
..\X2Csrc\__Scope_Main.c:738
    6aba:	1e 82       	LD.W      R1, [SP]
..\X2Csrc\__Scope_Main.c:739
    6abc:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:631
    6abe:	03 58       	MOV       R0, R3
..\X2Csrc\__Scope_Main.c:739
    6ac0:	21 38       	CMP       R2, #1
    6ac2:	16 f0       	JZ        $+22                  ;->0x6aee
..\X2Csrc\__Scope_Main.c:752
    6ac4:	45 70       	CMP       R4, R5
    6ac6:	02 fc       	JGT       $+2                   ;->0x6aca
    6ac8:	1f 07       	SJMP      $-225                 ;->0x6906
    6aca:	51 70       	CMP       R5, R1
    6acc:	02 fa       	JGE       $+2                   ;->0x6ad0
    6ace:	1c 07       	SJMP      $-228                 ;->0x6906
..\X2Csrc\__Scope_Main.c:627
    6ad0:	01 10       	MOV       R0, #1
    6ad2:	3c 07       	SJMP      $-196                 ;->0x694a
..\X2Csrc\__Scope_Main.c:893
    6ad4:	54 70       	CMP       R5, R4
    6ad6:	40 f9       	JLS       $+64                  ;->0x6b56
    6ad8:	52 70       	CMP       R5, R2
    6ada:	02 f9       	JLS       $+2                   ;->0x6ade
    6adc:	14 07       	SJMP      $-236                 ;->0x6904
    6ade:	52 70       	CMP       R5, R2
    6ae0:	02 f0       	JZ        $+2                   ;->0x6ae4
    6ae2:	33 07       	SJMP      $-205                 ;->0x6948
    6ae4:	17 70       	CMP       R1, R7
    6ae6:	02 f9       	JLS       $+2                   ;->0x6aea
    6ae8:	0e 07       	SJMP      $-242                 ;->0x6904
..\X2Csrc\__Scope_Main.c:627
    6aea:	01 10       	MOV       R0, #1
    6aec:	2f 07       	SJMP      $-209                 ;->0x694a
..\X2Csrc\__Scope_Main.c:741
    6aee:	45 70       	CMP       R4, R5
    6af0:	02 fb       	JLT       $+2                   ;->0x6af4
    6af2:	0a 07       	SJMP      $-246                 ;->0x6906
    6af4:	51 70       	CMP       R5, R1
    6af6:	02 fd       	JLE       $+2                   ;->0x6afa
    6af8:	07 07       	SJMP      $-249                 ;->0x6906
..\X2Csrc\__Scope_Main.c:627
    6afa:	01 10       	MOV       R0, #1
    6afc:	27 07       	SJMP      $-217                 ;->0x694a
..\X2Csrc\__Scope_Main.c:770
    6afe:	54 70       	CMP       R5, R4
    6b00:	21 fd       	JLE       $+33                  ;->0x6b42
    6b02:	52 70       	CMP       R5, R2
    6b04:	02 fd       	JLE       $+2                   ;->0x6b08
    6b06:	ff 06       	SJMP      $-257                 ;->0x6904
    6b08:	eb 07       	SJMP      $-21                  ;->0x6ade
..\X2Csrc\__Scope_Main.c:717
    6b0a:	45 70       	CMP       R4, R5
    6b0c:	02 fb       	JLT       $+2                   ;->0x6b10
    6b0e:	fc 06       	SJMP      $-260                 ;->0x6906
    6b10:	11 61       	SXT.H     R1, R1
    6b12:	51 70       	CMP       R5, R1
    6b14:	02 fd       	JLE       $+2                   ;->0x6b18
    6b16:	f8 06       	SJMP      $-264                 ;->0x6906
..\X2Csrc\__Scope_Main.c:627
    6b18:	01 10       	MOV       R0, #1
    6b1a:	18 07       	SJMP      $-232                 ;->0x694a
..\X2Csrc\__Scope_Main.c:781
    6b1c:	45 70       	CMP       R4, R5
    6b1e:	02 f0       	JZ        $+2                   ;->0x6b22
    6b20:	f2 06       	SJMP      $-270                 ;->0x6904
    6b22:	61 70       	CMP       R6, R1
    6b24:	02 f8       	JHI       $+2                   ;->0x6b28
    6b26:	ef 06       	SJMP      $-273                 ;->0x6904
    6b28:	25 70       	CMP       R2, R5
    6b2a:	02 fd       	JLE       $+2                   ;->0x6b2e
    6b2c:	ec 06       	SJMP      $-276                 ;->0x6904
    6b2e:	99 07       	SJMP      $-103                 ;->0x6a60
..\X2Csrc\__Scope_Main.c:694
    6b30:	45 70       	CMP       R4, R5
    6b32:	02 fb       	JLT       $+2                   ;->0x6b36
    6b34:	e9 06       	SJMP      $-279                 ;->0x6906
    6b36:	11 62       	SXT.B     R1, R1
    6b38:	51 70       	CMP       R5, R1
    6b3a:	02 fd       	JLE       $+2                   ;->0x6b3e
    6b3c:	e5 06       	SJMP      $-283                 ;->0x6906
..\X2Csrc\__Scope_Main.c:627
    6b3e:	01 10       	MOV       R0, #1
    6b40:	05 07       	SJMP      $-251                 ;->0x694a
..\X2Csrc\__Scope_Main.c:770
    6b42:	54 70       	CMP       R5, R4
    6b44:	02 f0       	JZ        $+2                   ;->0x6b48
    6b46:	df 06       	SJMP      $-289                 ;->0x6904
    6b48:	16 70       	CMP       R1, R6
    6b4a:	02 f8       	JHI       $+2                   ;->0x6b4e
    6b4c:	dc 06       	SJMP      $-292                 ;->0x6904
    6b4e:	52 70       	CMP       R5, R2
    6b50:	02 fd       	JLE       $+2                   ;->0x6b54
    6b52:	d9 06       	SJMP      $-295                 ;->0x6904
    6b54:	c5 07       	SJMP      $-59                  ;->0x6ade
..\X2Csrc\__Scope_Main.c:893
    6b56:	54 70       	CMP       R5, R4
    6b58:	02 f0       	JZ        $+2                   ;->0x6b5c
    6b5a:	d5 06       	SJMP      $-299                 ;->0x6904
    6b5c:	16 70       	CMP       R1, R6
    6b5e:	02 f8       	JHI       $+2                   ;->0x6b62
    6b60:	d2 06       	SJMP      $-302                 ;->0x6904
    6b62:	52 70       	CMP       R5, R2
    6b64:	02 f9       	JLS       $+2                   ;->0x6b68
    6b66:	cf 06       	SJMP      $-305                 ;->0x6904
    6b68:	bb 07       	SJMP      $-69                  ;->0x6ade
..\X2Csrc\__Scope_Main.c:654
    6b6a:	46 58       	MOV       R2, R6
    6b6c:	67 58       	MOV       R3, R7
    6b6e:	14 45       	LD        R5, [PC + #20]        ;->0x6bbc  :=0x7d78
    6b70:	05 5c       	LJMP      R5
    6b72:	00 38       	CMP       R0, #0
    6b74:	02 f4       	JMI       $+2                   ;->0x6b78
    6b76:	c7 06       	SJMP      $-313                 ;->0x6904
    6b78:	06 58       	MOV       R0, R6
    6b7a:	27 58       	MOV       R1, R7
    6b7c:	48 58       	MOV       R2, R8
    6b7e:	69 58       	MOV       R3, R9
    6b80:	10 45       	LD        R5, [PC + #16]        ;->0x6bc0  :=0x7d78
    6b82:	05 5c       	LJMP      R5
    6b84:	00 38       	CMP       R0, #0
    6b86:	02 fd       	JLE       $+2                   ;->0x6b8a
    6b88:	be 06       	SJMP      $-322                 ;->0x6904
..\X2Csrc\__Scope_Main.c:627
    6b8a:	01 10       	MOV       R0, #1
    6b8c:	df 06       	SJMP      $-289                 ;->0x694a
..\X2Csrc\__Scope_Main.c:625
    6b8e:	0e 45       	LD        R5, [PC + #14]        ;->0x6bc4  :=0x7e58
    6b90:	05 5c       	LJMP      R5
    6b92:	00 38       	CMP       R0, #0
    6b94:	02 f4       	JMI       $+2                   ;->0x6b98
    6b96:	b7 06       	SJMP      $-329                 ;->0x6904
    6b98:	06 58       	MOV       R0, R6
    6b9a:	27 58       	MOV       R1, R7
    6b9c:	0b 45       	LD        R5, [PC + #11]        ;->0x6bc8  :=0x7e58
    6b9e:	05 5c       	LJMP      R5
    6ba0:	00 38       	CMP       R0, #0
    6ba2:	02 fd       	JLE       $+2                   ;->0x6ba6
    6ba4:	b0 06       	SJMP      $-336                 ;->0x6904
..\X2Csrc\__Scope_Main.c:627
    6ba6:	01 10       	MOV       R0, #1
    6ba8:	d1 06       	SJMP      $-303                 ;->0x694a
    6baa:	00 00       	NOP      NOP      
    6bac:	c4 7c 00 00 	.long     0x00007cc4 ->000031940  [!!!@2@:LSR       R8, #12	@@: NOP      
    6bb0:	c4 7c 00 00 	.long     0x00007cc4 ->000031940  [!!!@2@:LSR       R8, #12	@@: NOP      
    6bb4:	e0 7b 00 00 	.long     0x00007be0 ->000031712  [!!!@2@:LSL       R12, #24	@@: NOP      
    6bb8:	e0 7b 00 00 	.long     0x00007be0 ->000031712  [!!!@2@:LSL       R12, #24	@@: NOP      
    6bbc:	78 7d 00 00 	.long     0x00007d78 ->000032120  [!!!@2@:LSR       PC, #16	@@: NOP      
    6bc0:	78 7d 00 00 	.long     0x00007d78 ->000032120  [!!!@2@:LSR       PC, #16	@@: NOP      
    6bc4:	58 7e 00 00 	.long     0x00007e58 ->000032344  [!!!@2@:ROR       R11, #0	@@: NOP      
    6bc8:	58 7e 00 00 	.long     0x00007e58 ->000032344  [!!!@2@:ROR       R11, #0	@@: NOP      

00006bcc <getTriggerValue>:
getTriggerValue():
..\X2Csrc\__Scope_Main.c:927
    6bcc:	44 16       	MOV       R4, #100
    6bce:	28 c3       	ADD       R5, R0, R4
    6bd0:	35 80       	LD.B      R3, [R5]
..\X2Csrc\__Scope_Main.c:928
    6bd2:	5f 10       	MOV       R5, #15
    6bd4:	6b d5       	ANL       R5, R3, R5
    6bd6:	52 38       	CMP       R5, #2
    6bd8:	18 f0       	JZ        $+24                  ;->0x6c08
    6bda:	52 38       	CMP       R5, #2
    6bdc:	08 f8       	JHI       $+8                   ;->0x6bec
    6bde:	51 38       	CMP       R5, #1
    6be0:	04 f1       	JNZ       $+4                   ;->0x6be8
..\X2Csrc\__Scope_Main.c:931
    6be2:	28 9e       	LD.W      R5, [R0 + #24]
    6be4:	25 80       	LD.B      R2, [R5]
    6be6:	10 10       	MOV       R1, #0
..\X2Csrc\__Scope_Main.c:947
    6be8:	02 58       	MOV       R0, R2
    6bea:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:928
    6bec:	54 38       	CMP       R5, #4
    6bee:	08 f0       	JZ        $+8                   ;->0x6bfe
    6bf0:	58 38       	CMP       R5, #8
    6bf2:	fb f1       	JNZ       $-5                   ;->0x6be8
..\X2Csrc\__Scope_Main.c:940
    6bf4:	28 9e       	LD.W      R5, [R0 + #24]
    6bf6:	25 82       	LD.W      R2, [R5]
    6bf8:	4d 98       	LD.W      R1, [R5 + #1]
..\X2Csrc\__Scope_Main.c:947
    6bfa:	02 58       	MOV       R0, R2
    6bfc:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:937
    6bfe:	28 9e       	LD.W      R5, [R0 + #24]
    6c00:	25 82       	LD.W      R2, [R5]
    6c02:	10 10       	MOV       R1, #0
..\X2Csrc\__Scope_Main.c:947
    6c04:	02 58       	MOV       R0, R2
    6c06:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:934
    6c08:	28 9e       	LD.W      R5, [R0 + #24]
    6c0a:	25 81       	LD.H      R2, [R5]
    6c0c:	10 10       	MOV       R1, #0
..\X2Csrc\__Scope_Main.c:947
    6c0e:	02 58       	MOV       R0, R2
    6c10:	1d 5c       	JMP       LR

00006c12 <sampleData>:
sampleData():
..\X2Csrc\__Scope_Main.c:951
    6c12:	03 5f       	PUSH      {R6-R7}
    6c14:	a0 9e       	LD.W      R4, [R0 + #26]
..\X2Csrc\__Scope_Main.c:954
    6c16:	60 10       	MOV       R6, #0
..\X2Csrc\__Scope_Main.c:958
    6c18:	50 10       	MOV       R5, #0
    6c1a:	d6 c0       	ADD       R2, R6, #3
    6c1c:	88 c3       	ADD       R1, R0, R6
..\X2Csrc\__Scope_Main.c:962
    6c1e:	12 7a       	LSL       R2, #2
    6c20:	b8 e8       	LD.W      R7, [R0 + R2]
    6c22:	7f e5       	LD.B      R7, [R7 + R5]
    6c24:	37 d1       	ZXT.B     R3, R7
..\X2Csrc\__Scope_Main.c:961
    6c26:	f8 9b       	LD.W      R7, [R0 + #15]
    6c28:	3b eb       	ST.B      [R7 + R4], R3
    6c2a:	64 c0       	ADD       R4, R4, #1
    6c2c:	84 a6       	ST.W      [R0 + #26], R4
..\X2Csrc\__Scope_Main.c:963
    6c2e:	6d c0       	ADD       R5, R5, #1
    6c30:	55 d1       	ZXT.B     R5, R5
..\X2Csrc\__Scope_Main.c:965
    6c32:	7c 12       	MOV       R7, #44
    6c34:	d9 c3       	ADD       R3, R1, R7
    6c36:	33 80       	LD.B      R3, [R3]
    6c38:	35 70       	CMP       R3, R5
    6c3a:	f3 f8       	JHI       $-13                  ;->0x6c20
..\X2Csrc\__Scope_Main.c:967
    6c3c:	76 c0       	ADD       R6, R6, #1
    6c3e:	66 d1       	ZXT.B     R6, R6
..\X2Csrc\__Scope_Main.c:969
    6c40:	28 8a       	LD.B      R5, [R0 + #8]
    6c42:	56 70       	CMP       R5, R6
    6c44:	ea f8       	JHI       $-22                  ;->0x6c18
..\X2Csrc\__Scope_Main.c:971
    6c46:	03 5e       	POP       {R6-R7}
    6c48:	1d 5c       	JMP       LR
	...

00006c4c <Scope_Main_Init>:
Scope_Main_Init():
..\X2Csrc\__Scope_Main.c:52
    6c4c:	50 10       	MOV       R5, #0
    6c4e:	55 68       	NOT       R5, R5
    6c50:	05 84       	ST.H      [R0], R5
..\X2Csrc\__Scope_Main.c:48
    6c52:	2c 10       	MOV       R2, #12
    6c54:	88 c2       	ADD       R1, R0, R2
    6c56:	4c 12       	MOV       R4, #44
    6c58:	10 c3       	ADD       R2, R0, R4
..\X2Csrc\__Scope_Main.c:53
    6c5a:	50 10       	MOV       R5, #0
..\X2Csrc\__Scope_Main.c:55
    6c5c:	85 58       	MOV       R4, R5
    6c5e:	30 10       	MOV       R3, #0
    6c60:	14 73       	ST.W      [R1++], R4
..\X2Csrc\__Scope_Main.c:56
    6c62:	24 77       	ST.B      [R2++], R4
..\X2Csrc\__Scope_Main.c:53
    6c64:	6d c0       	ADD       R5, R5, #1
    6c66:	55 d1       	ZXT.B     R5, R5
    6c68:	58 38       	CMP       R5, #8
    6c6a:	fa f1       	JNZ       $-6                   ;->0x6c5e
..\X2Csrc\__Scope_Main.c:59
    6c6c:	16 45       	LD        R5, [PC + #22]        ;->0x6cc4  :=0x10001ee0
    6c6e:	c5 a3       	ST.W      [R0 + #15], R5
..\X2Csrc\__Scope_Main.c:60
    6c70:	40 10       	MOV       R4, #0
    6c72:	50 10       	MOV       R5, #0
    6c74:	04 a5       	ST.W      [R0 + #20], R4
    6c76:	45 a5       	ST.W      [R0 + #21], R5
..\X2Csrc\__Scope_Main.c:61
    6c78:	84 a5       	ST.W      [R0 + #22], R4
    6c7a:	c5 a5       	ST.W      [R0 + #23], R5
..\X2Csrc\__Scope_Main.c:62
    6c7c:	03 a6       	ST.W      [R0 + #24], R3
..\X2Csrc\__Scope_Main.c:63
    6c7e:	24 16       	MOV       R2, #100
    6c80:	a8 c2       	ADD       R5, R0, R2
    6c82:	53 83       	ST.B      [R5], R3
..\X2Csrc\__Scope_Main.c:64
    6c84:	43 a0       	ST.W      [R0 + #1], R3
..\X2Csrc\__Scope_Main.c:65
    6c86:	83 a6       	ST.W      [R0 + #26], R3
..\X2Csrc\__Scope_Main.c:66
    6c88:	44 13       	MOV       R4, #52
    6c8a:	28 c3       	ADD       R5, R0, R4
    6c8c:	53 83       	ST.B      [R5], R3
..\X2Csrc\__Scope_Main.c:67
    6c8e:	03 92       	ST.B      [R0 + #8], R3
..\X2Csrc\__Scope_Main.c:68
    6c90:	54 14       	MOV       R5, #68
    6c92:	60 c3       	ADD       R4, R0, R5
    6c94:	43 84       	ST.H      [R4], R3
..\X2Csrc\__Scope_Main.c:69
    6c96:	26 14       	MOV       R2, #70
    6c98:	a0 c2       	ADD       R4, R0, R2
    6c9a:	43 84       	ST.H      [R4], R3
..\X2Csrc\__Scope_Main.c:70
    6c9c:	28 14       	MOV       R2, #72
    6c9e:	a0 c2       	ADD       R4, R0, R2
    6ca0:	43 84       	ST.H      [R4], R3
..\X2Csrc\__Scope_Main.c:71
    6ca2:	43 92       	ST.B      [R0 + #9], R3
..\X2Csrc\__Scope_Main.c:72
    6ca4:	c3 a6       	ST.W      [R0 + #27], R3
..\X2Csrc\__Scope_Main.c:73
    6ca6:	43 a7       	ST.W      [R0 + #29], R3
..\X2Csrc\__Scope_Main.c:74
    6ca8:	28 17       	MOV       R2, #120
    6caa:	a0 c2       	ADD       R4, R0, R2
    6cac:	43 83       	ST.B      [R4], R3
..\X2Csrc\__Scope_Main.c:75
    6cae:	03 a7       	ST.W      [R0 + #28], R3
..\X2Csrc\__Scope_Main.c:76
    6cb0:	51 10       	MOV       R5, #1
    6cb2:	ad 7a       	LSL       R5, #13
    6cb4:	85 a3       	ST.W      [R0 + #14], R5
..\X2Csrc\__Scope_Main.c:77
    6cb6:	41 10       	MOV       R4, #1
    6cb8:	c4 a4       	ST.W      [R0 + #19], R4
..\X2Csrc\__Scope_Main.c:78
    6cba:	05 a4       	ST.W      [R0 + #16], R5
..\X2Csrc\__Scope_Main.c:80
    6cbc:	03 45       	LD        R5, [PC + #3]         ;->0x6cc8  :=0x10001c4c
    6cbe:	55 82       	LD.W      R5, [R5]
    6cc0:	e8 a2       	ST.W      [R5 + #11], R0
..\X2Csrc\__Scope_Main.c:81
    6cc2:	1d 5c       	JMP       LR
    6cc4:	e0 1e 00 10 	.long     0x10001ee0 ->268443360  [!!!@2@:MOV       SP, #224	@@: MOV       R0, #0
    6cc8:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0

00006ccc <Scope_Main_Update>:
Scope_Main_Update():
..\X2Csrc\__Scope_Main.c:89
    6ccc:	8f 5f       	PUSH      {R6-R9,LR}
    6cce:	c0 58       	MOV       R6, R0
..\X2Csrc\__Scope_Main.c:92
    6cd0:	68 98       	LD.W      R5, [R0 + #1]
    6cd2:	58 38       	CMP       R5, #8
    6cd4:	77 f8       	JHI       $+119                 ;->0x6dc2
    6cd6:	2a 7a       	LSL       R5, #2
    6cd8:	02 44       	LD        R4, [PC + #2]         ;->0x6ce0  :=0x6ce4
    6cda:	6c e9       	LD.W      R5, [R4 + R5]
    6cdc:	15 5c       	JMP       R5
    6cde:	00 00       	NOP      NOP      
    6ce0:	e4 6c 00 00 	.long     0x00006ce4 ->000027876  [!!!@2@:LSL       SP, R4	@@: NOP      

00006ce4 <.text$Scope_Main_Update$sdata_local_1>:
    6ce4:	c2 6d 00 00 08 6d 00 00 44 6e 00 00 c2 6d 00 00     .m...m..Dn...m..
    6cf4:	6c 6e 00 00 84 6e 00 00 84 6e 00 00 d0 6d 00 00     ln...n...n...m..
    6d04:	16 6e 00 00                                         .n..

00006d08 <.text$Scope_Main_Update$scode_loacal_6>:
..\X2Csrc\__Scope_Main.c:143
    6d08:	60 58       	MOV       R3, R0
    6d0a:	36 2c       	ADD       R3, #70
    6d0c:	23 59       	MOV       R9, R3
    6d0e:	53 81       	LD.H      R5, [R3]
    6d10:	74 14       	MOV       R7, #68
    6d12:	e0 c3       	ADD       R4, R0, R7
    6d14:	44 81       	LD.H      R4, [R4]
    6d16:	5d c0       	ADD       R3, R5, #1
    6d18:	93 84       	ST.H      [R9], R3
    6d1a:	45 70       	CMP       R4, R5
    6d1c:	2d f8       	JHI       $+45                  ;->0x6d76
..\X2Csrc\__Scope_Main.c:145
    6d1e:	50 10       	MOV       R5, #0
    6d20:	95 84       	ST.H      [R9], R5
..\X2Csrc\__Scope_Main.c:147
    6d22:	a0 9e       	LD.W      R4, [R0 + #26]
    6d24:	24 13       	MOV       R2, #52
    6d26:	a8 c2       	ADD       R5, R0, R2
    6d28:	35 80       	LD.B      R3, [R5]
    6d2a:	1b c3       	ADD       R3, R3, R4
    6d2c:	51 10       	MOV       R5, #1
    6d2e:	ad 7a       	LSL       R5, #13
    6d30:	35 70       	CMP       R3, R5
    6d32:	03 f9       	JLS       $+3                   ;->0x6d38
..\X2Csrc\__Scope_Main.c:149
    6d34:	40 10       	MOV       R4, #0
    6d36:	84 a6       	ST.W      [R0 + #26], R4
    6d38:	00 10       	MOV       R0, #0
..\X2Csrc\__Scope_Main.c:155
    6d3a:	50 10       	MOV       R5, #0
    6d3c:	d0 c0       	ADD       R2, R0, #3
    6d3e:	0e c2       	ADD       R1, R6, R0
..\X2Csrc\__Scope_Main.c:159
    6d40:	12 7a       	LSL       R2, #2
    6d42:	be e8       	LD.W      R7, [R6 + R2]
    6d44:	7f e5       	LD.B      R7, [R7 + R5]
    6d46:	37 d1       	ZXT.B     R3, R7
..\X2Csrc\__Scope_Main.c:158
    6d48:	fe 9b       	LD.W      R7, [R6 + #15]
    6d4a:	3b eb       	ST.B      [R7 + R4], R3
    6d4c:	64 c0       	ADD       R4, R4, #1
    6d4e:	b4 a6       	ST.W      [R6 + #26], R4
..\X2Csrc\__Scope_Main.c:160
    6d50:	6d c0       	ADD       R5, R5, #1
    6d52:	55 d1       	ZXT.B     R5, R5
..\X2Csrc\__Scope_Main.c:162
    6d54:	7c 12       	MOV       R7, #44
    6d56:	d9 c3       	ADD       R3, R1, R7
    6d58:	33 80       	LD.B      R3, [R3]
    6d5a:	35 70       	CMP       R3, R5
    6d5c:	f3 f8       	JHI       $-13                  ;->0x6d42
..\X2Csrc\__Scope_Main.c:163
    6d5e:	40 c0       	ADD       R0, R0, #1
    6d60:	00 d1       	ZXT.B     R0, R0
..\X2Csrc\__Scope_Main.c:165
    6d62:	2e 8a       	LD.B      R5, [R6 + #8]
    6d64:	50 70       	CMP       R5, R0
    6d66:	ea f8       	JHI       $-22                  ;->0x6d3a
..\X2Csrc\__Scope_Main.c:167
    6d68:	2e 9f       	LD.W      R5, [R6 + #28]
    6d6a:	54 70       	CMP       R5, R4
    6d6c:	05 f8       	JHI       $+5                   ;->0x6d76
..\X2Csrc\__Scope_Main.c:169
    6d6e:	28 17       	MOV       R2, #120
    6d70:	ae c2       	ADD       R5, R6, R2
    6d72:	41 10       	MOV       R4, #1
    6d74:	54 83       	ST.B      [R5], R4
..\X2Csrc\__Scope_Main.c:174
    6d76:	06 58       	MOV       R0, R6
    6d78:	14 45       	LD        R5, [PC + #20]        ;->0x6dc8  :=0x6bcc
    6d7a:	05 5c       	LJMP      R5
    6d7c:	e0 58       	MOV       R7, R0
    6d7e:	01 59       	MOV       R8, R1
..\X2Csrc\__Scope_Main.c:175
    6d80:	06 58       	MOV       R0, R6
    6d82:	27 58       	MOV       R1, R7
    6d84:	48 58       	MOV       R2, R8
    6d86:	12 45       	LD        R5, [PC + #18]        ;->0x6dcc  :=0x68e4
    6d88:	05 5c       	LJMP      R5
    6d8a:	00 38       	CMP       R0, #0
    6d8c:	02 f1       	JNZ       $+2                   ;->0x6d90
    6d8e:	89 04       	SJMP      $+137                 ;->0x6ea0
    6d90:	38 17       	MOV       R3, #120
    6d92:	ee c2       	ADD       R5, R6, R3
    6d94:	55 80       	LD.B      R5, [R5]
    6d96:	50 38       	CMP       R5, #0
    6d98:	02 f1       	JNZ       $+2                   ;->0x6d9c
    6d9a:	83 04       	SJMP      $+131                 ;->0x6ea0
..\X2Csrc\__Scope_Main.c:177
    6d9c:	ee 9e       	LD.W      R5, [R6 + #27]
    6d9e:	50 38       	CMP       R5, #0
    6da0:	02 f5       	JPL       $+2                   ;->0x6da4
    6da2:	9e 04       	SJMP      $+158                 ;->0x6ede
..\X2Csrc\__Scope_Main.c:187
    6da4:	ae 9e       	LD.W      R5, [R6 + #26]
    6da6:	50 38       	CMP       R5, #0
    6da8:	02 f1       	JNZ       $+2                   ;->0x6dac
    6daa:	a0 04       	SJMP      $+160                 ;->0x6eea
..\X2Csrc\__Scope_Main.c:197
    6dac:	49 81       	LD.H      R4, [R9]
    6dae:	40 38       	CMP       R4, #0
    6db0:	02 f0       	JZ        $+2                   ;->0x6db4
    6db2:	a1 04       	SJMP      $+161                 ;->0x6ef4
..\X2Csrc\__Scope_Main.c:201
    6db4:	74 13       	MOV       R7, #52
    6db6:	e6 c3       	ADD       R4, R6, R7
    6db8:	44 80       	LD.B      R4, [R4]
    6dba:	2d c7       	SUB       R5, R5, R4
    6dbc:	75 a7       	ST.W      [R6 + #29], R5
..\X2Csrc\__Scope_Main.c:209
    6dbe:	57 10       	MOV       R5, #7
    6dc0:	75 a0       	ST.W      [R6 + #1], R5
..\X2Csrc\__Scope_Main.c:260
    6dc2:	0f 5e       	POP       {R6-R9}
    6dc4:	0d 5d       	POP       LR
    6dc6:	1d 5c       	JMP       LR
    6dc8:	cc 6b 00 00 	.long     0x00006bcc ->000027596  [!!!@2@:XRL       R12, R12	@@: NOP      
    6dcc:	e4 68 00 00 	.long     0x000068e4 ->000026852  [!!!@2@:NOT       SP, R4	@@: NOP      
..\X2Csrc\__Scope_Main.c:238
    6dd0:	76 14       	MOV       R7, #70
    6dd2:	e8 c3       	ADD       R5, R0, R7
    6dd4:	45 81       	LD.H      R4, [R5]
    6dd6:	24 14       	MOV       R2, #68
    6dd8:	98 c2       	ADD       R3, R0, R2
    6dda:	33 81       	LD.H      R3, [R3]
    6ddc:	54 c0       	ADD       R2, R4, #1
    6dde:	52 84       	ST.H      [R5], R2
    6de0:	34 70       	CMP       R3, R4
    6de2:	f0 f8       	JHI       $-16                  ;->0x6dc2
..\X2Csrc\__Scope_Main.c:240
    6de4:	40 10       	MOV       R4, #0
    6de6:	54 84       	ST.H      [R5], R4
..\X2Csrc\__Scope_Main.c:242
    6de8:	34 13       	MOV       R3, #52
    6dea:	e8 c2       	ADD       R5, R0, R3
    6dec:	45 80       	LD.B      R4, [R5]
    6dee:	a8 9e       	LD.W      R5, [R0 + #26]
    6df0:	64 c3       	ADD       R4, R4, R5
    6df2:	51 10       	MOV       R5, #1
    6df4:	ad 7a       	LSL       R5, #13
    6df6:	45 70       	CMP       R4, R5
    6df8:	03 f9       	JLS       $+3                   ;->0x6dfe
..\X2Csrc\__Scope_Main.c:244
    6dfa:	50 10       	MOV       R5, #0
    6dfc:	85 a6       	ST.W      [R0 + #26], R5
..\X2Csrc\__Scope_Main.c:247
    6dfe:	06 58       	MOV       R0, R6
    6e00:	1a 45       	LD        R5, [PC + #26]        ;->0x6e68  :=0x6c12
    6e02:	05 5c       	LJMP      R5
..\X2Csrc\__Scope_Main.c:250
    6e04:	7e 9f       	LD.W      R7, [R6 + #29]
    6e06:	96 9e       	LD.W      R2, [R6 + #26]
    6e08:	a7 c6       	SUB       R4, R7, R2
    6e0a:	ee 9e       	LD.W      R5, [R6 + #27]
..\X2Csrc\__Scope_Main.c:249
    6e0c:	45 70       	CMP       R4, R5
    6e0e:	63 f8       	JHI       $+99                  ;->0x6ed4
..\X2Csrc\__Scope_Main.c:254
    6e10:	50 10       	MOV       R5, #0
    6e12:	75 a0       	ST.W      [R6 + #1], R5
    6e14:	d7 07       	SJMP      $-41                  ;->0x6dc2
..\X2Csrc\__Scope_Main.c:222
    6e16:	76 14       	MOV       R7, #70
    6e18:	e8 c3       	ADD       R5, R0, R7
    6e1a:	45 81       	LD.H      R4, [R5]
    6e1c:	24 14       	MOV       R2, #68
    6e1e:	98 c2       	ADD       R3, R0, R2
    6e20:	33 81       	LD.H      R3, [R3]
    6e22:	54 c0       	ADD       R2, R4, #1
    6e24:	52 84       	ST.H      [R5], R2
    6e26:	34 70       	CMP       R3, R4
    6e28:	cd f8       	JHI       $-51                  ;->0x6dc2
..\X2Csrc\__Scope_Main.c:224
    6e2a:	40 10       	MOV       R4, #0
    6e2c:	54 84       	ST.H      [R5], R4
..\X2Csrc\__Scope_Main.c:226
    6e2e:	34 13       	MOV       R3, #52
    6e30:	e8 c2       	ADD       R5, R0, R3
    6e32:	55 80       	LD.B      R5, [R5]
    6e34:	60 9f       	LD.W      R4, [R0 + #29]
    6e36:	2d c3       	ADD       R5, R5, R4
    6e38:	45 a7       	ST.W      [R0 + #29], R5
..\X2Csrc\__Scope_Main.c:229
    6e3a:	50 38       	CMP       R5, #0
    6e3c:	c3 f4       	JMI       $-61                  ;->0x6dc2
..\X2Csrc\__Scope_Main.c:231
    6e3e:	52 10       	MOV       R5, #2
    6e40:	45 a0       	ST.W      [R0 + #1], R5
    6e42:	c0 07       	SJMP      $-64                  ;->0x6dc2
..\X2Csrc\__Scope_Main.c:108
    6e44:	76 14       	MOV       R7, #70
    6e46:	e8 c3       	ADD       R5, R0, R7
    6e48:	45 81       	LD.H      R4, [R5]
    6e4a:	24 14       	MOV       R2, #68
    6e4c:	98 c2       	ADD       R3, R0, R2
    6e4e:	33 81       	LD.H      R3, [R3]
    6e50:	54 c0       	ADD       R2, R4, #1
    6e52:	52 84       	ST.H      [R5], R2
    6e54:	34 70       	CMP       R3, R4
    6e56:	2f f9       	JLS       $+47                  ;->0x6eb4
..\X2Csrc\__Scope_Main.c:121
    6e58:	68 2c       	ADD       R6, #72
    6e5a:	76 81       	LD.H      R7, [R6]
    6e5c:	6f c0       	ADD       R5, R7, #1
    6e5e:	65 84       	ST.H      [R6], R5
..\X2Csrc\__Scope_Main.c:260
    6e60:	0f 5e       	POP       {R6-R9}
    6e62:	0d 5d       	POP       LR
    6e64:	1d 5c       	JMP       LR
    6e66:	00 00       	NOP      NOP      
    6e68:	12 6c 00 00 	.long     0x00006c12 ->000027666  [!!!@2@:LSL       R1, R2	@@: NOP      
..\X2Csrc\__Scope_Main.c:101
    6e6c:	28 14       	MOV       R2, #72
    6e6e:	a8 c2       	ADD       R5, R0, R2
    6e70:	35 81       	LD.H      R3, [R5]
    6e72:	63 c0       	ADD       R4, R3, #1
    6e74:	54 84       	ST.H      [R5], R4
..\X2Csrc\__Scope_Main.c:102
    6e76:	66 2c       	ADD       R6, #70
    6e78:	46 81       	LD.H      R4, [R6]
    6e7a:	6c c0       	ADD       R5, R4, #1
    6e7c:	65 84       	ST.H      [R6], R5
..\X2Csrc\__Scope_Main.c:260
    6e7e:	0f 5e       	POP       {R6-R9}
    6e80:	0d 5d       	POP       LR
    6e82:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:128
    6e84:	1d 45       	LD        R5, [PC + #29]        ;->0x6ef8  :=0x6bcc
    6e86:	05 5c       	LJMP      R5
    6e88:	00 59       	MOV       R8, R0
    6e8a:	21 59       	MOV       R9, R1
..\X2Csrc\__Scope_Main.c:129
    6e8c:	06 58       	MOV       R0, R6
    6e8e:	28 58       	MOV       R1, R8
    6e90:	49 58       	MOV       R2, R9
    6e92:	1b 45       	LD        R5, [PC + #27]        ;->0x6efc  :=0x68e4
    6e94:	05 5c       	LJMP      R5
    6e96:	00 38       	CMP       R0, #0
    6e98:	09 f0       	JZ        $+9                   ;->0x6eaa
..\X2Csrc\__Scope_Main.c:131
    6e9a:	54 10       	MOV       R5, #4
    6e9c:	75 a0       	ST.W      [R6 + #1], R5
    6e9e:	92 07       	SJMP      $-110                 ;->0x6dc2
..\X2Csrc\__Scope_Main.c:215
    6ea0:	87 58       	MOV       R4, R7
    6ea2:	a8 58       	MOV       R5, R8
    6ea4:	b4 a5       	ST.W      [R6 + #22], R4
    6ea6:	f5 a5       	ST.W      [R6 + #23], R5
    6ea8:	8d 07       	SJMP      $-115                 ;->0x6dc2
..\X2Csrc\__Scope_Main.c:135
    6eaa:	48 58       	MOV       R2, R8
    6eac:	69 58       	MOV       R3, R9
    6eae:	b2 a5       	ST.W      [R6 + #22], R2
    6eb0:	f3 a5       	ST.W      [R6 + #23], R3
    6eb2:	88 07       	SJMP      $-120                 ;->0x6dc2
..\X2Csrc\__Scope_Main.c:110
    6eb4:	40 10       	MOV       R4, #0
    6eb6:	54 84       	ST.H      [R5], R4
..\X2Csrc\__Scope_Main.c:112
    6eb8:	12 45       	LD        R5, [PC + #18]        ;->0x6f00  :=0x6c12
    6eba:	05 5c       	LJMP      R5
..\X2Csrc\__Scope_Main.c:116
    6ebc:	34 13       	MOV       R3, #52
    6ebe:	ee c2       	ADD       R5, R6, R3
    6ec0:	45 80       	LD.B      R4, [R5]
    6ec2:	ae 9e       	LD.W      R5, [R6 + #26]
    6ec4:	64 c3       	ADD       R4, R4, R5
    6ec6:	51 10       	MOV       R5, #1
    6ec8:	ad 7a       	LSL       R5, #13
    6eca:	45 70       	CMP       R4, R5
    6ecc:	c6 f9       	JLS       $-58                  ;->0x6e58
..\X2Csrc\__Scope_Main.c:118
    6ece:	50 10       	MOV       R5, #0
    6ed0:	75 a0       	ST.W      [R6 + #1], R5
    6ed2:	c3 07       	SJMP      $-61                  ;->0x6e58
..\X2Csrc\__Scope_Main.c:251
    6ed4:	9e 9b       	LD.W      R3, [R6 + #14]
    6ed6:	e4 c2       	ADD       R4, R4, R3
..\X2Csrc\__Scope_Main.c:250
    6ed8:	45 70       	CMP       R4, R5
    6eda:	9b f9       	JLS       $-101                 ;->0x6e10
    6edc:	73 07       	SJMP      $-141                 ;->0x6dc2
..\X2Csrc\__Scope_Main.c:180
    6ede:	75 a7       	ST.W      [R6 + #29], R5
..\X2Csrc\__Scope_Main.c:181
    6ee0:	50 10       	MOV       R5, #0
    6ee2:	b5 a6       	ST.W      [R6 + #26], R5
..\X2Csrc\__Scope_Main.c:182
    6ee4:	58 10       	MOV       R5, #8
    6ee6:	75 a0       	ST.W      [R6 + #1], R5
    6ee8:	6d 07       	SJMP      $-147                 ;->0x6dc2
..\X2Csrc\__Scope_Main.c:206
    6eea:	24 13       	MOV       R2, #52
    6eec:	ae c2       	ADD       R5, R6, R2
    6eee:	55 80       	LD.B      R5, [R5]
    6ef0:	9e 9b       	LD.W      R3, [R6 + #14]
    6ef2:	6b c7       	SUB       R5, R3, R5
    6ef4:	75 a7       	ST.W      [R6 + #29], R5
    6ef6:	64 07       	SJMP      $-156                 ;->0x6dbe
    6ef8:	cc 6b 00 00 	.long     0x00006bcc ->000027596  [!!!@2@:XRL       R12, R12	@@: NOP      
    6efc:	e4 68 00 00 	.long     0x000068e4 ->000026852  [!!!@2@:NOT       SP, R4	@@: NOP      
    6f00:	12 6c 00 00 	.long     0x00006c12 ->000027666  [!!!@2@:LSL       R1, R2	@@: NOP      

00006f04 <Scope_Main_Load>:
Scope_Main_Load():
..\X2Csrc\__Scope_Main.c:267
    6f04:	68 98       	LD.W      R5, [R0 + #1]
    6f06:	15 83       	ST.B      [R1], R5
..\X2Csrc\__Scope_Main.c:268
    6f08:	28 8a       	LD.B      R5, [R0 + #8]
    6f0a:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Scope_Main.c:269
    6f0c:	34 14       	MOV       R3, #68
    6f0e:	e8 c2       	ADD       R5, R0, R3
    6f10:	45 81       	LD.H      R4, [R5]
    6f12:	8c 90       	ST.B      [R1 + #2], R4
..\X2Csrc\__Scope_Main.c:270
    6f14:	55 81       	LD.H      R5, [R5]
    6f16:	a8 7c       	LSR       R5, #8
    6f18:	cd 90       	ST.B      [R1 + #3], R5
..\X2Csrc\__Scope_Main.c:272
    6f1a:	58 16       	MOV       R5, #104
    6f1c:	2d e4       	LD.B      R5, [R5 + R0]
    6f1e:	0d 91       	ST.B      [R1 + #4], R5
..\X2Csrc\__Scope_Main.c:273
    6f20:	a8 9e       	LD.W      R5, [R0 + #26]
    6f22:	a8 7c       	LSR       R5, #8
    6f24:	4d 91       	ST.B      [R1 + #5], R5
..\X2Csrc\__Scope_Main.c:274
    6f26:	a8 9e       	LD.W      R5, [R0 + #26]
    6f28:	28 7d       	LSR       R5, #16
    6f2a:	8d 91       	ST.B      [R1 + #6], R5
..\X2Csrc\__Scope_Main.c:275
    6f2c:	a8 9e       	LD.W      R5, [R0 + #26]
    6f2e:	a8 7d       	LSR       R5, #24
    6f30:	cd 91       	ST.B      [R1 + #7], R5
..\X2Csrc\__Scope_Main.c:277
    6f32:	3c 13       	MOV       R3, #60
    6f34:	1b e4       	LD.B      R3, [R3 + R0]
    6f36:	0b 92       	ST.B      [R1 + #8], R3
..\X2Csrc\__Scope_Main.c:278
    6f38:	e8 9b       	LD.W      R5, [R0 + #15]
    6f3a:	a8 7c       	LSR       R5, #8
    6f3c:	4d 92       	ST.B      [R1 + #9], R5
..\X2Csrc\__Scope_Main.c:279
    6f3e:	e8 af       	LD.H      R5, [R0 + #31]
    6f40:	8d 92       	ST.B      [R1 + #10], R5
..\X2Csrc\__Scope_Main.c:280
    6f42:	e8 9b       	LD.W      R5, [R0 + #15]
    6f44:	a8 7d       	LSR       R5, #24
    6f46:	cd 92       	ST.B      [R1 + #11], R5
..\X2Csrc\__Scope_Main.c:282
    6f48:	4c 16       	MOV       R4, #108
    6f4a:	24 e4       	LD.B      R4, [R4 + R0]
    6f4c:	0c 93       	ST.B      [R1 + #12], R4
..\X2Csrc\__Scope_Main.c:283
    6f4e:	e8 9e       	LD.W      R5, [R0 + #27]
    6f50:	a8 78       	ASR       R5, #8
    6f52:	4d 93       	ST.B      [R1 + #13], R5
..\X2Csrc\__Scope_Main.c:284
    6f54:	e8 9e       	LD.W      R5, [R0 + #27]
    6f56:	28 79       	ASR       R5, #16
    6f58:	8d 93       	ST.B      [R1 + #14], R5
..\X2Csrc\__Scope_Main.c:285
    6f5a:	e8 9e       	LD.W      R5, [R0 + #27]
    6f5c:	a8 79       	ASR       R5, #24
    6f5e:	cd 93       	ST.B      [R1 + #15], R5
..\X2Csrc\__Scope_Main.c:287
    6f60:	54 17       	MOV       R5, #116
    6f62:	2d e4       	LD.B      R5, [R5 + R0]
    6f64:	0d 94       	ST.B      [R1 + #16], R5
..\X2Csrc\__Scope_Main.c:288
    6f66:	68 9f       	LD.W      R5, [R0 + #29]
    6f68:	a8 78       	ASR       R5, #8
    6f6a:	4d 94       	ST.B      [R1 + #17], R5
..\X2Csrc\__Scope_Main.c:289
    6f6c:	68 9f       	LD.W      R5, [R0 + #29]
    6f6e:	28 79       	ASR       R5, #16
    6f70:	8d 94       	ST.B      [R1 + #18], R5
..\X2Csrc\__Scope_Main.c:290
    6f72:	68 9f       	LD.W      R5, [R0 + #29]
    6f74:	a8 79       	ASR       R5, #24
    6f76:	cd 94       	ST.B      [R1 + #19], R5
..\X2Csrc\__Scope_Main.c:292
    6f78:	38 13       	MOV       R3, #56
    6f7a:	1b e4       	LD.B      R3, [R3 + R0]
    6f7c:	0b 95       	ST.B      [R1 + #20], R3
..\X2Csrc\__Scope_Main.c:293
    6f7e:	a8 9b       	LD.W      R5, [R0 + #14]
    6f80:	a8 7c       	LSR       R5, #8
    6f82:	4d 95       	ST.B      [R1 + #21], R5
..\X2Csrc\__Scope_Main.c:294
    6f84:	68 af       	LD.H      R5, [R0 + #29]
    6f86:	8d 95       	ST.B      [R1 + #22], R5
..\X2Csrc\__Scope_Main.c:295
    6f88:	a8 9b       	LD.W      R5, [R0 + #14]
    6f8a:	a8 7d       	LSR       R5, #24
    6f8c:	cd 95       	ST.B      [R1 + #23], R5
..\X2Csrc\__Scope_Main.c:297
    6f8e:	40 14       	MOV       R4, #64
    6f90:	24 e4       	LD.B      R4, [R4 + R0]
    6f92:	0c 96       	ST.B      [R1 + #24], R4
..\X2Csrc\__Scope_Main.c:298
    6f94:	28 9c       	LD.W      R5, [R0 + #16]
    6f96:	a8 7c       	LSR       R5, #8
    6f98:	4d 96       	ST.B      [R1 + #25], R5
..\X2Csrc\__Scope_Main.c:299
    6f9a:	28 9c       	LD.W      R5, [R0 + #16]
    6f9c:	28 7d       	LSR       R5, #16
    6f9e:	8d 96       	ST.B      [R1 + #26], R5
..\X2Csrc\__Scope_Main.c:300
    6fa0:	28 9c       	LD.W      R5, [R0 + #16]
    6fa2:	a8 7d       	LSR       R5, #24
    6fa4:	cd 96       	ST.B      [R1 + #27], R5
..\X2Csrc\__Scope_Main.c:302
    6fa6:	52 18       	MOV       R5, #130
    6fa8:	0d 97       	ST.B      [R1 + #28], R5
..\X2Csrc\__Scope_Main.c:305
    6faa:	0d 11       	MOV       R0, #29
    6fac:	1d 5c       	JMP       LR
	...

00006fb0 <Scope_Main_Save>:
Scope_Main_Save():
..\X2Csrc\__Scope_Main.c:311
    6fb0:	ff 5f       	PUSH      {R6-R12,LR}
    6fb2:	e0 31       	SUB       SP, #16
    6fb4:	c0 58       	MOV       R6, R0
    6fb6:	61 59       	MOV       R11, R1
    6fb8:	a2 d1       	ZXT.B     R10, R2
..\X2Csrc\__Scope_Main.c:322
    6fba:	a3 38       	CMP       R10, #3
    6fbc:	02 f8       	JHI       $+2                   ;->0x6fc0
    6fbe:	e7 04       	SJMP      $+231                 ;->0x718c
..\X2Csrc\__Scope_Main.c:328
    6fc0:	41 88       	LD.B      R0, [R1 + #1]
    6fc2:	50 d1       	ZXT.B     R5, R0
    6fc4:	58 38       	CMP       R5, #8
    6fc6:	02 f9       	JLS       $+2                   ;->0x6fca
    6fc8:	e2 04       	SJMP      $+226                 ;->0x718c
..\X2Csrc\__Scope_Main.c:333
    6fca:	50 38       	CMP       R5, #0
    6fcc:	02 f1       	JNZ       $+2                   ;->0x6fd0
    6fce:	df 04       	SJMP      $+223                 ;->0x718c
..\X2Csrc\__Scope_Main.c:344
    6fd0:	70 10       	MOV       R7, #0
    6fd2:	77 a0       	ST.W      [R6 + #1], R7
..\X2Csrc\__Scope_Main.c:345
    6fd4:	37 92       	ST.B      [R6 + #8], R7
..\X2Csrc\__Scope_Main.c:365
    6fd6:	18 14       	MOV       R1, #72
    6fd8:	6e c2       	ADD       R5, R6, R1
    6fda:	57 84       	ST.H      [R5], R7
..\X2Csrc\__Scope_Main.c:366
    6fdc:	b7 a6       	ST.W      [R6 + #26], R7
..\X2Csrc\__Scope_Main.c:367
    6fde:	4b 58       	MOV       R2, R11
    6fe0:	d2 88       	LD.B      R2, [R2 + #3]
    6fe2:	52 d1       	ZXT.B     R5, R2
    6fe4:	a8 7a       	LSL       R5, #8
    6fe6:	6b 58       	MOV       R3, R11
    6fe8:	9b 88       	LD.B      R3, [R3 + #2]
    6fea:	43 d1       	ZXT.B     R4, R3
    6fec:	2d c3       	ADD       R5, R5, R4
    6fee:	55 d0       	ZXT.H     R5, R5
    6ff0:	04 14       	MOV       R0, #68
    6ff2:	26 c2       	ADD       R4, R6, R0
    6ff4:	45 84       	ST.H      [R4], R5
..\X2Csrc\__Scope_Main.c:368
    6ff6:	16 14       	MOV       R1, #70
    6ff8:	66 c2       	ADD       R4, R6, R1
    6ffa:	45 84       	ST.H      [R4], R5
..\X2Csrc\__Scope_Main.c:369
    6ffc:	40 10       	MOV       R4, #0
    6ffe:	50 10       	MOV       R5, #0
    7000:	b4 a5       	ST.W      [R6 + #22], R4
    7002:	f5 a5       	ST.W      [R6 + #23], R5
..\X2Csrc\__Scope_Main.c:371
    7004:	46 58       	MOV       R2, R6
    7006:	24 2b       	ADD       R2, #52
    7008:	22 59       	MOV       R9, R2
    700a:	27 83       	ST.B      [R2], R7
..\X2Csrc\__Scope_Main.c:373
    700c:	52 10       	MOV       R5, #2
    700e:	75 92       	ST.B      [R6 + #9], R5
..\X2Csrc\__Scope_Main.c:375
    7010:	38 17       	MOV       R3, #120
    7012:	ee c2       	ADD       R5, R6, R3
    7014:	57 83       	ST.B      [R5], R7
..\X2Csrc\__Scope_Main.c:376
    7016:	77 a7       	ST.W      [R6 + #29], R7
..\X2Csrc\__Scope_Main.c:378
    7018:	8b 58       	MOV       R4, R11
    701a:	64 88       	LD.B      R4, [R4 + #1]
    701c:	54 d1       	ZXT.B     R5, R4
    701e:	57 70       	CMP       R5, R7
    7020:	02 f1       	JNZ       $+2                   ;->0x7024
    7022:	f1 05       	SJMP      $+497                 ;->0x7404
    7024:	c4 10       	MOV       R12, #4
..\X2Csrc\__Scope_Main.c:381
    7026:	ac 58       	MOV       R5, R12
    7028:	65 c0       	ADD       R4, R5, #1
    702a:	44 d1       	ZXT.B     R4, R4
..\X2Csrc\__Scope_Main.c:383
    702c:	0b 58       	MOV       R0, R11
    702e:	40 e5       	LD.B      R0, [R0 + R5]
    7030:	50 d1       	ZXT.B     R5, R0
    7032:	51 38       	CMP       R5, #1
    7034:	02 f1       	JNZ       $+2                   ;->0x7038
    7036:	02 05       	SJMP      $+258                 ;->0x723a
    7038:	50 38       	CMP       R5, #0
    703a:	02 f0       	JZ        $+2                   ;->0x703e
    703c:	a4 04       	SJMP      $+164                 ;->0x7184
..\X2Csrc\__Scope_Main.c:425
    703e:	ef c0       	ADD       R5, R7, #3
    7040:	2a 7a       	LSL       R5, #2
    7042:	2b 58       	MOV       R1, R11
    7044:	09 c3       	ADD       R1, R1, R4
    7046:	01 59       	MOV       R8, R1
    7048:	59 88       	LD.B      R3, [R1 + #1]
    704a:	23 d1       	ZXT.B     R2, R3
    704c:	90 7a       	LSL       R2, #8
..\X2Csrc\__Scope_Main.c:426
    704e:	81 88       	LD.B      R0, [R1 + #2]
    7050:	30 d1       	ZXT.B     R3, R0
    7052:	18 7b       	LSL       R3, #16
..\X2Csrc\__Scope_Main.c:425
    7054:	d2 c2       	ADD       R2, R2, R3
    7056:	2b 58       	MOV       R1, R11
    7058:	21 e5       	LD.B      R4, [R1 + R4]
    705a:	34 d1       	ZXT.B     R3, R4
    705c:	e2 c2       	ADD       R4, R2, R3
..\X2Csrc\__Scope_Main.c:426
    705e:	48 58       	MOV       R2, R8
    7060:	d2 88       	LD.B      R2, [R2 + #3]
    7062:	32 d1       	ZXT.B     R3, R2
    7064:	98 7b       	LSL       R3, #24
    7066:	e4 c2       	ADD       R4, R4, R3
..\X2Csrc\__Scope_Main.c:425
    7068:	74 ef       	ST.W      [R6 + R5], R4
..\X2Csrc\__Scope_Main.c:432
    706a:	68 58       	MOV       R3, R8
    706c:	1b 89       	LD.B      R3, [R3 + #4]
    706e:	43 d1       	ZXT.B     R4, R3
    7070:	ee c3       	ADD       R5, R6, R7
    7072:	5c 2a       	ADD       R5, #44
    7074:	54 83       	ST.B      [R5], R4
..\X2Csrc\__Scope_Main.c:433
    7076:	59 80       	LD.B      R5, [R9]
    7078:	6c c3       	ADD       R5, R4, R5
    707a:	55 d1       	ZXT.B     R5, R5
    707c:	95 83       	ST.B      [R9], R5
..\X2Csrc\__Scope_Main.c:438
    707e:	5e 8a       	LD.B      R3, [R6 + #9]
    7080:	e4 c2       	ADD       R4, R4, R3
    7082:	74 92       	ST.B      [R6 + #9], R4
..\X2Csrc\__Scope_Main.c:443
    7084:	01 10       	MOV       R0, #1
    7086:	85 7a       	LSL       R0, #13
    7088:	60 cf       	DIVS      R4, R0, R5
    708a:	00 00       	NOP      NOP      
    708c:	6c cb       	MULS      R5, R4, R5
    708e:	00 00       	NOP      NOP      
    7090:	b5 a3       	ST.W      [R6 + #14], R5
..\X2Csrc\__Scope_Main.c:445
    7092:	c6 28       	ADD       R12, #6
    7094:	cc d1       	ZXT.B     R12, R12
..\X2Csrc\__Scope_Main.c:446
    7096:	7f c0       	ADD       R7, R7, #1
    7098:	77 d1       	ZXT.B     R7, R7
..\X2Csrc\__Scope_Main.c:378
    709a:	2b 58       	MOV       R1, R11
    709c:	49 88       	LD.B      R1, [R1 + #1]
    709e:	51 d1       	ZXT.B     R5, R1
    70a0:	57 70       	CMP       R5, R7
    70a2:	c2 f8       	JHI       $-62                  ;->0x7026
    70a4:	ac 58       	MOV       R5, R12
    70a6:	65 c0       	ADD       R4, R5, #1
    70a8:	44 d1       	ZXT.B     R4, R4
    70aa:	9d c0       	ADD       R3, R5, #2
    70ac:	33 d1       	ZXT.B     R3, R3
..\X2Csrc\__Scope_Main.c:460
    70ae:	4b 58       	MOV       R2, R11
    70b0:	6a e5       	LD.B      R5, [R2 + R5]
    70b2:	85 d1       	ZXT.B     R8, R5
    70b4:	54 16       	MOV       R5, #100
    70b6:	7e c3       	ADD       R7, R6, R5
    70b8:	78 83       	ST.B      [R7], R8
..\X2Csrc\__Scope_Main.c:464
    70ba:	22 e5       	LD.B      R4, [R2 + R4]
    70bc:	54 d1       	ZXT.B     R5, R4
    70be:	51 38       	CMP       R5, #1
    70c0:	02 f1       	JNZ       $+2                   ;->0x70c4
    70c2:	ce 05       	SJMP      $+462                 ;->0x745e
    70c4:	50 38       	CMP       R5, #0
    70c6:	02 f0       	JZ        $+2                   ;->0x70ca
    70c8:	16 05       	SJMP      $+278                 ;->0x72f4
..\X2Csrc\__Scope_Main.c:506
    70ca:	ea c2       	ADD       R5, R2, R3
    70cc:	55 88       	LD.B      R2, [R5 + #1]
    70ce:	90 7a       	LSL       R2, #8
..\X2Csrc\__Scope_Main.c:507
    70d0:	a5 88       	LD.B      R4, [R5 + #2]
    70d2:	20 7b       	LSL       R4, #16
..\X2Csrc\__Scope_Main.c:506
    70d4:	12 c3       	ADD       R2, R2, R4
    70d6:	0b 58       	MOV       R0, R11
    70d8:	d8 e4       	LD.B      R3, [R0 + R3]
    70da:	43 d1       	ZXT.B     R4, R3
    70dc:	22 c3       	ADD       R4, R2, R4
..\X2Csrc\__Scope_Main.c:507
    70de:	ed 88       	LD.B      R5, [R5 + #3]
    70e0:	a8 7b       	LSL       R5, #24
    70e2:	6c c3       	ADD       R5, R4, R5
..\X2Csrc\__Scope_Main.c:506
    70e4:	35 a6       	ST.W      [R6 + #24], R5
..\X2Csrc\__Scope_Main.c:513
    70e6:	2c 58       	MOV       R1, R12
    70e8:	a9 c1       	ADD       R5, R1, #6
    70ea:	d5 d1       	ZXT.B     LR, R5
..\X2Csrc\__Scope_Main.c:516
    70ec:	5f 10       	MOV       R5, #15
    70ee:	48 58       	MOV       R2, R8
    70f0:	52 d5       	ANL       R2, R2, R5
    70f2:	22 59       	MOV       R9, R2
..\X2Csrc\__Scope_Main.c:517
    70f4:	5f 17       	MOV       R5, #127
    70f6:	55 68       	NOT       R5, R5
    70f8:	68 58       	MOV       R3, R8
    70fa:	5b d5       	ANL       R3, R3, R5
    70fc:	e3 85       	ST.W      [SP], R3
..\X2Csrc\__Scope_Main.c:519
    70fe:	22 38       	CMP       R2, #2
    7100:	03 f1       	JNZ       $+3                   ;->0x7106
    7102:	00 03 1a 02 	JMP       $+538                 ;->0x7536
    7106:	22 38       	CMP       R2, #2
    7108:	02 f9       	JLS       $+2                   ;->0x710c
    710a:	2f 05       	SJMP      $+303                 ;->0x7368
    710c:	21 38       	CMP       R2, #1
    710e:	3f f1       	JNZ       $+63                  ;->0x718c
..\X2Csrc\__Scope_Main.c:522
    7110:	8b 58       	MOV       R4, R11
    7112:	0d 58       	MOV       R0, LR
    7114:	24 e4       	LD.B      R4, [R4 + R0]
    7116:	54 d1       	ZXT.B     R5, R4
    7118:	35 a5       	ST.W      [R6 + #20], R5
    711a:	50 10       	MOV       R5, #0
    711c:	75 a5       	ST.W      [R6 + #21], R5
..\X2Csrc\__Scope_Main.c:542
    711e:	5e 82       	LD.W      R5, [SP]
    7120:	50 38       	CMP       R5, #0
    7122:	02 f0       	JZ        $+2                   ;->0x7126
    7124:	1e 05       	SJMP      $+286                 ;->0x7360
..\X2Csrc\__Scope_Main.c:544
    7126:	45 48       	SET       R8, #5
    7128:	78 83       	ST.B      [R7], R8
..\X2Csrc\__Scope_Main.c:545
    712a:	ec 58       	MOV       R7, R12
    712c:	7a 28       	ADD       R7, #10
    712e:	77 d1       	ZXT.B     R7, R7
..\X2Csrc\__Scope_Main.c:553
    7130:	2b 58       	MOV       R1, R11
    7132:	c9 e5       	LD.B      R1, [R1 + R7]
    7134:	01 d1       	ZXT.B     R0, R1
    7136:	4b 58       	MOV       R2, R11
    7138:	ea c3       	ADD       R5, R2, R7
    713a:	65 88       	LD.B      R4, [R5 + #1]
    713c:	a0 7a       	LSL       R4, #8
    713e:	00 c3       	ADD       R0, R0, R4
    7140:	a5 88       	LD.B      R4, [R5 + #2]
    7142:	20 7b       	LSL       R4, #16
    7144:	00 c3       	ADD       R0, R0, R4
..\X2Csrc\__Scope_Main.c:554
    7146:	ed 88       	LD.B      R5, [R5 + #3]
    7148:	a8 7b       	LSL       R5, #24
..\X2Csrc\__Scope_Main.c:553
    714a:	40 c3       	ADD       R0, R0, R5
    714c:	f0 a6       	ST.W      [R6 + #27], R0
..\X2Csrc\__Scope_Main.c:555
    714e:	13 45       	LD        R5, [PC + #19]        ;->0x7198  :=0x7568
    7150:	05 5c       	LJMP      R5
    7152:	30 a7       	ST.W      [R6 + #28], R0
..\X2Csrc\__Scope_Main.c:556
    7154:	2f c1       	ADD       R5, R7, #4
..\X2Csrc\__Scope_Main.c:558
    7156:	55 d1       	ZXT.B     R5, R5
    7158:	6b 58       	MOV       R3, R11
    715a:	6b e5       	LD.B      R5, [R3 + R5]
    715c:	55 d1       	ZXT.B     R5, R5
    715e:	f5 a4       	ST.W      [R6 + #19], R5
..\X2Csrc\__Scope_Main.c:559
    7160:	7f c1       	ADD       R7, R7, #5
    7162:	77 d1       	ZXT.B     R7, R7
..\X2Csrc\__Scope_Main.c:562
    7164:	a7 70       	CMP       R10, R7
    7166:	02 f8       	JHI       $+2                   ;->0x716a
    7168:	f6 04       	SJMP      $+246                 ;->0x7354
..\X2Csrc\__Scope_Main.c:565
    716a:	fb e5       	LD.B      R7, [R3 + R7]
    716c:	57 d1       	ZXT.B     R5, R7
    716e:	51 38       	CMP       R5, #1
    7170:	02 f1       	JNZ       $+2                   ;->0x7174
    7172:	f1 04       	SJMP      $+241                 ;->0x7354
..\X2Csrc\__Scope_Main.c:584
    7174:	8b 58       	MOV       R4, R11
    7176:	64 88       	LD.B      R4, [R4 + #1]
    7178:	54 d1       	ZXT.B     R5, R4
    717a:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Scope_Main.c:585
    717c:	5b 80       	LD.B      R5, [R11]
    717e:	75 a0       	ST.W      [R6 + #1], R5
..\X2Csrc\__Scope_Main.c:587
    7180:	00 10       	MOV       R0, #0
    7182:	06 04       	SJMP      $+6                   ;->0x718e
..\X2Csrc\__Scope_Main.c:383
    7184:	52 38       	CMP       R5, #2
    7186:	35 f0       	JZ        $+53                  ;->0x71f0
    7188:	53 38       	CMP       R5, #3
    718a:	09 f0       	JZ        $+9                   ;->0x719c
..\X2Csrc\__Scope_Main.c:539
    718c:	01 10       	MOV       R0, #1
..\X2Csrc\__Scope_Main.c:589
    718e:	e0 29       	ADD       SP, #16
    7190:	7f 5e       	POP       {R6-R12}
    7192:	0d 5d       	POP       LR
    7194:	1d 5c       	JMP       LR
    7196:	00 00       	NOP      NOP      
    7198:	68 75 00 00 	.long     0x00007568 ->000030056  [!!!@2@:ST.H      [R6++], R8	@@: NOP      
..\X2Csrc\__Scope_Main.c:416
    719c:	4b 64       	ADD       R4, R11
    719e:	04 59       	MOV       R8, R4
    71a0:	cc 88       	LD.B      R1, [R4 + #3]
    71a2:	21 d1       	ZXT.B     R2, R1
    71a4:	90 7a       	LSL       R2, #8
    71a6:	9c 88       	LD.B      R3, [R4 + #2]
    71a8:	53 d1       	ZXT.B     R5, R3
    71aa:	52 c3       	ADD       R2, R2, R5
    71ac:	22 d0       	ZXT.H     R2, R2
..\X2Csrc\__Scope_Main.c:417
    71ae:	ca 44       	LD        R4, [PC + #202]       ;->0x74d4  :=0x10001c4c
    71b0:	54 82       	LD.W      R5, [R4]
    71b2:	35 82       	LD.W      R3, [R5]
..\X2Csrc\__Scope_Main.c:1006
    71b4:	30 38       	CMP       R3, #0
    71b6:	eb f0       	JZ        $-21                  ;->0x718c
..\X2Csrc\__Scope_Main.c:1013
    71b8:	53 81       	LD.H      R5, [R3]
    71ba:	25 70       	CMP       R2, R5
    71bc:	02 f1       	JNZ       $+2                   ;->0x71c0
    71be:	95 04       	SJMP      $+149                 ;->0x72e8
    71c0:	50 38       	CMP       R5, #0
    71c2:	e5 f0       	JZ        $-27                  ;->0x718c
    71c4:	40 10       	MOV       R4, #0
    71c6:	03 04       	SJMP      $+3                   ;->0x71cc
    71c8:	50 38       	CMP       R5, #0
    71ca:	e1 f0       	JZ        $-31                  ;->0x718c
..\X2Csrc\__Scope_Main.c:1015
    71cc:	64 c0       	ADD       R4, R4, #1
    71ce:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    71d0:	03 10       	MOV       R0, #3
    71d2:	2c da       	LSL       R5, R4, R0
    71d4:	4b c3       	ADD       R1, R3, R5
    71d6:	6b e7       	LD.H      R5, [R3 + R5]
    71d8:	25 70       	CMP       R2, R5
    71da:	f7 f1       	JNZ       $-9                   ;->0x71c8
..\X2Csrc\__Scope_Main.c:1018
    71dc:	50 38       	CMP       R5, #0
    71de:	d7 f0       	JZ        $-41                  ;->0x718c
..\X2Csrc\__Scope_Main.c:1024
    71e0:	69 98       	LD.W      R5, [R1 + #1]
..\X2Csrc\__Scope_Main.c:418
    71e2:	50 38       	CMP       R5, #0
    71e4:	d4 f0       	JZ        $-44                  ;->0x718c
..\X2Csrc\__Scope_Main.c:422
    71e6:	45 82       	LD.W      R4, [R5]
    71e8:	ef c0       	ADD       R5, R7, #3
    71ea:	2a 7a       	LSL       R5, #2
    71ec:	74 ef       	ST.W      [R6 + R5], R4
..\X2Csrc\__Scope_Main.c:423
    71ee:	3e 07       	SJMP      $-194                 ;->0x706a
..\X2Csrc\__Scope_Main.c:407
    71f0:	4b 64       	ADD       R4, R11
    71f2:	04 59       	MOV       R8, R4
    71f4:	cc 88       	LD.B      R1, [R4 + #3]
    71f6:	21 d1       	ZXT.B     R2, R1
    71f8:	90 7a       	LSL       R2, #8
    71fa:	9c 88       	LD.B      R3, [R4 + #2]
    71fc:	53 d1       	ZXT.B     R5, R3
    71fe:	52 c3       	ADD       R2, R2, R5
    7200:	22 d0       	ZXT.H     R2, R2
..\X2Csrc\__Scope_Main.c:408
    7202:	b5 44       	LD        R4, [PC + #181]       ;->0x74d4  :=0x10001c4c
    7204:	54 82       	LD.W      R5, [R4]
    7206:	35 82       	LD.W      R3, [R5]
..\X2Csrc\__Scope_Main.c:1006
    7208:	30 38       	CMP       R3, #0
    720a:	c1 f0       	JZ        $-63                  ;->0x718c
..\X2Csrc\__Scope_Main.c:1013
    720c:	53 81       	LD.H      R5, [R3]
    720e:	25 70       	CMP       R2, R5
    7210:	70 f0       	JZ        $+112                 ;->0x72f0
    7212:	50 38       	CMP       R5, #0
    7214:	bc f0       	JZ        $-68                  ;->0x718c
    7216:	40 10       	MOV       R4, #0
    7218:	03 04       	SJMP      $+3                   ;->0x721e
    721a:	50 38       	CMP       R5, #0
    721c:	b8 f0       	JZ        $-72                  ;->0x718c
..\X2Csrc\__Scope_Main.c:1015
    721e:	64 c0       	ADD       R4, R4, #1
    7220:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    7222:	03 10       	MOV       R0, #3
    7224:	2c da       	LSL       R5, R4, R0
    7226:	4b c3       	ADD       R1, R3, R5
    7228:	6b e7       	LD.H      R5, [R3 + R5]
    722a:	25 70       	CMP       R2, R5
    722c:	f7 f1       	JNZ       $-9                   ;->0x721a
..\X2Csrc\__Scope_Main.c:1018
    722e:	50 38       	CMP       R5, #0
    7230:	ae f0       	JZ        $-82                  ;->0x718c
..\X2Csrc\__Scope_Main.c:1024
    7232:	61 98       	LD.W      R4, [R1 + #1]
..\X2Csrc\__Scope_Main.c:409
    7234:	40 38       	CMP       R4, #0
    7236:	d9 f1       	JNZ       $-39                  ;->0x71e8
    7238:	aa 07       	SJMP      $-86                  ;->0x718c
..\X2Csrc\__Scope_Main.c:386
    723a:	2b 58       	MOV       R1, R11
    723c:	09 e5       	LD.B      R1, [R1 + R4]
    723e:	11 d1       	ZXT.B     R1, R1
    7240:	e1 85       	ST.W      [SP], R1
    7242:	4b 64       	ADD       R4, R11
    7244:	04 59       	MOV       R8, R4
    7246:	54 88       	LD.B      R2, [R4 + #1]
    7248:	22 d1       	ZXT.B     R2, R2
    724a:	01 22       	ST.W      [SP + #1], R2
..\X2Csrc\__Scope_Main.c:387
    724c:	dc 88       	LD.B      R3, [R4 + #3]
    724e:	23 d1       	ZXT.B     R2, R3
    7250:	90 7a       	LSL       R2, #8
    7252:	a4 88       	LD.B      R4, [R4 + #2]
    7254:	54 d1       	ZXT.B     R5, R4
    7256:	52 c3       	ADD       R2, R2, R5
    7258:	22 d0       	ZXT.H     R2, R2
..\X2Csrc\__Scope_Main.c:389
    725a:	9f 45       	LD        R5, [PC + #159]       ;->0x74d4  :=0x10001c4c
    725c:	15 82       	LD.W      R1, [R5]
    725e:	31 82       	LD.W      R3, [R1]
..\X2Csrc\__Scope_Main.c:1006
    7260:	30 38       	CMP       R3, #0
    7262:	95 f0       	JZ        $-107                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1013
    7264:	53 81       	LD.H      R5, [R3]
    7266:	25 70       	CMP       R2, R5
    7268:	42 f0       	JZ        $+66                  ;->0x72ec
    726a:	50 38       	CMP       R5, #0
    726c:	90 f0       	JZ        $-112                 ;->0x718c
    726e:	40 10       	MOV       R4, #0
    7270:	03 04       	SJMP      $+3                   ;->0x7276
    7272:	50 38       	CMP       R5, #0
    7274:	8c f0       	JZ        $-116                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1015
    7276:	64 c0       	ADD       R4, R4, #1
    7278:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    727a:	03 10       	MOV       R0, #3
    727c:	2c da       	LSL       R5, R4, R0
    727e:	43 c3       	ADD       R0, R3, R5
    7280:	6b e7       	LD.H      R5, [R3 + R5]
    7282:	25 70       	CMP       R2, R5
    7284:	f7 f1       	JNZ       $-9                   ;->0x7272
..\X2Csrc\__Scope_Main.c:1018
    7286:	50 38       	CMP       R5, #0
    7288:	82 f0       	JZ        $-126                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1024
    728a:	40 98       	LD.W      R0, [R0 + #1]
    728c:	a0 59       	MOV       LR, R0
..\X2Csrc\__Scope_Main.c:390
    728e:	00 38       	CMP       R0, #0
    7290:	02 f1       	JNZ       $+2                   ;->0x7294
    7292:	7d 07       	SJMP      $-131                 ;->0x718c
..\X2Csrc\__Scope_Main.c:394
    7294:	20 81       	LD.H      R2, [R0]
..\X2Csrc\__Scope_Main.c:395
    7296:	59 98       	LD.W      R3, [R1 + #1]
..\X2Csrc\__Scope_Main.c:981
    7298:	53 81       	LD.H      R5, [R3]
    729a:	25 70       	CMP       R2, R5
    729c:	24 f0       	JZ        $+36                  ;->0x72e4
    729e:	50 38       	CMP       R5, #0
    72a0:	02 f1       	JNZ       $+2                   ;->0x72a4
    72a2:	75 07       	SJMP      $-139                 ;->0x718c
    72a4:	40 10       	MOV       R4, #0
    72a6:	18 11       	MOV       R1, #24
    72a8:	04 04       	SJMP      $+4                   ;->0x72b0
    72aa:	50 38       	CMP       R5, #0
    72ac:	02 f1       	JNZ       $+2                   ;->0x72b0
    72ae:	6f 07       	SJMP      $-145                 ;->0x718c
..\X2Csrc\__Scope_Main.c:983
    72b0:	64 c0       	ADD       R4, R4, #1
    72b2:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:981
    72b4:	6c ca       	MULS      R5, R4, R1
    72b6:	00 00       	NOP      NOP      
    72b8:	43 c3       	ADD       R0, R3, R5
    72ba:	6b e7       	LD.H      R5, [R3 + R5]
    72bc:	25 70       	CMP       R2, R5
    72be:	f6 f1       	JNZ       $-10                  ;->0x72aa
..\X2Csrc\__Scope_Main.c:986
    72c0:	50 38       	CMP       R5, #0
    72c2:	02 f1       	JNZ       $+2                   ;->0x72c6
    72c4:	64 07       	SJMP      $-156                 ;->0x718c
..\X2Csrc\__Scope_Main.c:386
    72c6:	01 09       	LD.W      R1, [SP + #1]
    72c8:	88 7a       	LSL       R1, #8
    72ca:	5e 82       	LD.W      R5, [SP]
    72cc:	4d c2       	ADD       R1, R5, R1
..\X2Csrc\__Scope_Main.c:400
    72ce:	68 99       	LD.W      R5, [R0 + #5]
    72d0:	0d 58       	MOV       R0, LR
    72d2:	11 d0       	ZXT.H     R1, R1
    72d4:	05 5c       	LJMP      R5
    72d6:	ef c0       	ADD       R5, R7, #3
    72d8:	2a 7a       	LSL       R5, #2
    72da:	70 ef       	ST.W      [R6 + R5], R0
..\X2Csrc\__Scope_Main.c:401
    72dc:	00 38       	CMP       R0, #0
    72de:	02 f0       	JZ        $+2                   ;->0x72e2
    72e0:	c5 06       	SJMP      $-315                 ;->0x706a
    72e2:	55 07       	SJMP      $-171                 ;->0x718c
..\X2Csrc\__Scope_Main.c:981
    72e4:	03 58       	MOV       R0, R3
    72e6:	ed 07       	SJMP      $-19                  ;->0x72c0
..\X2Csrc\__Scope_Main.c:1013
    72e8:	23 58       	MOV       R1, R3
    72ea:	79 07       	SJMP      $-135                 ;->0x71dc
    72ec:	03 58       	MOV       R0, R3
    72ee:	cc 07       	SJMP      $-52                  ;->0x7286
    72f0:	23 58       	MOV       R1, R3
    72f2:	9e 07       	SJMP      $-98                  ;->0x722e
..\X2Csrc\__Scope_Main.c:464
    72f4:	52 38       	CMP       R5, #2
    72f6:	02 f1       	JNZ       $+2                   ;->0x72fa
    72f8:	8b 04       	SJMP      $+139                 ;->0x740e
    72fa:	53 38       	CMP       R5, #3
    72fc:	02 f0       	JZ        $+2                   ;->0x7300
    72fe:	47 07       	SJMP      $-185                 ;->0x718c
..\X2Csrc\__Scope_Main.c:497
    7300:	3b 64       	ADD       R3, R11
    7302:	cb 88       	LD.B      R1, [R3 + #3]
    7304:	88 7a       	LSL       R1, #8
    7306:	ab 88       	LD.B      R5, [R3 + #2]
    7308:	49 c3       	ADD       R1, R1, R5
    730a:	11 d0       	ZXT.H     R1, R1
..\X2Csrc\__Scope_Main.c:498
    730c:	72 45       	LD        R5, [PC + #114]       ;->0x74d4  :=0x10001c4c
    730e:	55 82       	LD.W      R5, [R5]
    7310:	35 82       	LD.W      R3, [R5]
..\X2Csrc\__Scope_Main.c:1006
    7312:	30 38       	CMP       R3, #0
    7314:	02 f1       	JNZ       $+2                   ;->0x7318
    7316:	3b 07       	SJMP      $-197                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1013
    7318:	53 81       	LD.H      R5, [R3]
    731a:	15 70       	CMP       R1, R5
    731c:	02 f1       	JNZ       $+2                   ;->0x7320
    731e:	1c 05       	SJMP      $+284                 ;->0x7556
    7320:	50 38       	CMP       R5, #0
    7322:	02 f1       	JNZ       $+2                   ;->0x7326
    7324:	34 07       	SJMP      $-204                 ;->0x718c
    7326:	40 10       	MOV       R4, #0
    7328:	04 04       	SJMP      $+4                   ;->0x7330
    732a:	50 38       	CMP       R5, #0
    732c:	02 f1       	JNZ       $+2                   ;->0x7330
    732e:	2f 07       	SJMP      $-209                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1015
    7330:	64 c0       	ADD       R4, R4, #1
    7332:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    7334:	03 10       	MOV       R0, #3
    7336:	2c da       	LSL       R5, R4, R0
    7338:	53 c3       	ADD       R2, R3, R5
    733a:	6b e7       	LD.H      R5, [R3 + R5]
    733c:	15 70       	CMP       R1, R5
    733e:	f6 f1       	JNZ       $-10                  ;->0x732a
..\X2Csrc\__Scope_Main.c:1018
    7340:	50 38       	CMP       R5, #0
    7342:	02 f1       	JNZ       $+2                   ;->0x7346
    7344:	24 07       	SJMP      $-220                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1024
    7346:	6a 98       	LD.W      R5, [R2 + #1]
..\X2Csrc\__Scope_Main.c:499
    7348:	50 38       	CMP       R5, #0
    734a:	02 f1       	JNZ       $+2                   ;->0x734e
    734c:	20 07       	SJMP      $-224                 ;->0x718c
..\X2Csrc\__Scope_Main.c:503
    734e:	15 82       	LD.W      R1, [R5]
    7350:	31 a6       	ST.W      [R6 + #24], R1
..\X2Csrc\__Scope_Main.c:504
    7352:	ca 06       	SJMP      $-310                 ;->0x70e6
..\X2Csrc\__Scope_Main.c:575
    7354:	06 58       	MOV       R0, R6
    7356:	61 45       	LD        R5, [PC + #97]        ;->0x74d8  :=0x6bcc
    7358:	05 5c       	LJMP      R5
    735a:	b0 a5       	ST.W      [R6 + #22], R0
    735c:	f1 a5       	ST.W      [R6 + #23], R1
    735e:	0b 07       	SJMP      $-245                 ;->0x7174
..\X2Csrc\__Scope_Main.c:549
    7360:	e9 58       	MOV       R7, R9
    7362:	7d 64       	ADD       R7, LR
    7364:	77 d1       	ZXT.B     R7, R7
    7366:	e5 06       	SJMP      $-283                 ;->0x7130
..\X2Csrc\__Scope_Main.c:519
    7368:	24 38       	CMP       R2, #4
    736a:	02 f1       	JNZ       $+2                   ;->0x736e
    736c:	d1 04       	SJMP      $+209                 ;->0x750e
    736e:	28 38       	CMP       R2, #8
    7370:	02 f0       	JZ        $+2                   ;->0x7374
    7372:	0d 07       	SJMP      $-243                 ;->0x718c
..\X2Csrc\__Scope_Main.c:532
    7374:	2b 58       	MOV       R1, R11
    7376:	1d 64       	ADD       R1, LR
    7378:	01 21       	ST.W      [SP + #1], R1
    737a:	51 88       	LD.B      R2, [R1 + #1]
    737c:	52 d1       	ZXT.B     R5, R2
    737e:	30 10       	MOV       R3, #0
    7380:	48 10       	MOV       R4, #8
    7382:	15 db       	LSL       R2, R5, R4
..\X2Csrc\__Scope_Main.c:533
    7384:	a9 88       	LD.B      R5, [R1 + #2]
    7386:	15 d1       	ZXT.B     R1, R5
    7388:	50 10       	MOV       R5, #0
    738a:	00 11       	MOV       R0, #16
    738c:	21 da       	LSL       R4, R1, R0
..\X2Csrc\__Scope_Main.c:532
    738e:	12 c3       	ADD       R2, R2, R4
    7390:	5b c5       	ADDC      R3, R3, R5
    7392:	2b 58       	MOV       R1, R11
    7394:	8d 58       	MOV       R4, LR
    7396:	21 e5       	LD.B      R4, [R1 + R4]
    7398:	44 d1       	ZXT.B     R4, R4
    739a:	02 24       	ST.W      [SP + #2], R4
    739c:	00 10       	MOV       R0, #0
    739e:	03 20       	ST.W      [SP + #3], R0
    73a0:	02 0c       	LD.W      R4, [SP + #2]
    73a2:	03 0d       	LD.W      R5, [SP + #3]
    73a4:	02 c3       	ADD       R0, R2, R4
    73a6:	4b c5       	ADDC      R1, R3, R5
..\X2Csrc\__Scope_Main.c:533
    73a8:	01 0a       	LD.W      R2, [SP + #1]
    73aa:	d2 88       	LD.B      R2, [R2 + #3]
    73ac:	52 d1       	ZXT.B     R5, R2
    73ae:	40 10       	MOV       R4, #0
    73b0:	64 58       	MOV       R3, R4
    73b2:	48 11       	MOV       R4, #24
    73b4:	15 db       	LSL       R2, R5, R4
    73b6:	90 c2       	ADD       R2, R0, R2
    73b8:	d9 c4       	ADDC      R3, R1, R3
..\X2Csrc\__Scope_Main.c:534
    73ba:	01 0d       	LD.W      R5, [SP + #1]
    73bc:	2d 89       	LD.B      R5, [R5 + #4]
    73be:	15 d1       	ZXT.B     R1, R5
    73c0:	40 10       	MOV       R4, #0
    73c2:	04 58       	MOV       R0, R4
..\X2Csrc\__Scope_Main.c:533
    73c4:	12 c2       	ADD       R2, R2, R0
    73c6:	5b c4       	ADDC      R3, R3, R1
..\X2Csrc\__Scope_Main.c:534
    73c8:	01 0d       	LD.W      R5, [SP + #1]
    73ca:	6d 89       	LD.B      R5, [R5 + #5]
    73cc:	45 d1       	ZXT.B     R4, R5
    73ce:	58 10       	MOV       R5, #8
    73d0:	4c db       	LSL       R1, R4, R5
    73d2:	40 10       	MOV       R4, #0
    73d4:	04 58       	MOV       R0, R4
    73d6:	02 c2       	ADD       R0, R2, R0
    73d8:	4b c4       	ADDC      R1, R3, R1
..\X2Csrc\__Scope_Main.c:535
    73da:	01 0d       	LD.W      R5, [SP + #1]
    73dc:	ad 89       	LD.B      R5, [R5 + #6]
    73de:	45 d1       	ZXT.B     R4, R5
    73e0:	50 11       	MOV       R5, #16
    73e2:	5c db       	LSL       R3, R4, R5
    73e4:	40 10       	MOV       R4, #0
    73e6:	44 58       	MOV       R2, R4
..\X2Csrc\__Scope_Main.c:534
    73e8:	80 c2       	ADD       R0, R0, R2
    73ea:	c9 c4       	ADDC      R1, R1, R3
..\X2Csrc\__Scope_Main.c:535
    73ec:	01 0d       	LD.W      R5, [SP + #1]
    73ee:	ed 89       	LD.B      R5, [R5 + #7]
    73f0:	45 d1       	ZXT.B     R4, R5
    73f2:	58 11       	MOV       R5, #24
    73f4:	5c db       	LSL       R3, R4, R5
    73f6:	40 10       	MOV       R4, #0
    73f8:	44 58       	MOV       R2, R4
    73fa:	90 c2       	ADD       R2, R0, R2
    73fc:	d9 c4       	ADDC      R3, R1, R3
..\X2Csrc\__Scope_Main.c:532
    73fe:	32 a5       	ST.W      [R6 + #20], R2
    7400:	73 a5       	ST.W      [R6 + #21], R3
..\X2Csrc\__Scope_Main.c:536
    7402:	8e 06       	SJMP      $-370                 ;->0x711e
..\X2Csrc\__Scope_Main.c:378
    7404:	36 10       	MOV       R3, #6
    7406:	45 10       	MOV       R4, #5
    7408:	54 10       	MOV       R5, #4
..\X2Csrc\__Scope_Main.c:314
    740a:	85 59       	MOV       R12, R5
    740c:	51 06       	SJMP      $-431                 ;->0x70ae
..\X2Csrc\__Scope_Main.c:488
    740e:	3b 64       	ADD       R3, R11
    7410:	cb 88       	LD.B      R1, [R3 + #3]
    7412:	88 7a       	LSL       R1, #8
    7414:	ab 88       	LD.B      R5, [R3 + #2]
    7416:	49 c3       	ADD       R1, R1, R5
    7418:	11 d0       	ZXT.H     R1, R1
..\X2Csrc\__Scope_Main.c:489
    741a:	2f 45       	LD        R5, [PC + #47]        ;->0x74d4  :=0x10001c4c
    741c:	55 82       	LD.W      R5, [R5]
    741e:	35 82       	LD.W      R3, [R5]
..\X2Csrc\__Scope_Main.c:1006
    7420:	30 38       	CMP       R3, #0
    7422:	02 f1       	JNZ       $+2                   ;->0x7426
    7424:	b4 06       	SJMP      $-332                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1013
    7426:	53 81       	LD.H      R5, [R3]
    7428:	15 70       	CMP       R1, R5
    742a:	02 f1       	JNZ       $+2                   ;->0x742e
    742c:	93 04       	SJMP      $+147                 ;->0x7552
    742e:	50 38       	CMP       R5, #0
    7430:	02 f1       	JNZ       $+2                   ;->0x7434
    7432:	ad 06       	SJMP      $-339                 ;->0x718c
    7434:	40 10       	MOV       R4, #0
    7436:	04 04       	SJMP      $+4                   ;->0x743e
    7438:	50 38       	CMP       R5, #0
    743a:	02 f1       	JNZ       $+2                   ;->0x743e
    743c:	a8 06       	SJMP      $-344                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1015
    743e:	64 c0       	ADD       R4, R4, #1
    7440:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    7442:	23 10       	MOV       R2, #3
    7444:	ac da       	LSL       R5, R4, R2
    7446:	53 c3       	ADD       R2, R3, R5
    7448:	6b e7       	LD.H      R5, [R3 + R5]
    744a:	15 70       	CMP       R1, R5
    744c:	f6 f1       	JNZ       $-10                  ;->0x7438
..\X2Csrc\__Scope_Main.c:1018
    744e:	50 38       	CMP       R5, #0
    7450:	02 f1       	JNZ       $+2                   ;->0x7454
    7452:	9d 06       	SJMP      $-355                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1024
    7454:	6a 98       	LD.W      R5, [R2 + #1]
..\X2Csrc\__Scope_Main.c:490
    7456:	50 38       	CMP       R5, #0
    7458:	02 f0       	JZ        $+2                   ;->0x745c
    745a:	45 06       	SJMP      $-443                 ;->0x70e4
    745c:	98 06       	SJMP      $-360                 ;->0x718c
..\X2Csrc\__Scope_Main.c:467
    745e:	c2 e4       	LD.B      R0, [R2 + R3]
    7460:	80 d1       	ZXT.B     R8, R0
    7462:	3b 64       	ADD       R3, R11
    7464:	4b 88       	LD.B      R1, [R3 + #1]
    7466:	91 d1       	ZXT.B     R9, R1
..\X2Csrc\__Scope_Main.c:468
    7468:	cb 88       	LD.B      R1, [R3 + #3]
    746a:	88 7a       	LSL       R1, #8
    746c:	ab 88       	LD.B      R5, [R3 + #2]
    746e:	49 c3       	ADD       R1, R1, R5
    7470:	11 d0       	ZXT.H     R1, R1
..\X2Csrc\__Scope_Main.c:470
    7472:	19 45       	LD        R5, [PC + #25]        ;->0x74d4  :=0x10001c4c
    7474:	25 82       	LD.W      R2, [R5]
    7476:	32 82       	LD.W      R3, [R2]
..\X2Csrc\__Scope_Main.c:1006
    7478:	30 38       	CMP       R3, #0
    747a:	02 f1       	JNZ       $+2                   ;->0x747e
    747c:	88 06       	SJMP      $-376                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1013
    747e:	53 81       	LD.H      R5, [R3]
    7480:	15 70       	CMP       R1, R5
    7482:	6e f0       	JZ        $+110                 ;->0x755e
    7484:	50 38       	CMP       R5, #0
    7486:	02 f1       	JNZ       $+2                   ;->0x748a
    7488:	82 06       	SJMP      $-382                 ;->0x718c
    748a:	40 10       	MOV       R4, #0
    748c:	04 04       	SJMP      $+4                   ;->0x7494
    748e:	50 38       	CMP       R5, #0
    7490:	02 f1       	JNZ       $+2                   ;->0x7494
    7492:	7d 06       	SJMP      $-387                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1015
    7494:	64 c0       	ADD       R4, R4, #1
    7496:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    7498:	03 10       	MOV       R0, #3
    749a:	2c da       	LSL       R5, R4, R0
    749c:	43 c3       	ADD       R0, R3, R5
    749e:	6b e7       	LD.H      R5, [R3 + R5]
    74a0:	15 70       	CMP       R1, R5
    74a2:	f6 f1       	JNZ       $-10                  ;->0x748e
..\X2Csrc\__Scope_Main.c:1018
    74a4:	50 38       	CMP       R5, #0
    74a6:	02 f1       	JNZ       $+2                   ;->0x74aa
    74a8:	72 06       	SJMP      $-398                 ;->0x718c
..\X2Csrc\__Scope_Main.c:1024
    74aa:	40 98       	LD.W      R0, [R0 + #1]
    74ac:	a0 59       	MOV       LR, R0
..\X2Csrc\__Scope_Main.c:471
    74ae:	00 38       	CMP       R0, #0
    74b0:	02 f1       	JNZ       $+2                   ;->0x74b4
    74b2:	6d 06       	SJMP      $-403                 ;->0x718c
..\X2Csrc\__Scope_Main.c:475
    74b4:	10 81       	LD.H      R1, [R0]
..\X2Csrc\__Scope_Main.c:476
    74b6:	5a 98       	LD.W      R3, [R2 + #1]
..\X2Csrc\__Scope_Main.c:981
    74b8:	53 81       	LD.H      R5, [R3]
    74ba:	15 70       	CMP       R1, R5
    74bc:	4f f0       	JZ        $+79                  ;->0x755a
    74be:	50 38       	CMP       R5, #0
    74c0:	02 f1       	JNZ       $+2                   ;->0x74c4
    74c2:	65 06       	SJMP      $-411                 ;->0x718c
    74c4:	40 10       	MOV       R4, #0
    74c6:	08 11       	MOV       R0, #24
    74c8:	0a 04       	SJMP      $+10                  ;->0x74dc
    74ca:	50 38       	CMP       R5, #0
    74cc:	02 f1       	JNZ       $+2                   ;->0x74d0
    74ce:	5f 06       	SJMP      $-417                 ;->0x718c
    74d0:	06 04       	SJMP      $+6                   ;->0x74dc
    74d2:	00 00       	NOP      NOP      
    74d4:	4c 1c 00 10 	.long     0x10001c4c ->268442700  [!!!@2@:MOV       R4, #204	@@: MOV       R0, #0
    74d8:	cc 6b 00 00 	.long     0x00006bcc ->000027596  [!!!@2@:XRL       R12, R12	@@: NOP      
..\X2Csrc\__Scope_Main.c:983
    74dc:	64 c0       	ADD       R4, R4, #1
    74de:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:981
    74e0:	2c ca       	MULS      R5, R4, R0
    74e2:	00 00       	NOP      NOP      
    74e4:	53 c3       	ADD       R2, R3, R5
    74e6:	6b e7       	LD.H      R5, [R3 + R5]
    74e8:	15 70       	CMP       R1, R5
    74ea:	f0 f1       	JNZ       $-16                  ;->0x74ca
..\X2Csrc\__Scope_Main.c:986
    74ec:	50 38       	CMP       R5, #0
    74ee:	02 f1       	JNZ       $+2                   ;->0x74f2
    74f0:	4e 06       	SJMP      $-434                 ;->0x718c
..\X2Csrc\__Scope_Main.c:467
    74f2:	29 58       	MOV       R1, R9
    74f4:	88 7a       	LSL       R1, #8
    74f6:	18 64       	ADD       R1, R8
..\X2Csrc\__Scope_Main.c:481
    74f8:	6a 99       	LD.W      R5, [R2 + #5]
    74fa:	0d 58       	MOV       R0, LR
    74fc:	11 d0       	ZXT.H     R1, R1
    74fe:	05 5c       	LJMP      R5
    7500:	30 a6       	ST.W      [R6 + #24], R0
..\X2Csrc\__Scope_Main.c:482
    7502:	00 38       	CMP       R0, #0
    7504:	02 f1       	JNZ       $+2                   ;->0x7508
    7506:	43 06       	SJMP      $-445                 ;->0x718c
    7508:	87 80       	LD.B      R8, [R7]
    750a:	ff 03 ee fd 	JMP       $-530                 ;->0x70e6
..\X2Csrc\__Scope_Main.c:528
    750e:	ab 58       	MOV       R5, R11
    7510:	5d 64       	ADD       R5, LR
    7512:	5d 88       	LD.B      R3, [R5 + #1]
    7514:	98 7a       	LSL       R3, #8
..\X2Csrc\__Scope_Main.c:529
    7516:	a5 88       	LD.B      R4, [R5 + #2]
    7518:	20 7b       	LSL       R4, #16
..\X2Csrc\__Scope_Main.c:528
    751a:	1b c3       	ADD       R3, R3, R4
    751c:	0b 58       	MOV       R0, R11
    751e:	2d 58       	MOV       R1, LR
    7520:	40 e4       	LD.B      R0, [R0 + R1]
    7522:	40 d1       	ZXT.B     R4, R0
    7524:	23 c3       	ADD       R4, R3, R4
..\X2Csrc\__Scope_Main.c:529
    7526:	ed 88       	LD.B      R5, [R5 + #3]
    7528:	a8 7b       	LSL       R5, #24
    752a:	6c c3       	ADD       R5, R4, R5
..\X2Csrc\__Scope_Main.c:528
    752c:	35 a5       	ST.W      [R6 + #20], R5
    752e:	50 10       	MOV       R5, #0
    7530:	75 a5       	ST.W      [R6 + #21], R5
..\X2Csrc\__Scope_Main.c:530
    7532:	ff 03 f6 fd 	JMP       $-522                 ;->0x711e
..\X2Csrc\__Scope_Main.c:525
    7536:	ab 58       	MOV       R5, R11
    7538:	0d 58       	MOV       R0, LR
    753a:	2d e4       	LD.B      R5, [R5 + R0]
    753c:	45 d1       	ZXT.B     R4, R5
    753e:	ab 58       	MOV       R5, R11
    7540:	5d 64       	ADD       R5, LR
    7542:	6d 88       	LD.B      R5, [R5 + #1]
    7544:	a8 7a       	LSL       R5, #8
    7546:	6c c3       	ADD       R5, R4, R5
    7548:	35 a5       	ST.W      [R6 + #20], R5
    754a:	af 79       	ASR       R5, #31
    754c:	75 a5       	ST.W      [R6 + #21], R5
..\X2Csrc\__Scope_Main.c:526
    754e:	ff 03 e8 fd 	JMP       $-536                 ;->0x711e
..\X2Csrc\__Scope_Main.c:1013
    7552:	43 58       	MOV       R2, R3
    7554:	7d 07       	SJMP      $-131                 ;->0x744e
    7556:	43 58       	MOV       R2, R3
    7558:	f4 06       	SJMP      $-268                 ;->0x7340
..\X2Csrc\__Scope_Main.c:981
    755a:	43 58       	MOV       R2, R3
    755c:	c8 07       	SJMP      $-56                  ;->0x74ec
..\X2Csrc\__Scope_Main.c:1013
    755e:	03 58       	MOV       R0, R3
    7560:	a2 07       	SJMP      $-94                  ;->0x74a4

00007562 <Scope_Main_GetAddress>:
Scope_Main_GetAddress():
..\X2Csrc\__Scope_Main.c:599
    7562:	00 10       	MOV       R0, #0
    7564:	1d 5c       	JMP       LR
	...

00007568 <getAbsValI32>:
getAbsValI32():
    7568:	51 10       	MOV       R5, #1
    756a:	af 7b       	LSL       R5, #31
    756c:	05 70       	CMP       R0, R5
    756e:	04 f0       	JZ        $+4                   ;->0x7576
    7570:	00 38       	CMP       R0, #0
    7572:	07 f4       	JMI       $+7                   ;->0x7580
    7574:	1d 5c       	JMP       LR
    7576:	02 40       	LD        R0, [PC + #2]         ;->0x757c  :=0x7fffffff
    7578:	1d 5c       	JMP       LR
    757a:	00 00       	NOP      NOP      
    757c:	ff ff ff 7f 	.long     0x7fffffff ->2147483647 
    7580:	50 10       	MOV       R5, #0
    7582:	05 c6       	SUB       R0, R5, R0
    7584:	1d 5c       	JMP       LR
	...

00007588 <printf>:
    7588:	24 5d       	PUSH      R4
    758a:	23 5d       	PUSH      R3
    758c:	22 5d       	PUSH      R2
    758e:	21 5d       	PUSH      R1
    7590:	20 5d       	PUSH      R0
    7592:	2d 5d       	PUSH      LR
    7594:	05 40       	LD        R0, [PC + #5]         ;->0x75a8  :=0x40000980
    7596:	01 09       	LD.W      R1, [SP + #1]
    7598:	4e 58       	MOV       R2, SP
    759a:	28 28       	ADD       R2, #8
    759c:	04 45       	LD        R5, [PC + #4]         ;->0x75ac  :=0x75b0
    759e:	05 5c       	LJMP      R5
    75a0:	0d 5d       	POP       LR
    75a2:	e4 29       	ADD       SP, #20
    75a4:	1d 5c       	JMP       LR
    75a6:	00 00       	NOP      NOP      
    75a8:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x75a8  :=0x40000980
    75ac:	b0 75 00 00 	.long     0x000075b0 ->000030128  [!!!@2@:ST.H      [R11++], R0	@@: NOP      

000075b0 <vfprintf>:
    75b0:	ff 5f       	PUSH      {R6-R12,LR}
    75b2:	ec 33       	SUB       SP, #60
    75b4:	0b 20       	ST.W      [SP + #11], R0
    75b6:	42 59       	MOV       R10, R2
    75b8:	e1 58       	MOV       R7, R1
    75ba:	00 10       	MOV       R0, #0
    75bc:	0a 20       	ST.W      [SP + #10], R0
    75be:	14 05       	SJMP      $+276                 ;->0x77e6
    75c0:	05 3a       	CMP       R0, #37
    75c2:	02 f0       	JZ        $+2                   ;->0x75c6
    75c4:	08 05       	SJMP      $+264                 ;->0x77d4
    75c6:	47 88       	LD.B      R0, [R7 + #1]
    75c8:	05 3a       	CMP       R0, #37
    75ca:	09 f1       	JNZ       $+9                   ;->0x75dc
    75cc:	0b 09       	LD.W      R1, [SP + #11]
    75ce:	a1 43       	LD        R3, [PC + #161]       ;->0x7850  :=0x7868
    75d0:	03 5c       	LJMP      R3
    75d2:	0a 0c       	LD.W      R4, [SP + #10]
    75d4:	64 c0       	ADD       R4, R4, #1
    75d6:	0a 24       	ST.W      [SP + #10], R4
    75d8:	bf c0       	ADD       R7, R7, #2
    75da:	06 05       	SJMP      $+262                 ;->0x77e6
    75dc:	00 3b       	CMP       R0, #48
    75de:	05 f0       	JZ        $+5                   ;->0x75e8
    75e0:	7f c0       	ADD       R7, R7, #1
    75e2:	00 12       	MOV       R0, #32
    75e4:	0d 20       	ST.W      [SP + #13], R0
    75e6:	03 04       	SJMP      $+3                   ;->0x75ec
    75e8:	bf c0       	ADD       R7, R7, #2
    75ea:	0d 20       	ST.W      [SP + #13], R0
    75ec:	57 80       	LD.B      R5, [R7]
    75ee:	00 10       	MOV       R0, #0
    75f0:	0c 20       	ST.W      [SP + #12], R0
    75f2:	5d 3a       	CMP       R5, #45
    75f4:	04 f1       	JNZ       $+4                   ;->0x75fc
    75f6:	7f c0       	ADD       R7, R7, #1
    75f8:	31 10       	MOV       R3, #1
    75fa:	0c 23       	ST.W      [SP + #12], R3
    75fc:	57 80       	LD.B      R5, [R7]
    75fe:	cb 12       	MOV       R12, #43
    7600:	60 10       	MOV       R6, #0
    7602:	50 3a       	CMP       R5, #32
    7604:	04 f1       	JNZ       $+4                   ;->0x760c
    7606:	7f c0       	ADD       R7, R7, #1
    7608:	85 59       	MOV       R12, R5
    760a:	61 10       	MOV       R6, #1
    760c:	57 80       	LD.B      R5, [R7]
    760e:	5b 3a       	CMP       R5, #43
    7610:	03 f1       	JNZ       $+3                   ;->0x7616
    7612:	7f c0       	ADD       R7, R7, #1
    7614:	61 10       	MOV       R6, #1
    7616:	57 80       	LD.B      R5, [R7]
    7618:	51 33       	SUB       R5, #49
    761a:	55 d1       	ZXT.B     R5, R5
    761c:	80 10       	MOV       R8, #0
    761e:	58 38       	CMP       R5, #8
    7620:	12 f8       	JHI       $+18                  ;->0x7644
    7622:	a7 58       	MOV       R5, R7
    7624:	2a 10       	MOV       R2, #10
    7626:	08 04       	SJMP      $+8                   ;->0x7636
    7628:	08 58       	MOV       R0, R8
    762a:	98 ca       	MULS      R3, R0, R2
    762c:	00 00       	NOP      NOP      
    762e:	30 33       	SUB       R3, #48
    7630:	03 59       	MOV       R8, R3
    7632:	84 64       	ADD       R8, R4
    7634:	88 d1       	ZXT.B     R8, R8
    7636:	e5 58       	MOV       R7, R5
    7638:	45 76       	LD.B      R4, [R5++]
    763a:	10 13       	MOV       R1, #48
    763c:	5c c6       	SUB       R3, R4, R1
    763e:	33 d1       	ZXT.B     R3, R3
    7640:	39 38       	CMP       R3, #9
    7642:	f3 f9       	JLS       $-13                  ;->0x7628
    7644:	57 80       	LD.B      R5, [R7]
    7646:	9f 1f       	MOV       R9, #255
    7648:	5e 3a       	CMP       R5, #46
    764a:	13 f1       	JNZ       $+19                  ;->0x7670
    764c:	6f c0       	ADD       R5, R7, #1
    764e:	90 10       	MOV       R9, #0
    7650:	2a 10       	MOV       R2, #10
    7652:	08 04       	SJMP      $+8                   ;->0x7662
    7654:	09 58       	MOV       R0, R9
    7656:	98 ca       	MULS      R3, R0, R2
    7658:	00 00       	NOP      NOP      
    765a:	30 33       	SUB       R3, #48
    765c:	23 59       	MOV       R9, R3
    765e:	94 64       	ADD       R9, R4
    7660:	99 d1       	ZXT.B     R9, R9
    7662:	e5 58       	MOV       R7, R5
    7664:	45 76       	LD.B      R4, [R5++]
    7666:	10 13       	MOV       R1, #48
    7668:	5c c6       	SUB       R3, R4, R1
    766a:	33 d1       	ZXT.B     R3, R3
    766c:	39 38       	CMP       R3, #9
    766e:	f3 f9       	JLS       $-13                  ;->0x7654
    7670:	57 80       	LD.B      R5, [R7]
    7672:	5c 3e       	CMP       R5, #108
    7674:	05 f1       	JNZ       $+5                   ;->0x767e
    7676:	7f c0       	ADD       R7, R7, #1
    7678:	50 10       	MOV       R5, #0
    767a:	11 10       	MOV       R1, #1
    767c:	09 04       	SJMP      $+9                   ;->0x768e
    767e:	58 3e       	CMP       R5, #104
    7680:	05 f1       	JNZ       $+5                   ;->0x768a
    7682:	7f c0       	ADD       R7, R7, #1
    7684:	51 10       	MOV       R5, #1
    7686:	10 10       	MOV       R1, #0
    7688:	03 04       	SJMP      $+3                   ;->0x768e
    768a:	50 10       	MOV       R5, #0
    768c:	25 58       	MOV       R1, R5
    768e:	37 80       	LD.B      R3, [R7]
    7690:	40 10       	MOV       R4, #0
    7692:	35 3f       	CMP       R3, #117
    7694:	03 f1       	JNZ       $+3                   ;->0x769a
    7696:	7f c0       	ADD       R7, R7, #1
    7698:	41 10       	MOV       R4, #1
    769a:	07 80       	LD.B      R0, [R7]
    769c:	03 3f       	CMP       R0, #115
    769e:	02 f1       	JNZ       $+2                   ;->0x76a2
    76a0:	cd 04       	SJMP      $+205                 ;->0x783a
    76a2:	08 3f       	CMP       R0, #120
    76a4:	02 f1       	JNZ       $+2                   ;->0x76a8
    76a6:	b4 04       	SJMP      $+180                 ;->0x780e
    76a8:	08 3d       	CMP       R0, #88
    76aa:	02 f1       	JNZ       $+2                   ;->0x76ae
    76ac:	b3 04       	SJMP      $+179                 ;->0x7812
    76ae:	03 3e       	CMP       R0, #99
    76b0:	02 f1       	JNZ       $+2                   ;->0x76b4
    76b2:	b3 04       	SJMP      $+179                 ;->0x7818
    76b4:	0f 3e       	CMP       R0, #111
    76b6:	02 f1       	JNZ       $+2                   ;->0x76ba
    76b8:	b3 04       	SJMP      $+179                 ;->0x781e
    76ba:	02 3e       	CMP       R0, #98
    76bc:	02 f1       	JNZ       $+2                   ;->0x76c0
    76be:	b3 04       	SJMP      $+179                 ;->0x7824
    76c0:	06 3e       	CMP       R0, #102
    76c2:	02 f1       	JNZ       $+2                   ;->0x76c6
    76c4:	96 04       	SJMP      $+150                 ;->0x77f0
    76c6:	04 3e       	CMP       R0, #100
    76c8:	02 f1       	JNZ       $+2                   ;->0x76cc
    76ca:	b0 04       	SJMP      $+176                 ;->0x782a
    76cc:	09 3e       	CMP       R0, #105
    76ce:	02 f1       	JNZ       $+2                   ;->0x76d2
    76d0:	ad 04       	SJMP      $+173                 ;->0x782a
    76d2:	40 38       	CMP       R4, #0
    76d4:	03 f0       	JZ        $+3                   ;->0x76da
    76d6:	7f cc       	SUB       R7, R7, #1
    76d8:	a9 04       	SJMP      $+169                 ;->0x782a
    76da:	0b 09       	LD.W      R1, [SP + #11]
    76dc:	5d 43       	LD        R3, [PC + #93]        ;->0x7850  :=0x7868
    76de:	03 5c       	LJMP      R3
    76e0:	0a 0c       	LD.W      R4, [SP + #10]
    76e2:	64 c0       	ADD       R4, R4, #1
    76e4:	0a 24       	ST.W      [SP + #10], R4
    76e6:	7f c0       	ADD       R7, R7, #1
    76e8:	7f 04       	SJMP      $+127                 ;->0x77e6
    76ea:	0a 82       	LD.W      R0, [R10]
    76ec:	05 04       	SJMP      $+5                   ;->0x76f6
    76ee:	0a 82       	LD.W      R0, [R10]
    76f0:	50 38       	CMP       R5, #0
    76f2:	02 f0       	JZ        $+2                   ;->0x76f6
    76f4:	00 d1       	ZXT.B     R0, R0
    76f6:	43 59       	MOV       R10, R3
    76f8:	20 38       	CMP       R2, #0
    76fa:	12 f0       	JZ        $+18                  ;->0x771e
    76fc:	40 38       	CMP       R4, #0
    76fe:	05 f0       	JZ        $+5                   ;->0x7708
    7700:	ae 58       	MOV       R5, SP
    7702:	4d c0       	ADD       R1, R5, #1
    7704:	54 45       	LD        R5, [PC + #84]        ;->0x7854  :=0x7b78
    7706:	04 04       	SJMP      $+4                   ;->0x770e
    7708:	6e 58       	MOV       R3, SP
    770a:	4b c0       	ADD       R1, R3, #1
    770c:	53 45       	LD        R5, [PC + #83]        ;->0x7858  :=0x7bc0
    770e:	05 5c       	LJMP      R5
    7710:	60 38       	CMP       R6, #0
    7712:	0b f0       	JZ        $+11                  ;->0x7728
    7714:	a1 e1       	LD.B      R5, [SP + #1]
    7716:	5d 3a       	CMP       R5, #45
    7718:	0b f0       	JZ        $+11                  ;->0x772e
    771a:	ec 83       	ST.B      [SP], R12
    771c:	77 04       	SJMP      $+119                 ;->0x780a
    771e:	01 e3       	ST.B      [SP + #1], R0
    7720:	42 e3       	ST.B      [SP + #2], R2
    7722:	8e 58       	MOV       R4, SP
    7724:	74 c0       	ADD       R6, R4, #1
    7726:	06 04       	SJMP      $+6                   ;->0x7732
    7728:	ae 58       	MOV       R5, SP
    772a:	75 c0       	ADD       R6, R5, #1
    772c:	03 04       	SJMP      $+3                   ;->0x7732
    772e:	0e 58       	MOV       R0, SP
    7730:	70 c0       	ADD       R6, R0, #1
    7732:	9f 1f       	MOV       R9, #255
    7734:	a6 58       	MOV       R5, R6
    7736:	03 04       	SJMP      $+3                   ;->0x773c
    7738:	81 30       	SUB       R8, #1
    773a:	88 d1       	ZXT.B     R8, R8
    773c:	80 38       	CMP       R8, #0
    773e:	04 f0       	JZ        $+4                   ;->0x7746
    7740:	45 76       	LD.B      R4, [R5++]
    7742:	40 38       	CMP       R4, #0
    7744:	fa f1       	JNZ       $-6                   ;->0x7738
    7746:	0c 09       	LD.W      R1, [SP + #12]
    7748:	10 38       	CMP       R1, #0
    774a:	03 f1       	JNZ       $+3                   ;->0x7750
    774c:	88 59       	MOV       R12, R8
    774e:	0b 04       	SJMP      $+11                  ;->0x7764
    7750:	0a 0b       	LD.W      R3, [SP + #10]
    7752:	83 59       	MOV       R12, R3
    7754:	f6 c6       	SUB       R6, R6, R3
    7756:	23 04       	SJMP      $+35                  ;->0x779c
    7758:	0d 08       	LD.W      R0, [SP + #13]
    775a:	0b 09       	LD.W      R1, [SP + #11]
    775c:	3d 44       	LD        R4, [PC + #61]        ;->0x7850  :=0x7868
    775e:	04 5c       	LJMP      R4
    7760:	c1 30       	SUB       R12, #1
    7762:	cc d1       	ZXT.B     R12, R12
    7764:	c0 38       	CMP       R12, #0
    7766:	f9 f1       	JNZ       $-7                   ;->0x7758
    7768:	0a 0d       	LD.W      R5, [SP + #10]
    776a:	58 64       	ADD       R5, R8
    776c:	0a 25       	ST.W      [SP + #10], R5
    776e:	0c 59       	MOV       R8, R12
    7770:	f0 07       	SJMP      $-16                  ;->0x7750
    7772:	25 59       	MOV       R9, R5
    7774:	b0 38       	CMP       R11, #0
    7776:	0b f0       	JZ        $+11                  ;->0x778c
    7778:	39 41       	LD        R1, [PC + #57]        ;->0x785c  :=0x10001e1c
    777a:	31 82       	LD.W      R3, [R1]
    777c:	0e 23       	ST.W      [SP + #14], R3
    777e:	2b e4       	LD.B      R5, [R3 + R0]
    7780:	45 d1       	ZXT.B     R4, R5
    7782:	50 11       	MOV       R5, #16
    7784:	6c d5       	ANL       R5, R4, R5
    7786:	03 f0       	JZ        $+3                   ;->0x778c
    7788:	00 32       	SUB       R0, #32
    778a:	00 d1       	ZXT.B     R0, R0
    778c:	0b 09       	LD.W      R1, [SP + #11]
    778e:	31 43       	LD        R3, [PC + #49]        ;->0x7850  :=0x7868
    7790:	03 5c       	LJMP      R3
    7792:	c1 28       	ADD       R12, #1
    7794:	80 38       	CMP       R8, #0
    7796:	03 f0       	JZ        $+3                   ;->0x779c
    7798:	81 30       	SUB       R8, #1
    779a:	88 d1       	ZXT.B     R8, R8
    779c:	8c 58       	MOV       R4, R12
    779e:	26 e5       	LD.B      R4, [R6 + R4]
    77a0:	04 d1       	ZXT.B     R0, R4
    77a2:	00 38       	CMP       R0, #0
    77a4:	06 f1       	JNZ       $+6                   ;->0x77b0
    77a6:	c8 58       	MOV       R6, R8
    77a8:	0c 0d       	LD.W      R5, [SP + #12]
    77aa:	50 38       	CMP       R5, #0
    77ac:	1a f0       	JZ        $+26                  ;->0x77e0
    77ae:	0f 04       	SJMP      $+15                  ;->0x77cc
    77b0:	99 39       	CMP       R9, #25
    77b2:	e1 f0       	JZ        $-31                  ;->0x7774
    77b4:	29 58       	MOV       R1, R9
    77b6:	69 cc       	SUB       R5, R1, #1
    77b8:	55 d1       	ZXT.B     R5, R5
    77ba:	90 38       	CMP       R9, #0
    77bc:	db f1       	JNZ       $-37                  ;->0x7772
    77be:	f4 07       	SJMP      $-12                  ;->0x77a6
    77c0:	00 12       	MOV       R0, #32
    77c2:	0b 09       	LD.W      R1, [SP + #11]
    77c4:	23 43       	LD        R3, [PC + #35]        ;->0x7850  :=0x7868
    77c6:	03 5c       	LJMP      R3
    77c8:	81 30       	SUB       R8, #1
    77ca:	88 d1       	ZXT.B     R8, R8
    77cc:	80 38       	CMP       R8, #0
    77ce:	f9 f1       	JNZ       $-7                   ;->0x77c0
    77d0:	c6 64       	ADD       R12, R6
    77d2:	07 04       	SJMP      $+7                   ;->0x77e0
    77d4:	0b 09       	LD.W      R1, [SP + #11]
    77d6:	1f 44       	LD        R4, [PC + #31]        ;->0x7850  :=0x7868
    77d8:	04 5c       	LJMP      R4
    77da:	0a 0d       	LD.W      R5, [SP + #10]
    77dc:	6d c0       	ADD       R5, R5, #1
    77de:	85 59       	MOV       R12, R5
    77e0:	7f c0       	ADD       R7, R7, #1
    77e2:	2c 58       	MOV       R1, R12
    77e4:	0a 21       	ST.W      [SP + #10], R1
    77e6:	07 80       	LD.B      R0, [R7]
    77e8:	00 38       	CMP       R0, #0
    77ea:	02 f0       	JZ        $+2                   ;->0x77ee
    77ec:	ea 06       	SJMP      $-278                 ;->0x75c0
    77ee:	2c 04       	SJMP      $+44                  ;->0x7846
    77f0:	ca 58       	MOV       R6, R10
    77f2:	68 28       	ADD       R6, #8
    77f4:	6a 58       	MOV       R3, R10
    77f6:	03 82       	LD.W      R0, [R3]
    77f8:	4b 98       	LD.W      R1, [R3 + #1]
    77fa:	1a 45       	LD        R5, [PC + #26]        ;->0x7860  :=0x7f00
    77fc:	05 5c       	LJMP      R5
    77fe:	2e 58       	MOV       R1, SP
    7800:	49 58       	MOV       R2, R9
    7802:	19 45       	LD        R5, [PC + #25]        ;->0x7864  :=0x790c
    7804:	05 5c       	LJMP      R5
    7806:	46 59       	MOV       R10, R6
    7808:	b0 10       	MOV       R11, #0
    780a:	ce 58       	MOV       R6, SP
    780c:	93 07       	SJMP      $-109                 ;->0x7732
    780e:	b0 10       	MOV       R11, #0
    7810:	02 04       	SJMP      $+2                   ;->0x7814
    7812:	b1 10       	MOV       R11, #1
    7814:	20 11       	MOV       R2, #16
    7816:	0c 04       	SJMP      $+12                  ;->0x782e
    7818:	b0 10       	MOV       R11, #0
    781a:	4b 58       	MOV       R2, R11
    781c:	09 04       	SJMP      $+9                   ;->0x782e
    781e:	b0 10       	MOV       R11, #0
    7820:	28 10       	MOV       R2, #8
    7822:	06 04       	SJMP      $+6                   ;->0x782e
    7824:	b0 10       	MOV       R11, #0
    7826:	22 10       	MOV       R2, #2
    7828:	03 04       	SJMP      $+3                   ;->0x782e
    782a:	b0 10       	MOV       R11, #0
    782c:	2a 10       	MOV       R2, #10
    782e:	0a 58       	MOV       R0, R10
    7830:	18 c1       	ADD       R3, R0, #4
    7832:	10 38       	CMP       R1, #0
    7834:	02 f0       	JZ        $+2                   ;->0x7838
    7836:	5a 07       	SJMP      $-166                 ;->0x76ea
    7838:	5b 07       	SJMP      $-165                 ;->0x76ee
    783a:	6a 82       	LD.W      R6, [R10]
    783c:	a4 28       	ADD       R10, #4
    783e:	30 12       	MOV       R3, #32
    7840:	0d 23       	ST.W      [SP + #13], R3
    7842:	b0 10       	MOV       R11, #0
    7844:	78 07       	SJMP      $-136                 ;->0x7734
    7846:	0a 08       	LD.W      R0, [SP + #10]
    7848:	ec 2b       	ADD       SP, #60
    784a:	7f 5e       	POP       {R6-R12}
    784c:	0d 5d       	POP       LR
    784e:	1d 5c       	JMP       LR
    7850:	68 78 00 00 	.long     0x00007868 ->000030824  [!!!@2@:ASR       LR, #0	@@: NOP      
    7854:	78 7b 00 00 	.long     0x00007b78 ->000031608  [!!!@2@:LSL       PC, #16	@@: NOP      
    7858:	c0 7b 00 00 	.long     0x00007bc0 ->000031680  [!!!@2@:LSL       R8, #24	@@: NOP      
    785c:	1c 1e 00 10 	.long     0x10001e1c ->268443164  [!!!@2@:MOV       R1, #236	@@: MOV       R0, #0
    7860:	00 7f 00 00 	.long     0x00007f00 ->000032512  [!!!@2@:ROR       R0, #16	@@: NOP      
    7864:	0c 79 00 00 	.long     0x0000790c ->000030988  [!!!@2@:ASR       R1, #20	@@: NOP      

00007868 <fputchar>:
    7868:	c8 a0       	ST.W      [R1 + #3], R0
    786a:	41 10       	MOV       R4, #1
    786c:	a5 7a       	LSL       R4, #13
    786e:	a9 98       	LD.W      R5, [R1 + #2]
    7870:	2d d5       	ANL       R5, R5, R4
    7872:	fe f1       	JNZ       $-2                   ;->0x786e
    7874:	41 10       	MOV       R4, #1
    7876:	a5 7a       	LSL       R4, #13
    7878:	a9 98       	LD.W      R5, [R1 + #2]
    787a:	2d d5       	ANL       R5, R5, R4
    787c:	fe f0       	JZ        $-2                   ;->0x7878
    787e:	04 10       	MOV       R0, #4
    7880:	01 30       	SUB       R0, #1
    7882:	ff f1       	JNZ       $-1                   ;->0x7880
    7884:	1d 5c       	JMP       LR
	...

00007888 <_ftoa_put_char>:
    7888:	03 44       	LD        R4, [PC + #3]         ;->0x7894  :=0x100040ac
    788a:	54 82       	LD.W      R5, [R4]
    788c:	50 77       	ST.B      [R5++], R0
    788e:	45 85       	ST.W      [R4], R5
    7890:	1d 5c       	JMP       LR
    7892:	00 00       	NOP      NOP      
    7894:	ac 40 00 10 	.long     0x100040ac ->268452012  [!!!@2@:LD        R0, [PC + #172]       ;->0x7b44  :=0x100040a4	@@: MOV       R0, #0

00007898 <_ftoa_put_digit>:
    7898:	81 5f       	PUSH      {R6,LR}
    789a:	09 46       	LD        R6, [PC + #9]         ;->0x78bc  :=0x100040a8
    789c:	06 82       	LD.W      R0, [R6]
    789e:	84 7d       	LSR       R0, #28
    78a0:	00 2b       	ADD       R0, #48
    78a2:	08 45       	LD        R5, [PC + #8]         ;->0x78c0  :=0x7888
    78a4:	05 5c       	LJMP      R5
    78a6:	08 45       	LD        R5, [PC + #8]         ;->0x78c4  :=0xfffffff
    78a8:	36 82       	LD.W      R3, [R6]
    78aa:	6b d5       	ANL       R5, R3, R5
    78ac:	32 10       	MOV       R3, #2
    78ae:	e5 da       	LSL       R4, R5, R3
    78b0:	6c c3       	ADD       R5, R4, R5
    78b2:	6d c3       	ADD       R5, R5, R5
    78b4:	65 85       	ST.W      [R6], R5
    78b6:	06 5d       	POP       R6
    78b8:	0d 5d       	POP       LR
    78ba:	1d 5c       	JMP       LR
    78bc:	a8 40 00 10 	.long     0x100040a8 ->268452008  [!!!@2@:LD        R0, [PC + #168]       ;->0x7b5c  :=0x78c8	@@: MOV       R0, #0
    78c0:	88 78 00 00 	.long     0x00007888 ->000030856  [!!!@2@:ASR       R1, #8	@@: NOP      
    78c4:	ff ff ff 0f 	.long     0x0fffffff ->268435455 

000078c8 <_ftoa_round>:
    78c8:	00 38       	CMP       R0, #0
    78ca:	1a f4       	JMI       $+26                  ;->0x78fe
    78cc:	0d 45       	LD        R5, [PC + #13]        ;->0x7900  :=0x100040a8
    78ce:	45 82       	LD.W      R4, [R5]
    78d0:	51 10       	MOV       R5, #1
    78d2:	ab 7b       	LSL       R5, #27
    78d4:	3a 10       	MOV       R3, #10
    78d6:	04 04       	SJMP      $+4                   ;->0x78de
    78d8:	6d c1       	ADD       R5, R5, #5
    78da:	ed d2       	DIVU      R5, R5, R3
    78dc:	40 cc       	SUB       R0, R0, #1
    78de:	00 38       	CMP       R0, #0
    78e0:	fc f1       	JNZ       $-4                   ;->0x78d8
    78e2:	2d c3       	ADD       R5, R5, R4
    78e4:	07 44       	LD        R4, [PC + #7]         ;->0x7900  :=0x100040a8
    78e6:	45 85       	ST.W      [R4], R5
    78e8:	07 43       	LD        R3, [PC + #7]         ;->0x7904  :=0x9fffffff
    78ea:	53 70       	CMP       R5, R3
    78ec:	09 f9       	JLS       $+9                   ;->0x78fe
    78ee:	6d c1       	ADD       R5, R5, #5
    78f0:	3a 10       	MOV       R3, #10
    78f2:	ed d2       	DIVU      R5, R5, R3
    78f4:	45 85       	ST.W      [R4], R5
    78f6:	05 45       	LD        R5, [PC + #5]         ;->0x7908  :=0x100040a0
    78f8:	35 82       	LD.W      R3, [R5]
    78fa:	63 c0       	ADD       R4, R3, #1
    78fc:	54 85       	ST.W      [R5], R4
    78fe:	1d 5c       	JMP       LR
    7900:	a8 40 00 10 	.long     0x100040a8 ->268452008  [!!!@2@:LD        R0, [PC + #168]       ;->0x7ba0  :=0x38305803	@@: MOV       R0, #0
    7904:	ff ff ff 9f 	.long     0x9fffffff ->-1610612737 
    7908:	a0 40 00 10 	.long     0x100040a0 ->268452000  [!!!@2@:LD        R0, [PC + #160]       ;->0x7b88  :=0x1360d100	@@: MOV       R0, #0

0000790c <ftoa>:
    790c:	87 5f       	PUSH      {R6-R8,LR}
    790e:	62 d1       	ZXT.B     R6, R2
    7910:	8a 47       	LD        R7, [PC + #138]       ;->0x7b38  :=0x100040a8
    7912:	70 85       	ST.W      [R7], R0
    7914:	8a 45       	LD        R5, [PC + #138]       ;->0x7b3c  :=0x100040ac
    7916:	51 85       	ST.W      [R5], R1
    7918:	00 38       	CMP       R0, #0
    791a:	04 f5       	JPL       $+4                   ;->0x7922
    791c:	0d 12       	MOV       R0, #45
    791e:	89 45       	LD        R5, [PC + #137]       ;->0x7b40  :=0x7888
    7920:	05 5c       	LJMP      R5
    7922:	57 82       	LD.W      R5, [R7]
    7924:	07 11       	MOV       R0, #23
    7926:	1d dc       	LSR       R3, R5, R0
    7928:	1f 1f       	MOV       R1, #255
    792a:	5b d4       	ANL       R3, R3, R1
    792c:	86 44       	LD        R4, [PC + #134]       ;->0x7b44  :=0x100040a4
    792e:	43 85       	ST.W      [R4], R3
    7930:	86 42       	LD        R2, [PC + #134]       ;->0x7b48  :=0x7fffff
    7932:	ad d4       	ANL       R5, R5, R2
    7934:	01 10       	MOV       R0, #1
    7936:	07 7b       	LSL       R0, #23
    7938:	25 d6       	ORL       R4, R5, R0
    793a:	74 85       	ST.W      [R7], R4
    793c:	31 70       	CMP       R3, R1
    793e:	16 f1       	JNZ       $+22                  ;->0x796a
    7940:	80 46       	LD        R6, [PC + #128]       ;->0x7b40  :=0x7888
    7942:	51 10       	MOV       R5, #1
    7944:	2f 7b       	LSL       R5, #23
    7946:	45 70       	CMP       R4, R5
    7948:	07 f1       	JNZ       $+7                   ;->0x7956
    794a:	09 16       	MOV       R0, #105
    794c:	06 5c       	LJMP      R6
    794e:	0e 16       	MOV       R0, #110
    7950:	06 5c       	LJMP      R6
    7952:	06 14       	MOV       R0, #70
    7954:	06 04       	SJMP      $+6                   ;->0x7960
    7956:	0e 16       	MOV       R0, #110
    7958:	06 5c       	LJMP      R6
    795a:	01 16       	MOV       R0, #97
    795c:	06 5c       	LJMP      R6
    795e:	0e 16       	MOV       R0, #110
    7960:	06 5c       	LJMP      R6
    7962:	00 10       	MOV       R0, #0
    7964:	77 45       	LD        R5, [PC + #119]       ;->0x7b40  :=0x7888
    7966:	05 5c       	LJMP      R5
    7968:	e4 04       	SJMP      $+228                 ;->0x7b30
    796a:	30 38       	CMP       R3, #0
    796c:	0c f0       	JZ        $+12                  ;->0x7984
    796e:	73 45       	LD        R5, [PC + #115]       ;->0x7b38  :=0x100040a8
    7970:	55 82       	LD.W      R5, [R5]
    7972:	75 44       	LD        R4, [PC + #117]       ;->0x7b44  :=0x100040a4
    7974:	44 82       	LD.W      R4, [R4]
    7976:	4f 37       	SUB       R4, #127
    7978:	2d 7a       	LSL       R5, #5
    797a:	44 58       	MOV       R2, R4
    797c:	30 10       	MOV       R3, #0
    797e:	74 41       	LD        R1, [PC + #116]       ;->0x7b4c  :=0x4fffffff
    7980:	05 10       	MOV       R0, #5
    7982:	3a 04       	SJMP      $+58                  ;->0x79f6
    7984:	31 10       	MOV       R3, #1
    7986:	1f 7b       	LSL       R3, #23
    7988:	43 70       	CMP       R4, R3
    798a:	22 f1       	JNZ       $+34                  ;->0x79ce
    798c:	00 13       	MOV       R0, #48
    798e:	6d 47       	LD        R7, [PC + #109]       ;->0x7b40  :=0x7888
    7990:	07 5c       	LJMP      R7
    7992:	5f 11       	MOV       R5, #31
    7994:	6e d5       	ANL       R5, R6, R5
    7996:	6f 41       	LD        R1, [PC + #111]       ;->0x7b50  :=0x100040a0
    7998:	01 59       	MOV       R8, R1
    799a:	15 85       	ST.W      [R1], R5
    799c:	50 38       	CMP       R5, #0
    799e:	05 f1       	JNZ       $+5                   ;->0x79a8
    79a0:	50 14       	MOV       R5, #64
    79a2:	76 d5       	ANL       R6, R6, R5
    79a4:	df f0       	JZ        $-33                  ;->0x7962
    79a6:	0b 04       	SJMP      $+11                  ;->0x79bc
    79a8:	0e 12       	MOV       R0, #46
    79aa:	02 04       	SJMP      $+2                   ;->0x79ae
    79ac:	00 13       	MOV       R0, #48
    79ae:	07 5c       	LJMP      R7
    79b0:	58 82       	LD.W      R5, [R8]
    79b2:	65 cc       	SUB       R4, R5, #1
    79b4:	84 85       	ST.W      [R8], R4
    79b6:	50 38       	CMP       R5, #0
    79b8:	fa f1       	JNZ       $-6                   ;->0x79ac
    79ba:	f3 07       	SJMP      $-13                  ;->0x79a0
    79bc:	05 14       	MOV       R0, #69
    79be:	61 46       	LD        R6, [PC + #97]        ;->0x7b40  :=0x7888
    79c0:	06 5c       	LJMP      R6
    79c2:	0b 12       	MOV       R0, #43
    79c4:	06 5c       	LJMP      R6
    79c6:	00 13       	MOV       R0, #48
    79c8:	06 5c       	LJMP      R6
    79ca:	00 13       	MOV       R0, #48
    79cc:	ca 07       	SJMP      $-54                  ;->0x7960
    79ce:	41 10       	MOV       R4, #1
    79d0:	02 04       	SJMP      $+2                   ;->0x79d4
    79d2:	6d c3       	ADD       R5, R5, R5
    79d4:	64 58       	MOV       R3, R4
    79d6:	64 cc       	SUB       R4, R4, #1
    79d8:	52 70       	CMP       R5, R2
    79da:	fc f9       	JLS       $-4                   ;->0x79d2
    79dc:	57 44       	LD        R4, [PC + #87]        ;->0x7b38  :=0x100040a8
    79de:	45 85       	ST.W      [R4], R5
    79e0:	59 45       	LD        R5, [PC + #89]        ;->0x7b44  :=0x100040a4
    79e2:	53 85       	ST.W      [R5], R3
    79e4:	c5 07       	SJMP      $-59                  ;->0x796e
    79e6:	51 70       	CMP       R5, R1
    79e8:	03 f8       	JHI       $+3                   ;->0x79ee
    79ea:	6d c3       	ADD       R5, R5, R5
    79ec:	04 04       	SJMP      $+4                   ;->0x79f4
    79ee:	ad c0       	ADD       R5, R5, #2
    79f0:	2d d2       	DIVU      R5, R5, R0
    79f2:	5b c0       	ADD       R3, R3, #1
    79f4:	52 cc       	SUB       R2, R2, #1
    79f6:	20 38       	CMP       R2, #0
    79f8:	f7 fc       	JGT       $-9                   ;->0x79e6
    79fa:	44 58       	MOV       R2, R4
    79fc:	40 38       	CMP       R4, #0
    79fe:	02 f5       	JPL       $+2                   ;->0x7a02
    7a00:	20 10       	MOV       R2, #0
    7a02:	a4 c6       	SUB       R4, R4, R2
    7a04:	54 42       	LD        R2, [PC + #84]        ;->0x7b54  :=0x1fffffff
    7a06:	0b 04       	SJMP      $+11                  ;->0x7a1c
    7a08:	52 70       	CMP       R5, R2
    7a0a:	06 f8       	JHI       $+6                   ;->0x7a16
    7a0c:	02 10       	MOV       R0, #2
    7a0e:	0d da       	LSL       R1, R5, R0
    7a10:	6d c2       	ADD       R5, R5, R1
    7a12:	5b cc       	SUB       R3, R3, #1
    7a14:	03 04       	SJMP      $+3                   ;->0x7a1a
    7a16:	6d c0       	ADD       R5, R5, #1
    7a18:	29 7c       	LSR       R5, #1
    7a1a:	64 c0       	ADD       R4, R4, #1
    7a1c:	40 38       	CMP       R4, #0
    7a1e:	f5 f4       	JMI       $-11                  ;->0x7a08
    7a20:	49 42       	LD        R2, [PC + #73]        ;->0x7b44  :=0x100040a4
    7a22:	24 85       	ST.W      [R2], R4
    7a24:	4d 42       	LD        R2, [PC + #77]        ;->0x7b58  :=0xfffffff
    7a26:	05 04       	SJMP      $+5                   ;->0x7a30
    7a28:	12 10       	MOV       R1, #2
    7a2a:	65 da       	LSL       R4, R5, R1
    7a2c:	6c c3       	ADD       R5, R4, R5
    7a2e:	6d c3       	ADD       R5, R5, R5
    7a30:	83 58       	MOV       R4, R3
    7a32:	5b cc       	SUB       R3, R3, #1
    7a34:	52 70       	CMP       R5, R2
    7a36:	f9 f9       	JLS       $-7                   ;->0x7a28
    7a38:	46 43       	LD        R3, [PC + #70]        ;->0x7b50  :=0x100040a0
    7a3a:	34 85       	ST.W      [R3], R4
    7a3c:	3f 43       	LD        R3, [PC + #63]        ;->0x7b38  :=0x100040a8
    7a3e:	35 85       	ST.W      [R3], R5
    7a40:	50 16       	MOV       R5, #96
    7a42:	6e d5       	ANL       R5, R6, R5
    7a44:	0a f1       	JNZ       $+10                  ;->0x7a58
    7a46:	53 10       	MOV       R5, #3
    7a48:	55 68       	NOT       R5, R5
    7a4a:	45 70       	CMP       R4, R5
    7a4c:	03 fb       	JLT       $+3                   ;->0x7a52
    7a4e:	46 70       	CMP       R4, R6
    7a50:	03 fb       	JLT       $+3                   ;->0x7a56
    7a52:	36 48       	SET       R6, #6
    7a54:	02 04       	SJMP      $+2                   ;->0x7a58
    7a56:	35 48       	SET       R6, #5
    7a58:	50 14       	MOV       R5, #64
    7a5a:	6e d5       	ANL       R5, R6, R5
    7a5c:	7f 11       	MOV       R7, #31
    7a5e:	fe d5       	ANL       R7, R6, R7
    7a60:	50 38       	CMP       R5, #0
    7a62:	30 f0       	JZ        $+48                  ;->0x7ac2
    7a64:	07 58       	MOV       R0, R7
    7a66:	3e 45       	LD        R5, [PC + #62]        ;->0x7b5c  :=0x78c8
    7a68:	05 5c       	LJMP      R5
    7a6a:	3e 44       	LD        R4, [PC + #62]        ;->0x7b60  :=0x7898
    7a6c:	04 59       	MOV       R8, R4
    7a6e:	04 5c       	LJMP      R4
    7a70:	35 46       	LD        R6, [PC + #53]        ;->0x7b44  :=0x100040a4
    7a72:	67 85       	ST.W      [R6], R7
    7a74:	70 38       	CMP       R7, #0
    7a76:	09 f1       	JNZ       $+9                   ;->0x7a88
    7a78:	05 14       	MOV       R0, #69
    7a7a:	32 46       	LD        R6, [PC + #50]        ;->0x7b40  :=0x7888
    7a7c:	06 5c       	LJMP      R6
    7a7e:	35 47       	LD        R7, [PC + #53]        ;->0x7b50  :=0x100040a0
    7a80:	57 82       	LD.W      R5, [R7]
    7a82:	50 38       	CMP       R5, #0
    7a84:	15 f5       	JPL       $+21                  ;->0x7aae
    7a86:	0d 04       	SJMP      $+13                  ;->0x7aa0
    7a88:	0e 12       	MOV       R0, #46
    7a8a:	2e 45       	LD        R5, [PC + #46]        ;->0x7b40  :=0x7888
    7a8c:	05 5c       	LJMP      R5
    7a8e:	05 04       	SJMP      $+5                   ;->0x7a98
    7a90:	08 5c       	LJMP      R8
    7a92:	06 82       	LD.W      R0, [R6]
    7a94:	68 cc       	SUB       R5, R0, #1
    7a96:	65 85       	ST.W      [R6], R5
    7a98:	56 82       	LD.W      R5, [R6]
    7a9a:	50 38       	CMP       R5, #0
    7a9c:	fa fc       	JGT       $-6                   ;->0x7a90
    7a9e:	ed 07       	SJMP      $-19                  ;->0x7a78
    7aa0:	0d 12       	MOV       R0, #45
    7aa2:	06 5c       	LJMP      R6
    7aa4:	50 10       	MOV       R5, #0
    7aa6:	17 82       	LD.W      R1, [R7]
    7aa8:	6d c6       	SUB       R5, R5, R1
    7aaa:	75 85       	ST.W      [R7], R5
    7aac:	03 04       	SJMP      $+3                   ;->0x7ab2
    7aae:	0b 12       	MOV       R0, #43
    7ab0:	06 5c       	LJMP      R6
    7ab2:	28 45       	LD        R5, [PC + #40]        ;->0x7b50  :=0x100040a0
    7ab4:	05 82       	LD.W      R0, [R5]
    7ab6:	22 45       	LD        R5, [PC + #34]        ;->0x7b3c  :=0x100040ac
    7ab8:	15 82       	LD.W      R1, [R5]
    7aba:	2a 10       	MOV       R2, #10
    7abc:	2a 45       	LD        R5, [PC + #42]        ;->0x7b64  :=0x7b68
    7abe:	05 5c       	LJMP      R5
    7ac0:	38 04       	SJMP      $+56                  ;->0x7b30
    7ac2:	24 46       	LD        R6, [PC + #36]        ;->0x7b50  :=0x100040a0
    7ac4:	46 82       	LD.W      R4, [R6]
    7ac6:	07 c3       	ADD       R0, R7, R4
    7ac8:	25 45       	LD        R5, [PC + #37]        ;->0x7b5c  :=0x78c8
    7aca:	05 5c       	LJMP      R5
    7acc:	56 82       	LD.W      R5, [R6]
    7ace:	50 38       	CMP       R5, #0
    7ad0:	07 f5       	JPL       $+7                   ;->0x7ade
    7ad2:	0c 04       	SJMP      $+12                  ;->0x7aea
    7ad4:	08 5c       	LJMP      R8
    7ad6:	06 82       	LD.W      R0, [R6]
    7ad8:	68 cc       	SUB       R5, R0, #1
    7ada:	65 85       	ST.W      [R6], R5
    7adc:	03 04       	SJMP      $+3                   ;->0x7ae2
    7ade:	21 41       	LD        R1, [PC + #33]        ;->0x7b60  :=0x7898
    7ae0:	01 59       	MOV       R8, R1
    7ae2:	56 82       	LD.W      R5, [R6]
    7ae4:	50 38       	CMP       R5, #0
    7ae6:	f7 f5       	JPL       $-9                   ;->0x7ad4
    7ae8:	04 04       	SJMP      $+4                   ;->0x7af0
    7aea:	00 13       	MOV       R0, #48
    7aec:	15 45       	LD        R5, [PC + #21]        ;->0x7b40  :=0x7888
    7aee:	05 5c       	LJMP      R5
    7af0:	15 46       	LD        R6, [PC + #21]        ;->0x7b44  :=0x100040a4
    7af2:	67 85       	ST.W      [R6], R7
    7af4:	70 38       	CMP       R7, #0
    7af6:	02 f1       	JNZ       $+2                   ;->0x7afa
    7af8:	35 07       	SJMP      $-203                 ;->0x7962
    7afa:	0e 12       	MOV       R0, #46
    7afc:	11 45       	LD        R5, [PC + #17]        ;->0x7b40  :=0x7888
    7afe:	05 5c       	LJMP      R5
    7b00:	14 47       	LD        R7, [PC + #20]        ;->0x7b50  :=0x100040a0
    7b02:	40 10       	MOV       R4, #0
    7b04:	44 68       	NOT       R4, R4
    7b06:	04 59       	MOV       R8, R4
    7b08:	10 04       	SJMP      $+16                  ;->0x7b28
    7b0a:	57 82       	LD.W      R5, [R7]
    7b0c:	58 70       	CMP       R5, R8
    7b0e:	08 fa       	JGE       $+8                   ;->0x7b1e
    7b10:	00 13       	MOV       R0, #48
    7b12:	0c 45       	LD        R5, [PC + #12]        ;->0x7b40  :=0x7888
    7b14:	05 5c       	LJMP      R5
    7b16:	07 82       	LD.W      R0, [R7]
    7b18:	68 c0       	ADD       R5, R0, #1
    7b1a:	75 85       	ST.W      [R7], R5
    7b1c:	03 04       	SJMP      $+3                   ;->0x7b22
    7b1e:	11 45       	LD        R5, [PC + #17]        ;->0x7b60  :=0x7898
    7b20:	05 5c       	LJMP      R5
    7b22:	16 82       	LD.W      R1, [R6]
    7b24:	69 cc       	SUB       R5, R1, #1
    7b26:	65 85       	ST.W      [R6], R5
    7b28:	56 82       	LD.W      R5, [R6]
    7b2a:	50 38       	CMP       R5, #0
    7b2c:	ef fc       	JGT       $-17                  ;->0x7b0a
    7b2e:	1a 07       	SJMP      $-230                 ;->0x7962
    7b30:	07 5e       	POP       {R6-R8}
    7b32:	0d 5d       	POP       LR
    7b34:	1d 5c       	JMP       LR
    7b36:	00 00       	NOP      NOP      
    7b38:	a8 40 00 10 	.long     0x100040a8 ->268452008  [!!!@2@:LD        R0, [PC + #168]       ;->0x7dd8  :=0x5801f002	@@: MOV       R0, #0
    7b3c:	ac 40 00 10 	.long     0x100040ac ->268452012  [!!!@2@:LD        R0, [PC + #172]       ;->0x7dec  :=0x1000f007	@@: MOV       R0, #0
    7b40:	88 78 00 00 	.long     0x00007888 ->000030856  [!!!@2@:ASR       R1, #8	@@: NOP      
    7b44:	a4 40 00 10 	.long     0x100040a4 ->268452004  [!!!@2@:LD        R0, [PC + #164]       ;->0x7dd4  :=0x38601001	@@: MOV       R0, #0
    7b48:	ff ff 7f 00 	.long     0x007fffff ->008388607 
    7b4c:	ff ff ff 4f 	.long     0x4fffffff ->1342177279 
    7b50:	a0 40 00 10 	.long     0x100040a0 ->268452000  [!!!@2@:LD        R0, [PC + #160]       ;->0x7dd0  :=0x6a6b58c4	@@: MOV       R0, #0
    7b54:	ff ff ff 1f 	.long     0x1fffffff ->536870911 
    7b58:	ff ff ff 0f 	.long     0x0fffffff ->268435455 
    7b5c:	c8 78 00 00 	.long     0x000078c8 ->000030920  [!!!@2@:ASR       R9, #8	@@: NOP      
    7b60:	98 78 00 00 	.long     0x00007898 ->000030872  [!!!@2@:ASR       R3, #8	@@: NOP      
    7b64:	68 7b 00 00 	.long     0x00007b68 ->000031592  [!!!@2@:LSL       LR, #16	@@: NOP      

00007b68 <uitoa>:
    7b68:	2d 5d       	PUSH      LR
    7b6a:	22 d1       	ZXT.B     R2, R2
    7b6c:	02 45       	LD        R5, [PC + #2]         ;->0x7b74  :=0x7b78
    7b6e:	05 5c       	LJMP      R5
    7b70:	0d 5d       	POP       LR
    7b72:	1d 5c       	JMP       LR
    7b74:	78 7b 00 00 	.long     0x00007b78 ->000031608  [!!!@2@:LSL       PC, #16	@@: NOP      

00007b78 <ultoa>:
    7b78:	03 5f       	PUSH      {R6-R7}
    7b7a:	e0 32       	SUB       SP, #32
    7b7c:	22 d1       	ZXT.B     R2, R2
    7b7e:	50 12       	MOV       R5, #32
    7b80:	98 d2       	DIVU      R3, R0, R2
    7b82:	a3 ca       	MULS      R4, R3, R2
    7b84:	00 00       	NOP      NOP      
    7b86:	00 c7       	SUB       R0, R0, R4
    7b88:	00 d1       	ZXT.B     R0, R0
    7b8a:	60 13       	MOV       R6, #48
    7b8c:	a0 c3       	ADD       R4, R0, R6
    7b8e:	44 d1       	ZXT.B     R4, R4
    7b90:	49 3b       	CMP       R4, #57
    7b92:	03 f9       	JLS       $+3                   ;->0x7b98
    7b94:	07 2d       	ADD       R0, #87
    7b96:	40 d1       	ZXT.B     R4, R0
    7b98:	6d cc       	SUB       R5, R5, #1
    7b9a:	ee 58       	MOV       R7, SP
    7b9c:	47 c3       	ADD       R0, R7, R5
    7b9e:	04 83       	ST.B      [R0], R4
    7ba0:	03 58       	MOV       R0, R3
    7ba2:	30 38       	CMP       R3, #0
    7ba4:	ee f1       	JNZ       $-18                  ;->0x7b80
    7ba6:	6e 58       	MOV       R3, SP
    7ba8:	63 c3       	ADD       R4, R3, R5
    7baa:	44 80       	LD.B      R4, [R4]
    7bac:	14 77       	ST.B      [R1++], R4
    7bae:	6d c0       	ADD       R5, R5, #1
    7bb0:	5f 39       	CMP       R5, #31
    7bb2:	fa f9       	JLS       $-6                   ;->0x7ba6
    7bb4:	50 10       	MOV       R5, #0
    7bb6:	15 83       	ST.B      [R1], R5
    7bb8:	e0 2a       	ADD       SP, #32
    7bba:	03 5e       	POP       {R6-R7}
    7bbc:	1d 5c       	JMP       LR
	...

00007bc0 <ltoa>:
    7bc0:	2d 5d       	PUSH      LR
    7bc2:	22 d1       	ZXT.B     R2, R2
    7bc4:	00 38       	CMP       R0, #0
    7bc6:	07 f5       	JPL       $+7                   ;->0x7bd4
    7bc8:	2a 38       	CMP       R2, #10
    7bca:	05 f1       	JNZ       $+5                   ;->0x7bd4
    7bcc:	5d 12       	MOV       R5, #45
    7bce:	15 77       	ST.B      [R1++], R5
    7bd0:	50 10       	MOV       R5, #0
    7bd2:	05 c6       	SUB       R0, R5, R0
    7bd4:	02 45       	LD        R5, [PC + #2]         ;->0x7bdc  :=0x7b78
    7bd6:	05 5c       	LJMP      R5
    7bd8:	0d 5d       	POP       LR
    7bda:	1d 5c       	JMP       LR
    7bdc:	78 7b 00 00 	.long     0x00007b78 ->000031608  [!!!@2@:LSL       PC, #16	@@: NOP      

00007be0 <__gedf2>:
    7be0:	1f 5f       	PUSH      {R6-R10}
    7be2:	e0 31       	SUB       SP, #16
    7be4:	02 20       	ST.W      [SP + #2], R0
    7be6:	03 21       	ST.W      [SP + #3], R1
    7be8:	02 0e       	LD.W      R6, [SP + #2]
    7bea:	03 0d       	LD.W      R5, [SP + #3]
    7bec:	34 44       	LD        R4, [PC + #52]        ;->0x7cbc  :=0xfffff
    7bee:	24 59       	MOV       R9, R4
    7bf0:	0d d5       	ANL       R1, R5, R4
    7bf2:	74 11       	MOV       R7, #20
    7bf4:	c5 dd       	LSR       R0, R5, R7
    7bf6:	33 47       	LD        R7, [PC + #51]        ;->0x7cc0  :=0x7ff
    7bf8:	c0 d5       	ANL       R0, R0, R7
    7bfa:	af 7d       	LSR       R5, #31
    7bfc:	e2 85       	ST.W      [SP], R2
    7bfe:	01 23       	ST.W      [SP + #1], R3
    7c00:	2e 82       	LD.W      R2, [SP]
    7c02:	01 0c       	LD.W      R4, [SP + #1]
    7c04:	04 59       	MOV       R8, R4
    7c06:	64 58       	MOV       R3, R4
    7c08:	39 69       	ANL       R3, R9
    7c0a:	24 7d       	LSR       R4, #20
    7c0c:	e4 d5       	ANL       R4, R4, R7
    7c0e:	c7 7d       	LSR       R8, #31
    7c10:	47 59       	MOV       R10, R7
    7c12:	07 70       	CMP       R0, R7
    7c14:	04 f1       	JNZ       $+4                   ;->0x7c1c
    7c16:	b9 d7       	ORL       R7, R1, R6
    7c18:	70 38       	CMP       R7, #0
    7c1a:	43 f1       	JNZ       $+67                  ;->0x7ca0
    7c1c:	4a 70       	CMP       R4, R10
    7c1e:	03 f1       	JNZ       $+3                   ;->0x7c24
    7c20:	bb d6       	ORL       R7, R3, R2
    7c22:	3f f1       	JNZ       $+63                  ;->0x7ca0
    7c24:	00 38       	CMP       R0, #0
    7c26:	45 f1       	JNZ       $+69                  ;->0x7cb0
    7c28:	b9 d7       	ORL       R7, R1, R6
    7c2a:	27 59       	MOV       R9, R7
    7c2c:	71 10       	MOV       R7, #1
    7c2e:	90 38       	CMP       R9, #0
    7c30:	02 f0       	JZ        $+2                   ;->0x7c34
    7c32:	e0 58       	MOV       R7, R0
    7c34:	27 59       	MOV       R9, R7
    7c36:	40 38       	CMP       R4, #0
    7c38:	39 f1       	JNZ       $+57                  ;->0x7caa
    7c3a:	02 04       	SJMP      $+2                   ;->0x7c3e
    7c3c:	24 59       	MOV       R9, R4
    7c3e:	bb d6       	ORL       R7, R3, R2
    7c40:	47 59       	MOV       R10, R7
    7c42:	71 10       	MOV       R7, #1
    7c44:	a0 38       	CMP       R10, #0
    7c46:	02 f0       	JZ        $+2                   ;->0x7c4a
    7c48:	70 10       	MOV       R7, #0
    7c4a:	90 38       	CMP       R9, #0
    7c4c:	07 f0       	JZ        $+7                   ;->0x7c5a
    7c4e:	00 10       	MOV       R0, #0
    7c50:	70 70       	CMP       R7, R0
    7c52:	32 f1       	JNZ       $+50                  ;->0x7cb6
    7c54:	80 38       	CMP       R8, #0
    7c56:	27 f0       	JZ        $+39                  ;->0x7ca4
    7c58:	18 04       	SJMP      $+24                  ;->0x7c88
    7c5a:	70 38       	CMP       R7, #0
    7c5c:	05 f0       	JZ        $+5                   ;->0x7c66
    7c5e:	01 10       	MOV       R0, #1
    7c60:	50 38       	CMP       R5, #0
    7c62:	2a f0       	JZ        $+42                  ;->0x7cb6
    7c64:	20 04       	SJMP      $+32                  ;->0x7ca4
    7c66:	58 70       	CMP       R5, R8
    7c68:	02 f0       	JZ        $+2                   ;->0x7c6c
    7c6a:	0d 04       	SJMP      $+13                  ;->0x7c84
    7c6c:	04 70       	CMP       R0, R4
    7c6e:	02 fd       	JLE       $+2                   ;->0x7c72
    7c70:	0a 04       	SJMP      $+10                  ;->0x7c84
    7c72:	04 70       	CMP       R0, R4
    7c74:	02 fa       	JGE       $+2                   ;->0x7c78
    7c76:	12 04       	SJMP      $+18                  ;->0x7c9a
    7c78:	13 70       	CMP       R1, R3
    7c7a:	05 f8       	JHI       $+5                   ;->0x7c84
    7c7c:	13 70       	CMP       R1, R3
    7c7e:	07 f1       	JNZ       $+7                   ;->0x7c8c
    7c80:	62 70       	CMP       R6, R2
    7c82:	09 f9       	JLS       $+9                   ;->0x7c94
    7c84:	50 38       	CMP       R5, #0
    7c86:	0f f1       	JNZ       $+15                  ;->0x7ca4
    7c88:	01 10       	MOV       R0, #1
    7c8a:	16 04       	SJMP      $+22                  ;->0x7cb6
    7c8c:	00 10       	MOV       R0, #0
    7c8e:	31 70       	CMP       R3, R1
    7c90:	13 f9       	JLS       $+19                  ;->0x7cb6
    7c92:	04 04       	SJMP      $+4                   ;->0x7c9a
    7c94:	00 10       	MOV       R0, #0
    7c96:	26 70       	CMP       R2, R6
    7c98:	0f f9       	JLS       $+15                  ;->0x7cb6
    7c9a:	50 38       	CMP       R5, #0
    7c9c:	f6 f1       	JNZ       $-10                  ;->0x7c88
    7c9e:	03 04       	SJMP      $+3                   ;->0x7ca4
    7ca0:	01 10       	MOV       R0, #1
    7ca2:	02 04       	SJMP      $+2                   ;->0x7ca6
    7ca4:	00 10       	MOV       R0, #0
    7ca6:	00 68       	NOT       R0, R0
    7ca8:	07 04       	SJMP      $+7                   ;->0x7cb6
    7caa:	70 38       	CMP       R7, #0
    7cac:	d4 f1       	JNZ       $-44                  ;->0x7c54
    7cae:	dc 07       	SJMP      $-36                  ;->0x7c66
    7cb0:	40 38       	CMP       R4, #0
    7cb2:	c5 f0       	JZ        $-59                  ;->0x7c3c
    7cb4:	d9 07       	SJMP      $-39                  ;->0x7c66
    7cb6:	e0 29       	ADD       SP, #16
    7cb8:	1f 5e       	POP       {R6-R10}
    7cba:	1d 5c       	JMP       LR
    7cbc:	ff ff 0f 00 	.long     0x000fffff ->001048575 
    7cc0:	ff 07 00 00 	.long     0x000007ff ->000002047  [!!!@2@:SJMP      $-1                   ;->0x7cbe	@@: NOP      

00007cc4 <__gesf2>:
    7cc4:	07 5f       	PUSH      {R6-R8}
    7cc6:	2c 46       	LD        R6, [PC + #44]        ;->0x7d74  :=0x7fffff
    7cc8:	90 d5       	ANL       R2, R0, R6
    7cca:	47 11       	MOV       R4, #23
    7ccc:	18 dd       	LSR       R3, R0, R4
    7cce:	33 d1       	ZXT.B     R3, R3
    7cd0:	4f 11       	MOV       R4, #31
    7cd2:	28 dd       	LSR       R5, R0, R4
    7cd4:	b1 d5       	ANL       R6, R1, R6
    7cd6:	07 11       	MOV       R0, #23
    7cd8:	21 dc       	LSR       R4, R1, R0
    7cda:	44 d1       	ZXT.B     R4, R4
    7cdc:	8f 7d       	LSR       R1, #31
    7cde:	0f 1f       	MOV       R0, #255
    7ce0:	30 70       	CMP       R3, R0
    7ce2:	03 f1       	JNZ       $+3                   ;->0x7ce8
    7ce4:	20 38       	CMP       R2, #0
    7ce6:	3a f1       	JNZ       $+58                  ;->0x7d5a
    7ce8:	0f 1f       	MOV       R0, #255
    7cea:	40 70       	CMP       R4, R0
    7cec:	03 f1       	JNZ       $+3                   ;->0x7cf2
    7cee:	60 38       	CMP       R6, #0
    7cf0:	35 f1       	JNZ       $+53                  ;->0x7d5a
    7cf2:	30 38       	CMP       R3, #0
    7cf4:	3b f1       	JNZ       $+59                  ;->0x7d6a
    7cf6:	01 10       	MOV       R0, #1
    7cf8:	20 38       	CMP       R2, #0
    7cfa:	02 f0       	JZ        $+2                   ;->0x7cfe
    7cfc:	03 58       	MOV       R0, R3
    7cfe:	00 59       	MOV       R8, R0
    7d00:	40 38       	CMP       R4, #0
    7d02:	31 f1       	JNZ       $+49                  ;->0x7d64
    7d04:	02 04       	SJMP      $+2                   ;->0x7d08
    7d06:	04 59       	MOV       R8, R4
    7d08:	71 10       	MOV       R7, #1
    7d0a:	60 38       	CMP       R6, #0
    7d0c:	02 f0       	JZ        $+2                   ;->0x7d10
    7d0e:	70 10       	MOV       R7, #0
    7d10:	80 38       	CMP       R8, #0
    7d12:	07 f0       	JZ        $+7                   ;->0x7d20
    7d14:	00 10       	MOV       R0, #0
    7d16:	70 70       	CMP       R7, R0
    7d18:	2c f1       	JNZ       $+44                  ;->0x7d70
    7d1a:	10 38       	CMP       R1, #0
    7d1c:	21 f0       	JZ        $+33                  ;->0x7d5e
    7d1e:	16 04       	SJMP      $+22                  ;->0x7d4a
    7d20:	70 38       	CMP       R7, #0
    7d22:	05 f0       	JZ        $+5                   ;->0x7d2c
    7d24:	01 10       	MOV       R0, #1
    7d26:	50 38       	CMP       R5, #0
    7d28:	24 f0       	JZ        $+36                  ;->0x7d70
    7d2a:	1a 04       	SJMP      $+26                  ;->0x7d5e
    7d2c:	51 70       	CMP       R5, R1
    7d2e:	02 f0       	JZ        $+2                   ;->0x7d32
    7d30:	0b 04       	SJMP      $+11                  ;->0x7d46
    7d32:	34 70       	CMP       R3, R4
    7d34:	02 fd       	JLE       $+2                   ;->0x7d38
    7d36:	08 04       	SJMP      $+8                   ;->0x7d46
    7d38:	34 70       	CMP       R3, R4
    7d3a:	04 fa       	JGE       $+4                   ;->0x7d42
    7d3c:	50 38       	CMP       R5, #0
    7d3e:	06 f1       	JNZ       $+6                   ;->0x7d4a
    7d40:	0f 04       	SJMP      $+15                  ;->0x7d5e
    7d42:	26 70       	CMP       R2, R6
    7d44:	05 f9       	JLS       $+5                   ;->0x7d4e
    7d46:	50 38       	CMP       R5, #0
    7d48:	0b f1       	JNZ       $+11                  ;->0x7d5e
    7d4a:	01 10       	MOV       R0, #1
    7d4c:	12 04       	SJMP      $+18                  ;->0x7d70
    7d4e:	00 10       	MOV       R0, #0
    7d50:	62 70       	CMP       R6, R2
    7d52:	0f f9       	JLS       $+15                  ;->0x7d70
    7d54:	50 70       	CMP       R5, R0
    7d56:	fa f1       	JNZ       $-6                   ;->0x7d4a
    7d58:	03 04       	SJMP      $+3                   ;->0x7d5e
    7d5a:	01 10       	MOV       R0, #1
    7d5c:	02 04       	SJMP      $+2                   ;->0x7d60
    7d5e:	00 10       	MOV       R0, #0
    7d60:	00 68       	NOT       R0, R0
    7d62:	07 04       	SJMP      $+7                   ;->0x7d70
    7d64:	00 38       	CMP       R0, #0
    7d66:	da f1       	JNZ       $-38                  ;->0x7d1a
    7d68:	e2 07       	SJMP      $-30                  ;->0x7d2c
    7d6a:	40 38       	CMP       R4, #0
    7d6c:	cd f0       	JZ        $-51                  ;->0x7d06
    7d6e:	df 07       	SJMP      $-33                  ;->0x7d2c
    7d70:	07 5e       	POP       {R6-R8}
    7d72:	1d 5c       	JMP       LR
    7d74:	ff ff 7f 00 	.long     0x007fffff ->008388607 

00007d78 <__ledf2>:
    7d78:	3f 5f       	PUSH      {R6-R11}
    7d7a:	e0 31       	SUB       SP, #16
    7d7c:	02 20       	ST.W      [SP + #2], R0
    7d7e:	03 21       	ST.W      [SP + #3], R1
    7d80:	02 08       	LD.W      R0, [SP + #2]
    7d82:	60 59       	MOV       R11, R0
    7d84:	03 0d       	LD.W      R5, [SP + #3]
    7d86:	33 41       	LD        R1, [PC + #51]        ;->0x7e50  :=0xfffff
    7d88:	21 59       	MOV       R9, R1
    7d8a:	65 d4       	ANL       R4, R5, R1
    7d8c:	64 11       	MOV       R6, #20
    7d8e:	8d dd       	LSR       R1, R5, R6
    7d90:	31 46       	LD        R6, [PC + #49]        ;->0x7e54  :=0x7ff
    7d92:	89 d5       	ANL       R1, R1, R6
    7d94:	af 7d       	LSR       R5, #31
    7d96:	e2 85       	ST.W      [SP], R2
    7d98:	01 23       	ST.W      [SP + #1], R3
    7d9a:	7e 82       	LD.W      R7, [SP]
    7d9c:	01 08       	LD.W      R0, [SP + #1]
    7d9e:	60 58       	MOV       R3, R0
    7da0:	39 69       	ANL       R3, R9
    7da2:	40 58       	MOV       R2, R0
    7da4:	14 7d       	LSR       R2, #20
    7da6:	92 d5       	ANL       R2, R2, R6
    7da8:	87 7d       	LSR       R0, #31
    7daa:	20 59       	MOV       R9, R0
    7dac:	06 59       	MOV       R8, R6
    7dae:	16 70       	CMP       R1, R6
    7db0:	06 f1       	JNZ       $+6                   ;->0x7dbc
    7db2:	c4 58       	MOV       R6, R4
    7db4:	6b 6a       	ORL       R6, R11
    7db6:	02 10       	MOV       R0, #2
    7db8:	60 38       	CMP       R6, #0
    7dba:	48 f1       	JNZ       $+72                  ;->0x7e4a
    7dbc:	28 70       	CMP       R2, R8
    7dbe:	06 f1       	JNZ       $+6                   ;->0x7dca
    7dc0:	c3 d7       	ORL       R0, R3, R7
    7dc2:	00 59       	MOV       R8, R0
    7dc4:	02 10       	MOV       R0, #2
    7dc6:	80 38       	CMP       R8, #0
    7dc8:	41 f1       	JNZ       $+65                  ;->0x7e4a
    7dca:	00 10       	MOV       R0, #0
    7dcc:	10 70       	CMP       R1, R0
    7dce:	07 f1       	JNZ       $+7                   ;->0x7ddc
    7dd0:	c4 58       	MOV       R6, R4
    7dd2:	6b 6a       	ORL       R6, R11
    7dd4:	01 10       	MOV       R0, #1
    7dd6:	60 38       	CMP       R6, #0
    7dd8:	02 f0       	JZ        $+2                   ;->0x7ddc
    7dda:	01 58       	MOV       R0, R1
    7ddc:	20 38       	CMP       R2, #0
    7dde:	33 f1       	JNZ       $+51                  ;->0x7e44
    7de0:	f3 d7       	ORL       R6, R3, R7
    7de2:	81 10       	MOV       R8, #1
    7de4:	60 38       	CMP       R6, #0
    7de6:	02 f0       	JZ        $+2                   ;->0x7dea
    7de8:	02 59       	MOV       R8, R2
    7dea:	00 38       	CMP       R0, #0
    7dec:	07 f0       	JZ        $+7                   ;->0x7dfa
    7dee:	00 10       	MOV       R0, #0
    7df0:	80 70       	CMP       R8, R0
    7df2:	2c f1       	JNZ       $+44                  ;->0x7e4a
    7df4:	90 38       	CMP       R9, #0
    7df6:	24 f0       	JZ        $+36                  ;->0x7e3e
    7df8:	18 04       	SJMP      $+24                  ;->0x7e28
    7dfa:	80 38       	CMP       R8, #0
    7dfc:	05 f0       	JZ        $+5                   ;->0x7e06
    7dfe:	01 10       	MOV       R0, #1
    7e00:	50 38       	CMP       R5, #0
    7e02:	24 f0       	JZ        $+36                  ;->0x7e4a
    7e04:	1d 04       	SJMP      $+29                  ;->0x7e3e
    7e06:	59 70       	CMP       R5, R9
    7e08:	02 f0       	JZ        $+2                   ;->0x7e0c
    7e0a:	0d 04       	SJMP      $+13                  ;->0x7e24
    7e0c:	12 70       	CMP       R1, R2
    7e0e:	02 fd       	JLE       $+2                   ;->0x7e12
    7e10:	0a 04       	SJMP      $+10                  ;->0x7e24
    7e12:	12 70       	CMP       R1, R2
    7e14:	02 fa       	JGE       $+2                   ;->0x7e18
    7e16:	12 04       	SJMP      $+18                  ;->0x7e3a
    7e18:	43 70       	CMP       R4, R3
    7e1a:	05 f8       	JHI       $+5                   ;->0x7e24
    7e1c:	43 70       	CMP       R4, R3
    7e1e:	07 f1       	JNZ       $+7                   ;->0x7e2c
    7e20:	b7 70       	CMP       R11, R7
    7e22:	09 f9       	JLS       $+9                   ;->0x7e34
    7e24:	50 38       	CMP       R5, #0
    7e26:	0c f1       	JNZ       $+12                  ;->0x7e3e
    7e28:	01 10       	MOV       R0, #1
    7e2a:	10 04       	SJMP      $+16                  ;->0x7e4a
    7e2c:	00 10       	MOV       R0, #0
    7e2e:	34 70       	CMP       R3, R4
    7e30:	0d f9       	JLS       $+13                  ;->0x7e4a
    7e32:	04 04       	SJMP      $+4                   ;->0x7e3a
    7e34:	00 10       	MOV       R0, #0
    7e36:	7b 70       	CMP       R7, R11
    7e38:	09 f9       	JLS       $+9                   ;->0x7e4a
    7e3a:	50 38       	CMP       R5, #0
    7e3c:	f6 f1       	JNZ       $-10                  ;->0x7e28
    7e3e:	00 10       	MOV       R0, #0
    7e40:	00 68       	NOT       R0, R0
    7e42:	04 04       	SJMP      $+4                   ;->0x7e4a
    7e44:	00 38       	CMP       R0, #0
    7e46:	d7 f1       	JNZ       $-41                  ;->0x7df4
    7e48:	df 07       	SJMP      $-33                  ;->0x7e06
    7e4a:	e0 29       	ADD       SP, #16
    7e4c:	3f 5e       	POP       {R6-R11}
    7e4e:	1d 5c       	JMP       LR
    7e50:	ff ff 0f 00 	.long     0x000fffff ->001048575 
    7e54:	ff 07 00 00 	.long     0x000007ff ->000002047  [!!!@2@:SJMP      $-1                   ;->0x7e52	@@: NOP      

00007e58 <__lesf2>:
    7e58:	03 5f       	PUSH      {R6-R7}
    7e5a:	29 46       	LD        R6, [PC + #41]        ;->0x7efc  :=0x7fffff
    7e5c:	90 d5       	ANL       R2, R0, R6
    7e5e:	37 11       	MOV       R3, #23
    7e60:	e0 dc       	LSR       R4, R0, R3
    7e62:	44 d1       	ZXT.B     R4, R4
    7e64:	3f 11       	MOV       R3, #31
    7e66:	e8 dc       	LSR       R5, R0, R3
    7e68:	b1 d5       	ANL       R6, R1, R6
    7e6a:	07 11       	MOV       R0, #23
    7e6c:	19 dc       	LSR       R3, R1, R0
    7e6e:	33 d1       	ZXT.B     R3, R3
    7e70:	8f 7d       	LSR       R1, #31
    7e72:	0f 1f       	MOV       R0, #255
    7e74:	40 70       	CMP       R4, R0
    7e76:	04 f1       	JNZ       $+4                   ;->0x7e7e
    7e78:	02 10       	MOV       R0, #2
    7e7a:	20 38       	CMP       R2, #0
    7e7c:	3e f1       	JNZ       $+62                  ;->0x7ef8
    7e7e:	0f 1f       	MOV       R0, #255
    7e80:	30 70       	CMP       R3, R0
    7e82:	04 f1       	JNZ       $+4                   ;->0x7e8a
    7e84:	02 10       	MOV       R0, #2
    7e86:	60 38       	CMP       R6, #0
    7e88:	38 f1       	JNZ       $+56                  ;->0x7ef8
    7e8a:	00 10       	MOV       R0, #0
    7e8c:	40 70       	CMP       R4, R0
    7e8e:	05 f1       	JNZ       $+5                   ;->0x7e98
    7e90:	01 10       	MOV       R0, #1
    7e92:	20 38       	CMP       R2, #0
    7e94:	02 f0       	JZ        $+2                   ;->0x7e98
    7e96:	04 58       	MOV       R0, R4
    7e98:	30 38       	CMP       R3, #0
    7e9a:	2c f1       	JNZ       $+44                  ;->0x7ef2
    7e9c:	71 10       	MOV       R7, #1
    7e9e:	60 38       	CMP       R6, #0
    7ea0:	02 f0       	JZ        $+2                   ;->0x7ea4
    7ea2:	e3 58       	MOV       R7, R3
    7ea4:	00 38       	CMP       R0, #0
    7ea6:	07 f0       	JZ        $+7                   ;->0x7eb4
    7ea8:	00 10       	MOV       R0, #0
    7eaa:	70 70       	CMP       R7, R0
    7eac:	26 f1       	JNZ       $+38                  ;->0x7ef8
    7eae:	10 38       	CMP       R1, #0
    7eb0:	1e f0       	JZ        $+30                  ;->0x7eec
    7eb2:	16 04       	SJMP      $+22                  ;->0x7ede
    7eb4:	70 38       	CMP       R7, #0
    7eb6:	05 f0       	JZ        $+5                   ;->0x7ec0
    7eb8:	01 10       	MOV       R0, #1
    7eba:	50 38       	CMP       R5, #0
    7ebc:	1e f0       	JZ        $+30                  ;->0x7ef8
    7ebe:	17 04       	SJMP      $+23                  ;->0x7eec
    7ec0:	51 70       	CMP       R5, R1
    7ec2:	02 f0       	JZ        $+2                   ;->0x7ec6
    7ec4:	0b 04       	SJMP      $+11                  ;->0x7eda
    7ec6:	43 70       	CMP       R4, R3
    7ec8:	02 fd       	JLE       $+2                   ;->0x7ecc
    7eca:	08 04       	SJMP      $+8                   ;->0x7eda
    7ecc:	43 70       	CMP       R4, R3
    7ece:	04 fa       	JGE       $+4                   ;->0x7ed6
    7ed0:	50 38       	CMP       R5, #0
    7ed2:	06 f1       	JNZ       $+6                   ;->0x7ede
    7ed4:	0c 04       	SJMP      $+12                  ;->0x7eec
    7ed6:	26 70       	CMP       R2, R6
    7ed8:	05 f9       	JLS       $+5                   ;->0x7ee2
    7eda:	50 38       	CMP       R5, #0
    7edc:	08 f1       	JNZ       $+8                   ;->0x7eec
    7ede:	01 10       	MOV       R0, #1
    7ee0:	0c 04       	SJMP      $+12                  ;->0x7ef8
    7ee2:	00 10       	MOV       R0, #0
    7ee4:	62 70       	CMP       R6, R2
    7ee6:	09 f9       	JLS       $+9                   ;->0x7ef8
    7ee8:	50 70       	CMP       R5, R0
    7eea:	fa f1       	JNZ       $-6                   ;->0x7ede
    7eec:	00 10       	MOV       R0, #0
    7eee:	00 68       	NOT       R0, R0
    7ef0:	04 04       	SJMP      $+4                   ;->0x7ef8
    7ef2:	00 38       	CMP       R0, #0
    7ef4:	dd f1       	JNZ       $-35                  ;->0x7eae
    7ef6:	e5 07       	SJMP      $-27                  ;->0x7ec0
    7ef8:	03 5e       	POP       {R6-R7}
    7efa:	1d 5c       	JMP       LR
    7efc:	ff ff 7f 00 	.long     0x007fffff ->008388607 

00007f00 <__truncdfsf2>:
    7f00:	03 5f       	PUSH      {R6-R7}
    7f02:	e8 30       	SUB       SP, #8
    7f04:	e0 85       	ST.W      [SP], R0
    7f06:	01 21       	ST.W      [SP + #1], R1
    7f08:	0e 82       	LD.W      R0, [SP]
    7f0a:	01 0c       	LD.W      R4, [SP + #1]
    7f0c:	41 41       	LD        R1, [PC + #65]        ;->0x8010  :=0xfffff
    7f0e:	4c d4       	ANL       R1, R4, R1
    7f10:	54 11       	MOV       R5, #20
    7f12:	5c dd       	LSR       R3, R4, R5
    7f14:	40 47       	LD        R7, [PC + #64]        ;->0x8014  :=0x7ff
    7f16:	db d5       	ANL       R3, R3, R7
    7f18:	5f 11       	MOV       R5, #31
    7f1a:	74 dd       	LSR       R6, R4, R5
    7f1c:	0b 7a       	LSL       R1, #3
    7f1e:	5d 11       	MOV       R5, #29
    7f20:	60 dd       	LSR       R4, R0, R5
    7f22:	09 d7       	ORL       R1, R1, R4
    7f24:	53 10       	MOV       R5, #3
    7f26:	50 db       	LSL       R2, R0, R5
    7f28:	6b c0       	ADD       R5, R3, #1
    7f2a:	fd d5       	ANL       R7, R5, R7
    7f2c:	71 38       	CMP       R7, #1
    7f2e:	37 fd       	JLE       $+55                  ;->0x7f9c
    7f30:	3a 44       	LD        R4, [PC + #58]        ;->0x8018  :=0x380
    7f32:	23 c7       	SUB       R4, R3, R4
    7f34:	5e 1f       	MOV       R5, #254
    7f36:	45 70       	CMP       R4, R5
    7f38:	43 fc       	JGT       $+67                  ;->0x7fbe
    7f3a:	40 38       	CMP       R4, #0
    7f3c:	26 fc       	JGT       $+38                  ;->0x7f88
    7f3e:	56 11       	MOV       R5, #22
    7f40:	55 68       	NOT       R5, R5
    7f42:	45 70       	CMP       R4, R5
    7f44:	40 fb       	JLT       $+64                  ;->0x7fc4
    7f46:	0f 49       	SET       R1, #23
    7f48:	35 44       	LD        R4, [PC + #53]        ;->0x801c  :=0x39e
    7f4a:	e4 c6       	SUB       R4, R4, R3
    7f4c:	35 45       	LD        R5, [PC + #53]        ;->0x8020  :=0x37e
    7f4e:	4f 39       	CMP       R4, #31
    7f50:	0c fc       	JGT       $+12                  ;->0x7f68
    7f52:	5b c7       	SUB       R3, R3, R5
    7f54:	02 dd       	LSR       R0, R2, R4
    7f56:	c9 da       	LSL       R1, R1, R3
    7f58:	d2 da       	LSL       R2, R2, R3
    7f5a:	40 10       	MOV       R4, #0
    7f5c:	ac c6       	SUB       R5, R4, R2
    7f5e:	95 d6       	ORL       R2, R5, R2
    7f60:	97 7d       	LSR       R2, #31
    7f62:	a9 d6       	ORL       R5, R1, R2
    7f64:	2d d6       	ORL       R5, R5, R0
    7f66:	31 04       	SJMP      $+49                  ;->0x7fc8
    7f68:	ed c6       	SUB       R5, R5, R3
    7f6a:	79 dd       	LSR       R7, R1, R5
    7f6c:	00 10       	MOV       R0, #0
    7f6e:	40 3a       	CMP       R4, #32
    7f70:	04 f0       	JZ        $+4                   ;->0x7f78
    7f72:	2d 40       	LD        R0, [PC + #45]        ;->0x8024  :=0x35e
    7f74:	1b c6       	SUB       R3, R3, R0
    7f76:	c1 da       	LSL       R0, R1, R3
    7f78:	90 d6       	ORL       R2, R0, R2
    7f7a:	40 10       	MOV       R4, #0
    7f7c:	ac c6       	SUB       R5, R4, R2
    7f7e:	95 d6       	ORL       R2, R5, R2
    7f80:	3f 11       	MOV       R3, #31
    7f82:	ea dc       	LSR       R5, R2, R3
    7f84:	ed d7       	ORL       R5, R5, R7
    7f86:	21 04       	SJMP      $+33                  ;->0x7fc8
    7f88:	95 7d       	LSR       R2, #29
    7f8a:	0b 7a       	LSL       R1, #3
    7f8c:	06 7a       	LSL       R0, #6
    7f8e:	50 10       	MOV       R5, #0
    7f90:	2d c6       	SUB       R5, R5, R0
    7f92:	05 d6       	ORL       R0, R5, R0
    7f94:	87 7d       	LSR       R0, #31
    7f96:	29 d6       	ORL       R5, R1, R0
    7f98:	ad d6       	ORL       R5, R5, R2
    7f9a:	17 04       	SJMP      $+23                  ;->0x7fc8
    7f9c:	91 d6       	ORL       R2, R1, R2
    7f9e:	30 38       	CMP       R3, #0
    7fa0:	07 f1       	JNZ       $+7                   ;->0x7fae
    7fa2:	51 10       	MOV       R5, #1
    7fa4:	83 58       	MOV       R4, R3
    7fa6:	20 38       	CMP       R2, #0
    7fa8:	10 f1       	JNZ       $+16                  ;->0x7fc8
    7faa:	a3 58       	MOV       R5, R3
    7fac:	0e 04       	SJMP      $+14                  ;->0x7fc8
    7fae:	50 10       	MOV       R5, #0
    7fb0:	4f 1f       	MOV       R4, #255
    7fb2:	25 70       	CMP       R2, R5
    7fb4:	0a f0       	JZ        $+10                  ;->0x7fc8
    7fb6:	33 10       	MOV       R3, #3
    7fb8:	e9 da       	LSL       R5, R1, R3
    7fba:	a9 49       	SET       R5, #25
    7fbc:	06 04       	SJMP      $+6                   ;->0x7fc8
    7fbe:	50 10       	MOV       R5, #0
    7fc0:	4f 1f       	MOV       R4, #255
    7fc2:	03 04       	SJMP      $+3                   ;->0x7fc8
    7fc4:	51 10       	MOV       R5, #1
    7fc6:	40 10       	MOV       R4, #0
    7fc8:	37 10       	MOV       R3, #7
    7fca:	dd d4       	ANL       R3, R5, R3
    7fcc:	06 f0       	JZ        $+6                   ;->0x7fd8
    7fce:	3f 10       	MOV       R3, #15
    7fd0:	dd d4       	ANL       R3, R5, R3
    7fd2:	34 38       	CMP       R3, #4
    7fd4:	02 f0       	JZ        $+2                   ;->0x7fd8
    7fd6:	2d c1       	ADD       R5, R5, #4
    7fd8:	31 10       	MOV       R3, #1
    7fda:	9a 7b       	LSL       R3, #26
    7fdc:	dd d4       	ANL       R3, R5, R3
    7fde:	08 f0       	JZ        $+8                   ;->0x7fee
    7fe0:	64 c0       	ADD       R4, R4, #1
    7fe2:	3f 1f       	MOV       R3, #255
    7fe4:	43 70       	CMP       R4, R3
    7fe6:	03 f0       	JZ        $+3                   ;->0x7fec
    7fe8:	aa 4b       	CLR       R5, #26
    7fea:	02 04       	SJMP      $+2                   ;->0x7fee
    7fec:	50 10       	MOV       R5, #0
    7fee:	2b 7c       	LSR       R5, #3
    7ff0:	3f 1f       	MOV       R3, #255
    7ff2:	43 70       	CMP       R4, R3
    7ff4:	04 f1       	JNZ       $+4                   ;->0x7ffc
    7ff6:	50 38       	CMP       R5, #0
    7ff8:	02 f0       	JZ        $+2                   ;->0x7ffc
    7ffa:	2e 49       	SET       R5, #22
    7ffc:	44 d1       	ZXT.B     R4, R4
    7ffe:	27 7b       	LSL       R4, #23
    8000:	0a 40       	LD        R0, [PC + #10]        ;->0x8028  :=0x7fffff
    8002:	2d d4       	ANL       R5, R5, R0
    8004:	b7 7b       	LSL       R6, #31
    8006:	05 d7       	ORL       R0, R5, R4
    8008:	80 d7       	ORL       R0, R0, R6
    800a:	e8 28       	ADD       SP, #8
    800c:	03 5e       	POP       {R6-R7}
    800e:	1d 5c       	JMP       LR
    8010:	ff ff 0f 00 	.long     0x000fffff ->001048575 
    8014:	ff 07 00 00 	.long     0x000007ff ->000002047  [!!!@2@:SJMP      $-1                   ;->0x8012	@@: NOP      
    8018:	80 03 00 00 	.long     0x00000380 ->000000896  [!!!@4@:JMP       $-8388608             ;->0xff008018
    801c:	9e 03 00 00 	.long     0x0000039e ->000000926  [!!!@4@:JMP       $-6422528             ;->0xff3c801c
    8020:	7e 03 00 00 	.long     0x0000037e ->000000894  [!!!@4@:JMP       $+8257536             ;->0xfc8020
    8024:	5e 03 00 00 	.long     0x0000035e ->000000862  [!!!@4@:JMP       $+6160384             ;->0xbc8024
    8028:	ff ff 7f 00 	.long     0x007fffff ->008388607 

0000802c <__init_class_end>:
    802c:	4e 6f       	ROR       R4, SP
    802e:	76 20       	ST.W      [SP + #118], R0
    8030:	32 35       	SUB       R3, #82
    8032:	20 32       	SUB       R2, #32
    8034:	30 32       	SUB       R3, #32
    8036:	30 31       	SUB       R3, #16
    8038:	36 3a       	CMP       R3, #38
    803a:	34 39       	CMP       R3, #20
    803c:	3a 30       	SUB       R3, #10
    803e:	38 00       	.short    0x0038

00008040 <parameterIdTable>:
    8040:	01 00 00 00 60 1e 00 10 00 00 00 00 00 00 00 00     ....`...........

00008050 <blockFunctionTable>:
    8050:	ff ff 00 00 cc 6c 00 00 4c 6c 00 00 04 6f 00 00     .....l..Ll...o..
    8060:	b0 6f 00 00 62 75 00 00 00 00 00 00 00 00 00 00     .o..bu..........
	...

00008080 <ctype_tab>:
    8080:	00 80 80 80 80 80 80 80 80 80 40 40 40 40 40 80     ..........@@@@@.
    8090:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    80a0:	80 04 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    80b0:	08 21 21 21 21 21 21 21 21 21 21 08 08 08 08 08     .!!!!!!!!!!.....
    80c0:	08 08 03 03 03 03 03 03 02 02 02 02 02 02 02 02     ................
    80d0:	02 02 02 02 02 02 02 02 02 02 02 02 08 08 08 08     ................
    80e0:	08 08 11 11 11 11 11 11 10 10 10 10 10 10 10 10     ................
    80f0:	10 10 10 10 10 10 10 10 10 10 10 10 08 08 08 08     ................
    8100:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section .data:

10000000 <adc_result_calc>:
adc_result_calc():
..\driver\driver_adc.c:187


volatile int16_t adc_buf[12];
void __attribute__((section(".indata"))) adc_result_calc(void)
{
	adc_buf[0] = ADC0_SFR->HPDATA0;  //Ia
10000000:	33 45       	LD        R5, [PC + #51]        ;->0x100000cc  :=0x40000580
10000002:	6d 9a       	LD.W      R5, [R5 + #9]
10000004:	55 d0       	ZXT.H     R5, R5
10000006:	33 44       	LD        R4, [PC + #51]        ;->0x100000d0  :=0x10003f04
10000008:	45 84       	ST.H      [R4], R5
..\driver\driver_adc.c:188
	adc_buf[1] = ADC0_SFR->HPDATA1;  //Vu
1000000a:	31 45       	LD        R5, [PC + #49]        ;->0x100000cc  :=0x40000580
1000000c:	ad 9a       	LD.W      R5, [R5 + #10]
1000000e:	55 d0       	ZXT.H     R5, R5
10000010:	30 44       	LD        R4, [PC + #48]        ;->0x100000d0  :=0x10003f04
10000012:	65 b0       	ST.H      [R4 + #1], R5
..\driver\driver_adc.c:189
	adc_buf[2] = ADC0_SFR->HPDATA2;  //Vm
10000014:	2e 45       	LD        R5, [PC + #46]        ;->0x100000cc  :=0x40000580
10000016:	ed 9a       	LD.W      R5, [R5 + #11]
10000018:	55 d0       	ZXT.H     R5, R5
1000001a:	2e 44       	LD        R4, [PC + #46]        ;->0x100000d0  :=0x10003f04
1000001c:	a5 b0       	ST.H      [R4 + #2], R5
..\driver\driver_adc.c:190
	adc_buf[3] = ADC0_SFR->HPDATA3;  //Ibus
1000001e:	2c 45       	LD        R5, [PC + #44]        ;->0x100000cc  :=0x40000580
10000020:	2d 9b       	LD.W      R5, [R5 + #12]
10000022:	55 d0       	ZXT.H     R5, R5
10000024:	2b 44       	LD        R4, [PC + #43]        ;->0x100000d0  :=0x10003f04
10000026:	e5 b0       	ST.H      [R4 + #3], R5
..\driver\driver_adc.c:191
    adc_buf[4] = ADC1_SFR->HPDATA0;  //Ib
10000028:	2b 45       	LD        R5, [PC + #43]        ;->0x100000d4  :=0x40000600
1000002a:	6d 9a       	LD.W      R5, [R5 + #9]
1000002c:	55 d0       	ZXT.H     R5, R5
1000002e:	29 44       	LD        R4, [PC + #41]        ;->0x100000d0  :=0x10003f04
10000030:	25 b1       	ST.H      [R4 + #4], R5
..\driver\driver_adc.c:192
	adc_buf[5] = ADC1_SFR->HPDATA1;  //Vv
10000032:	29 45       	LD        R5, [PC + #41]        ;->0x100000d4  :=0x40000600
10000034:	ad 9a       	LD.W      R5, [R5 + #10]
10000036:	55 d0       	ZXT.H     R5, R5
10000038:	26 44       	LD        R4, [PC + #38]        ;->0x100000d0  :=0x10003f04
1000003a:	65 b1       	ST.H      [R4 + #5], R5
..\driver\driver_adc.c:193
	adc_buf[6] = ADC1_SFR->HPDATA2;  //Vbus
1000003c:	26 45       	LD        R5, [PC + #38]        ;->0x100000d4  :=0x40000600
1000003e:	ed 9a       	LD.W      R5, [R5 + #11]
10000040:	55 d0       	ZXT.H     R5, R5
10000042:	24 44       	LD        R4, [PC + #36]        ;->0x100000d0  :=0x10003f04
10000044:	a5 b1       	ST.H      [R4 + #6], R5
..\driver\driver_adc.c:194
	adc_buf[7] = ADC1_SFR->HPDATA3;  //Ibus_avg
10000046:	24 45       	LD        R5, [PC + #36]        ;->0x100000d4  :=0x40000600
10000048:	2d 9b       	LD.W      R5, [R5 + #12]
1000004a:	55 d0       	ZXT.H     R5, R5
1000004c:	21 44       	LD        R4, [PC + #33]        ;->0x100000d0  :=0x10003f04
1000004e:	e5 b1       	ST.H      [R4 + #7], R5
..\driver\driver_adc.c:195
    adc_buf[8] = ADC2_SFR->HPDATA0;  //Ic
10000050:	22 45       	LD        R5, [PC + #34]        ;->0x100000d8  :=0x40000680
10000052:	6d 9a       	LD.W      R5, [R5 + #9]
10000054:	55 d0       	ZXT.H     R5, R5
10000056:	1f 44       	LD        R4, [PC + #31]        ;->0x100000d0  :=0x10003f04
10000058:	25 b2       	ST.H      [R4 + #8], R5
..\driver\driver_adc.c:196
	adc_buf[9] = ADC2_SFR->HPDATA1;  //Vw
1000005a:	20 45       	LD        R5, [PC + #32]        ;->0x100000d8  :=0x40000680
1000005c:	ad 9a       	LD.W      R5, [R5 + #10]
1000005e:	55 d0       	ZXT.H     R5, R5
10000060:	1c 44       	LD        R4, [PC + #28]        ;->0x100000d0  :=0x10003f04
10000062:	65 b2       	ST.H      [R4 + #9], R5
..\driver\driver_adc.c:197
	adc_buf[10] = ADC2_SFR->HPDATA2; //pot
10000064:	1d 45       	LD        R5, [PC + #29]        ;->0x100000d8  :=0x40000680
10000066:	ed 9a       	LD.W      R5, [R5 + #11]
10000068:	55 d0       	ZXT.H     R5, R5
1000006a:	1a 44       	LD        R4, [PC + #26]        ;->0x100000d0  :=0x10003f04
1000006c:	a5 b2       	ST.H      [R4 + #10], R5
..\driver\driver_adc.c:200
	//adc_buf[11] = ADC2_SFR->HPDATA3;
    //transitions
    adc_data.Ia_pu = adc_buf[0];
1000006e:	19 45       	LD        R5, [PC + #25]        ;->0x100000d0  :=0x10003f04
10000070:	55 81       	LD.H      R5, [R5]
10000072:	55 d0       	ZXT.H     R5, R5
10000074:	1a 44       	LD        R4, [PC + #26]        ;->0x100000dc  :=0x10003ee0
10000076:	a5 b1       	ST.H      [R4 + #6], R5
..\driver\driver_adc.c:201
    adc_data.Ib_pu = adc_buf[4];
10000078:	16 45       	LD        R5, [PC + #22]        ;->0x100000d0  :=0x10003f04
1000007a:	2d a9       	LD.H      R5, [R5 + #4]
1000007c:	55 d0       	ZXT.H     R5, R5
1000007e:	18 44       	LD        R4, [PC + #24]        ;->0x100000dc  :=0x10003ee0
10000080:	e5 b1       	ST.H      [R4 + #7], R5
..\driver\driver_adc.c:203
//    adc_data.Ic_pu = adc_buf[0];
    adc_data.Vu_pu = adc_buf[1];
10000082:	14 45       	LD        R5, [PC + #20]        ;->0x100000d0  :=0x10003f04
10000084:	6d a8       	LD.H      R5, [R5 + #1]
10000086:	55 d0       	ZXT.H     R5, R5
10000088:	15 44       	LD        R4, [PC + #21]        ;->0x100000dc  :=0x10003ee0
1000008a:	65 b2       	ST.H      [R4 + #9], R5
..\driver\driver_adc.c:204
    adc_data.Vv_pu = adc_buf[5];
1000008c:	11 45       	LD        R5, [PC + #17]        ;->0x100000d0  :=0x10003f04
1000008e:	6d a9       	LD.H      R5, [R5 + #5]
10000090:	55 d0       	ZXT.H     R5, R5
10000092:	13 44       	LD        R4, [PC + #19]        ;->0x100000dc  :=0x10003ee0
10000094:	a5 b2       	ST.H      [R4 + #10], R5
..\driver\driver_adc.c:205
    adc_data.Vw_pu = adc_buf[9];
10000096:	0f 45       	LD        R5, [PC + #15]        ;->0x100000d0  :=0x10003f04
10000098:	6d aa       	LD.H      R5, [R5 + #9]
1000009a:	55 d0       	ZXT.H     R5, R5
1000009c:	10 44       	LD        R4, [PC + #16]        ;->0x100000dc  :=0x10003ee0
1000009e:	e5 b2       	ST.H      [R4 + #11], R5
..\driver\driver_adc.c:206
    adc_data.Vm_pu = adc_buf[8];
100000a0:	0c 45       	LD        R5, [PC + #12]        ;->0x100000d0  :=0x10003f04
100000a2:	2d aa       	LD.H      R5, [R5 + #8]
100000a4:	55 d0       	ZXT.H     R5, R5
100000a6:	0e 44       	LD        R4, [PC + #14]        ;->0x100000dc  :=0x10003ee0
100000a8:	25 b3       	ST.H      [R4 + #12], R5
..\driver\driver_adc.c:207
    adc_data.Vbus_pu = adc_buf[6];
100000aa:	0a 45       	LD        R5, [PC + #10]        ;->0x100000d0  :=0x10003f04
100000ac:	ad a9       	LD.H      R5, [R5 + #6]
100000ae:	55 d0       	ZXT.H     R5, R5
100000b0:	0b 44       	LD        R4, [PC + #11]        ;->0x100000dc  :=0x10003ee0
100000b2:	65 b3       	ST.H      [R4 + #13], R5
..\driver\driver_adc.c:208
    adc_data.pot_pu = adc_buf[10];
100000b4:	07 45       	LD        R5, [PC + #7]         ;->0x100000d0  :=0x10003f04
100000b6:	ad aa       	LD.H      R5, [R5 + #10]
100000b8:	55 d0       	ZXT.H     R5, R5
100000ba:	09 44       	LD        R4, [PC + #9]         ;->0x100000dc  :=0x10003ee0
100000bc:	25 b4       	ST.H      [R4 + #16], R5
..\driver\driver_adc.c:209
    adc_data.Ibus_pu = adc_buf[3];
100000be:	05 45       	LD        R5, [PC + #5]         ;->0x100000d0  :=0x10003f04
100000c0:	ed a8       	LD.H      R5, [R5 + #3]
100000c2:	55 d0       	ZXT.H     R5, R5
100000c4:	06 44       	LD        R4, [PC + #6]         ;->0x100000dc  :=0x10003ee0
100000c6:	a5 b3       	ST.H      [R4 + #14], R5
..\driver\driver_adc.c:211
   // adc_data.Ibus_avg_pu = adc_buf[7];
}
100000c8:	1d 5c       	JMP       LR
100000ca:	00 00       	NOP      NOP      
100000cc:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x100003cc	@@: LD        R0, [PC + #0]         ;->0x100000cc  :=0x40000580
100000d0:	04 3f 00 10 	.long     0x10003f04 ->268451588  [!!!@2@:CMP       R0, #116	@@: MOV       R0, #0
100000d4:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0xffffcd4	@@: LD        R0, [PC + #0]         ;->0x100000d4  :=0x40000600
100000d8:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0xffffdd8	@@: LD        R0, [PC + #0]         ;->0x100000d8  :=0x40000680
100000dc:	e0 3e 00 10 	.long     0x10003ee0 ->268451552  [!!!@2@:CMP       SP, #96	@@: MOV       R0, #0

100000e0 <motor_control_isr>:
motor_control_isr():
..\application\control.c:10

volatile SYS_CONTROL_TYPE sys_control;
volatile CONTROL_PARAM_TYPE control_param;

void __attribute__((section(".indata"))) motor_control_isr(void)
{
100000e0:	2d 5d       	PUSH      LR
..\application\control.c:11
	adc_result_calc();
100000e2:	14 45       	LD        R5, [PC + #20]        ;->0x10000130  :=0x10000000
100000e4:	05 5c       	LJMP      R5
..\application\control.c:12
	if(sys_control.sys_enable_flag==TRUE)
100000e6:	14 45       	LD        R5, [PC + #20]        ;->0x10000134  :=0x10003f64
100000e8:	55 80       	LD.B      R5, [R5]
100000ea:	55 d1       	ZXT.B     R5, R5
100000ec:	51 38       	CMP       R5, #1
100000ee:	1e f1       	JNZ       $+30                  ;->0x1000012a
..\application\control.c:14
    {
        ParkParm.qIa = adc_data.Ia_pu;
100000f0:	12 45       	LD        R5, [PC + #18]        ;->0x10000138  :=0x10003ee0
100000f2:	ad a9       	LD.H      R5, [R5 + #6]
100000f4:	55 d0       	ZXT.H     R5, R5
100000f6:	12 44       	LD        R4, [PC + #18]        ;->0x1000013c  :=0x10003fb2
100000f8:	e5 b0       	ST.H      [R4 + #3], R5
..\application\control.c:15
        ParkParm.qIb = adc_data.Ib_pu;
100000fa:	10 45       	LD        R5, [PC + #16]        ;->0x10000138  :=0x10003ee0
100000fc:	ed a9       	LD.H      R5, [R5 + #7]
100000fe:	55 d0       	ZXT.H     R5, R5

10000100 <__Heap_length__>:
10000100:	0f 44       	LD        R4, [PC + #15]        ;->0x1000013c  :=0x10003fb2
10000102:	25 b1       	ST.H      [R4 + #4], R5
..\application\control.c:16
        over_current_check();
10000104:	0f 45       	LD        R5, [PC + #15]        ;->0x10000140  :=0x4bfc
10000106:	05 5c       	LJMP      R5
..\application\control.c:17
        switch(sys_control.state_mode)
10000108:	0b 45       	LD        R5, [PC + #11]        ;->0x10000134  :=0x10003f64
1000010a:	6d 98       	LD.W      R5, [R5 + #1]
1000010c:	2d cd       	SUB       R5, R5, #4
1000010e:	53 38       	CMP       R5, #3
10000110:	0c f8       	JHI       $+12                  ;->0x10000128
..\application\control.c:23
        {
        case STATE_RUN_OPEN_DEBUG:
        case STATE_RUN_OPEN_LOOP:
        case STATE_RUN_CURRENT_LOOP:
        case STATE_RUN_SPEED_LOOP:
		     ClarkePark();
10000112:	0d 45       	LD        R5, [PC + #13]        ;->0x10000144  :=0x10000748
10000114:	05 5c       	LJMP      R5
..\application\control.c:24
		     CalculateParkAngle();
10000116:	0d 45       	LD        R5, [PC + #13]        ;->0x10000148  :=0x100004a8
10000118:	05 5c       	LJMP      R5
..\application\control.c:25
		     DoControl();
1000011a:	0d 45       	LD        R5, [PC + #13]        ;->0x1000014c  :=0x10000158
1000011c:	05 5c       	LJMP      R5
..\application\control.c:26
		     SinCos();
1000011e:	0d 45       	LD        R5, [PC + #13]        ;->0x10000150  :=0x10000bd8
10000120:	05 5c       	LJMP      R5
..\application\control.c:27
		     CalcSVGen();
10000122:	0d 45       	LD        R5, [PC + #13]        ;->0x10000154  :=0x100005f4
10000124:	05 5c       	LJMP      R5
..\application\control.c:28
		     break;
10000126:	02 04       	SJMP      $+2                   ;->0x1000012a
..\application\control.c:29
        default: break;
10000128:	00 00       	NOP      NOP      
..\application\control.c:32
        }
    }
}
1000012a:	0d 5d       	POP       LR
1000012c:	1d 5c       	JMP       LR
1000012e:	00 00       	NOP      NOP      
10000130:	00 00 00 10 	.long     0x10000000 ->268435456  [!!!@2@:NOP      	@@: MOV       R0, #0
10000134:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0
10000138:	e0 3e 00 10 	.long     0x10003ee0 ->268451552  [!!!@2@:CMP       SP, #96	@@: MOV       R0, #0
1000013c:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
10000140:	fc 4b 00 00 	.long     0x00004bfc ->000019452  [!!!@2@:CLR       PC, #28	@@: NOP      
10000144:	48 07 00 10 	.long     0x10000748 ->268437320  [!!!@2@:SJMP      $-184                 ;->0xfffffd4	@@: MOV       R0, #0
10000148:	a8 04 00 10 	.long     0x100004a8 ->268436648  [!!!@2@:SJMP      $+168                 ;->0x10000298	@@: MOV       R0, #0
1000014c:	58 01 00 10 	.long     0x10000158 ->268435800  [!!!@2@:CMN       R5, R8	@@: MOV       R0, #0
10000150:	d8 0b 00 10 	.long     0x10000bd8 ->268438488  [!!!@2@:LD.W      R3, [SP + #216]	@@: MOV       R0, #0
10000154:	f4 05 00 10 	.long     0x100005f4 ->268436980  [!!!@2@:SJMP      $+500                 ;->0x1000053c	@@: MOV       R0, #0

10000158 <DoControl>:
DoControl():
..\application\control.c:36


void __attribute__((section(".indata"))) DoControl( void )
{
10000158:	2d 5d       	PUSH      LR
..\application\control.c:38
    //state process
    if(sys_control.state_mode!=STATE_RUN_OPEN_DEBUG)
1000015a:	1e 45       	LD        R5, [PC + #30]        ;->0x100001d0  :=0x10003f64
1000015c:	6d 98       	LD.W      R5, [R5 + #1]
1000015e:	54 38       	CMP       R5, #4
10000160:	36 f0       	JZ        $+54                  ;->0x100001cc
..\application\control.c:40
    {
   	   PIParmD.qErr = ParkParm.qVdRef - ParkParm.qId;//测量值
10000162:	1d 45       	LD        R5, [PC + #29]        ;->0x100001d4  :=0x10003fb2
10000164:	2d ac       	LD.H      R5, [R5 + #16]
10000166:	55 d0       	ZXT.H     R5, R5
10000168:	45 61       	SXT.H     R4, R5
1000016a:	1b 45       	LD        R5, [PC + #27]        ;->0x100001d4  :=0x10003fb2
1000016c:	ed a9       	LD.H      R5, [R5 + #7]
1000016e:	55 d0       	ZXT.H     R5, R5
10000170:	55 61       	SXT.H     R5, R5
10000172:	64 c7       	SUB       R4, R4, R5
10000174:	19 45       	LD        R5, [PC + #25]        ;->0x100001d8  :=0x10003fd8
10000176:	54 85       	ST.W      [R5], R4
..\application\control.c:41
       CalcPI(&PIParmD);
10000178:	18 40       	LD        R0, [PC + #24]        ;->0x100001d8  :=0x10003fd8
1000017a:	19 45       	LD        R5, [PC + #25]        ;->0x100001dc  :=0x100007a4
1000017c:	05 5c       	LJMP      R5
..\application\control.c:42
	   ParkParm.qVd = PIParmD.qOut;
1000017e:	17 45       	LD        R5, [PC + #23]        ;->0x100001d8  :=0x10003fd8
10000180:	ad 99       	LD.W      R5, [R5 + #6]
10000182:	55 d0       	ZXT.H     R5, R5
10000184:	14 44       	LD        R4, [PC + #20]        ;->0x100001d4  :=0x10003fb2
10000186:	65 b2       	ST.H      [R4 + #9], R5
..\application\control.c:43
	   Q15SQRT_VqMax(USER_MAX_VS_MAG*USER_MAX_VS_MAG-ParkParm.qVd*ParkParm.qVd);
10000188:	13 45       	LD        R5, [PC + #19]        ;->0x100001d4  :=0x10003fb2
1000018a:	6d aa       	LD.H      R5, [R5 + #9]
1000018c:	55 d0       	ZXT.H     R5, R5
1000018e:	45 61       	SXT.H     R4, R5
10000190:	11 45       	LD        R5, [PC + #17]        ;->0x100001d4  :=0x10003fb2
10000192:	6d aa       	LD.H      R5, [R5 + #9]
10000194:	55 d0       	ZXT.H     R5, R5
10000196:	55 61       	SXT.H     R5, R5
10000198:	6c cb       	MULS      R5, R4, R5
1000019a:	00 00       	NOP      NOP      
1000019c:	11 44       	LD        R4, [PC + #17]        ;->0x100001e0  :=0x3220a440
1000019e:	6c c7       	SUB       R5, R4, R5
100001a0:	05 58       	MOV       R0, R5
100001a2:	11 45       	LD        R5, [PC + #17]        ;->0x100001e4  :=0x10000b5c
100001a4:	05 5c       	LJMP      R5
..\application\control.c:44
       PIParmQ.qErr = ParkParm.qVqRef - ParkParm.qIq;//测量值
100001a6:	0c 45       	LD        R5, [PC + #12]        ;->0x100001d4  :=0x10003fb2
100001a8:	6d ac       	LD.H      R5, [R5 + #17]
100001aa:	55 d0       	ZXT.H     R5, R5
100001ac:	45 61       	SXT.H     R4, R5
100001ae:	0a 45       	LD        R5, [PC + #10]        ;->0x100001d4  :=0x10003fb2
100001b0:	2d aa       	LD.H      R5, [R5 + #8]
100001b2:	55 d0       	ZXT.H     R5, R5
100001b4:	55 61       	SXT.H     R5, R5
100001b6:	64 c7       	SUB       R4, R4, R5
100001b8:	0c 45       	LD        R5, [PC + #12]        ;->0x100001e8  :=0x10003ff4
100001ba:	54 85       	ST.W      [R5], R4
..\application\control.c:45
       CalcPI(&PIParmQ);
100001bc:	0b 40       	LD        R0, [PC + #11]        ;->0x100001e8  :=0x10003ff4
100001be:	08 45       	LD        R5, [PC + #8]         ;->0x100001dc  :=0x100007a4
100001c0:	05 5c       	LJMP      R5
..\application\control.c:46
       ParkParm.qVq = PIParmQ.qOut;
100001c2:	0a 45       	LD        R5, [PC + #10]        ;->0x100001e8  :=0x10003ff4
100001c4:	ad 99       	LD.W      R5, [R5 + #6]
100001c6:	55 d0       	ZXT.H     R5, R5
100001c8:	03 44       	LD        R4, [PC + #3]         ;->0x100001d4  :=0x10003fb2
100001ca:	a5 b2       	ST.H      [R4 + #10], R5
..\application\control.c:48
	}
}
100001cc:	0d 5d       	POP       LR
100001ce:	1d 5c       	JMP       LR
100001d0:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0
100001d4:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
100001d8:	d8 3f 00 10 	.long     0x10003fd8 ->268451800  [!!!@2@:CMP       LR, #120	@@: MOV       R0, #0
100001dc:	a4 07 00 10 	.long     0x100007a4 ->268437412  [!!!@2@:SJMP      $-92                  ;->0x10000124	@@: MOV       R0, #0
100001e0:	40 a4 20 32 	.long     0x3220a440 ->841000000  [!!!@2@:ST.W      [R0 + #17], R0	@@: SUB       R2, #32
100001e4:	5c 0b 00 10 	.long     0x10000b5c ->268438364  [!!!@2@:LD.W      R3, [SP + #92]	@@: MOV       R0, #0
100001e8:	f4 3f 00 10 	.long     0x10003ff4 ->268451828  [!!!@2@:CMP       PC, #116	@@: MOV       R0, #0

100001ec <run_speed_process>:
run_speed_process():
..\application\speed.c:57

void __attribute__((section(".indata"))) run_speed_process(void)
{
100001ec:	2d 5d       	PUSH      LR
..\application\speed.c:59
	//speed command process
	speed_data.omega_give_ref_pu = (speed_data.speed_give*speed_data.speed_omega_q15_coef)>>10;
100001ee:	47 45       	LD        R5, [PC + #71]        ;->0x10000308  :=0x10004060
100001f0:	55 82       	LD.W      R5, [R5]
100001f2:	46 44       	LD        R4, [PC + #70]        ;->0x10000308  :=0x10004060
100001f4:	64 9b       	LD.W      R4, [R4 + #13]
100001f6:	2d cb       	MULS      R5, R5, R4
100001f8:	00 00       	NOP      NOP      
100001fa:	3a 10       	MOV       R3, #10
100001fc:	e5 de       	ASR       R4, R5, R3
100001fe:	43 45       	LD        R5, [PC + #67]        ;->0x10000308  :=0x10004060
10000200:	ec a0       	ST.W      [R5 + #3], R4
..\application\speed.c:61
	//speed_limit
	if(control_param.motor_direction==USER_MOTOR_RUN_CW)
10000202:	43 45       	LD        R5, [PC + #67]        ;->0x1000030c  :=0x10003f70
10000204:	50 2a       	ADD       R5, #32
10000206:	55 80       	LD.B      R5, [R5]
10000208:	55 d1       	ZXT.B     R5, R5
1000020a:	50 38       	CMP       R5, #0
1000020c:	17 f1       	JNZ       $+23                  ;->0x1000023a
..\application\speed.c:63
	{
	    if(speed_data.omega_give_ref_pu>speed_data.omega_max_pu)
1000020e:	3f 45       	LD        R5, [PC + #63]        ;->0x10000308  :=0x10004060
10000210:	e5 98       	LD.W      R4, [R5 + #3]
10000212:	3e 45       	LD        R5, [PC + #62]        ;->0x10000308  :=0x10004060
10000214:	ad 9a       	LD.W      R5, [R5 + #10]
10000216:	45 70       	CMP       R4, R5
10000218:	06 fd       	JLE       $+6                   ;->0x10000224
..\application\speed.c:65
	    {
		    speed_data.omega_give_ref_pu = speed_data.omega_max_pu;
1000021a:	3c 45       	LD        R5, [PC + #60]        ;->0x10000308  :=0x10004060
1000021c:	a5 9a       	LD.W      R4, [R5 + #10]
1000021e:	3b 45       	LD        R5, [PC + #59]        ;->0x10000308  :=0x10004060
10000220:	ec a0       	ST.W      [R5 + #3], R4
10000222:	29 04       	SJMP      $+41                  ;->0x10000274
..\application\speed.c:67
	    }
	    else if(speed_data.omega_give_ref_pu<speed_data.omega_min_pu)
10000224:	39 45       	LD        R5, [PC + #57]        ;->0x10000308  :=0x10004060
10000226:	e5 98       	LD.W      R4, [R5 + #3]
10000228:	38 45       	LD        R5, [PC + #56]        ;->0x10000308  :=0x10004060
1000022a:	6d 9a       	LD.W      R5, [R5 + #9]
1000022c:	45 70       	CMP       R4, R5
1000022e:	23 fa       	JGE       $+35                  ;->0x10000274
..\application\speed.c:69
	    {
		    speed_data.omega_give_ref_pu = speed_data.omega_min_pu;
10000230:	36 45       	LD        R5, [PC + #54]        ;->0x10000308  :=0x10004060
10000232:	65 9a       	LD.W      R4, [R5 + #9]
10000234:	35 45       	LD        R5, [PC + #53]        ;->0x10000308  :=0x10004060
10000236:	ec a0       	ST.W      [R5 + #3], R4
10000238:	1e 04       	SJMP      $+30                  ;->0x10000274
..\application\speed.c:74
	    }
	}
	else //CCW
	{
		if(speed_data.omega_give_ref_pu<(-speed_data.omega_max_pu))
1000023a:	34 45       	LD        R5, [PC + #52]        ;->0x10000308  :=0x10004060
1000023c:	e5 98       	LD.W      R4, [R5 + #3]
1000023e:	33 45       	LD        R5, [PC + #51]        ;->0x10000308  :=0x10004060
10000240:	9d 9a       	LD.W      R3, [R5 + #10]
10000242:	50 10       	MOV       R5, #0
10000244:	ed c6       	SUB       R5, R5, R3
10000246:	45 70       	CMP       R4, R5
10000248:	08 fa       	JGE       $+8                   ;->0x10000258
..\application\speed.c:76
		{
			speed_data.omega_give_ref_pu = -speed_data.omega_max_pu;
1000024a:	30 45       	LD        R5, [PC + #48]        ;->0x10000308  :=0x10004060
1000024c:	a5 9a       	LD.W      R4, [R5 + #10]
1000024e:	50 10       	MOV       R5, #0
10000250:	25 c7       	SUB       R4, R5, R4
10000252:	2e 45       	LD        R5, [PC + #46]        ;->0x10000308  :=0x10004060
10000254:	ec a0       	ST.W      [R5 + #3], R4
10000256:	0f 04       	SJMP      $+15                  ;->0x10000274
..\application\speed.c:78
		}
		else if(speed_data.omega_give_ref_pu>(-speed_data.omega_min_pu))
10000258:	2c 45       	LD        R5, [PC + #44]        ;->0x10000308  :=0x10004060
1000025a:	e5 98       	LD.W      R4, [R5 + #3]
1000025c:	2b 45       	LD        R5, [PC + #43]        ;->0x10000308  :=0x10004060
1000025e:	5d 9a       	LD.W      R3, [R5 + #9]
10000260:	50 10       	MOV       R5, #0
10000262:	ed c6       	SUB       R5, R5, R3
10000264:	45 70       	CMP       R4, R5
10000266:	07 fd       	JLE       $+7                   ;->0x10000274
..\application\speed.c:80
		{
			speed_data.omega_give_ref_pu = -speed_data.omega_min_pu;
10000268:	28 45       	LD        R5, [PC + #40]        ;->0x10000308  :=0x10004060
1000026a:	65 9a       	LD.W      R4, [R5 + #9]
1000026c:	50 10       	MOV       R5, #0
1000026e:	25 c7       	SUB       R4, R5, R4
10000270:	26 45       	LD        R5, [PC + #38]        ;->0x10000308  :=0x10004060
10000272:	ec a0       	ST.W      [R5 + #3], R4
..\application\speed.c:84
		}
	}
	//speed ACC control
	if((speed_data.omega_give_ref_pu-speed_data.omega_give_pu)>speed_data.omega_acc_pu)
10000274:	25 45       	LD        R5, [PC + #37]        ;->0x10000308  :=0x10004060
10000276:	e5 98       	LD.W      R4, [R5 + #3]
10000278:	24 45       	LD        R5, [PC + #36]        ;->0x10000308  :=0x10004060
1000027a:	2d 99       	LD.W      R5, [R5 + #4]
1000027c:	64 c7       	SUB       R4, R4, R5
1000027e:	23 45       	LD        R5, [PC + #35]        ;->0x10000308  :=0x10004060
10000280:	2d 9a       	LD.W      R5, [R5 + #8]
10000282:	45 70       	CMP       R4, R5
10000284:	09 fd       	JLE       $+9                   ;->0x10000296
..\application\speed.c:86
	{
		speed_data.omega_give_pu += speed_data.omega_acc_pu;
10000286:	21 45       	LD        R5, [PC + #33]        ;->0x10000308  :=0x10004060
10000288:	25 99       	LD.W      R4, [R5 + #4]
1000028a:	20 45       	LD        R5, [PC + #32]        ;->0x10000308  :=0x10004060
1000028c:	2d 9a       	LD.W      R5, [R5 + #8]
1000028e:	64 c3       	ADD       R4, R4, R5
10000290:	1e 45       	LD        R5, [PC + #30]        ;->0x10000308  :=0x10004060
10000292:	2c a1       	ST.W      [R5 + #4], R4
10000294:	11 04       	SJMP      $+17                  ;->0x100002b6
..\application\speed.c:88
	}
	else if((speed_data.omega_give_pu-speed_data.omega_give_ref_pu)>speed_data.omega_acc_pu)
10000296:	1d 45       	LD        R5, [PC + #29]        ;->0x10000308  :=0x10004060
10000298:	25 99       	LD.W      R4, [R5 + #4]
1000029a:	1c 45       	LD        R5, [PC + #28]        ;->0x10000308  :=0x10004060
1000029c:	ed 98       	LD.W      R5, [R5 + #3]
1000029e:	64 c7       	SUB       R4, R4, R5
100002a0:	1a 45       	LD        R5, [PC + #26]        ;->0x10000308  :=0x10004060
100002a2:	2d 9a       	LD.W      R5, [R5 + #8]
100002a4:	45 70       	CMP       R4, R5
100002a6:	08 fd       	JLE       $+8                   ;->0x100002b6
..\application\speed.c:90
	{
		speed_data.omega_give_pu -= speed_data.omega_acc_pu;
100002a8:	18 45       	LD        R5, [PC + #24]        ;->0x10000308  :=0x10004060
100002aa:	25 99       	LD.W      R4, [R5 + #4]
100002ac:	17 45       	LD        R5, [PC + #23]        ;->0x10000308  :=0x10004060
100002ae:	2d 9a       	LD.W      R5, [R5 + #8]
100002b0:	64 c7       	SUB       R4, R4, R5
100002b2:	16 45       	LD        R5, [PC + #22]        ;->0x10000308  :=0x10004060
100002b4:	2c a1       	ST.W      [R5 + #4], R4
..\application\speed.c:93
	}
	//speed PI control
	speed_data.omega_fbk_pu = ((int32_t)smc1.Omega*speed_data.omega_q15_coef)>>10;
100002b6:	17 45       	LD        R5, [PC + #23]        ;->0x10000310  :=0x1000402c
100002b8:	ed ad       	LD.H      R5, [R5 + #23]
100002ba:	55 d0       	ZXT.H     R5, R5
100002bc:	55 61       	SXT.H     R5, R5
100002be:	13 44       	LD        R4, [PC + #19]        ;->0x10000308  :=0x10004060
100002c0:	e4 99       	LD.W      R4, [R4 + #7]
100002c2:	2d cb       	MULS      R5, R5, R4
100002c4:	00 00       	NOP      NOP      
100002c6:	3a 10       	MOV       R3, #10
100002c8:	e5 de       	ASR       R4, R5, R3
100002ca:	10 45       	LD        R5, [PC + #16]        ;->0x10000308  :=0x10004060
100002cc:	6c a1       	ST.W      [R5 + #5], R4
..\application\speed.c:94
	PIParmW.qErr = speed_data.omega_give_pu - speed_data.omega_fbk_pu;
100002ce:	0f 45       	LD        R5, [PC + #15]        ;->0x10000308  :=0x10004060
100002d0:	25 99       	LD.W      R4, [R5 + #4]
100002d2:	0e 45       	LD        R5, [PC + #14]        ;->0x10000308  :=0x10004060
100002d4:	6d 99       	LD.W      R5, [R5 + #5]
100002d6:	64 c7       	SUB       R4, R4, R5
100002d8:	0f 45       	LD        R5, [PC + #15]        ;->0x10000314  :=0x10004010
100002da:	54 85       	ST.W      [R5], R4
..\application\speed.c:95
	CalcPI(&PIParmW);
100002dc:	0e 40       	LD        R0, [PC + #14]        ;->0x10000314  :=0x10004010
100002de:	0f 45       	LD        R5, [PC + #15]        ;->0x10000318  :=0x100007a4
100002e0:	05 5c       	LJMP      R5
..\application\speed.c:96
	ParkParm.qVqRef = PIParmW.qOut;
100002e2:	0d 45       	LD        R5, [PC + #13]        ;->0x10000314  :=0x10004010
100002e4:	ad 99       	LD.W      R5, [R5 + #6]
100002e6:	55 d0       	ZXT.H     R5, R5
100002e8:	0d 44       	LD        R4, [PC + #13]        ;->0x1000031c  :=0x10003fb2
100002ea:	65 b4       	ST.H      [R4 + #17], R5
..\application\speed.c:98
	//speed fbk
	speed_data.speed_fbk = ((int32_t)smc1.Omega<<10)/speed_data.speed_omega_coef;
100002ec:	09 45       	LD        R5, [PC + #9]         ;->0x10000310  :=0x1000402c
100002ee:	ed ad       	LD.H      R5, [R5 + #23]
100002f0:	55 d0       	ZXT.H     R5, R5
100002f2:	55 61       	SXT.H     R5, R5
100002f4:	3a 10       	MOV       R3, #10
100002f6:	e5 da       	LSL       R4, R5, R3
100002f8:	04 45       	LD        R5, [PC + #4]         ;->0x10000308  :=0x10004060
100002fa:	2d 9b       	LD.W      R5, [R5 + #12]
100002fc:	64 cf       	DIVS      R4, R4, R5
100002fe:	00 00       	NOP      NOP      
10000300:	02 45       	LD        R5, [PC + #2]         ;->0x10000308  :=0x10004060
10000302:	6c a0       	ST.W      [R5 + #1], R4
..\application\speed.c:99
}
10000304:	0d 5d       	POP       LR
10000306:	1d 5c       	JMP       LR
10000308:	60 40 00 10 	.long     0x10004060 ->268451936  [!!!@2@:LD        R0, [PC + #96]        ;->0x10000488  :=0xd055c76c	@@: MOV       R0, #0
1000030c:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
10000310:	2c 40 00 10 	.long     0x1000402c ->268451884  [!!!@2@:LD        R0, [PC + #44]        ;->0x100003c0  :=0xb57db5bd	@@: MOV       R0, #0
10000314:	10 40 00 10 	.long     0x10004010 ->268451856  [!!!@2@:LD        R0, [PC + #16]        ;->0x10000354  :=0x6155abee	@@: MOV       R0, #0
10000318:	a4 07 00 10 	.long     0x100007a4 ->268437412  [!!!@2@:SJMP      $-92                  ;->0x10000260	@@: MOV       R0, #0
1000031c:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0

10000320 <SMC_Position_Estimation>:
SMC_Position_Estimation():
..\application\angle_est.c:12

#include "application_init.h"


void __attribute__((section(".indata"))) SMC_Position_Estimation(SMC *s)
{
10000320:	87 5f       	PUSH      {R6-R8,LR}
10000322:	c0 58       	MOV       R6, R0
..\application\angle_est.c:13
	CalcEstI();//估算的Ialpha、Ibeta值
10000324:	41 45       	LD        R5, [PC + #65]        ;->0x10000428  :=0x100007e8
10000326:	05 5c       	LJMP      R5
..\application\angle_est.c:14
	CalcIError();//计算Ialpha、Ibeta的偏差值（估算-实际）
10000328:	41 45       	LD        R5, [PC + #65]        ;->0x1000042c  :=0x100008e2
1000032a:	05 5c       	LJMP      R5
..\application\angle_est.c:15
	if (Q15abs(s->IalphaError) < s->MaxSMCError)
1000032c:	46 ab       	LD.H      R0, [R6 + #13]
1000032e:	00 61       	SXT.H     R0, R0
10000330:	40 47       	LD        R7, [PC + #64]        ;->0x10000430  :=0x100005c4
10000332:	07 5c       	LJMP      R7
10000334:	ee ab       	LD.H      R5, [R6 + #15]
10000336:	55 61       	SXT.H     R5, R5
10000338:	05 70       	CMP       R0, R5
1000033a:	02 fa       	JGE       $+2                   ;->0x1000033e
1000033c:	96 04       	SJMP      $+150                 ;->0x10000468
..\application\angle_est.c:20
	{
		//如果处于滑动控制器的线性范围，那么矫正因数Zalpha将会和偏差IalphaError成比例
		CalcZalpha();
	}
	else if (s->IalphaError > 0)
1000033e:	6e ab       	LD.H      R5, [R6 + #13]
10000340:	55 61       	SXT.H     R5, R5
10000342:	50 38       	CMP       R5, #0
10000344:	02 fc       	JGT       $+2                   ;->0x10000348
10000346:	a5 04       	SJMP      $+165                 ;->0x10000490
..\application\angle_est.c:21
		s->Zalpha = s->Kslide;
10000348:	ae ab       	LD.H      R5, [R6 + #14]
1000034a:	55 d0       	ZXT.H     R5, R5
1000034c:	f5 b0       	ST.H      [R6 + #3], R5
..\application\angle_est.c:25
	else
		s->Zalpha = -s->Kslide;

	if(Q15abs(s->IbetaError) < s->MaxSMCError)
1000034e:	46 ac       	LD.H      R0, [R6 + #17]
10000350:	00 61       	SXT.H     R0, R0
10000352:	07 5c       	LJMP      R7
10000354:	ee ab       	LD.H      R5, [R6 + #15]
10000356:	55 61       	SXT.H     R5, R5
10000358:	05 70       	CMP       R0, R5
1000035a:	02 fa       	JGE       $+2                   ;->0x1000035e
1000035c:	90 04       	SJMP      $+144                 ;->0x1000047c
..\application\angle_est.c:30
	{
		// 如果处于滑动控制器的线性范围，那么矫正因数Zbeta将会和偏差IbetaError成比例
		CalcZbeta();// s->Zbeta = (s->Kslide * s->IbetaError) / s->MaxSMCError
	}
	else if (s->IbetaError > 0)
1000035e:	6e ac       	LD.H      R5, [R6 + #17]
10000360:	55 61       	SXT.H     R5, R5
10000362:	50 38       	CMP       R5, #0
10000364:	02 fc       	JGT       $+2                   ;->0x10000368
10000366:	8e 04       	SJMP      $+142                 ;->0x10000482
..\application\angle_est.c:31
		s->Zbeta = s->Kslide;
10000368:	ae ab       	LD.H      R5, [R6 + #14]
1000036a:	55 d0       	ZXT.H     R5, R5
1000036c:	b5 b2       	ST.H      [R6 + #10], R5
..\application\angle_est.c:35
	else
		s->Zbeta = -s->Kslide;

	CalcBEMF();
1000036e:	32 45       	LD        R5, [PC + #50]        ;->0x10000434  :=0x100009bc
10000370:	05 5c       	LJMP      R5
..\application\angle_est.c:37

	s->Theta = atan2CORDIC(-s->EalphaFinal,s->EbetaFinal);
10000372:	86 a8       	LD.H      R0, [R6 + #2]
10000374:	00 d0       	ZXT.H     R0, R0
10000376:	4e aa       	LD.H      R1, [R6 + #9]
10000378:	80 10       	MOV       R8, #0
1000037a:	a8 58       	MOV       R5, R8
1000037c:	05 c6       	SUB       R0, R5, R0
1000037e:	00 61       	SXT.H     R0, R0
10000380:	11 61       	SXT.H     R1, R1
10000382:	2e 45       	LD        R5, [PC + #46]        ;->0x10000438  :=0x583c
10000384:	05 5c       	LJMP      R5
10000386:	00 d0       	ZXT.H     R0, R0
10000388:	b0 b5       	ST.H      [R6 + #22], R0
..\application\angle_est.c:38
	control_param.accum_theta += (s->Theta-control_param.prev_theta);
1000038a:	2d 47       	LD        R7, [PC + #45]        ;->0x1000043c  :=0x10003f70
1000038c:	5f ad       	LD.H      R3, [R7 + #21]
1000038e:	33 d0       	ZXT.H     R3, R3
10000390:	ae ad       	LD.H      R5, [R6 + #22]
10000392:	55 d0       	ZXT.H     R5, R5
10000394:	27 ad       	LD.H      R4, [R7 + #20]
10000396:	ed c2       	ADD       R5, R5, R3
10000398:	2d c7       	SUB       R5, R5, R4
1000039a:	55 d0       	ZXT.H     R5, R5
1000039c:	7d b5       	ST.H      [R7 + #21], R5
..\application\angle_est.c:39
	control_param.prev_theta = s->Theta;
1000039e:	ae ad       	LD.H      R5, [R6 + #22]
100003a0:	55 d0       	ZXT.H     R5, R5
100003a2:	3d b5       	ST.H      [R7 + #20], R5
..\application\angle_est.c:41

	control_param.accum_theta_count++;
100003a4:	af ad       	LD.H      R5, [R7 + #22]
100003a6:	6d c0       	ADD       R5, R5, #1
100003a8:	55 d0       	ZXT.H     R5, R5
100003aa:	bd b5       	ST.H      [R7 + #22], R5
..\application\angle_est.c:42
	if (control_param.accum_theta_count >= control_param.IRP_per_calc)
100003ac:	a7 ad       	LD.H      R4, [R7 + #22]
100003ae:	25 45       	LD        R5, [PC + #37]        ;->0x10000440  :=0x10003f93
100003b0:	55 80       	LD.B      R5, [R5]
100003b2:	44 61       	SXT.H     R4, R4
100003b4:	45 70       	CMP       R4, R5
100003b6:	07 fb       	JLT       $+7                   ;->0x100003c4
..\application\angle_est.c:44
	{
		s->Omega = control_param.accum_theta;
100003b8:	6f ad       	LD.H      R5, [R7 + #21]
100003ba:	55 d0       	ZXT.H     R5, R5
100003bc:	f5 b5       	ST.H      [R6 + #23], R5
..\application\angle_est.c:45
		control_param.accum_theta_count = 0;
100003be:	a8 58       	MOV       R5, R8
100003c0:	bd b5       	ST.H      [R7 + #22], R5
..\application\angle_est.c:46
		control_param.accum_theta = 0;
100003c2:	7d b5       	ST.H      [R7 + #21], R5
..\application\angle_est.c:49
	}

	control_param.trans_count++;
100003c4:	20 45       	LD        R5, [PC + #32]        ;->0x10000444  :=0x10003f91
100003c6:	45 80       	LD.B      R4, [R5]
100003c8:	64 c0       	ADD       R4, R4, #1
100003ca:	44 d1       	ZXT.B     R4, R4
100003cc:	54 83       	ST.B      [R5], R4
..\application\angle_est.c:50
	if( control_param.trans_count >= control_param.trans_steps)
100003ce:	45 80       	LD.B      R4, [R5]
100003d0:	1e 43       	LD        R3, [PC + #30]        ;->0x10000448  :=0x10003f92
100003d2:	33 80       	LD.B      R3, [R3]
100003d4:	34 70       	CMP       R3, R4
100003d6:	03 f8       	JHI       $+3                   ;->0x100003dc
..\application\angle_est.c:51
		control_param.trans_count = 0;
100003d8:	40 10       	MOV       R4, #0
100003da:	54 83       	ST.B      [R5], R4
..\application\angle_est.c:53

	CalcOmegaFltred();
100003dc:	1c 45       	LD        R5, [PC + #28]        ;->0x1000044c  :=0x10000b06
100003de:	05 5c       	LJMP      R5
..\application\angle_est.c:58

	//计算滑动模式控制器低通滤波器的增益
	//s->Kslf = s->KslfFinal = (s->OmegaFltred * Q15(_PI / IRP_PERCALC))>>15;//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
	//s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,Q15(_PI / IRP_PERCALC));
	if(control_param.motor_direction==0)
100003e0:	17 45       	LD        R5, [PC + #23]        ;->0x1000043c  :=0x10003f70
100003e2:	1c 44       	LD        R4, [PC + #28]        ;->0x10000450  :=0x10003f90
100003e4:	44 80       	LD.B      R4, [R4]
..\application\angle_est.c:59
	    s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,control_param._pi_calc);//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
100003e6:	06 ae       	LD.H      R0, [R6 + #24]
100003e8:	cd ac       	LD.H      R1, [R5 + #19]
100003ea:	00 61       	SXT.H     R0, R0
100003ec:	11 61       	SXT.H     R1, R1
100003ee:	1a 45       	LD        R5, [PC + #26]        ;->0x10000454  :=0x100005d8
..\application\angle_est.c:58
	CalcOmegaFltred();

	//计算滑动模式控制器低通滤波器的增益
	//s->Kslf = s->KslfFinal = (s->OmegaFltred * Q15(_PI / IRP_PERCALC))>>15;//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
	//s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,Q15(_PI / IRP_PERCALC));
	if(control_param.motor_direction==0)
100003f0:	40 38       	CMP       R4, #0
100003f2:	33 f1       	JNZ       $+51                  ;->0x10000458
..\application\angle_est.c:59
	    s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,control_param._pi_calc);//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
100003f4:	05 5c       	LJMP      R5
100003f6:	00 d0       	ZXT.H     R0, R0
100003f8:	f0 b4       	ST.H      [R6 + #19], R0
100003fa:	b0 b4       	ST.H      [R6 + #18], R0
..\application\angle_est.c:63
	else
		s->Kslf = s->KslfFinal = -FracMpy(s->OmegaFltred,control_param._pi_calc);

	if (s->Kslf < control_param.omega0_rad_calc)
100003fc:	9e ac       	LD.H      R3, [R6 + #18]
100003fe:	10 45       	LD        R5, [PC + #16]        ;->0x1000043c  :=0x10003f70
10000400:	a7 ac       	LD.H      R4, [R7 + #18]
10000402:	33 61       	SXT.H     R3, R3
10000404:	44 61       	SXT.H     R4, R4
10000406:	34 70       	CMP       R3, R4
10000408:	07 fa       	JGE       $+7                   ;->0x10000416
..\application\angle_est.c:65
	{
		s->Kslf = control_param.omega0_rad_calc;
1000040a:	a5 ac       	LD.H      R4, [R5 + #18]
1000040c:	44 d0       	ZXT.H     R4, R4
1000040e:	b4 b4       	ST.H      [R6 + #18], R4
..\application\angle_est.c:66
		s->KslfFinal = control_param.omega0_rad_calc;
10000410:	ad ac       	LD.H      R5, [R5 + #18]
10000412:	55 d0       	ZXT.H     R5, R5
10000414:	f5 b4       	ST.H      [R6 + #19], R5
..\application\angle_est.c:70
	}
	//为所有速度范围动态补偿theta
	//s->ThetaOffset = CONSTANT_PHASE_SHIFT;
	s->Theta = s->Theta + s->ThetaOffset;
10000416:	ae ad       	LD.H      R5, [R6 + #22]
10000418:	66 ad       	LD.H      R4, [R6 + #21]
1000041a:	6c c3       	ADD       R5, R4, R5
1000041c:	55 d0       	ZXT.H     R5, R5
1000041e:	b5 b5       	ST.H      [R6 + #22], R5
..\application\angle_est.c:71
}
10000420:	07 5e       	POP       {R6-R8}
10000422:	0d 5d       	POP       LR
10000424:	1d 5c       	JMP       LR
10000426:	00 00       	NOP      NOP      
10000428:	e8 07 00 10 	.long     0x100007e8 ->268437480  [!!!@2@:SJMP      $-24                  ;->0x100003f8	@@: MOV       R0, #0
1000042c:	e2 08 00 10 	.long     0x100008e2 ->268437730  [!!!@2@:LD.W      R0, [SP + #226]	@@: MOV       R0, #0
10000430:	c4 05 00 10 	.long     0x100005c4 ->268436932  [!!!@2@:SJMP      $+452                 ;->0x100007b8	@@: MOV       R0, #0
10000434:	bc 09 00 10 	.long     0x100009bc ->268437948  [!!!@2@:LD.W      R1, [SP + #188]	@@: MOV       R0, #0
10000438:	3c 58 00 00 	.long     0x0000583c ->000022588  [!!!@2@:MOV       R1, R28	@@: NOP      
1000043c:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
10000440:	93 3f 00 10 	.long     0x10003f93 ->268451731  [!!!@2@:CMP       R9, #115	@@: MOV       R0, #0
10000444:	91 3f 00 10 	.long     0x10003f91 ->268451729  [!!!@2@:CMP       R9, #113	@@: MOV       R0, #0
10000448:	92 3f 00 10 	.long     0x10003f92 ->268451730  [!!!@2@:CMP       R9, #114	@@: MOV       R0, #0
1000044c:	06 0b 00 10 	.long     0x10000b06 ->268438278  [!!!@2@:LD.W      R3, [SP + #6]	@@: MOV       R0, #0
10000450:	90 3f 00 10 	.long     0x10003f90 ->268451728  [!!!@2@:CMP       R9, #112	@@: MOV       R0, #0
10000454:	d8 05 00 10 	.long     0x100005d8 ->268436952  [!!!@2@:SJMP      $+472                 ;->0x10000804	@@: MOV       R0, #0
..\application\angle_est.c:61
	//s->Kslf = s->KslfFinal = (s->OmegaFltred * Q15(_PI / IRP_PERCALC))>>15;//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
	//s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,Q15(_PI / IRP_PERCALC));
	if(control_param.motor_direction==0)
	    s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,control_param._pi_calc);//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
	else
		s->Kslf = s->KslfFinal = -FracMpy(s->OmegaFltred,control_param._pi_calc);
10000458:	05 5c       	LJMP      R5
1000045a:	00 d0       	ZXT.H     R0, R0
1000045c:	50 10       	MOV       R5, #0
1000045e:	2d c6       	SUB       R5, R5, R0
10000460:	55 d0       	ZXT.H     R5, R5
10000462:	f5 b4       	ST.H      [R6 + #19], R5
10000464:	b5 b4       	ST.H      [R6 + #18], R5
10000466:	cb 07       	SJMP      $-53                  ;->0x100003fc
..\application\angle_est.c:18
	CalcEstI();//估算的Ialpha、Ibeta值
	CalcIError();//计算Ialpha、Ibeta的偏差值（估算-实际）
	if (Q15abs(s->IalphaError) < s->MaxSMCError)
	{
		//如果处于滑动控制器的线性范围，那么矫正因数Zalpha将会和偏差IalphaError成比例
		CalcZalpha();
10000468:	0e 45       	LD        R5, [PC + #14]        ;->0x100004a0  :=0x10000934
1000046a:	05 5c       	LJMP      R5
..\application\angle_est.c:25
	else if (s->IalphaError > 0)
		s->Zalpha = s->Kslide;
	else
		s->Zalpha = -s->Kslide;

	if(Q15abs(s->IbetaError) < s->MaxSMCError)
1000046c:	46 ac       	LD.H      R0, [R6 + #17]
1000046e:	00 61       	SXT.H     R0, R0
10000470:	07 5c       	LJMP      R7
10000472:	ee ab       	LD.H      R5, [R6 + #15]
10000474:	55 61       	SXT.H     R5, R5
10000476:	05 70       	CMP       R0, R5
10000478:	02 fb       	JLT       $+2                   ;->0x1000047c
1000047a:	72 07       	SJMP      $-142                 ;->0x1000035e
..\application\angle_est.c:28
	{
		// 如果处于滑动控制器的线性范围，那么矫正因数Zbeta将会和偏差IbetaError成比例
		CalcZbeta();// s->Zbeta = (s->Kslide * s->IbetaError) / s->MaxSMCError
1000047c:	0a 45       	LD        R5, [PC + #10]        ;->0x100004a4  :=0x10000978
1000047e:	05 5c       	LJMP      R5
10000480:	77 07       	SJMP      $-137                 ;->0x1000036e
..\application\angle_est.c:33
	}
	else if (s->IbetaError > 0)
		s->Zbeta = s->Kslide;
	else
		s->Zbeta = -s->Kslide;
10000482:	ae ab       	LD.H      R5, [R6 + #14]
10000484:	55 d0       	ZXT.H     R5, R5
10000486:	40 10       	MOV       R4, #0
10000488:	6c c7       	SUB       R5, R4, R5
1000048a:	55 d0       	ZXT.H     R5, R5
1000048c:	b5 b2       	ST.H      [R6 + #10], R5
1000048e:	70 07       	SJMP      $-144                 ;->0x1000036e
..\application\angle_est.c:23
		CalcZalpha();
	}
	else if (s->IalphaError > 0)
		s->Zalpha = s->Kslide;
	else
		s->Zalpha = -s->Kslide;
10000490:	ae ab       	LD.H      R5, [R6 + #14]
10000492:	55 d0       	ZXT.H     R5, R5
10000494:	40 10       	MOV       R4, #0
10000496:	6c c7       	SUB       R5, R4, R5
10000498:	55 d0       	ZXT.H     R5, R5
1000049a:	f5 b0       	ST.H      [R6 + #3], R5
1000049c:	59 07       	SJMP      $-167                 ;->0x1000034e
1000049e:	00 00       	NOP      NOP      
100004a0:	34 09 00 10 	.long     0x10000934 ->268437812  [!!!@2@:LD.W      R1, [SP + #52]	@@: MOV       R0, #0
100004a4:	78 09 00 10 	.long     0x10000978 ->268437880  [!!!@2@:LD.W      R1, [SP + #120]	@@: MOV       R0, #0

100004a8 <CalculateParkAngle>:
CalculateParkAngle():
..\application\angle_est.c:75
	s->Theta = s->Theta + s->ThetaOffset;
}


 void __attribute__((section(".indata"))) CalculateParkAngle(void)
{
100004a8:	83 5f       	PUSH      {R6-R7,LR}
..\application\angle_est.c:76
	 smc1.Ialpha = ParkParm.qIalpha;
100004aa:	1b 46       	LD        R6, [PC + #27]        ;->0x10000514  :=0x10003fb2
100004ac:	6e a9       	LD.H      R5, [R6 + #5]
100004ae:	55 d0       	ZXT.H     R5, R5
100004b0:	1a 47       	LD        R7, [PC + #26]        ;->0x10000518  :=0x1000402c
100004b2:	3d b3       	ST.H      [R7 + #12], R5
..\application\angle_est.c:77
	 smc1.Ibeta = ParkParm.qIbeta;
100004b4:	ae a9       	LD.H      R5, [R6 + #6]
100004b6:	55 d0       	ZXT.H     R5, R5
100004b8:	3d b4       	ST.H      [R7 + #16], R5
..\application\angle_est.c:78
	 smc1.Valpha = ParkParm.qValpha;
100004ba:	ee aa       	LD.H      R5, [R6 + #11]
100004bc:	55 d0       	ZXT.H     R5, R5
100004be:	75 84       	ST.H      [R7], R5
..\application\angle_est.c:79
	 smc1.Vbeta = ParkParm.qVbeta;
100004c0:	2e ab       	LD.H      R5, [R6 + #12]
100004c2:	55 d0       	ZXT.H     R5, R5
100004c4:	fd b1       	ST.H      [R7 + #7], R5
..\application\angle_est.c:81

	SMC_Position_Estimation(&smc1);	//trans_counter++,如果等于5就清零
100004c6:	07 58       	MOV       R0, R7
100004c8:	15 45       	LD        R5, [PC + #21]        ;->0x1000051c  :=0x10000320
100004ca:	05 5c       	LJMP      R5
..\application\angle_est.c:83

	if(sys_control.state_mode==STATE_RUN_OPEN_DEBUG||sys_control.state_mode==STATE_RUN_OPEN_LOOP)
100004cc:	15 45       	LD        R5, [PC + #21]        ;->0x10000520  :=0x10003f64
100004ce:	65 98       	LD.W      R4, [R5 + #1]
100004d0:	44 38       	CMP       R4, #4
100004d2:	2f f0       	JZ        $+47                  ;->0x10000530
100004d4:	6d 98       	LD.W      R5, [R5 + #1]
100004d6:	55 38       	CMP       R5, #5
100004d8:	2c f0       	JZ        $+44                  ;->0x10000530
..\application\angle_est.c:109
		else
			ParkParm.qAngle -= (unsigned short)(control_param.startup_ramp >> 16);
	}
	else
	{
		ParkParm.qAngle = smc1.Theta + (control_param.theta_error);
100004da:	af ad       	LD.H      R5, [R7 + #22]
100004dc:	12 47       	LD        R7, [PC + #18]        ;->0x10000524  :=0x10003f70
100004de:	67 aa       	LD.H      R4, [R7 + #9]
100004e0:	6c c3       	ADD       R5, R4, R5
100004e2:	55 d0       	ZXT.H     R5, R5
100004e4:	65 84       	ST.H      [R6], R5
..\application\angle_est.c:110
		if( (Q15abs(control_param.theta_error) > _0_05DEG)&&(control_param.trans_count == 0))
100004e6:	47 aa       	LD.H      R0, [R7 + #9]
100004e8:	00 61       	SXT.H     R0, R0
100004ea:	10 45       	LD        R5, [PC + #16]        ;->0x10000528  :=0x100005c4
100004ec:	05 5c       	LJMP      R5
100004ee:	09 38       	CMP       R0, #9
100004f0:	38 f9       	JLS       $+56                  ;->0x10000560
100004f2:	0f 45       	LD        R5, [PC + #15]        ;->0x1000052c  :=0x10003f91
100004f4:	55 80       	LD.B      R5, [R5]
100004f6:	50 38       	CMP       R5, #0
100004f8:	34 f1       	JNZ       $+52                  ;->0x10000560
..\application\angle_est.c:112
		{
			if (control_param.theta_error < 0)
100004fa:	6f aa       	LD.H      R5, [R7 + #9]
100004fc:	55 61       	SXT.H     R5, R5
100004fe:	50 38       	CMP       R5, #0
10000500:	5d f4       	JMI       $+93                  ;->0x100005ba
..\application\angle_est.c:118
			{
				control_param.theta_error += _0_05DEG;
			}
			else
			{
				control_param.theta_error -= _0_05DEG;
10000502:	6f aa       	LD.H      R5, [R7 + #9]
10000504:	55 d0       	ZXT.H     R5, R5
10000506:	59 30       	SUB       R5, #9
10000508:	55 d0       	ZXT.H     R5, R5
1000050a:	7d b2       	ST.H      [R7 + #9], R5
..\application\angle_est.c:122
			}
		}
	}
}
1000050c:	03 5e       	POP       {R6-R7}
1000050e:	0d 5d       	POP       LR
10000510:	1d 5c       	JMP       LR
10000512:	00 00       	NOP      NOP      
10000514:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
10000518:	2c 40 00 10 	.long     0x1000402c ->268451884  [!!!@2@:LD        R0, [PC + #44]        ;->0x100005c8  :=0xf4033850	@@: MOV       R0, #0
1000051c:	20 03 00 10 	.long     0x10000320 ->268436256  [!!!@4@:JMP       $+2101248             ;->0x1040251c
10000520:	64 3f 00 10 	.long     0x10003f64 ->268451684  [!!!@2@:CMP       R6, #116	@@: MOV       R0, #0
10000524:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
10000528:	c4 05 00 10 	.long     0x100005c4 ->268436932  [!!!@2@:SJMP      $+452                 ;->0x100008b0	@@: MOV       R0, #0
1000052c:	91 3f 00 10 	.long     0x10003f91 ->268451729  [!!!@2@:CMP       R9, #113	@@: MOV       R0, #0
..\application\angle_est.c:85

	SMC_Position_Estimation(&smc1);	//trans_counter++,如果等于5就清零

	if(sys_control.state_mode==STATE_RUN_OPEN_DEBUG||sys_control.state_mode==STATE_RUN_OPEN_LOOP)
	{
		if (control_param.startup_lock < control_param.startup_lock_time)
10000530:	0e 45       	LD        R5, [PC + #14]        ;->0x10000568  :=0x10003f70
10000532:	a5 aa       	LD.H      R4, [R5 + #10]
10000534:	44 d0       	ZXT.H     R4, R4
10000536:	dd aa       	LD.H      R3, [R5 + #11]
10000538:	33 d0       	ZXT.H     R3, R3
1000053a:	34 70       	CMP       R3, R4
1000053c:	1a f9       	JLS       $+26                  ;->0x10000570
..\application\angle_est.c:87
		{
			control_param.current_step = 0;
1000053e:	40 10       	MOV       R4, #0
10000540:	2c b2       	ST.H      [R5 + #8], R4
..\application\angle_est.c:88
			control_param.startup_lock++;	// 此变量一直递增直到条件失效，然后开环斜坡递增开始
10000542:	a5 aa       	LD.H      R4, [R5 + #10]
10000544:	64 c0       	ADD       R4, R4, #1
10000546:	44 d0       	ZXT.H     R4, R4
10000548:	ac b2       	ST.H      [R5 + #10], R4
..\application\angle_est.c:102
		else
		{
			control_param.current_step = 2;
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
		}
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
1000054a:	08 44       	LD        R4, [PC + #8]         ;->0x10000568  :=0x10003f70
1000054c:	08 45       	LD        R5, [PC + #8]         ;->0x1000056c  :=0x10003f90
1000054e:	55 80       	LD.B      R5, [R5]
..\application\angle_est.c:103
		    ParkParm.qAngle += (unsigned short)(control_param.startup_ramp >> 16);
10000550:	36 81       	LD.H      R3, [R6]
..\application\angle_est.c:102
		else
		{
			control_param.current_step = 2;
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
		}
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
10000552:	50 38       	CMP       R5, #0
10000554:	1f f1       	JNZ       $+31                  ;->0x10000592
..\application\angle_est.c:103
		    ParkParm.qAngle += (unsigned short)(control_param.startup_ramp >> 16);
10000556:	ac 99       	LD.W      R5, [R4 + #6]
10000558:	28 7d       	LSR       R5, #16
1000055a:	ed c2       	ADD       R5, R5, R3
1000055c:	55 d0       	ZXT.H     R5, R5
1000055e:	65 84       	ST.H      [R6], R5
..\application\angle_est.c:122
			{
				control_param.theta_error -= _0_05DEG;
			}
		}
	}
}
10000560:	03 5e       	POP       {R6-R7}
10000562:	0d 5d       	POP       LR
10000564:	1d 5c       	JMP       LR
10000566:	00 00       	NOP      NOP      
10000568:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
1000056c:	90 3f 00 10 	.long     0x10003f90 ->268451728  [!!!@2@:CMP       R9, #112	@@: MOV       R0, #0
..\application\angle_est.c:90
		if (control_param.startup_lock < control_param.startup_lock_time)
		{
			control_param.current_step = 0;
			control_param.startup_lock++;	// 此变量一直递增直到条件失效，然后开环斜坡递增开始
		}
		else if(control_param.startup_ramp < control_param.end_speed)
10000570:	a5 99       	LD.W      R4, [R5 + #6]
10000572:	dd 99       	LD.W      R3, [R5 + #7]
10000574:	34 70       	CMP       R3, R4
10000576:	1b f8       	JHI       $+27                  ;->0x100005ac
..\application\angle_est.c:99
			control_param.startup_ramp += DELTA_STARTUP_RAMP;
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
		}
		else
		{
			control_param.current_step = 2;
10000578:	42 10       	MOV       R4, #2
1000057a:	2c b2       	ST.H      [R5 + #8], R4
..\application\angle_est.c:100
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
1000057c:	36 81       	LD.H      R3, [R6]
1000057e:	a7 ad       	LD.H      R4, [R7 + #22]
10000580:	23 c7       	SUB       R4, R3, R4
10000582:	44 d0       	ZXT.H     R4, R4
10000584:	6c b2       	ST.H      [R5 + #9], R4
..\application\angle_est.c:102
		}
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
10000586:	08 44       	LD        R4, [PC + #8]         ;->0x100005a4  :=0x10003f70
10000588:	08 45       	LD        R5, [PC + #8]         ;->0x100005a8  :=0x10003f90
1000058a:	55 80       	LD.B      R5, [R5]
..\application\angle_est.c:103
		    ParkParm.qAngle += (unsigned short)(control_param.startup_ramp >> 16);
1000058c:	36 81       	LD.H      R3, [R6]
..\application\angle_est.c:102
		else
		{
			control_param.current_step = 2;
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
		}
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
1000058e:	50 38       	CMP       R5, #0
10000590:	e3 f0       	JZ        $-29                  ;->0x10000556
..\application\angle_est.c:105
		    ParkParm.qAngle += (unsigned short)(control_param.startup_ramp >> 16);
		else
			ParkParm.qAngle -= (unsigned short)(control_param.startup_ramp >> 16);
10000592:	ac 99       	LD.W      R5, [R4 + #6]
10000594:	28 7d       	LSR       R5, #16
10000596:	6b c7       	SUB       R5, R3, R5
10000598:	55 d0       	ZXT.H     R5, R5
1000059a:	65 84       	ST.H      [R6], R5
..\application\angle_est.c:122
			{
				control_param.theta_error -= _0_05DEG;
			}
		}
	}
}
1000059c:	03 5e       	POP       {R6-R7}
1000059e:	0d 5d       	POP       LR
100005a0:	1d 5c       	JMP       LR
100005a2:	00 00       	NOP      NOP      
100005a4:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
100005a8:	90 3f 00 10 	.long     0x10003f90 ->268451728  [!!!@2@:CMP       R9, #112	@@: MOV       R0, #0
..\application\angle_est.c:92
			control_param.current_step = 0;
			control_param.startup_lock++;	// 此变量一直递增直到条件失效，然后开环斜坡递增开始
		}
		else if(control_param.startup_ramp < control_param.end_speed)
		{
			control_param.current_step = 1;
100005ac:	41 10       	MOV       R4, #1
100005ae:	2c b2       	ST.H      [R5 + #8], R4
..\application\angle_est.c:94
			// 斜坡启动，且线性递增至EndSpeed.
			control_param.startup_ramp += DELTA_STARTUP_RAMP;
100005b0:	9d 99       	LD.W      R3, [R5 + #6]
100005b2:	4f 18       	MOV       R4, #143
100005b4:	23 c3       	ADD       R4, R3, R4
100005b6:	ac a1       	ST.W      [R5 + #6], R4
100005b8:	e2 07       	SJMP      $-30                  ;->0x1000057c
..\application\angle_est.c:114
		ParkParm.qAngle = smc1.Theta + (control_param.theta_error);
		if( (Q15abs(control_param.theta_error) > _0_05DEG)&&(control_param.trans_count == 0))
		{
			if (control_param.theta_error < 0)
			{
				control_param.theta_error += _0_05DEG;
100005ba:	6f aa       	LD.H      R5, [R7 + #9]
100005bc:	59 28       	ADD       R5, #9
100005be:	55 d0       	ZXT.H     R5, R5
100005c0:	7d b2       	ST.H      [R7 + #9], R5
100005c2:	cf 07       	SJMP      $-49                  ;->0x10000560

100005c4 <Q15abs>:
Q15abs():
..\application\libkf32foc.c:8


/******math**************************************************************************/
volatile WORD Data_ABS;
WORD __attribute__((section(".indata"))) Q15abs(SFRAC16 a)
{
100005c4:	00 d0       	ZXT.H     R0, R0
..\application\libkf32foc.c:9
	if(a < 0)
100005c6:	50 61       	SXT.H     R5, R0
100005c8:	50 38       	CMP       R5, #0
100005ca:	03 f4       	JMI       $+3                   ;->0x100005d0
..\application\libkf32foc.c:12
		return -a;
	else
		return a;
100005cc:	00 d0       	ZXT.H     R0, R0
..\application\libkf32foc.c:16
//	Data_ABS = fabs(a);
//	return	Data_ABS;

}
100005ce:	1d 5c       	JMP       LR
..\application\libkf32foc.c:10
/******math**************************************************************************/
volatile WORD Data_ABS;
WORD __attribute__((section(".indata"))) Q15abs(SFRAC16 a)
{
	if(a < 0)
		return -a;
100005d0:	50 10       	MOV       R5, #0
100005d2:	05 c6       	SUB       R0, R5, R0
100005d4:	00 d0       	ZXT.H     R0, R0
..\application\libkf32foc.c:16
	else
		return a;
//	Data_ABS = fabs(a);
//	return	Data_ABS;

}
100005d6:	1d 5c       	JMP       LR

100005d8 <FracMpy>:
FracMpy():
..\application\libkf32foc.c:26

//	Data_FracMpy = ((signed int )((mul_1 * mul_2)<<1)>>16);
//
//	return Data_FracMpy;

	asm("	MULS R4,R0,R1                     ""\n\t"         );
100005d8:	60 ca       	MULS      R4, R0, R1
..\application\libkf32foc.c:27
	asm("	LSL R4,#1                  	 ""\n\t"  );
100005da:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:28
	asm("	ASR R4,#16                  	 ""\n\t"  );
100005dc:	20 79       	ASR       R4, #16
..\application\libkf32foc.c:29
	asm("	MOV R2,#Data_FracMpy                    ""\n\t"     );
100005de:	22 5c 9c 40 	MOVL      R2, #16540
100005e2:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:30
	asm("	ST.H [R2] , R4                          ""\n\t"     );
100005e6:	24 84       	ST.H      [R2], R4
..\application\libkf32foc.c:31
	return	Data_FracMpy;
100005e8:	02 45       	LD        R5, [PC + #2]         ;->0x100005f0  :=0x1000409c
100005ea:	05 81       	LD.H      R0, [R5]
..\application\libkf32foc.c:32
}
100005ec:	00 d0       	ZXT.H     R0, R0
100005ee:	1d 5c       	JMP       LR
100005f0:	9c 40 00 10 	.long     0x1000409c ->268451996  [!!!@2@:LD        R0, [PC + #156]       ;->0x10000860  :=0xb1501000	@@: MOV       R0, #0

100005f4 <CalcSVGen>:
CalcSVGen():
..\application\libkf32foc.c:313
 * 2.1us@48MHz
 */
void __attribute__((section(".indata"))) CalcSVGen( void )
{
	//手动压栈
	asm("	PUSH	R6                               " "\n");
100005f4:	26 5d       	PUSH      R6
..\application\libkf32foc.c:314
	asm("	PUSH	R7                               " "\n");
100005f6:	27 5d       	PUSH      R7
..\application\libkf32foc.c:377
	asm("	.EQU SVGen_qVr3_R6, R6                    " "\n");


	//start of InvPark(void)
	//Load数据
	asm("	LD	    VarAddress_R0,#ParkParm+#Park_qSin  " "\n");
100005f8:	4f 40       	LD        R0, [PC + #79]        ;->0x10000734  :=0x10003fb4
..\application\libkf32foc.c:378
	asm("	LDS.H	Park_qSin_R1,[VarAddress_R0]        " "\n");//R1 = Park_qSin
100005fa:	10 86       	LDS.H     R1, [R0]
..\application\libkf32foc.c:380

	asm("	ADD     VarAddress_R0,#Park_qCos-#Park_qSin " "\n");//计算Park_qCos地址
100005fc:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:381
	asm("	LDS.H	Park_qCos_R2,[VarAddress_R0]        " "\n");//R2 = Park_qCos
100005fe:	20 86       	LDS.H     R2, [R0]
..\application\libkf32foc.c:383

	asm("	ADD     VarAddress_R0,#Park_qVd-#Park_qCos  " "\n");//计算Park_qVd地址
10000600:	0e 28       	ADD       R0, #14
..\application\libkf32foc.c:384
	asm("	LDS.H	Park_qVd_R3,[VarAddress_R0]         " "\n");//R3 = Park_qVd
10000602:	30 86       	LDS.H     R3, [R0]
..\application\libkf32foc.c:386

	asm("	ADD     VarAddress_R0,#Park_qVq-#Park_qVd   " "\n");//计算Park_qVq地址
10000604:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:387
	asm("	LDS.H	Park_qVq_R4,[VarAddress_R0]         " "\n");//R4 = Park_qVq
10000606:	40 86       	LDS.H     R4, [R0]
..\application\libkf32foc.c:391
	//到此VarAddress_R0指向ParkParm.qVq地址

	//Valpha =  Vd*cos(Angle) - Vq*sin(Angle)
	asm("	MULS   	VdxCos_R5,Park_qVd_R3,Park_qCos_R2    	" "\n");
10000608:	ab ca       	MULS      R5, R3, R2
..\application\libkf32foc.c:392
	asm("	MULS   	VqxSin_R6,Park_qVq_R4,Park_qSin_R1    	" "\n");
1000060a:	74 ca       	MULS      R6, R4, R1
..\application\libkf32foc.c:393
	asm("	SUB     Park_qValpha_R7,VdxCos_R5,VqxSin_R6     " "\n");
1000060c:	bd c7       	SUB       R7, R5, R6
..\application\libkf32foc.c:394
	asm("	ASR   	Park_qValpha_R7,#15			            " "\n");
1000060e:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:397

	//Vbeta  =  Vd*sin(Angle) + Vq*cos(Angle)
	asm("	MULS   	VdxSin_R5,Park_qVd_R3,Park_qSin_R1    	" "\n");
10000610:	6b ca       	MULS      R5, R3, R1
..\application\libkf32foc.c:398
	asm("	MULS   	VqxCos_R6,Park_qVq_R4,Park_qCos_R2    	" "\n");
10000612:	b4 ca       	MULS      R6, R4, R2
..\application\libkf32foc.c:399
	asm("	ADD     Park_qVbeta_R6,VdxSin_R5,VqxCos_R6      " "\n");
10000614:	b5 c3       	ADD       R6, R5, R6
..\application\libkf32foc.c:400
	asm("	ASR   	Park_qVbeta_R6,#15			            " "\n");
10000616:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:403

	//保存到SRAM, Valpha, Vbeta
	asm("	ADD     VarAddress_R0,#Park_qValpha-#Park_qVq   " "\n");//计算Park_qId地址
10000618:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:404
	asm("	ST.H    [VarAddress_R0++],Park_qValpha_R7       " "\n");
1000061a:	07 75       	ST.H      [R0++], R7
..\application\libkf32foc.c:405
	asm("	ST.H    [VarAddress_R0],  Park_qVbeta_R6        " "\n");
1000061c:	06 84       	ST.H      [R0], R6
..\application\libkf32foc.c:412


	//end of InvPark(void)

	//start of CalcRefVec( void )
	asm("   MOV		Sq3By2_R1, #Sq3By2                              " "\n");//R1 = sqrt(3)/2
1000061e:	21 5c d9 6e 	MOVL      R1, #28377
..\application\libkf32foc.c:415

	//SVGen_qVr1 = ParkParm.qVbeta;
	asm("   MOV 	SVGen_qVr1_R4, Park_qVbeta_R6                   " "\n");//R4 = SVGen_qVr1
10000622:	86 58       	MOV       R4, R6
..\application\libkf32foc.c:418

	//SVGen_qVr2 = (ParkParm.qValpha*Sq3By2>>15) - (ParkParm.qVbeta>>1)
	asm("   ASR 	Park_qVbeta_R6, #1                              " "\n");//R6 = ParkParm.qVbeta>>1
10000624:	31 78       	ASR       R6, #1
..\application\libkf32foc.c:419
	asm("	MULS 	Park_qValpha_R7,Park_qValpha_R7,Sq3By2_R1       " "\n");
10000626:	7f ca       	MULS      R7, R7, R1
..\application\libkf32foc.c:420
	asm("   ASR 	Park_qValpha_R7, #15                            " "\n");//R7 = (ParkParm.qValpha*Sq3By2)>>15
10000628:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:421
	asm("	SUB		SVGen_qVr2_R5,Park_qValpha_R7,Park_qVbeta_R6    " "\n");//R5 = SVGen_qVr2;
1000062a:	af c7       	SUB       R5, R7, R6
..\application\libkf32foc.c:424

	//SVGen_qVr3 = (-ParkParm.qVbeta>>1) - (ParkParm.qValpha*Sq3By2>>15)
	asm("   MOV		R0,#0                                           " "\n");
1000062c:	00 10       	MOV       R0, #0
..\application\libkf32foc.c:425
	asm("	SUB		Park_qVbeta_R6,R0,Park_qVbeta_R6                " "\n");//R6 = -R6;
1000062e:	b0 c7       	SUB       R6, R0, R6
..\application\libkf32foc.c:426
	asm("	SUB		SVGen_qVr3_R6,Park_qVbeta_R6,Park_qValpha_R7    " "\n");//R6 = SVGen_qVr3;
10000630:	f6 c7       	SUB       R6, R6, R7
..\application\libkf32foc.c:432
	//end of CalcRefVec( void )


	//start of CalcSVGen( void )
	//连续Load数据
	asm("	LD	    VarAddress_R0,#SVGenParm+#SVGen_iPWMPeriod " "\n");//计算SVGen_iPWMPeriod地址
10000632:	42 40       	LD        R0, [PC + #66]        ;->0x10000738  :=0x10003fa4
..\application\libkf32foc.c:433
	asm("	LDS.H	SVGen_iPWMPeriod_R2,[VarAddress_R0]        " "\n");//R2 = SVGen_iPWMPeriod
10000634:	20 86       	LDS.H     R2, [R0]
..\application\libkf32foc.c:446
	//asm("	ADD		VarAddress_R0,#SVGen_qVr3-#SVGen_qVr2      " "\n");//计算SVGen_qVr3地址
	//asm("	LDS.H	SVGen_qVr3_R6,[VarAddress_R0]              " "\n");//R6 = SVGen_qVr3

	//判断Sector
	//SVGen_qVr1 < 0 ?
	asm("	CMP     SVGen_qVr1_R4,#0                  " "\n");
10000636:	40 38       	CMP       R4, #0
..\application\libkf32foc.c:447
	asm("	JLT		jSector624                        " "\n");//( SVGen_qVr1 < 0 ) goto jSector624
10000638:	3e fb       	JLT       $+62                  ;->0x100006b4

1000063a <jSector351>:
..\application\libkf32foc.c:453

asm("jSector351:                                                  " "\n");

	//判断Sector
	//SVGen_qVr2 < 0 ?
	asm("	CMP     SVGen_qVr2_R5,#0                  " "\n");
1000063a:	50 38       	CMP       R5, #0
..\application\libkf32foc.c:454
	asm("	JLT		jSector51                         " "\n");//( SVGen_qVr1 > 0 && SVGen_qVr2 < 0 ) goto jSector51
1000063c:	14 fb       	JLT       $+20                  ;->0x10000664
..\application\libkf32foc.c:459

	//SVGen_qVr1 >= 0 && SVGen_qVr2 >= 0 && SVGen_qVr3 < 0
	//@Sector3(011)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R4,SVGen_qVr1_R4,SVGen_iPWMPeriod_R2 " "\n");
1000063e:	a4 ca       	MULS      R4, R4, R2
..\application\libkf32foc.c:460
	asm("	ASR	    SVGen_T1_R4,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr1*iPWMPeriod)>>15
10000640:	a7 78       	ASR       R4, #15
..\application\libkf32foc.c:461
	asm("	MULS    SVGen_T2_R5,SVGen_qVr2_R5,SVGen_iPWMPeriod_R2 " "\n");
10000642:	ad ca       	MULS      R5, R5, R2
..\application\libkf32foc.c:462
	asm("	ASR	    SVGen_T2_R5,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr2*iPWMPeriod)>>15
10000644:	af 78       	ASR       R5, #15
..\application\libkf32foc.c:463
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R4   " "\n");
10000646:	1a c7       	SUB       R3, R2, R4
..\application\libkf32foc.c:464
	asm("	SUB     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R5           " "\n");
10000648:	5b c7       	SUB       R3, R3, R5
..\application\libkf32foc.c:465
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod - SVGen_T1 - SVGen_T2)>>1
1000064a:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:466
	asm("	ADD     SVGen_Tb_R4,SVGen_Tc_R3,SVGen_T1_R4           " "\n");//R4 = SVGen_Tb = SVGen_Tc + SVGen_T1
1000064c:	23 c3       	ADD       R4, R3, R4
..\application\libkf32foc.c:467
	asm("	ADD     SVGen_Ta_R5,SVGen_Tb_R4,SVGen_T2_R5           " "\n");//R5 = SVGen_Ta = SVGen_Tb + SVGen_T2
1000064e:	6c c3       	ADD       R5, R4, R5
..\application\libkf32foc.c:469
	//更新PWM
	asm("	SUB     SVGen_Ta_R5,SVGen_iPWMPeriod_R2,SVGen_Ta_R5   " "\n");
10000650:	6a c7       	SUB       R5, R2, R5
..\application\libkf32foc.c:470
	asm("	SUB     SVGen_Tb_R4,SVGen_iPWMPeriod_R2,SVGen_Tb_R4   " "\n");
10000652:	22 c7       	SUB       R4, R2, R4
..\application\libkf32foc.c:471
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
10000654:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:473

	asm("	LD		R1,#dPWM1                                     " "\n");
10000656:	3a 41       	LD        R1, [PC + #58]        ;->0x1000073c  :=0x40001a14
..\application\libkf32foc.c:474
	asm("	ST.H    [R1],SVGen_Ta_R5                              " "\n");//PWM1 = SVGen_Ta
10000658:	15 84       	ST.H      [R1], R5
..\application\libkf32foc.c:475
	asm("	LD		R1,#dPWM2                                     " "\n");
1000065a:	3a 41       	LD        R1, [PC + #58]        ;->0x10000740  :=0x40001314
..\application\libkf32foc.c:476
	asm("	ST.H    [R1],SVGen_Tb_R4                              " "\n");//PWM2 = SVGen_Tb
1000065c:	14 84       	ST.H      [R1], R4
..\application\libkf32foc.c:477
	asm("	LD		R1,#dPWM3                                     " "\n");
1000065e:	3a 41       	LD        R1, [PC + #58]        ;->0x10000744  :=0x40001394
..\application\libkf32foc.c:478
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM3 = SVGen_Tc
10000660:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:484

	//asm("	LD		R2,#3                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
10000662:	65 04       	SJMP      $+101                 ;->0x1000072c

10000664 <jSector51>:
..\application\libkf32foc.c:490

asm("jSector51:                                                   " "\n");

	//判断Sector
	//SVGen_qVr3 < 0 ?
	asm("	CMP     SVGen_qVr3_R6,#0                  " "\n");
10000664:	60 38       	CMP       R6, #0
..\application\libkf32foc.c:491
	asm("	JLT		jSector1                          " "\n");//( SVGen_qVr1 > 0 && SVGen_qVr2 < 0 && SVGen_qVr3 < 0 ) goto jSector1
10000666:	14 fb       	JLT       $+20                  ;->0x1000068e
..\application\libkf32foc.c:496

	//SVGen_qVr1 >= 0 && SVGen_qVr2 < 0 && SVGen_qVr3 >= 0
	//@Sector5(101)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R6,SVGen_qVr3_R6,SVGen_iPWMPeriod_R2 " "\n");
10000668:	b6 ca       	MULS      R6, R6, R2
..\application\libkf32foc.c:497
	asm("	ASR	    SVGen_T1_R6,#15                               " "\n");//R6 = SVGen_T1 = (SVGen_qVr3*iPWMPeriod)>>15
1000066a:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:498
	asm("	MULS    SVGen_T2_R4,SVGen_qVr1_R4,SVGen_iPWMPeriod_R2 " "\n");
1000066c:	a4 ca       	MULS      R4, R4, R2
..\application\libkf32foc.c:499
	asm("	ASR	    SVGen_T2_R4,#15                               " "\n");//R4 = SVGen_T2 = (SVGen_qVr1*iPWMPeriod)>>15
1000066e:	a7 78       	ASR       R4, #15
..\application\libkf32foc.c:500
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R6   " "\n");
10000670:	9a c7       	SUB       R3, R2, R6
..\application\libkf32foc.c:501
	asm("	SUB     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R4           " "\n");
10000672:	1b c7       	SUB       R3, R3, R4
..\application\libkf32foc.c:502
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod - SVGen_T1 - SVGen_T2)>>1
10000674:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:503
	asm("	ADD     SVGen_Tb_R6,SVGen_Tc_R3,SVGen_T1_R6           " "\n");//R6 = SVGen_Tb = SVGen_Tc + SVGen_T1
10000676:	b3 c3       	ADD       R6, R3, R6
..\application\libkf32foc.c:504
	asm("	ADD     SVGen_Ta_R4,SVGen_Tb_R6,SVGen_T2_R4           " "\n");//R4 = SVGen_Ta = SVGen_Tb + SVGen_T2
10000678:	26 c3       	ADD       R4, R6, R4
..\application\libkf32foc.c:506
	//更新PWM
	asm("	SUB     SVGen_Ta_R4,SVGen_iPWMPeriod_R2,SVGen_Ta_R4   " "\n");
1000067a:	22 c7       	SUB       R4, R2, R4
..\application\libkf32foc.c:507
	asm("	SUB     SVGen_Tb_R6,SVGen_iPWMPeriod_R2,SVGen_Tb_R6   " "\n");
1000067c:	b2 c7       	SUB       R6, R2, R6
..\application\libkf32foc.c:508
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
1000067e:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:510

	asm("	LD		R1,#dPWM2                                     " "\n");
10000680:	30 41       	LD        R1, [PC + #48]        ;->0x10000740  :=0x40001314
..\application\libkf32foc.c:511
	asm("	ST.H    [R1],SVGen_Ta_R4                              " "\n");//PWM2 = SVGen_Ta
10000682:	14 84       	ST.H      [R1], R4
..\application\libkf32foc.c:512
	asm("	LD		R1,#dPWM3                                     " "\n");
10000684:	30 41       	LD        R1, [PC + #48]        ;->0x10000744  :=0x40001394
..\application\libkf32foc.c:513
	asm("	ST.H    [R1],SVGen_Tb_R6                              " "\n");//PWM3 = SVGen_Tb
10000686:	16 84       	ST.H      [R1], R6
..\application\libkf32foc.c:514
	asm("	LD		R1,#dPWM1                                     " "\n");
10000688:	2d 41       	LD        R1, [PC + #45]        ;->0x1000073c  :=0x40001a14
..\application\libkf32foc.c:515
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM1 = SVGen_Tc
1000068a:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:521

	//asm("	LD		R2,#5                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
1000068c:	50 04       	SJMP      $+80                  ;->0x1000072c

1000068e <jSector1>:
..\application\libkf32foc.c:528
asm("jSector1:                                                    " "\n");

	//SVGen_qVr1 >= 0 && SVGen_qVr2 < 0 && SVGen_qVr3 < 0
	//@Sector1(001)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R6,SVGen_qVr3_R6,SVGen_iPWMPeriod_R2 " "\n");
1000068e:	b6 ca       	MULS      R6, R6, R2
..\application\libkf32foc.c:529
	asm("	ASR	    SVGen_T1_R6,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr3*iPWMPeriod)>>15 (T1<0)
10000690:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:530
	asm("	MULS    SVGen_T2_R5,SVGen_qVr2_R5,SVGen_iPWMPeriod_R2 " "\n");
10000692:	ad ca       	MULS      R5, R5, R2
..\application\libkf32foc.c:531
	asm("	ASR	    SVGen_T2_R5,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr2*iPWMPeriod)>>15 (T2<0)
10000694:	af 78       	ASR       R5, #15
..\application\libkf32foc.c:532
	asm("	ADD     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R6   " "\n");
10000696:	9a c3       	ADD       R3, R2, R6
..\application\libkf32foc.c:533
	asm("	ADD     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R5           " "\n");
10000698:	5b c3       	ADD       R3, R3, R5
..\application\libkf32foc.c:534
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod + SVGen_T1 + SVGen_T2)>>1 (Tc>0)
1000069a:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:535
	asm("	SUB     SVGen_Tb_R6,SVGen_Tc_R3,SVGen_T1_R6           " "\n");//R4 = SVGen_Tb = SVGen_Tc - SVGen_T1 (T1<0)
1000069c:	b3 c7       	SUB       R6, R3, R6
..\application\libkf32foc.c:536
	asm("	SUB     SVGen_Ta_R5,SVGen_Tb_R6,SVGen_T2_R5           " "\n");//R5 = SVGen_Ta = SVGen_Tb - SVGen_T2 (T2<0)
1000069e:	6e c7       	SUB       R5, R6, R5
..\application\libkf32foc.c:538
	//更新PWM
	asm("	SUB     SVGen_Ta_R5,SVGen_iPWMPeriod_R2,SVGen_Ta_R5   " "\n");
100006a0:	6a c7       	SUB       R5, R2, R5
..\application\libkf32foc.c:539
	asm("	SUB     SVGen_Tb_R6,SVGen_iPWMPeriod_R2,SVGen_Tb_R6   " "\n");
100006a2:	b2 c7       	SUB       R6, R2, R6
..\application\libkf32foc.c:540
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
100006a4:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:542

	asm("	LD		R1,#dPWM2                                     " "\n");
100006a6:	27 41       	LD        R1, [PC + #39]        ;->0x10000740  :=0x40001314
..\application\libkf32foc.c:543
	asm("	ST.H    [R1],SVGen_Ta_R5                              " "\n");//PWM2 = SVGen_Ta
100006a8:	15 84       	ST.H      [R1], R5
..\application\libkf32foc.c:544
	asm("	LD		R1,#dPWM1                                     " "\n");
100006aa:	25 41       	LD        R1, [PC + #37]        ;->0x1000073c  :=0x40001a14
..\application\libkf32foc.c:545
	asm("	ST.H    [R1],SVGen_Tb_R6                              " "\n");//PWM1 = SVGen_Tb
100006ac:	16 84       	ST.H      [R1], R6
..\application\libkf32foc.c:546
	asm("	LD		R1,#dPWM3                                     " "\n");
100006ae:	26 41       	LD        R1, [PC + #38]        ;->0x10000744  :=0x40001394
..\application\libkf32foc.c:547
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM3 = SVGen_Tc
100006b0:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:553

	//asm("	LD		R2,#1                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
100006b2:	3d 04       	SJMP      $+61                  ;->0x1000072c

100006b4 <jSector624>:
..\application\libkf32foc.c:559

asm("jSector624:                                                  " "\n");

	//判断Sector
	//SVGen_qVr2 < 0 ?
	asm("	CMP     SVGen_qVr2_R5,#0                  " "\n");
100006b4:	50 38       	CMP       R5, #0
..\application\libkf32foc.c:560
	asm("	JLT		jSector4                          " "\n");//( SVGen_qVr1 < 0 && SVGen_qVr2 < 0 ) goto jSector4
100006b6:	29 fb       	JLT       $+41                  ;->0x10000708

100006b8 <jSector62>:
..\application\libkf32foc.c:566

asm("jSector62:                                                   " "\n");

	//判断Sector
	//SVGen_qVr3 < 0 ?
	asm("	CMP     SVGen_qVr3_R6,#0                  " "\n");
100006b8:	60 38       	CMP       R6, #0
..\application\libkf32foc.c:567
	asm("	JLT		jSector2                          " "\n");//( SVGen_qVr1 < 0 && SVGen_qVr2 >= 0 && SVGen_qVr3 < 0 ) goto jSector2
100006ba:	14 fb       	JLT       $+20                  ;->0x100006e2
..\application\libkf32foc.c:572

	//SVGen_qVr1 < 0 && SVGen_qVr2 >= 0 && SVGen_qVr3 >= 0
	//@Sector6(110)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R5,SVGen_qVr2_R5,SVGen_iPWMPeriod_R2 " "\n");
100006bc:	ad ca       	MULS      R5, R5, R2
..\application\libkf32foc.c:573
	asm("	ASR	    SVGen_T1_R5,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr2*iPWMPeriod)>>15
100006be:	af 78       	ASR       R5, #15
..\application\libkf32foc.c:574
	asm("	MULS    SVGen_T2_R6,SVGen_qVr3_R6,SVGen_iPWMPeriod_R2 " "\n");
100006c0:	b6 ca       	MULS      R6, R6, R2
..\application\libkf32foc.c:575
	asm("	ASR	    SVGen_T2_R6,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr3*iPWMPeriod)>>15
100006c2:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:576
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R5   " "\n");
100006c4:	5a c7       	SUB       R3, R2, R5
..\application\libkf32foc.c:577
	asm("	SUB     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R6           " "\n");
100006c6:	9b c7       	SUB       R3, R3, R6
..\application\libkf32foc.c:578
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod - SVGen_T1 - SVGen_T2)>>1
100006c8:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:579
	asm("	ADD     SVGen_Tb_R5,SVGen_Tc_R3,SVGen_T1_R5           " "\n");//R4 = SVGen_Tb = SVGen_Tc + SVGen_T1
100006ca:	6b c3       	ADD       R5, R3, R5
..\application\libkf32foc.c:580
	asm("	ADD     SVGen_Ta_R6,SVGen_Tb_R5,SVGen_T2_R6           " "\n");//R5 = SVGen_Ta = SVGen_Tb + SVGen_T2
100006cc:	b5 c3       	ADD       R6, R5, R6
..\application\libkf32foc.c:582
	//更新PWM
	asm("	SUB     SVGen_Ta_R6,SVGen_iPWMPeriod_R2,SVGen_Ta_R6   " "\n");
100006ce:	b2 c7       	SUB       R6, R2, R6
..\application\libkf32foc.c:583
	asm("	SUB     SVGen_Tb_R5,SVGen_iPWMPeriod_R2,SVGen_Tb_R5   " "\n");
100006d0:	6a c7       	SUB       R5, R2, R5
..\application\libkf32foc.c:584
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
100006d2:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:586

	asm("	LD		R1,#dPWM3                                     " "\n");
100006d4:	1c 41       	LD        R1, [PC + #28]        ;->0x10000744  :=0x40001394
..\application\libkf32foc.c:587
	asm("	ST.H    [R1],SVGen_Ta_R6                              " "\n");//PWM3 = SVGen_Ta
100006d6:	16 84       	ST.H      [R1], R6
..\application\libkf32foc.c:588
	asm("	LD		R1,#dPWM1                                     " "\n");
100006d8:	19 41       	LD        R1, [PC + #25]        ;->0x1000073c  :=0x40001a14
..\application\libkf32foc.c:589
	asm("	ST.H    [R1],SVGen_Tb_R5                              " "\n");//PWM1 = SVGen_Tb
100006da:	15 84       	ST.H      [R1], R5
..\application\libkf32foc.c:590
	asm("	LD		R1,#dPWM2                                     " "\n");
100006dc:	19 41       	LD        R1, [PC + #25]        ;->0x10000740  :=0x40001314
..\application\libkf32foc.c:591
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM2 = SVGen_Tc
100006de:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:597

	//asm("	LD		R2,#6                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
100006e0:	26 04       	SJMP      $+38                  ;->0x1000072c

100006e2 <jSector2>:
..\application\libkf32foc.c:604
asm("jSector2:                                                    " "\n");

	//SVGen_qVr1 < 0 && SVGen_qVr2 >= 0 && SVGen_qVr3 < 0
	//@Sector2(010)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R4,SVGen_qVr1_R4,SVGen_iPWMPeriod_R2 " "\n");
100006e2:	a4 ca       	MULS      R4, R4, R2
..\application\libkf32foc.c:605
	asm("	ASR	    SVGen_T1_R4,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr1*iPWMPeriod)>>15 (T1<0)
100006e4:	a7 78       	ASR       R4, #15
..\application\libkf32foc.c:606
	asm("	MULS    SVGen_T2_R6,SVGen_qVr3_R6,SVGen_iPWMPeriod_R2 " "\n");
100006e6:	b6 ca       	MULS      R6, R6, R2
..\application\libkf32foc.c:607
	asm("	ASR	    SVGen_T2_R6,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr3*iPWMPeriod)>>15 (T2<0)
100006e8:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:608
	asm("	ADD     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R4   " "\n");
100006ea:	1a c3       	ADD       R3, R2, R4
..\application\libkf32foc.c:609
	asm("	ADD     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R6           " "\n");
100006ec:	9b c3       	ADD       R3, R3, R6
..\application\libkf32foc.c:610
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod + SVGen_T1 + SVGen_T2)>>1 (Tc>0)
100006ee:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:611
	asm("	SUB     SVGen_Tb_R4,SVGen_Tc_R3,SVGen_T1_R4           " "\n");//R4 = SVGen_Tb = SVGen_Tc - SVGen_T1 (T1<0)
100006f0:	23 c7       	SUB       R4, R3, R4
..\application\libkf32foc.c:612
	asm("	SUB     SVGen_Ta_R6,SVGen_Tb_R4,SVGen_T2_R6           " "\n");//R5 = SVGen_Ta = SVGen_Tb - SVGen_T2 (T2<0)
100006f2:	b4 c7       	SUB       R6, R4, R6
..\application\libkf32foc.c:614
	//更新PWM
	asm("	SUB     SVGen_Ta_R6,SVGen_iPWMPeriod_R2,SVGen_Ta_R6   " "\n");
100006f4:	b2 c7       	SUB       R6, R2, R6
..\application\libkf32foc.c:615
	asm("	SUB     SVGen_Tb_R4,SVGen_iPWMPeriod_R2,SVGen_Tb_R4   " "\n");
100006f6:	22 c7       	SUB       R4, R2, R4
..\application\libkf32foc.c:616
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
100006f8:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:618

	asm("	LD		R1,#dPWM1                                     " "\n");
100006fa:	11 41       	LD        R1, [PC + #17]        ;->0x1000073c  :=0x40001a14
..\application\libkf32foc.c:619
	asm("	ST.H    [R1],SVGen_Ta_R6                              " "\n");//PWM1 = SVGen_Ta
100006fc:	16 84       	ST.H      [R1], R6
..\application\libkf32foc.c:620
	asm("	LD		R1,#dPWM3                                     " "\n");
100006fe:	12 41       	LD        R1, [PC + #18]        ;->0x10000744  :=0x40001394
..\application\libkf32foc.c:621
	asm("	ST.H    [R1],SVGen_Tb_R4                              " "\n");//PWM3 = SVGen_Tb
10000700:	14 84       	ST.H      [R1], R4
..\application\libkf32foc.c:622
	asm("	LD		R1,#dPWM2                                     " "\n");
10000702:	10 41       	LD        R1, [PC + #16]        ;->0x10000740  :=0x40001314
..\application\libkf32foc.c:623
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM2 = SVGen_Tc
10000704:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:629

	//asm("	LD		R2,#2                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
10000706:	13 04       	SJMP      $+19                  ;->0x1000072c

10000708 <jSector4>:
..\application\libkf32foc.c:636
asm("jSector4:                                                    " "\n");

	//SVGen_qVr1 < 0 && SVGen_qVr2 < 0 && SVGen_qVr3 >= 0
	//@Sector4(100)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R5,SVGen_qVr2_R5,SVGen_iPWMPeriod_R2 " "\n");
10000708:	ad ca       	MULS      R5, R5, R2
..\application\libkf32foc.c:637
	asm("	ASR	    SVGen_T1_R5,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr2*iPWMPeriod)>>15 (T1<0)
1000070a:	af 78       	ASR       R5, #15
..\application\libkf32foc.c:638
	asm("	MULS    SVGen_T2_R4,SVGen_qVr1_R4,SVGen_iPWMPeriod_R2 " "\n");
1000070c:	a4 ca       	MULS      R4, R4, R2
..\application\libkf32foc.c:639
	asm("	ASR	    SVGen_T2_R4,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr1*iPWMPeriod)>>15 (T2<0)
1000070e:	a7 78       	ASR       R4, #15
..\application\libkf32foc.c:640
	asm("	ADD     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R5   " "\n");
10000710:	5a c3       	ADD       R3, R2, R5
..\application\libkf32foc.c:641
	asm("	ADD     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R4           " "\n");
10000712:	1b c3       	ADD       R3, R3, R4
..\application\libkf32foc.c:642
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod + SVGen_T1 + SVGen_T2)>>1 (Tc>0)
10000714:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:643
	asm("	SUB     SVGen_Tb_R5,SVGen_Tc_R3,SVGen_T1_R5           " "\n");//R4 = SVGen_Tb = SVGen_Tc - SVGen_T1 (T1<0)
10000716:	6b c7       	SUB       R5, R3, R5
..\application\libkf32foc.c:644
	asm("	SUB     SVGen_Ta_R4,SVGen_Tb_R5,SVGen_T2_R4           " "\n");//R5 = SVGen_Ta = SVGen_Tb - SVGen_T2 (T2<0)
10000718:	25 c7       	SUB       R4, R5, R4
..\application\libkf32foc.c:646
	//更新PWM
	asm("	SUB     SVGen_Ta_R4,SVGen_iPWMPeriod_R2,SVGen_Ta_R4   " "\n");
1000071a:	22 c7       	SUB       R4, R2, R4
..\application\libkf32foc.c:647
	asm("	SUB     SVGen_Tb_R5,SVGen_iPWMPeriod_R2,SVGen_Tb_R5   " "\n");
1000071c:	6a c7       	SUB       R5, R2, R5
..\application\libkf32foc.c:648
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
1000071e:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:650

	asm("	LD		R1,#dPWM3                                     " "\n");
10000720:	09 41       	LD        R1, [PC + #9]         ;->0x10000744  :=0x40001394
..\application\libkf32foc.c:651
	asm("	ST.H    [R1],SVGen_Ta_R4                              " "\n");//PWM3 = SVGen_Ta
10000722:	14 84       	ST.H      [R1], R4
..\application\libkf32foc.c:652
	asm("	LD		R1,#dPWM2                                     " "\n");
10000724:	07 41       	LD        R1, [PC + #7]         ;->0x10000740  :=0x40001314
..\application\libkf32foc.c:653
	asm("	ST.H    [R1],SVGen_Tb_R5                              " "\n");//PWM2 = SVGen_Tb
10000726:	15 84       	ST.H      [R1], R5
..\application\libkf32foc.c:654
	asm("	LD		R1,#dPWM1                                     " "\n");
10000728:	05 41       	LD        R1, [PC + #5]         ;->0x1000073c  :=0x40001a14
..\application\libkf32foc.c:655
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM1 = SVGen_Tc
1000072a:	13 84       	ST.H      [R1], R3

1000072c <jExitPWM>:
..\application\libkf32foc.c:664
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	//asm("	JMP		jExit                                         " "\n");

asm("jExitPWM:                                      " "\n");
	asm("	POP	R7                               " "\n");
1000072c:	07 5d       	POP       R7
..\application\libkf32foc.c:665
	asm("	POP	R6                               " "\n");
1000072e:	06 5d       	POP       R6
..\application\libkf32foc.c:666
}
10000730:	1d 5c       	JMP       LR
10000732:	00 00       	NOP      NOP      
10000734:	b4 3f 00 10 	.long     0x10003fb4 ->268451764  [!!!@2@:CMP       R11, #116	@@: MOV       R0, #0
10000738:	a4 3f 00 10 	.long     0x10003fa4 ->268451748  [!!!@2@:CMP       R10, #116	@@: MOV       R0, #0
1000073c:	14 1a 00 40 	.long     0x40001a14 ->1073748500  [!!!@2@:MOV       R1, #164	@@: LD        R0, [PC + #0]         ;->0x1000073c  :=0x40001a14
10000740:	14 13 00 40 	.long     0x40001314 ->1073746708  [!!!@2@:MOV       R1, #52	@@: LD        R0, [PC + #0]         ;->0x10000740  :=0x40001314
10000744:	94 13 00 40 	.long     0x40001394 ->1073746836  [!!!@2@:MOV       R9, #52	@@: LD        R0, [PC + #0]         ;->0x10000744  :=0x40001394

10000748 <ClarkePark>:
ClarkePark():
..\application\libkf32foc.c:673

/******park clarke**********************************************************/
void __attribute__((section(".indata"))) ClarkePark(void)
{
	//手动压栈
	asm("	PUSH	R6                               " "\n");
10000748:	26 5d       	PUSH      R6
..\application\libkf32foc.c:674
	asm("	PUSH	R7                               " "\n");
1000074a:	27 5d       	PUSH      R7
..\application\libkf32foc.c:694
	asm("   .EQU Park_qValpha, 22                     " "\n");
	asm("   .EQU Park_qVbeta, 24                      " "\n");
	asm("	.EQU Park_qIaOffset, 26                  " "\n");
	asm("	.EQU Park_qIbOffset, 28                  " "\n");

	asm("	LD	    R0,#ParkParm+#Park_qIa             " "\n");//计算Park_qIa地址
1000074c:	15 40       	LD        R0, [PC + #21]        ;->0x100007a0  :=0x10003fb8
..\application\libkf32foc.c:695
	asm("	LDS.H	R1,[R0]                   " "\n");//R1 = Park_qIa
1000074e:	10 86       	LDS.H     R1, [R0]
..\application\libkf32foc.c:697

	asm("	ADD     R0,#Park_qIb-#Park_qIa             " "\n");//计算Park_qIb地址
10000750:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:698
	asm("	LDS.H	R2,[R0]                   " "\n");//R2 = Park_qIb
10000752:	20 86       	LDS.H     R2, [R0]
..\application\libkf32foc.c:700

	asm("	ADD     R0,#Park_qIaOffset-#Park_qIb       " "\n");//计算Park_qIaOffset地址
10000754:	02 29       	ADD       R0, #18
..\application\libkf32foc.c:701
	asm("	LDS.H	R3,[R0]             " "\n");//R3 = Park_qIaOffset
10000756:	30 86       	LDS.H     R3, [R0]
..\application\libkf32foc.c:703

	asm("	ADD     R0,#Park_qIbOffset-#Park_qIaOffset " "\n");//计算Park_qIbOffset地址
10000758:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:704
	asm("	LDS.H	R4,[R0]             " "\n");//R4 = Park_qIbOffset
1000075a:	40 86       	LDS.H     R4, [R0]
..\application\libkf32foc.c:706

	asm("	SUB     R1,R3,R1     " "\n");
1000075c:	4b c6       	SUB       R1, R3, R1
..\application\libkf32foc.c:707
	asm("	LSL   	R1,#4			                      " "\n");
1000075e:	0c 7a       	LSL       R1, #4
..\application\libkf32foc.c:709

	asm("	SUB     R2,R4,R2     " "\n");
10000760:	94 c6       	SUB       R2, R4, R2
..\application\libkf32foc.c:710
	asm("	LSL   	R2,#4			                      " "\n");
10000762:	14 7a       	LSL       R2, #4
..\application\libkf32foc.c:712

	asm("	SUB     R0,#Park_qIbOffset-#Park_qIa       " "\n");//计算Park_qIa地址
10000764:	06 31       	SUB       R0, #22
..\application\libkf32foc.c:713
	asm("	ST.H    [R0++],R1                 " "\n");
10000766:	01 75       	ST.H      [R0++], R1
..\application\libkf32foc.c:714
	asm("	ST.H    [R0++],R2                 " "\n");
10000768:	02 75       	ST.H      [R0++], R2
..\application\libkf32foc.c:715
	asm("	ST.H    [R0++],R1                 " "\n");//ParkParm.qIalpha = ParkParm.qIa;
1000076a:	01 75       	ST.H      [R0++], R1
..\application\libkf32foc.c:717
	//到此R0指向ParkParm.qIbeta地址
	asm("   MOV		R3, #OneBySq3                         " "\n");
1000076c:	23 5c e7 49 	MOVL      R3, #18919
..\application\libkf32foc.c:718
	asm("	ADD 	R2,R2                        " "\n");
10000770:	22 64       	ADD       R2, R2
..\application\libkf32foc.c:719
	asm("	ADD 	R6,R1,R2         " "\n");
10000772:	b1 c2       	ADD       R6, R1, R2
..\application\libkf32foc.c:720
	asm("	MULS 	R6,R6,R3      " "\n");
10000774:	f6 ca       	MULS      R6, R6, R3
..\application\libkf32foc.c:721
	asm("	ASR   	R6,#15			                   " "\n");
10000776:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:722
	asm("	ST.H    [R0++],R6               " "\n");//ParkParm.qIbeta = R6;
10000778:	06 75       	ST.H      [R0++], R6
..\application\libkf32foc.c:724
	//到此R0指向ParkParm.qId地址
	asm("	SUB     R0,#Park_qId-#Park_qSin             " "\n");//计算Park_qSin地址
1000077a:	0c 30       	SUB       R0, #12
..\application\libkf32foc.c:725
	asm("	LDS.H	R3,[R0]                   " "\n");//R3 = Park_qSin
1000077c:	30 86       	LDS.H     R3, [R0]
..\application\libkf32foc.c:727

	asm("	ADD     R0,#Park_qCos-#Park_qSin            " "\n");//计算Park_qCos地址
1000077e:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:728
	asm("	LDS.H	R4,[R0]                   " "\n");//R4 = Park_qCos
10000780:	40 86       	LDS.H     R4, [R0]
..\application\libkf32foc.c:730
	//到此R0指向ParkParm.qCos地址
	asm("	MULS   	R2,R1,R4         " "\n");
10000782:	11 cb       	MULS      R2, R1, R4
..\application\libkf32foc.c:731
	asm("	MULS   	R5,R6,R3          " "\n");
10000784:	ee ca       	MULS      R5, R6, R3
..\application\libkf32foc.c:732
	asm("	ADD     R7,R2,R5                " "\n");
10000786:	7a c3       	ADD       R7, R2, R5
..\application\libkf32foc.c:733
	asm("	ASR   	R7,#15			                       " "\n");
10000788:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:735

	asm("	ADD     R0,#Park_qId-#Park_qCos             " "\n");//计算Park_qId地址
1000078a:	0a 28       	ADD       R0, #10
..\application\libkf32foc.c:736
	asm("	ST.H    [R0++],R7                  " "\n");
1000078c:	07 75       	ST.H      [R0++], R7
..\application\libkf32foc.c:738
	//到此R0指向ParkParm.qIq地址
	asm("	MULS   	R2,R1,R3    	   " "\n");
1000078e:	d1 ca       	MULS      R2, R1, R3
..\application\libkf32foc.c:739
	asm("	MULS   	R5,R6,R4    	   " "\n");
10000790:	2e cb       	MULS      R5, R6, R4
..\application\libkf32foc.c:740
	asm("	SUB     R7,R5,R2                " "\n");
10000792:	bd c6       	SUB       R7, R5, R2
..\application\libkf32foc.c:741
	asm("	ASR   	R7,#15			                       " "\n");
10000794:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:743

	asm("	ST.H    [R0],R7                    " "\n");
10000796:	07 84       	ST.H      [R0], R7
..\application\libkf32foc.c:745

	asm("	POP		R7                                   ""\n\t");
10000798:	07 5d       	POP       R7
..\application\libkf32foc.c:746
	asm("	POP		R6                                   ""\n\t");
1000079a:	06 5d       	POP       R6
..\application\libkf32foc.c:748

}
1000079c:	1d 5c       	JMP       LR
1000079e:	00 00       	NOP      NOP      
100007a0:	b8 3f 00 10 	.long     0x10003fb8 ->268451768  [!!!@2@:CMP       R11, #120	@@: MOV       R0, #0

100007a4 <CalcPI>:
CalcPI():
..\application\libkf32foc.c:753

/******PI calc***************************************************************/
void __attribute__((section(".indata"))) CalcPI( tPIParm *pParm)
{
	asm("	PUSH	R6                             ""\n\t" );
100007a4:	26 5d       	PUSH      R6
..\application\libkf32foc.c:754
	asm("	PUSH	R7                             ""\n\t" );
100007a6:	27 5d       	PUSH      R7
..\application\libkf32foc.c:765
	asm("	.EQU 	PI_qOutMin, 16                 ""\n\t" );
	asm("	.EQU 	PI_qdSum, 20                   ""\n\t" );
	asm("	.EQU 	PI_qOut, 24                    ""\n\t" );

	//连续Load数据
	asm("	LD.W	R1,[R0++]        ""\n\t");//取PI_qErr变量
100007a8:	10 72       	LD.W      R1, [R0++]
..\application\libkf32foc.c:766
	asm("	LD.W	R2, [R0++]        ""\n\t");//取PI_qKp变量
100007aa:	20 72       	LD.W      R2, [R0++]
..\application\libkf32foc.c:767
	asm("	LD.W	R3, [R0++]        ""\n\t");//取PI_qKi变量
100007ac:	30 72       	LD.W      R3, [R0++]
..\application\libkf32foc.c:768
	asm("	LD.W	R4, [R0++]    ""\n\t");//取PI_qOutMax变量
100007ae:	40 72       	LD.W      R4, [R0++]
..\application\libkf32foc.c:769
	asm("	LD.W	R5, [R0++]    ""\n\t");//取PI_qOutMin变量
100007b0:	50 72       	LD.W      R5, [R0++]
..\application\libkf32foc.c:770
	asm("	LD.W	R6,   [R0]      ""\n\t");//取PI_qdSum变量
100007b2:	60 82       	LD.W      R6, [R0]
..\application\libkf32foc.c:774
	//到此R0指向PI_qdSum地址


	asm("	MULS	R7,R1,R2       ""\n\t");
100007b4:	b9 ca       	MULS      R7, R1, R2
..\application\libkf32foc.c:775
	asm("	ADD		R7,R7,R6     ""\n\t");
100007b6:	bf c3       	ADD       R7, R7, R6
..\application\libkf32foc.c:776
	asm("	ASR   	R7,#15			               " "\n");
100007b8:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:777
	asm("	CMP     R7,R4               " "\n");
100007ba:	74 70       	CMP       R7, R4
..\application\libkf32foc.c:778
	asm("	JLT		jLess                                  " "\n");//( PI_qOut < PI_qOutMax ) goto jLess;
100007bc:	07 fb       	JLT       $+7                   ;->0x100007ca
..\application\libkf32foc.c:779
	asm("	MOV     R7,R4               " "\n");
100007be:	e4 58       	MOV       R7, R4
..\application\libkf32foc.c:780
	asm("	CMP     R1,#0                          " "\n");
100007c0:	10 38       	CMP       R1, #0
..\application\libkf32foc.c:781
	asm("	JGT		jExit1                                  " "\n");//( PI_qErr > 0 ) goto jExit;
100007c2:	0e fc       	JGT       $+14                  ;->0x100007de
..\application\libkf32foc.c:782
	asm("	MULS	R1,R1,R3       ""\n\t");
100007c4:	c9 ca       	MULS      R1, R1, R3
..\application\libkf32foc.c:783
	asm("	ADD		R6,R6,R1    ""\n\t");
100007c6:	76 c2       	ADD       R6, R6, R1
..\application\libkf32foc.c:784
	asm("	JMP		jExit1                                  " "\n");
100007c8:	0b 04       	SJMP      $+11                  ;->0x100007de

100007ca <jLess>:
..\application\libkf32foc.c:788

asm("jLess:                                                " "\n");

	asm("	CMP     R7,R5               " "\n");
100007ca:	75 70       	CMP       R7, R5
..\application\libkf32foc.c:789
	asm("	JGT		jGreat                                 " "\n");//( PI_qOut > PI_qOutMax ) goto jGreat;
100007cc:	07 fc       	JGT       $+7                   ;->0x100007da
..\application\libkf32foc.c:790
	asm("	MOV     R7,R5               " "\n");
100007ce:	e5 58       	MOV       R7, R5
..\application\libkf32foc.c:791
	asm("	CMP     R1,#0                          " "\n");
100007d0:	10 38       	CMP       R1, #0
..\application\libkf32foc.c:792
	asm("	JLT		jExit1                                  " "\n");//( PI_qErr < 0 ) goto jExit;
100007d2:	06 fb       	JLT       $+6                   ;->0x100007de
..\application\libkf32foc.c:793
	asm("	MULS	R1,R1,R3       ""\n\t");
100007d4:	c9 ca       	MULS      R1, R1, R3
..\application\libkf32foc.c:794
	asm("	ADD		R6,R6,R1    ""\n\t");
100007d6:	76 c2       	ADD       R6, R6, R1
..\application\libkf32foc.c:795
	asm("	JMP		jExit1                                  " "\n");
100007d8:	03 04       	SJMP      $+3                   ;->0x100007de

100007da <jGreat>:
..\application\libkf32foc.c:799

asm("jGreat:                                               " "\n");

	asm("	MULS	R1,R1,R3       ""\n\t");
100007da:	c9 ca       	MULS      R1, R1, R3
..\application\libkf32foc.c:800
	asm("	ADD		R6,R6,R1    ""\n\t");
100007dc:	76 c2       	ADD       R6, R6, R1

100007de <jExit1>:
..\application\libkf32foc.c:804

asm("jExit1:                                                " "\n");

	asm("	ST.W    [R0++],R6          " "\n");
100007de:	06 73       	ST.W      [R0++], R6
..\application\libkf32foc.c:805
	asm("	ST.W    [R0],  R7           " "\n");
100007e0:	07 85       	ST.W      [R0], R7
..\application\libkf32foc.c:807

	asm("	POP		R7					                 ""\n\t" );
100007e2:	07 5d       	POP       R7
..\application\libkf32foc.c:808
	asm("	POP		R6					                 ""\n\t" );
100007e4:	06 5d       	POP       R6
..\application\libkf32foc.c:809
}
100007e6:	1d 5c       	JMP       LR

100007e8 <CalcEstI>:
CalcEstI():
..\application\libkf32foc.c:856
	asm("	.EQU   SMC_Vbeta, 7                    ""\n\t");//
	asm("	.EQU   SMC_Ebeta, 8                    ""\n\t");//
	asm("	.EQU   SMC_Zbeta, 10                   ""\n\t");//
	asm("	.EQU   SMC_EstIbeta, 11                ""\n\t");//

	asm("	MOV R2,#smc1                            ""\n\t");
100007e8:	22 5c 2c 40 	MOVL      R2, #16428
100007ec:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:857
	asm("	ADD	R2,#SMC_Gsmopos              ""\n\t");
100007f0:	24 28       	ADD       R2, #4
..\application\libkf32foc.c:858
	asm("	ADD	R2,#SMC_Gsmopos              ""\n\t");
100007f2:	24 28       	ADD       R2, #4
..\application\libkf32foc.c:859
	asm("	LDS.H R4,[R2]              ""\n\t");//Gsmopos大于0,正数
100007f4:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:860
	asm("	MOV R2,#smc1                            ""\n\t");
100007f6:	22 5c 2c 40 	MOVL      R2, #16428
100007fa:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:861
	asm("	ADD	R2,#SMC_Valpha              ""\n\t");
100007fe:	20 28       	ADD       R2, #0
..\application\libkf32foc.c:862
	asm("	ADD	R2,#SMC_Valpha              ""\n\t");
10000800:	20 28       	ADD       R2, #0
..\application\libkf32foc.c:863
	asm("	LDS.H R5,[R2]               ""\n\t");
10000802:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:864
	asm("	MULS R0,R4,R5                    		""\n\t");
10000804:	44 cb       	MULS      R0, R4, R5
..\application\libkf32foc.c:865
	asm("	LSL R0,#1                    		""\n\t");
10000806:	01 7a       	LSL       R0, #1
..\application\libkf32foc.c:866
	asm("	ASR R0,#16                    		""\n\t");
10000808:	00 79       	ASR       R0, #16
..\application\libkf32foc.c:868

	asm("	MOV R2,#smc1                            ""\n\t");
1000080a:	22 5c 2c 40 	MOVL      R2, #16428
1000080e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:869
	asm("	ADD	R2,#SMC_Ealpha              ""\n\t");
10000812:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:870
	asm("	ADD	R2,#SMC_Ealpha              ""\n\t");
10000814:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:871
	asm("	LDS.H R5,[R2]               ""\n\t");
10000816:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:872
	asm("	MULS R1,R4,R5                    		""\n\t");
10000818:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:873
	asm("	LSL R1,#1                    		""\n\t");
1000081a:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:874
	asm("	ASR R1,#16                    		""\n\t");
1000081c:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:875
	asm("	SUB R0,R1                    		""\n\t");
1000081e:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:877

	asm("	MOV R2,#smc1                            ""\n\t");
10000820:	22 5c 2c 40 	MOVL      R2, #16428
10000824:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:878
	asm("	ADD	R2,#SMC_Zalpha              ""\n\t");
10000828:	23 28       	ADD       R2, #3
..\application\libkf32foc.c:879
	asm("	ADD	R2,#SMC_Zalpha              ""\n\t");
1000082a:	23 28       	ADD       R2, #3
..\application\libkf32foc.c:880
	asm("	LDS.H R5,[R2]               ""\n\t");
1000082c:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:881
	asm("	MULS R1,R4,R5                    		""\n\t");
1000082e:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:882
	asm("	LSL R1,#1                    		""\n\t");
10000830:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:883
	asm("	ASR R1,#16                    		""\n\t");
10000832:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:884
	asm("	SUB R0,R1                    		""\n\t");
10000834:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:886

	asm("	MOV R2,#smc1                            ""\n\t");
10000836:	22 5c 2c 40 	MOVL      R2, #16428
1000083a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:887
	asm("	ADD	R2,#SMC_Fsmopos              ""\n\t");
1000083e:	26 28       	ADD       R2, #6
..\application\libkf32foc.c:888
	asm("	ADD	R2,#SMC_Fsmopos              ""\n\t");
10000840:	26 28       	ADD       R2, #6
..\application\libkf32foc.c:889
	asm("	LDS.H R4,[R2]              ""\n\t");
10000842:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:890
	asm("	MOV R2,#smc1                            ""\n\t");
10000844:	22 5c 2c 40 	MOVL      R2, #16428
10000848:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:891
	asm("	ADD	R2,#SMC_EstIalpha              ""\n\t");
1000084c:	25 28       	ADD       R2, #5
..\application\libkf32foc.c:892
	asm("	ADD	R2,#SMC_EstIalpha              ""\n\t");
1000084e:	25 28       	ADD       R2, #5
..\application\libkf32foc.c:893
	asm("	LDS.H R5,[R2]            ""\n\t");
10000850:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:894
	asm("	MULS R1,R4,R5                    		""\n\t");
10000852:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:895
	asm("	LSL R1,#1                    		""\n\t");
10000854:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:896
	asm("	ASR R1,#16                    		""\n\t");
10000856:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:897
	asm("	ADD R0,R1                    		""\n\t");
10000858:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:898
	asm("	MOV R2,#smc1                            ""\n\t");
1000085a:	22 5c 2c 40 	MOVL      R2, #16428
1000085e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:899
	asm("	ST.H  [R2+#SMC_EstIalpha],R0            ""\n\t");
10000862:	50 b1       	ST.H      [R2 + #5], R0
..\application\libkf32foc.c:906
	//	s->EstIbeta = s->Gsmopos * s->Vbeta
	//				- s->Gsmopos * s->Ebeta
	//				- s->Gsmopos * s->Zbeta
	//				+ s->Fsmopos * s->EstIbeta
	//
	asm("	MOV R2,#smc1                            ""\n\t");
10000864:	22 5c 2c 40 	MOVL      R2, #16428
10000868:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:907
	asm("	ADD	R2,#SMC_Gsmopos              ""\n\t");
1000086c:	24 28       	ADD       R2, #4
..\application\libkf32foc.c:908
	asm("	ADD	R2,#SMC_Gsmopos              ""\n\t");
1000086e:	24 28       	ADD       R2, #4
..\application\libkf32foc.c:909
	asm("	LDS.H  R4,[R2]             ""\n\t" );
10000870:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:910
	asm("	MOV R2,#smc1                            ""\n\t");
10000872:	22 5c 2c 40 	MOVL      R2, #16428
10000876:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:911
	asm("	ADD	R2,#SMC_Vbeta              ""\n\t");
1000087a:	27 28       	ADD       R2, #7
..\application\libkf32foc.c:912
	asm("	ADD	R2,#SMC_Vbeta              ""\n\t");
1000087c:	27 28       	ADD       R2, #7
..\application\libkf32foc.c:913
	asm("	LDS.H  R5,[R2]               ""\n\t" );
1000087e:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:914
	asm("	MULS R0,R4,R5                    ""\n\t"      );
10000880:	44 cb       	MULS      R0, R4, R5
..\application\libkf32foc.c:915
	asm("	LSL R0,#1                    		""\n\t");
10000882:	01 7a       	LSL       R0, #1
..\application\libkf32foc.c:916
	asm("	ASR R0,#16                    		""\n\t");
10000884:	00 79       	ASR       R0, #16
..\application\libkf32foc.c:917
	asm("	MOV R2,#smc1                            ""\n\t");
10000886:	22 5c 2c 40 	MOVL      R2, #16428
1000088a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:918
	asm("	ADD	R2,#SMC_Ebeta              ""\n\t");
1000088e:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:919
	asm("	ADD	R2,#SMC_Ebeta              ""\n\t");
10000890:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:920
	asm("	LDS.H R5,[R2]                ""\n\t" );
10000892:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:921
	asm("	MULS R1,R4,R5                    ""\n\t"      );
10000894:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:922
	asm("	LSL R1,#1                    		""\n\t");
10000896:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:923
	asm("	ASR R1,#16                    		""\n\t");
10000898:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:924
	asm("	SUB R0,R1                    		""\n\t");
1000089a:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:926

	asm("	MOV R2,#smc1                            ""\n\t");
1000089c:	22 5c 2c 40 	MOVL      R2, #16428
100008a0:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:927
	asm("	ADD	R2,#SMC_Zbeta              ""\n\t");
100008a4:	2a 28       	ADD       R2, #10
..\application\libkf32foc.c:928
	asm("	ADD	R2,#SMC_Zbeta              ""\n\t");
100008a6:	2a 28       	ADD       R2, #10
..\application\libkf32foc.c:929
	asm("	LDS.H R5,[R2]                ""\n\t" );
100008a8:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:931

	asm("	MULS R1,R4,R5                    ""\n\t"      );
100008aa:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:932
	asm("	LSL R1,#1                    		""\n\t");
100008ac:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:933
	asm("	ASR R1,#16                    		""\n\t");
100008ae:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:934
	asm("	SUB R0,R1                    		""\n\t");
100008b0:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:936

	asm("	MOV R2,#smc1                            ""\n\t");
100008b2:	22 5c 2c 40 	MOVL      R2, #16428
100008b6:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:937
	asm("	ADD	R2,#SMC_Fsmopos              ""\n\t");
100008ba:	26 28       	ADD       R2, #6
..\application\libkf32foc.c:938
	asm("	ADD	R2,#SMC_Fsmopos              ""\n\t");
100008bc:	26 28       	ADD       R2, #6
..\application\libkf32foc.c:939
	asm("	LDS.H R4,[R2]              ""\n\t" );
100008be:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:940
	asm("	MOV R2,#smc1                            ""\n\t");
100008c0:	22 5c 2c 40 	MOVL      R2, #16428
100008c4:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:941
	asm("	ADD	R2,#SMC_EstIbeta              ""\n\t");
100008c8:	2b 28       	ADD       R2, #11
..\application\libkf32foc.c:942
	asm("	ADD	R2,#SMC_EstIbeta              ""\n\t");
100008ca:	2b 28       	ADD       R2, #11
..\application\libkf32foc.c:943
	asm("	LDS.H R5,[R2]             ""\n\t" );
100008cc:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:944
	asm("	MULS R1,R4,R5                    ""\n\t"      );
100008ce:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:945
	asm("	LSL R1,#1                    		""\n\t");
100008d0:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:946
	asm("	ASR R1,#16                    		""\n\t");
100008d2:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:947
	asm("	ADD R0,R1                    		""\n\t");
100008d4:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:948
	asm("	MOV R2,#smc1                            ""\n\t");
100008d6:	22 5c 2c 40 	MOVL      R2, #16428
100008da:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:949
	asm("	ST.H  [R2+#SMC_EstIbeta],R0            ""\n\t"  );
100008de:	d0 b2       	ST.H      [R2 + #11], R0
..\application\libkf32foc.c:950
}
100008e0:	1d 5c       	JMP       LR

100008e2 <CalcIError>:
CalcIError():
..\application\libkf32foc.c:966
	asm("	.EQU   SMC_EstIbeta, 11                     ""\n\t" );
	asm("	.EQU   SMC_Ialpha, 12                       ""\n\t" );
	asm("	.EQU   SMC_IalphaError, 13                  ""\n\t" );
	asm("	.EQU   SMC_Ibeta, 16                        ""\n\t" );
	asm("	.EQU   SMC_IbetaError, 17                   ""\n\t" );
	asm("	MOV R2,#smc1                            ""\n\t"  );
100008e2:	22 5c 2c 40 	MOVL      R2, #16428
100008e6:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:967
	asm("	ADD R2,#SMC_EstIalpha                            ""\n\t"  );
100008ea:	25 28       	ADD       R2, #5
..\application\libkf32foc.c:968
	asm("	ADD R2,#SMC_EstIalpha                            ""\n\t"  );
100008ec:	25 28       	ADD       R2, #5
..\application\libkf32foc.c:969
	asm("	LDS.H R0,[R2]             ""\n\t" );
100008ee:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:970
	asm("	MOV R2,#smc1                            ""\n\t"  );
100008f0:	22 5c 2c 40 	MOVL      R2, #16428
100008f4:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:971
	asm("	ADD R2,#SMC_Ialpha                            ""\n\t"  );
100008f8:	2c 28       	ADD       R2, #12
..\application\libkf32foc.c:972
	asm("	ADD R2,#SMC_Ialpha                            ""\n\t"  );
100008fa:	2c 28       	ADD       R2, #12
..\application\libkf32foc.c:973
	asm("	LDS.H R1,[R2]                ""\n\t" );
100008fc:	12 86       	LDS.H     R1, [R2]
..\application\libkf32foc.c:974
	asm("	SUB R0,R0,R1                           ""\n\t"   );
100008fe:	40 c6       	SUB       R0, R0, R1
..\application\libkf32foc.c:975
	asm("	MOV R2,#smc1                            ""\n\t"  );
10000900:	22 5c 2c 40 	MOVL      R2, #16428
10000904:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:976
	asm("	ST.H [R2+#SMC_IalphaError],R0           ""\n\t");//// s->IalphaError = s->EstIalpha - s->Ialpha;
10000908:	50 b3       	ST.H      [R2 + #13], R0
..\application\libkf32foc.c:977
	asm("	MOV R2,#smc1                            ""\n\t"  );
1000090a:	22 5c 2c 40 	MOVL      R2, #16428
1000090e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:978
	asm("	ADD R2,#SMC_EstIbeta                            ""\n\t"  );
10000912:	2b 28       	ADD       R2, #11
..\application\libkf32foc.c:979
	asm("	ADD R2,#SMC_EstIbeta                            ""\n\t"  );
10000914:	2b 28       	ADD       R2, #11
..\application\libkf32foc.c:980
	asm("	LDS.H R0,[R2]              ""\n\t");
10000916:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:981
	asm("	MOV R2,#smc1                            ""\n\t"  );
10000918:	22 5c 2c 40 	MOVL      R2, #16428
1000091c:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:982
	asm("	ADD R2,#SMC_Ibeta                            ""\n\t"  );
10000920:	20 29       	ADD       R2, #16
..\application\libkf32foc.c:983
	asm("	ADD R2,#SMC_Ibeta                            ""\n\t"  );
10000922:	20 29       	ADD       R2, #16
..\application\libkf32foc.c:984
	asm("	LDS.H R1,[R2]                 ""\n\t");
10000924:	12 86       	LDS.H     R1, [R2]
..\application\libkf32foc.c:985
	asm("	SUB R0,R0,R1                           ""\n\t"  );
10000926:	40 c6       	SUB       R0, R0, R1
..\application\libkf32foc.c:986
	asm("	MOV R2,#smc1                            ""\n\t"  );
10000928:	22 5c 2c 40 	MOVL      R2, #16428
1000092c:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:987
	asm("	ST.H [R2+#SMC_IbetaError],R0            ""\n\t");//// s->IbetaError = s->EstIbeta - s->Ibeta;
10000930:	50 b4       	ST.H      [R2 + #17], R0
..\application\libkf32foc.c:990


}
10000932:	1d 5c       	JMP       LR

10000934 <CalcZalpha>:
CalcZalpha():
..\application\libkf32foc.c:1003
		// s->Zalpha = (s->Kslide * s->IalphaError) / s->MaxSMCError
	asm("	.EQU   SMC_Zalpha, 3             " "\n"     );
	asm("	.EQU   SMC_IalphaError, 13       " "\n"     );
	asm("	.EQU   SMC_Kslide, 14            " "\n"     );
	asm("	.EQU   SMC_MaxSMCError, 15       " "\n"     );
	asm("	PUSH	R7							" "\n"  );
10000934:	27 5d       	PUSH      R7
..\application\libkf32foc.c:1004
	asm("	MOV R2,#smc1						" "\n"  );
10000936:	22 5c 2c 40 	MOVL      R2, #16428
1000093a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1005
	asm("	ADD R2,#SMC_Kslide						" "\n"  );
1000093e:	2e 28       	ADD       R2, #14
..\application\libkf32foc.c:1006
	asm("	ADD R2,#SMC_Kslide						" "\n"  );
10000940:	2e 28       	ADD       R2, #14
..\application\libkf32foc.c:1007
	asm("	LDS.H R4,[R2]			" "\n"  );
10000942:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1008
	asm("	MOV R2,#smc1						" "\n"  );
10000944:	22 5c 2c 40 	MOVL      R2, #16428
10000948:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1009
	asm("	ADD R2,#SMC_IalphaError						" "\n"  );
1000094c:	2d 28       	ADD       R2, #13
..\application\libkf32foc.c:1010
	asm("	ADD R2,#SMC_IalphaError						" "\n"  );
1000094e:	2d 28       	ADD       R2, #13
..\application\libkf32foc.c:1011
	asm("	LDS.H R5,[R2]		" "\n"  );
10000950:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1012
	asm("	MOV R2,#smc1						" "\n"  );
10000952:	22 5c 2c 40 	MOVL      R2, #16428
10000956:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1013
	asm("	ADD R2,#SMC_MaxSMCError						" "\n"  );
1000095a:	2f 28       	ADD       R2, #15
..\application\libkf32foc.c:1014
	asm("	ADD R2,#SMC_MaxSMCError						" "\n"  );
1000095c:	2f 28       	ADD       R2, #15
..\application\libkf32foc.c:1015
	asm("	LDS.H R7,[R2]		" "\n"  );
1000095e:	72 86       	LDS.H     R7, [R2]
..\application\libkf32foc.c:1017

	asm("	MULS R0,R4,R5					 " "\n"     );
10000960:	44 cb       	MULS      R0, R4, R5
..\application\libkf32foc.c:1018
	asm("	LSL R0,#1                 ""\n\t"    );
10000962:	01 7a       	LSL       R0, #1
..\application\libkf32foc.c:1019
	asm("	ASR R0,#16                 ""\n\t"    );
10000964:	00 79       	ASR       R0, #16
..\application\libkf32foc.c:1020
	asm("	LSL R0,#15                    " "\n"   );
10000966:	87 7a       	LSL       R0, #15
..\application\libkf32foc.c:1021
	asm("	DIVS R0,R0,R7                    " "\n");
10000968:	c0 cf       	DIVS      R0, R0, R7
..\application\libkf32foc.c:1022
	asm("	MOV R2,#smc1						" "\n"  );
1000096a:	22 5c 2c 40 	MOVL      R2, #16428
1000096e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1023
	asm("	ST.H  [R2+#SMC_Zalpha],R0        " "\n");
10000972:	d0 b0       	ST.H      [R2 + #3], R0
..\application\libkf32foc.c:1024
	asm("	POP		R7                       " "\n");
10000974:	07 5d       	POP       R7
..\application\libkf32foc.c:1026

}
10000976:	1d 5c       	JMP       LR

10000978 <CalcZbeta>:
CalcZbeta():
..\application\libkf32foc.c:1038
	//		s->Zbeta = (s->Kslide * s->IbetaError) / s->MaxSMCError
		asm("	.EQU   SMC_Zbeta ,10             " "\n" );
		asm("	.EQU   SMC_IbetaError, 17        " "\n" );
		asm("	.EQU   SMC_Kslide, 14            " "\n" );
		asm("	.EQU   SMC_MaxSMCError, 15       " "\n" );
		asm("	PUSH	R7                       " "\n" );
10000978:	27 5d       	PUSH      R7
..\application\libkf32foc.c:1039
		asm("	MOV R2,#smc1                     " "\n" );
1000097a:	22 5c 2c 40 	MOVL      R2, #16428
1000097e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1040
		asm("	ADD R2,#SMC_Kslide                     " "\n" );
10000982:	2e 28       	ADD       R2, #14
..\application\libkf32foc.c:1041
		asm("	ADD R2,#SMC_Kslide                     " "\n" );
10000984:	2e 28       	ADD       R2, #14
..\application\libkf32foc.c:1042
		asm("	LDS.H R4,[R2]         " "\n");
10000986:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1043
		asm("	MOV R2,#smc1                     " "\n" );
10000988:	22 5c 2c 40 	MOVL      R2, #16428
1000098c:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1044
		asm("	ADD R2,#SMC_IbetaError                     " "\n" );
10000990:	21 29       	ADD       R2, #17
..\application\libkf32foc.c:1045
		asm("	ADD R2,#SMC_IbetaError                     " "\n" );
10000992:	21 29       	ADD       R2, #17
..\application\libkf32foc.c:1046
		asm("	LDS.H R5,[R2]     " "\n");
10000994:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1047
		asm("	MOV R2,#smc1                     " "\n" );
10000996:	22 5c 2c 40 	MOVL      R2, #16428
1000099a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1048
		asm("	ADD R2,#SMC_MaxSMCError                     " "\n" );
1000099e:	2f 28       	ADD       R2, #15
..\application\libkf32foc.c:1049
		asm("	ADD R2,#SMC_MaxSMCError                     " "\n" );
100009a0:	2f 28       	ADD       R2, #15
..\application\libkf32foc.c:1050
		asm("	LDS.H R7,[R2]    " "\n");
100009a2:	72 86       	LDS.H     R7, [R2]
..\application\libkf32foc.c:1051
		asm("	MULS R0,R4,R5						 " "\n" );
100009a4:	44 cb       	MULS      R0, R4, R5
..\application\libkf32foc.c:1052
		asm("	LSL R0,#1					 " "\n" );
100009a6:	01 7a       	LSL       R0, #1
..\application\libkf32foc.c:1053
		asm("	ASR R0,#16					 " "\n" );
100009a8:	00 79       	ASR       R0, #16
..\application\libkf32foc.c:1054
		asm("	LSL R0,#15                    " "\n"   );
100009aa:	87 7a       	LSL       R0, #15
..\application\libkf32foc.c:1055
		asm("	DIVS R0,R0,R7                    " "\n");
100009ac:	c0 cf       	DIVS      R0, R0, R7
..\application\libkf32foc.c:1056
		asm("	MOV R2,#smc1                     " "\n" );
100009ae:	22 5c 2c 40 	MOVL      R2, #16428
100009b2:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1057
		asm("	ST.H  [R2+#SMC_Zbeta],R0         " "\n");
100009b6:	90 b2       	ST.H      [R2 + #10], R0
..\application\libkf32foc.c:1058
		asm("	POP		R7                       " "\n");
100009b8:	07 5d       	POP       R7
..\application\libkf32foc.c:1060

}
100009ba:	1d 5c       	JMP       LR

100009bc <CalcBEMF>:
CalcBEMF():
..\application\libkf32foc.c:1106
	asm("	.EQU   SMC_Theta,22                 ""\n\t"   );
	asm("	.EQU   SMC_Omega,23                  ""\n\t"  );
	asm("	.EQU   SMC_OmegaFltred, 24           ""\n\t"  );
		// s->Ealpha = s->Ealpha + s->Kslf * s->Zalpha
		//                       - s->Kslf * s->Ealpha
	asm("	MOV R2,#smc1                         ""\n\t"  );
100009bc:	22 5c 2c 40 	MOVL      R2, #16428
100009c0:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1107
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
100009c4:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1108
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
100009c6:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1109
	asm("	LDS.H R0,[R2]             ""\n\t" );
100009c8:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1111

	asm("	MOV R2,#smc1                         ""\n\t"  );
100009ca:	22 5c 2c 40 	MOVL      R2, #16428
100009ce:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1112
	asm("	ADD R2,#SMC_Zalpha                         ""\n\t"  );
100009d2:	23 28       	ADD       R2, #3
..\application\libkf32foc.c:1113
	asm("	ADD R2,#SMC_Zalpha                         ""\n\t"  );
100009d4:	23 28       	ADD       R2, #3
..\application\libkf32foc.c:1114
	asm("	LDS.H R4,[R2]             ""\n\t" );
100009d6:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1116

	asm("	MOV R2,#smc1                         ""\n\t"  );
100009d8:	22 5c 2c 40 	MOVL      R2, #16428
100009dc:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1117
	asm("	ADD R2,#SMC_Kslf                         ""\n\t"  );
100009e0:	22 29       	ADD       R2, #18
..\application\libkf32foc.c:1118
	asm("	ADD R2,#SMC_Kslf                         ""\n\t"  );
100009e2:	22 29       	ADD       R2, #18
..\application\libkf32foc.c:1119
	asm("	LDS.H R5,[R2]                   ""\n\t" );
100009e4:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1121

	asm("	MULS R1,R4,R5                   ""\n\t"  );
100009e6:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1122
	asm("	LSL R1,#1                   	""\n\t"  );
100009e8:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1123
	asm("	ASR R1,#16                   	""\n\t"  );
100009ea:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1124
	asm("	ADD R0,R1                   	""\n\t"  );
100009ec:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1126

	asm("	MOV R2,#smc1                         ""\n\t"  );
100009ee:	22 5c 2c 40 	MOVL      R2, #16428
100009f2:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1127
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
100009f6:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1128
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
100009f8:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1129
	asm("	LDS.H R4,[R2]             ""\n\t" );
100009fa:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1130
	asm("	MULS R1,R4,R5                  	 ""\n\t"  );
100009fc:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1131
	asm("	LSL R1,#1                   	""\n\t"  );
100009fe:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1132
	asm("	ASR R1,#16                   	""\n\t"  );
10000a00:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1133
	asm("	SUB R0,R1                 	 ""\n\t"  );
10000a02:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1134
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a04:	22 5c 2c 40 	MOVL      R2, #16428
10000a08:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1135
	asm("	ST.H [R2+#SMC_Ealpha],R0             ""\n\t"  );
10000a0c:	50 b0       	ST.H      [R2 + #1], R0
..\application\libkf32foc.c:1138
		// s->Ebeta = s->Ebeta + s->Kslf * s->Zbeta
		//                     - s->Kslf * s->Ebeta
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a0e:	22 5c 2c 40 	MOVL      R2, #16428
10000a12:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1139
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
10000a16:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1140
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
10000a18:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1141
	asm("	LDS.H R0,[R2]              ""\n\t" );
10000a1a:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1143

	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a1c:	22 5c 2c 40 	MOVL      R2, #16428
10000a20:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1144
	asm("	ADD R2,#SMC_Zbeta                         ""\n\t"  );
10000a24:	2a 28       	ADD       R2, #10
..\application\libkf32foc.c:1145
	asm("	ADD R2,#SMC_Zbeta                         ""\n\t"  );
10000a26:	2a 28       	ADD       R2, #10
..\application\libkf32foc.c:1146
	asm("	LDS.H R4,[R2]              ""\n\t" );
10000a28:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1148

	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a2a:	22 5c 2c 40 	MOVL      R2, #16428
10000a2e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1149
	asm("	ADD R2,#SMC_Kslf                         ""\n\t"  );
10000a32:	22 29       	ADD       R2, #18
..\application\libkf32foc.c:1150
	asm("	ADD R2,#SMC_Kslf                         ""\n\t"  );
10000a34:	22 29       	ADD       R2, #18
..\application\libkf32foc.c:1151
	asm("	LDS.H R5,[R2]               ""\n\t" );
10000a36:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1152
	asm("	MULS R1,R4,R5                  	 ""\n\t"  );
10000a38:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1153
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000a3a:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1154
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000a3c:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1155
	asm("	ADD R0,R1                   	""\n\t"  );
10000a3e:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1157

	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a40:	22 5c 2c 40 	MOVL      R2, #16428
10000a44:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1158
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
10000a48:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1159
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
10000a4a:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1160
	asm("	LDS.H R4,[R2]              ""\n\t" );
10000a4c:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1161
	asm("	MULS R1,R4,R5                  	 ""\n\t"  );
10000a4e:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1162
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000a50:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1163
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000a52:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1164
	asm("	SUB R0,R1                 	 ""\n\t"  );
10000a54:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1165
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a56:	22 5c 2c 40 	MOVL      R2, #16428
10000a5a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1166
	asm("	ST.H  [R2+#SMC_Ebeta],R0             ""\n\t"  );
10000a5e:	10 b2       	ST.H      [R2 + #8], R0
..\application\libkf32foc.c:1170
		// New filter used to calculate Position
		// s->EalphaFinal = s->EalphaFinal + s->KslfFinal * s->Ealpha
		//                                 - s->KslfFinal * s->EalphaFinal
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a60:	22 5c 2c 40 	MOVL      R2, #16428
10000a64:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1171
	asm("	ADD R2,#SMC_EalphaFinal                         ""\n\t"  );
10000a68:	22 28       	ADD       R2, #2
..\application\libkf32foc.c:1172
	asm("	ADD R2,#SMC_EalphaFinal                         ""\n\t"  );
10000a6a:	22 28       	ADD       R2, #2
..\application\libkf32foc.c:1173
	asm("	LDS.H R0,[R2]        ""\n\t" );
10000a6c:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1174
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a6e:	22 5c 2c 40 	MOVL      R2, #16428
10000a72:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1175
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
10000a76:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1176
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
10000a78:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1177
	asm("	LDS.H R4,[R2]             ""\n\t" );
10000a7a:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1178
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a7c:	22 5c 2c 40 	MOVL      R2, #16428
10000a80:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1179
	asm("	ADD R2,#SMC_KslfFinal                         ""\n\t"  );
10000a84:	23 29       	ADD       R2, #19
..\application\libkf32foc.c:1180
	asm("	ADD R2,#SMC_KslfFinal                         ""\n\t"  );
10000a86:	23 29       	ADD       R2, #19
..\application\libkf32foc.c:1181
	asm("	LDS.H R5,[R2]          ""\n\t" );
10000a88:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1182
	asm("	MULS R1,R4,R5                  ""\n\t"      );
10000a8a:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1183
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000a8c:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1184
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000a8e:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1185
	asm("	ADD R0,R1                 	 ""\n\t"  );
10000a90:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1187

	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a92:	22 5c 2c 40 	MOVL      R2, #16428
10000a96:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1188
	asm("	ADD R2,#SMC_EalphaFinal                         ""\n\t"  );
10000a9a:	22 28       	ADD       R2, #2
..\application\libkf32foc.c:1189
	asm("	ADD R2,#SMC_EalphaFinal                         ""\n\t"  );
10000a9c:	22 28       	ADD       R2, #2
..\application\libkf32foc.c:1190
	asm("	LDS.H R4,[R2]        ""\n\t" );
10000a9e:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1191
	asm("	MULS R1,R4,R5                  ""\n\t"      );
10000aa0:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1192
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000aa2:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1193
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000aa4:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1194
	asm("	SUB R0,R1                 	 ""\n\t"  );
10000aa6:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1195
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000aa8:	22 5c 2c 40 	MOVL      R2, #16428
10000aac:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1196
	asm("	ST.H [R2+#SMC_EalphaFinal],R0        ""\n\t"  );
10000ab0:	90 b0       	ST.H      [R2 + #2], R0
..\application\libkf32foc.c:1199
		// s->EbetaFinal = s->EbetaFinal + s->KslfFinal * s->Ebeta
		//                               - s->KslfFinal * s->EbetaFinal
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000ab2:	22 5c 2c 40 	MOVL      R2, #16428
10000ab6:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1200
	asm("	ADD R2,#SMC_EbetaFinal                         ""\n\t"  );
10000aba:	29 28       	ADD       R2, #9
..\application\libkf32foc.c:1201
	asm("	ADD R2,#SMC_EbetaFinal                         ""\n\t"  );
10000abc:	29 28       	ADD       R2, #9
..\application\libkf32foc.c:1202
	asm("	LDS.H R0,[R2]         ""\n\t" );
10000abe:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1203
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000ac0:	22 5c 2c 40 	MOVL      R2, #16428
10000ac4:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1204
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
10000ac8:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1205
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
10000aca:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1206
	asm("	LDS.H R4,[R2]              ""\n\t" );
10000acc:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1207
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000ace:	22 5c 2c 40 	MOVL      R2, #16428
10000ad2:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1208
	asm("	ADD R2,#SMC_KslfFinal                         ""\n\t"  );
10000ad6:	23 29       	ADD       R2, #19
..\application\libkf32foc.c:1209
	asm("	ADD R2,#SMC_KslfFinal                         ""\n\t"  );
10000ad8:	23 29       	ADD       R2, #19
..\application\libkf32foc.c:1210
	asm("	LDS.H R5,[R2]          ""\n\t" );
10000ada:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1211
	asm("	MULS R1,R4,R5                  ""\n\t"      );
10000adc:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1212
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000ade:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1213
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000ae0:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1214
	asm("	ADD R0,R1                 	 ""\n\t"  );
10000ae2:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1215
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000ae4:	22 5c 2c 40 	MOVL      R2, #16428
10000ae8:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1216
	asm("	ADD R2,#SMC_EbetaFinal                         ""\n\t"  );
10000aec:	29 28       	ADD       R2, #9
..\application\libkf32foc.c:1217
	asm("	ADD R2,#SMC_EbetaFinal                         ""\n\t"  );
10000aee:	29 28       	ADD       R2, #9
..\application\libkf32foc.c:1218
	asm("	LDS.H R4,[R2]         ""\n\t" );
10000af0:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1219
	asm("	MULS R1,R4,R5                  ""\n\t"      );
10000af2:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1220
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000af4:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1221
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000af6:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1222
	asm("	SUB R0,R1                 	 ""\n\t"  );
10000af8:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1223
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000afa:	22 5c 2c 40 	MOVL      R2, #16428
10000afe:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1224
	asm("	ST.H [R2+#SMC_EbetaFinal],R0         ""\n\t"  );
10000b02:	50 b2       	ST.H      [R2 + #9], R0
..\application\libkf32foc.c:1227


}
10000b04:	1d 5c       	JMP       LR

10000b06 <CalcOmegaFltred>:
CalcOmegaFltred():
..\application\libkf32foc.c:1242
	// s->OmegaFltred = s->OmegaFltred + s->FiltOmCoef * s->Omega
	//                                 - s->FiltOmCoef * s->OmegaFltred
	asm("	.EQU   SMC_OmegaFltred, 24                ""\n\t"    );
	asm("	.EQU   SMC_Omega,23                       ""\n\t"    );
	asm("	.EQU   SMC_FiltOmCoef, 20                 ""\n\t"    );
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000b06:	22 5c 2c 40 	MOVL      R2, #16428
10000b0a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1243
	asm("	ADD R2,#SMC_OmegaFltred                         ""\n\t"  );
10000b0e:	28 29       	ADD       R2, #24
..\application\libkf32foc.c:1244
	asm("	ADD R2,#SMC_OmegaFltred                         ""\n\t"  );
10000b10:	28 29       	ADD       R2, #24
..\application\libkf32foc.c:1245
	asm("	LDS.H R0,[R2]             ""\n\t"   );
10000b12:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1246
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000b14:	22 5c 2c 40 	MOVL      R2, #16428
10000b18:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1247
	asm("	ADD R2,#SMC_Omega                         ""\n\t"  );
10000b1c:	27 29       	ADD       R2, #23
..\application\libkf32foc.c:1248
	asm("	ADD R2,#SMC_Omega                         ""\n\t"  );
10000b1e:	27 29       	ADD       R2, #23
..\application\libkf32foc.c:1249
	asm("	LDS.H R4,[R2]                   ""\n\t"   );
10000b20:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1250
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000b22:	22 5c 2c 40 	MOVL      R2, #16428
10000b26:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1251
	asm("	ADD R2,#SMC_FiltOmCoef                         ""\n\t"  );
10000b2a:	24 29       	ADD       R2, #20
..\application\libkf32foc.c:1252
	asm("	ADD R2,#SMC_FiltOmCoef                         ""\n\t"  );
10000b2c:	24 29       	ADD       R2, #20
..\application\libkf32foc.c:1253
	asm("	LDS.H R5,[R2]              ""\n\t"   );
10000b2e:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1254
	asm("	MULS R1,R4,R5                       ""\n\t"        );
10000b30:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1255
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000b32:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1256
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000b34:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1257
	asm("	ADD R0,R1                 	 ""\n\t"  );
10000b36:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1258
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000b38:	22 5c 2c 40 	MOVL      R2, #16428
10000b3c:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1259
	asm("	ADD R2,#SMC_OmegaFltred                         ""\n\t"  );
10000b40:	28 29       	ADD       R2, #24
..\application\libkf32foc.c:1260
	asm("	ADD R2,#SMC_OmegaFltred                         ""\n\t"  );
10000b42:	28 29       	ADD       R2, #24
..\application\libkf32foc.c:1261
	asm("	LDS.H R4,[R2]             ""\n\t"   );
10000b44:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1262
	asm("	MULS R1,R4,R5                       ""\n\t"        );
10000b46:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1263
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000b48:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1264
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000b4a:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1265
	asm("	SUB R0,R1                          ""\n\t"    );
10000b4c:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1266
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000b4e:	22 5c 2c 40 	MOVL      R2, #16428
10000b52:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1267
	asm("	ST.H [R2+#SMC_OmegaFltred],R0             ""\n\t"    );
10000b56:	10 b6       	ST.H      [R2 + #24], R0
..\application\libkf32foc.c:1268
}
10000b58:	1d 5c       	JMP       LR
	...

10000b5c <Q15SQRT_VqMax>:
Q15SQRT_VqMax():
..\application\libkf32foc.c:1287
//		if((hStag*hStag) <= BeSqrt)
//			uStag += (1<<(ToLeft-1));
//	}
//	return uStag;

	asm("	PUSH	R6                             ""\n\t" );
10000b5c:	26 5d       	PUSH      R6
..\application\libkf32foc.c:1288
	asm("	PUSH	R7                             ""\n\t" );
10000b5e:	27 5d       	PUSH      R7
..\application\libkf32foc.c:1306
	asm("	.EQU 	hStag_R2, R2                   ""\n\t" );
	asm("	.EQU 	uStag_R3, R3                   ""\n\t" );
	asm("	.EQU 	hStagxhStag_R4, R4             ""\n\t" );
	asm("	.EQU 	toLeft_1_R5, R5                ""\n\t" );

	asm("	MOV	    uStag_R3,#0                      " "\n");//uStag=0
10000b60:	30 10       	MOV       R3, #0
..\application\libkf32foc.c:1309

	//从14开始
	asm("	MOV	    toLeft_1_R1,#(1<<14)             " "\n");//toLeft_1=1<<14
10000b62:	21 5c 00 40 	MOVL      R1, #16384
..\application\libkf32foc.c:1312

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000b66:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1315

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000b68:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1318

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000b6a:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1319
	asm("	JGT		jGreat13                         " "\n");
10000b6c:	02 fc       	JGT       $+2                   ;->0x10000b70
..\application\libkf32foc.c:1322

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000b6e:	5b c2       	ADD       R3, R3, R1

10000b70 <jGreat13>:
..\application\libkf32foc.c:1326

asm("jGreat13:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<13
10000b70:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1329

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000b72:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1332

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000b74:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1335

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000b76:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1336
	asm("	JGT		jGreat12                         " "\n");
10000b78:	02 fc       	JGT       $+2                   ;->0x10000b7c
..\application\libkf32foc.c:1339

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000b7a:	5b c2       	ADD       R3, R3, R1

10000b7c <jGreat12>:
..\application\libkf32foc.c:1343

asm("jGreat12:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<12
10000b7c:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1346

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000b7e:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1349

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000b80:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1352

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000b82:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1353
	asm("	JGT		jGreat11                         " "\n");
10000b84:	02 fc       	JGT       $+2                   ;->0x10000b88
..\application\libkf32foc.c:1356

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000b86:	5b c2       	ADD       R3, R3, R1

10000b88 <jGreat11>:
..\application\libkf32foc.c:1360

asm("jGreat11:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<11
10000b88:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1363

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000b8a:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1366

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000b8c:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1369

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000b8e:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1370
	asm("	JGT		jGreat10                         " "\n");
10000b90:	02 fc       	JGT       $+2                   ;->0x10000b94
..\application\libkf32foc.c:1373

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000b92:	5b c2       	ADD       R3, R3, R1

10000b94 <jGreat10>:
..\application\libkf32foc.c:1377

asm("jGreat10:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<10
10000b94:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1380

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000b96:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1383

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000b98:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1386

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000b9a:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1387
	asm("	JGT		jGreat9                          " "\n");
10000b9c:	02 fc       	JGT       $+2                   ;->0x10000ba0
..\application\libkf32foc.c:1390

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000b9e:	5b c2       	ADD       R3, R3, R1

10000ba0 <jGreat9>:
..\application\libkf32foc.c:1394

asm("jGreat9:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<9
10000ba0:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1397

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000ba2:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1400

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000ba4:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1403

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000ba6:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1404
	asm("	JGT		jGreat8                          " "\n");
10000ba8:	02 fc       	JGT       $+2                   ;->0x10000bac
..\application\libkf32foc.c:1407

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000baa:	5b c2       	ADD       R3, R3, R1

10000bac <jGreat8>:
..\application\libkf32foc.c:1411

asm("jGreat8:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<8
10000bac:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1414

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000bae:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1417

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000bb0:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1420

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000bb2:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1421
	asm("	JGT		jGreat7                          " "\n");
10000bb4:	02 fc       	JGT       $+2                   ;->0x10000bb8
..\application\libkf32foc.c:1424

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000bb6:	5b c2       	ADD       R3, R3, R1

10000bb8 <jGreat7>:
..\application\libkf32foc.c:1428

asm("jGreat7:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<7
10000bb8:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1431

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000bba:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1434

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000bbc:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1437

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000bbe:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1439
	//asm("	JGT		jGreat6                          " "\n");
	asm("	JGT		jExit                            " "\n");//忽略低6位精度
10000bc0:	02 fc       	JGT       $+2                   ;->0x10000bc4
..\application\libkf32foc.c:1442

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000bc2:	5b c2       	ADD       R3, R3, R1

10000bc4 <jExit>:
..\application\libkf32foc.c:1447

asm("jExit:                         " "\n");

	//保存到SRAM, PIParmQ.qOutMax, PIParmQ.qOutMin
	asm("	LD		VarAddress_R6,#PIParmQ+#PI_qOutMax  ""\n\t");
10000bc4:	04 46       	LD        R6, [PC + #4]         ;->0x10000bd4  :=0x10004000
..\application\libkf32foc.c:1448
	asm("	ST.W	[VarAddress_R6++], uStag_R3         ""\n\t");
10000bc6:	63 73       	ST.W      [R6++], R3
..\application\libkf32foc.c:1450

	asm("   MOV		R0,#0                              " "\n");
10000bc8:	00 10       	MOV       R0, #0
..\application\libkf32foc.c:1451
	asm("	SUB		uStag_R3,R0,uStag_R3               " "\n");//R3 = -R3;
10000bca:	d8 c6       	SUB       R3, R0, R3
..\application\libkf32foc.c:1452
	asm("	ST.W	[VarAddress_R6], uStag_R3         ""\n\t");
10000bcc:	63 85       	ST.W      [R6], R3
..\application\libkf32foc.c:1454

	asm("	POP		R7					            ""\n\t" );
10000bce:	07 5d       	POP       R7
..\application\libkf32foc.c:1455
	asm("	POP		R6					            ""\n\t" );
10000bd0:	06 5d       	POP       R6
..\application\libkf32foc.c:1456
}
10000bd2:	1d 5c       	JMP       LR
10000bd4:	00 40 00 10 	.long     0x10004000 ->268451840  [!!!@2@:LD        R0, [PC + #0]         ;->0x10000bd4  :=0x10004000	@@: MOV       R0, #0

10000bd8 <SinCos>:
SinCos():
..\application\libkf32foc.c:3521
	asm("   .EQU Park_qAngle, 0                       " "\n");
	asm("   .EQU Park_qSin, 2                         " "\n");
	asm("   .EQU Park_qCos, 4                         " "\n");


	asm("	LD	    R0,#ParkParm+#Park_qAngle" "\n");//取Park_qAngle变量地址
10000bd8:	0a 40       	LD        R0, [PC + #10]        ;->0x10000c00  :=0x10003fb2
..\application\libkf32foc.c:3523

	asm("	LD.H	R1,[R0++]    " "\n");//R1 = Park_qAngle，R0+=2指向Park_qSin
10000bda:	10 74       	LD.H      R1, [R0++]
..\application\libkf32foc.c:3524
	asm("	MOV	    R2,R1        " "\n");
10000bdc:	41 58       	MOV       R2, R1
..\application\libkf32foc.c:3525
	asm("	MOV	    R3,R1        " "\n");
10000bde:	61 58       	MOV       R3, R1
..\application\libkf32foc.c:3527

	asm("	LSR	    R2,#4                    " "\n");
10000be0:	14 7c       	LSR       R2, #4
..\application\libkf32foc.c:3528
	asm("	MOV	    R1,#Angle90               " "\n");
10000be2:	21 5c 00 40 	MOVL      R1, #16384
..\application\libkf32foc.c:3529
	asm("	ADD	    R3,R3,R1" "\n");
10000be6:	5b c2       	ADD       R3, R3, R1
..\application\libkf32foc.c:3530
	asm("	MOVH    R3,#0                    " "\n");
10000be8:	43 5c 00 00 	MOVH      R3, #0
..\application\libkf32foc.c:3531
	asm("	LSR	    R3,#4                    " "\n");
10000bec:	1c 7c       	LSR       R3, #4
..\application\libkf32foc.c:3533

	asm("	LD	    R1,#SinTable           " "\n");//取SinTable变量地址
10000bee:	06 41       	LD        R1, [PC + #6]         ;->0x10000c04  :=0x10000c08
..\application\libkf32foc.c:3534
	asm("	ADD     R2,R1         " "\n");//计算SIN地址
10000bf0:	21 64       	ADD       R2, R1
..\application\libkf32foc.c:3535
	asm("	LDS.H   R2,[R2]        " "\n");//读取SIN值
10000bf2:	22 86       	LDS.H     R2, [R2]
..\application\libkf32foc.c:3537

	asm("	ADD     R3,R1         " "\n");//计算COS地址
10000bf4:	31 64       	ADD       R3, R1
..\application\libkf32foc.c:3538
	asm("	LDS.H   R3,[R3]        " "\n");//读取COS值
10000bf6:	33 86       	LDS.H     R3, [R3]
..\application\libkf32foc.c:3540

	asm("	ST.H    [R0++],R2    " "\n");
10000bf8:	02 75       	ST.H      [R0++], R2
..\application\libkf32foc.c:3541
	asm("	ST.H    [R0],  R3    " "\n");
10000bfa:	03 84       	ST.H      [R0], R3
..\application\libkf32foc.c:3542
}
10000bfc:	1d 5c       	JMP       LR
10000bfe:	00 00       	NOP      NOP      
10000c00:	b2 3f 00 10 	.long     0x10003fb2 ->268451762  [!!!@2@:CMP       R11, #114	@@: MOV       R0, #0
10000c04:	08 0c 00 10 	.long     0x10000c08 ->268438536  [!!!@2@:LD.W      R4, [SP + #8]	@@: MOV       R0, #0

10000c08 <SinTable>:
10000c08:	00 00 64 00 c9 00 2d 01 92 01 f6 01 5b 02 bf 02     ..d...-.....[...
10000c18:	24 03 88 03 ed 03 51 04 b6 04 1a 05 7e 05 e3 05     $.....Q.....~...
10000c28:	47 06 ac 06 10 07 74 07 d9 07 3d 08 a1 08 06 09     G.....t...=.....
10000c38:	6a 09 ce 09 32 0a 97 0a fb 0a 5f 0b c3 0b 27 0c     j...2....._...'.
10000c48:	8b 0c ef 0c 53 0d b7 0d 1b 0e 7f 0e e3 0e 47 0f     ....S.........G.
10000c58:	ab 0f 0e 10 72 10 d6 10 39 11 9d 11 00 12 64 12     ....r...9.....d.
10000c68:	c7 12 2b 13 8e 13 f2 13 55 14 b8 14 1b 15 7e 15     ..+.....U.....~.
10000c78:	e1 15 44 16 a7 16 0a 17 6d 17 d0 17 33 18 95 18     ..D.....m...3...
10000c88:	f8 18 5b 19 bd 19 20 1a 82 1a e4 1a 46 1b a9 1b     ..[... .....F...
10000c98:	0b 1c 6d 1c cf 1c 31 1d 93 1d f4 1d 56 1e b8 1e     ..m...1.....V...
10000ca8:	19 1f 7b 1f dc 1f 3d 20 9f 20 00 21 61 21 c2 21     ..{...= . .!a!.!
10000cb8:	23 22 84 22 e4 22 45 23 a6 23 06 24 67 24 c7 24     #"."."E#.#.$g$.$
10000cc8:	27 25 87 25 e7 25 47 26 a7 26 07 27 67 27 c6 27     '%.%.%G&.&.'g'.'
10000cd8:	26 28 85 28 e5 28 44 29 a3 29 02 2a 61 2a c0 2a     &(.(.(D).).*a*.*
10000ce8:	1e 2b 7d 2b db 2b 3a 2c 98 2c f6 2c 54 2d b2 2d     .+}+.+:,.,.,T-.-
10000cf8:	10 2e 6e 2e cc 2e 29 2f 86 2f e4 2f 41 30 9e 30     ..n...)/././A0.0
10000d08:	fb 30 58 31 b4 31 11 32 6d 32 ca 32 26 33 82 33     .0X1.1.2m2.2&3.3
10000d18:	de 33 3a 34 96 34 f1 34 4d 35 a8 35 03 36 5e 36     .3:4.4.4M5.5.6^6
10000d28:	b9 36 14 37 6f 37 c9 37 24 38 7e 38 d8 38 32 39     .6.7o7.7$8~8.829
10000d38:	8c 39 e6 39 3f 3a 99 3a f2 3a 4b 3b a4 3b fd 3b     .9.9?:.:.:K;.;.;
10000d48:	56 3c ae 3c 07 3d 5f 3d b7 3d 0f 3e 67 3e bf 3e     V<.<.=_=.=.>g>.>
10000d58:	16 3f 6e 3f c5 3f 1c 40 73 40 ca 40 20 41 77 41     .?n?.?.@s@.@ AwA
10000d68:	cd 41 23 42 79 42 cf 42 25 43 7a 43 d0 43 25 44     .A#ByB.B%CzC.C%D
10000d78:	7a 44 cf 44 23 45 78 45 cc 45 20 46 74 46 c8 46     zD.D#ExE.E FtF.F
10000d88:	1c 47 6f 47 c3 47 16 48 69 48 bc 48 0e 49 61 49     .GoG.G.HiH.H.IaI
10000d98:	b3 49 05 4a 57 4a a9 4a fa 4a 4c 4b 9d 4b ee 4b     .I.JWJ.J.JLK.K.K
10000da8:	3f 4c 8f 4c e0 4c 30 4d 80 4d d0 4d 20 4e 6f 4e     ?L.L.L0M.M.M NoN
10000db8:	bf 4e 0e 4f 5d 4f ac 4f fa 4f 49 50 97 50 e5 50     .N.O]O.O.OIP.P.P
10000dc8:	33 51 80 51 ce 51 1b 52 68 52 b5 52 01 53 4e 53     3Q.Q.Q.RhR.R.SNS
10000dd8:	9a 53 e6 53 32 54 7d 54 c9 54 14 55 5f 55 aa 55     .S.S2T}T.T.U_U.U
10000de8:	f4 55 3f 56 89 56 d3 56 1d 57 66 57 b0 57 f9 57     .U?V.V.V.WfW.W.W
10000df8:	42 58 8a 58 d3 58 1b 59 63 59 ab 59 f3 59 3a 5a     BX.X.X.YcY.Y.Y:Z
10000e08:	81 5a c8 5a 0f 5b 56 5b 9c 5b e2 5b 28 5c 6d 5c     .Z.Z.[V[.[.[(\m\
10000e18:	b3 5c f8 5c 3d 5d 82 5d c6 5d 0b 5e 4f 5e 93 5e     .\.\=].].].^O^.^
10000e28:	d6 5e 1a 5f 5d 5f a0 5f e2 5f 25 60 67 60 a9 60     .^._]_._._%`g`.`
10000e38:	eb 60 2d 61 6e 61 af 61 f0 61 30 62 71 62 b1 62     .`-ana.a.a0bqb.b
10000e48:	f1 62 30 63 70 63 af 63 ee 63 2d 64 6b 64 a9 64     .b0cpc.c.c-dkd.d
10000e58:	e7 64 25 65 62 65 a0 65 dd 65 19 66 56 66 92 66     .d%ebe.e.e.fVf.f
10000e68:	ce 66 0a 67 45 67 81 67 bc 67 f7 67 31 68 6b 68     .f.gEg.g.g.g1hkh
10000e78:	a5 68 df 68 19 69 52 69 8b 69 c4 69 fc 69 34 6a     .h.h.iRi.i.i.i4j
10000e88:	6c 6a a4 6a db 6a 13 6b 4a 6b 80 6b b7 6b ed 6b     lj.j.j.kJk.k.k.k
10000e98:	23 6c 58 6c 8e 6c c3 6c f8 6c 2c 6d 61 6d 95 6d     #lXl.l.l.l,mam.m
10000ea8:	c9 6d fc 6d 30 6e 63 6e 95 6e c8 6e fa 6e 2c 6f     .m.m0ncn.n.n.n,o
10000eb8:	5e 6f 8f 6f c0 6f f1 6f 22 70 52 70 82 70 b2 70     ^o.o.o.o"pRp.p.p
10000ec8:	e1 70 11 71 40 71 6e 71 9d 71 cb 71 f9 71 26 72     .p.q@qnq.q.q.q&r
10000ed8:	54 72 81 72 ae 72 da 72 06 73 32 73 5e 73 89 73     Tr.r.r.r.s2s^s.s
10000ee8:	b5 73 df 73 0a 74 34 74 5e 74 88 74 b1 74 db 74     .s.s.t4t^t.t.t.t
10000ef8:	03 75 2c 75 54 75 7c 75 a4 75 cc 75 f3 75 1a 76     .u,uTu|u.u.u.u.v
10000f08:	40 76 67 76 8d 76 b2 76 d8 76 fd 76 22 77 47 77     @vgv.v.v.v.v"wGw
10000f18:	6b 77 8f 77 b3 77 d6 77 f9 77 1c 78 3f 78 61 78     kw.w.w.w.w.x?xax
10000f28:	83 78 a5 78 c6 78 e7 78 08 79 29 79 49 79 69 79     .x.x.x.x.y)yIyiy
10000f38:	89 79 a8 79 c7 79 e6 79 04 7a 23 7a 41 7a 5e 7a     .y.y.y.y.z#zAz^z
10000f48:	7c 7a 99 7a b5 7a d2 7a ee 7a 0a 7b 25 7b 41 7b     |z.z.z.z.z.{%{A{
10000f58:	5c 7b 76 7b 91 7b ab 7b c4 7b de 7b f7 7b 10 7c     \{v{.{.{.{.{.{.|
10000f68:	29 7c 41 7c 59 7c 70 7c 88 7c 9f 7c b6 7c cc 7c     )|A|Y|p|.|.|.|.|
10000f78:	e2 7c f8 7c 0e 7d 23 7d 38 7d 4d 7d 61 7d 75 7d     .|.|.}#}8}M}a}u}
10000f88:	89 7d 9c 7d b0 7d c2 7d d5 7d e7 7d f9 7d 0b 7e     .}.}.}.}.}.}.}.~
10000f98:	1c 7e 2d 7e 3e 7e 4e 7e 5e 7e 6e 7e 7e 7e 8d 7e     .~-~>~N~^~n~~~.~
10000fa8:	9c 7e aa 7e b9 7e c7 7e d4 7e e2 7e ef 7e fc 7e     .~.~.~.~.~.~.~.~
10000fb8:	08 7f 14 7f 20 7f 2c 7f 37 7f 42 7f 4c 7f 57 7f     .... .,.7.B.L.W.
10000fc8:	61 7f 6a 7f 74 7f 7d 7f 86 7f 8e 7f 96 7f 9e 7f     a.j.t.}.........
10000fd8:	a6 7f ad 7f b4 7f bb 7f c1 7f c7 7f cd 7f d2 7f     ................
10000fe8:	d7 7f dc 7f e0 7f e4 7f e8 7f ec 7f ef 7f f2 7f     ................
10000ff8:	f5 7f f7 7f f9 7f fb 7f fc 7f fd 7f fe 7f fe 7f     ................
10001008:	ff 7f fe 7f fe 7f fd 7f fc 7f fb 7f f9 7f f7 7f     ................
10001018:	f5 7f f2 7f ef 7f ec 7f e8 7f e4 7f e0 7f dc 7f     ................
10001028:	d7 7f d2 7f cd 7f c7 7f c1 7f bb 7f b4 7f ad 7f     ................
10001038:	a6 7f 9e 7f 96 7f 8e 7f 86 7f 7d 7f 74 7f 6a 7f     ..........}.t.j.
10001048:	61 7f 57 7f 4c 7f 42 7f 37 7f 2c 7f 20 7f 14 7f     a.W.L.B.7.,. ...
10001058:	08 7f fc 7e ef 7e e2 7e d4 7e c7 7e b9 7e aa 7e     ...~.~.~.~.~.~.~
10001068:	9c 7e 8d 7e 7e 7e 6e 7e 5e 7e 4e 7e 3e 7e 2d 7e     .~.~~~n~^~N~>~-~
10001078:	1c 7e 0b 7e f9 7d e7 7d d5 7d c2 7d b0 7d 9c 7d     .~.~.}.}.}.}.}.}
10001088:	89 7d 75 7d 61 7d 4d 7d 38 7d 23 7d 0e 7d f8 7c     .}u}a}M}8}#}.}.|
10001098:	e2 7c cc 7c b6 7c 9f 7c 88 7c 70 7c 59 7c 41 7c     .|.|.|.|.|p|Y|A|
100010a8:	29 7c 10 7c f7 7b de 7b c4 7b ab 7b 91 7b 76 7b     )|.|.{.{.{.{.{v{
100010b8:	5c 7b 41 7b 25 7b 0a 7b ee 7a d2 7a b5 7a 99 7a     \{A{%{.{.z.z.z.z
100010c8:	7c 7a 5e 7a 41 7a 23 7a 04 7a e6 79 c7 79 a8 79     |z^zAz#z.z.y.y.y
100010d8:	89 79 69 79 49 79 29 79 08 79 e7 78 c6 78 a5 78     .yiyIy)y.y.x.x.x
100010e8:	83 78 61 78 3f 78 1c 78 f9 77 d6 77 b3 77 8f 77     .xax?x.x.w.w.w.w
100010f8:	6b 77 47 77 22 77 fd 76 d8 76 b2 76 8d 76 67 76     kwGw"w.v.v.v.vgv
10001108:	40 76 1a 76 f3 75 cc 75 a4 75 7c 75 54 75 2c 75     @v.v.u.u.u|uTu,u
10001118:	03 75 db 74 b1 74 88 74 5e 74 34 74 0a 74 df 73     .u.t.t.t^t4t.t.s
10001128:	b5 73 89 73 5e 73 32 73 06 73 da 72 ae 72 81 72     .s.s^s2s.s.r.r.r
10001138:	54 72 26 72 f9 71 cb 71 9d 71 6e 71 40 71 11 71     Tr&r.q.q.qnq@q.q
10001148:	e1 70 b2 70 82 70 52 70 22 70 f1 6f c0 6f 8f 6f     .p.p.pRp"p.o.o.o
10001158:	5e 6f 2c 6f fa 6e c8 6e 95 6e 63 6e 30 6e fc 6d     ^o,o.n.n.ncn0n.m
10001168:	c9 6d 95 6d 61 6d 2c 6d f8 6c c3 6c 8e 6c 58 6c     .m.mam,m.l.l.lXl
10001178:	23 6c ed 6b b7 6b 80 6b 4a 6b 13 6b db 6a a4 6a     #l.k.k.kJk.k.j.j
10001188:	6c 6a 34 6a fc 69 c4 69 8b 69 52 69 19 69 df 68     lj4j.i.i.iRi.i.h
10001198:	a5 68 6b 68 31 68 f7 67 bc 67 81 67 45 67 0a 67     .hkh1h.g.g.gEg.g
100011a8:	ce 66 92 66 56 66 19 66 dd 65 a0 65 62 65 25 65     .f.fVf.f.e.ebe%e
100011b8:	e7 64 a9 64 6b 64 2d 64 ee 63 af 63 70 63 30 63     .d.dkd-d.c.cpc0c
100011c8:	f1 62 b1 62 71 62 30 62 f0 61 af 61 6e 61 2d 61     .b.bqb0b.a.ana-a
100011d8:	eb 60 a9 60 67 60 25 60 e2 5f a0 5f 5d 5f 1a 5f     .`.`g`%`._._]_._
100011e8:	d6 5e 93 5e 4f 5e 0b 5e c6 5d 82 5d 3d 5d f8 5c     .^.^O^.^.].]=].\
100011f8:	b3 5c 6d 5c 28 5c e2 5b 9c 5b 56 5b 0f 5b c8 5a     .\m\(\.[.[V[.[.Z
10001208:	81 5a 3a 5a f3 59 ab 59 63 59 1b 59 d3 58 8a 58     .Z:Z.Y.YcY.Y.X.X
10001218:	42 58 f9 57 b0 57 66 57 1d 57 d3 56 89 56 3f 56     BX.W.WfW.W.V.V?V
10001228:	f4 55 aa 55 5f 55 14 55 c9 54 7d 54 32 54 e6 53     .U.U_U.U.T}T2T.S
10001238:	9a 53 4e 53 01 53 b5 52 68 52 1b 52 ce 51 80 51     .SNS.S.RhR.R.Q.Q
10001248:	33 51 e5 50 97 50 49 50 fa 4f ac 4f 5d 4f 0e 4f     3Q.P.PIP.O.O]O.O
10001258:	bf 4e 6f 4e 20 4e d0 4d 80 4d 30 4d e0 4c 8f 4c     .NoN N.M.M0M.L.L
10001268:	3f 4c ee 4b 9d 4b 4c 4b fa 4a a9 4a 57 4a 05 4a     ?L.K.KLK.J.JWJ.J
10001278:	b3 49 61 49 0e 49 bc 48 69 48 16 48 c3 47 6f 47     .IaI.I.HiH.H.GoG
10001288:	1c 47 c8 46 74 46 20 46 cc 45 78 45 23 45 cf 44     .G.FtF F.ExE#E.D
10001298:	7a 44 25 44 d0 43 7a 43 25 43 cf 42 79 42 23 42     zD%D.CzC%C.ByB#B
100012a8:	cd 41 77 41 20 41 ca 40 73 40 1c 40 c5 3f 6e 3f     .AwA A.@s@.@.?n?
100012b8:	16 3f bf 3e 67 3e 0f 3e b7 3d 5f 3d 07 3d ae 3c     .?.>g>.>.=_=.=.<
100012c8:	56 3c fd 3b a4 3b 4b 3b f2 3a 99 3a 3f 3a e6 39     V<.;.;K;.:.:?:.9
100012d8:	8c 39 32 39 d8 38 7e 38 24 38 c9 37 6f 37 14 37     .929.8~8$8.7o7.7
100012e8:	b9 36 5e 36 03 36 a8 35 4d 35 f1 34 96 34 3a 34     .6^6.6.5M5.4.4:4
100012f8:	de 33 82 33 26 33 ca 32 6d 32 11 32 b4 31 58 31     .3.3&3.2m2.2.1X1
10001308:	fb 30 9e 30 41 30 e4 2f 86 2f 29 2f cc 2e 6e 2e     .0.0A0././)/..n.
10001318:	10 2e b2 2d 54 2d f6 2c 98 2c 3a 2c db 2b 7d 2b     ...-T-.,.,:,.+}+
10001328:	1e 2b c0 2a 61 2a 02 2a a3 29 44 29 e5 28 85 28     .+.*a*.*.)D).(.(
10001338:	26 28 c6 27 67 27 07 27 a7 26 47 26 e7 25 87 25     &(.'g'.'.&G&.%.%
10001348:	27 25 c7 24 67 24 06 24 a6 23 45 23 e4 22 84 22     '%.$g$.$.#E#."."
10001358:	23 22 c2 21 61 21 00 21 9f 20 3d 20 dc 1f 7b 1f     #".!a!.!. = ..{.
10001368:	19 1f b8 1e 56 1e f4 1d 93 1d 31 1d cf 1c 6d 1c     ....V.....1...m.
10001378:	0b 1c a9 1b 46 1b e4 1a 82 1a 20 1a bd 19 5b 19     ....F..... ...[.
10001388:	f8 18 95 18 33 18 d0 17 6d 17 0a 17 a7 16 44 16     ....3...m.....D.
10001398:	e1 15 7e 15 1b 15 b8 14 55 14 f2 13 8e 13 2b 13     ..~.....U.....+.
100013a8:	c7 12 64 12 00 12 9d 11 39 11 d6 10 72 10 0e 10     ..d.....9...r...
100013b8:	ab 0f 47 0f e3 0e 7f 0e 1b 0e b7 0d 53 0d ef 0c     ..G.........S...
100013c8:	8b 0c 27 0c c3 0b 5f 0b fb 0a 97 0a 32 0a ce 09     ..'..._.....2...
100013d8:	6a 09 06 09 a1 08 3d 08 d9 07 74 07 10 07 ac 06     j.....=...t.....
100013e8:	47 06 e3 05 7e 05 1a 05 b6 04 51 04 ed 03 88 03     G...~.....Q.....
100013f8:	24 03 bf 02 5b 02 f6 01 92 01 2d 01 c9 00 64 00     $...[.....-...d.
10001408:	00 00 9b ff 36 ff d2 fe 6d fe 09 fe a4 fd 40 fd     ....6...m.....@.
10001418:	db fc 77 fc 12 fc ae fb 49 fb e5 fa 81 fa 1c fa     ..w.....I.......
10001428:	b8 f9 53 f9 ef f8 8b f8 26 f8 c2 f7 5e f7 f9 f6     ..S.....&...^...
10001438:	95 f6 31 f6 cd f5 68 f5 04 f5 a0 f4 3c f4 d8 f3     ..1...h.....<...
10001448:	74 f3 10 f3 ac f2 48 f2 e4 f1 80 f1 1c f1 b8 f0     t.....H.........
10001458:	54 f0 f1 ef 8d ef 29 ef c6 ee 62 ee ff ed 9b ed     T.....)...b.....
10001468:	38 ed d4 ec 71 ec 0d ec aa eb 47 eb e4 ea 81 ea     8...q.....G.....
10001478:	1e ea bb e9 58 e9 f5 e8 92 e8 2f e8 cc e7 6a e7     ....X...../...j.
10001488:	07 e7 a4 e6 42 e6 df e5 7d e5 1b e5 b9 e4 56 e4     ....B...}.....V.
10001498:	f4 e3 92 e3 30 e3 ce e2 6c e2 0b e2 a9 e1 47 e1     ....0...l.....G.
100014a8:	e6 e0 84 e0 23 e0 c2 df 60 df ff de 9e de 3d de     ....#...`.....=.
100014b8:	dc dd 7b dd 1b dd ba dc 59 dc f9 db 98 db 38 db     ..{.....Y.....8.
100014c8:	d8 da 78 da 18 da b8 d9 58 d9 f8 d8 98 d8 39 d8     ..x.....X.....9.
100014d8:	d9 d7 7a d7 1a d7 bb d6 5c d6 fd d5 9e d5 3f d5     ..z.....\.....?.
100014e8:	e1 d4 82 d4 24 d4 c5 d3 67 d3 09 d3 ab d2 4d d2     ....$...g.....M.
100014f8:	ef d1 91 d1 33 d1 d6 d0 79 d0 1b d0 be cf 61 cf     ....3...y.....a.
10001508:	04 cf a7 ce 4b ce ee cd 92 cd 35 cd d9 cc 7d cc     ....K.....5...}.
10001518:	21 cc c5 cb 69 cb 0e cb b2 ca 57 ca fc c9 a1 c9     !...i.....W.....
10001528:	46 c9 eb c8 90 c8 36 c8 db c7 81 c7 27 c7 cd c6     F.....6.....'...
10001538:	73 c6 19 c6 c0 c5 66 c5 0d c5 b4 c4 5b c4 02 c4     s.....f.....[...
10001548:	a9 c3 51 c3 f8 c2 a0 c2 48 c2 f0 c1 98 c1 40 c1     ..Q.....H.....@.
10001558:	e9 c0 91 c0 3a c0 e3 bf 8c bf 35 bf df be 88 be     ....:.....5.....
10001568:	32 be dc bd 86 bd 30 bd da bc 85 bc 2f bc da bb     2.....0...../...
10001578:	85 bb 30 bb dc ba 87 ba 33 ba df b9 8b b9 37 b9     ..0.....3.....7.
10001588:	e3 b8 90 b8 3c b8 e9 b7 96 b7 43 b7 f1 b6 9e b6     ....<.....C.....
10001598:	4c b6 fa b5 a8 b5 56 b5 05 b5 b3 b4 62 b4 11 b4     L.....V.....b...
100015a8:	c0 b3 70 b3 1f b3 cf b2 7f b2 2f b2 df b1 90 b1     ..p......./.....
100015b8:	40 b1 f1 b0 a2 b0 53 b0 05 b0 b6 af 68 af 1a af     @.....S.....h...
100015c8:	cc ae 7f ae 31 ae e4 ad 97 ad 4a ad fe ac b1 ac     ....1.....J.....
100015d8:	65 ac 19 ac cd ab 82 ab 36 ab eb aa a0 aa 55 aa     e.......6.....U.
100015e8:	0b aa c0 a9 76 a9 2c a9 e2 a8 99 a8 4f a8 06 a8     ....v.,.....O...
100015f8:	bd a7 75 a7 2c a7 e4 a6 9c a6 54 a6 0c a6 c5 a5     ..u.,.....T.....
10001608:	7e a5 37 a5 f0 a4 a9 a4 63 a4 1d a4 d7 a3 92 a3     ~.7.....c.......
10001618:	4c a3 07 a3 c2 a2 7d a2 39 a2 f4 a1 b0 a1 6c a1     L.....}.9.....l.
10001628:	29 a1 e5 a0 a2 a0 5f a0 1d a0 da 9f 98 9f 56 9f     )....._.......V.
10001638:	14 9f d2 9e 91 9e 50 9e 0f 9e cf 9d 8e 9d 4e 9d     ......P.......N.
10001648:	0e 9d cf 9c 8f 9c 50 9c 11 9c d2 9b 94 9b 56 9b     ......P.......V.
10001658:	18 9b da 9a 9d 9a 5f 9a 22 9a e6 99 a9 99 6d 99     ......_.".....m.
10001668:	31 99 f5 98 ba 98 7e 98 43 98 08 98 ce 97 94 97     1.....~.C.......
10001678:	5a 97 20 97 e6 96 ad 96 74 96 3b 96 03 96 cb 95     Z. .....t.;.....
10001688:	93 95 5b 95 24 95 ec 94 b5 94 7f 94 48 94 12 94     ..[.$.......H...
10001698:	dc 93 a7 93 71 93 3c 93 07 93 d3 92 9e 92 6a 92     ....q.<.......j.
100016a8:	36 92 03 92 cf 91 9c 91 6a 91 37 91 05 91 d3 90     6.......j.7.....
100016b8:	a1 90 70 90 3f 90 0e 90 dd 8f ad 8f 7d 8f 4d 8f     ..p.?.......}.M.
100016c8:	1e 8f ee 8e bf 8e 91 8e 62 8e 34 8e 06 8e d9 8d     ........b.4.....
100016d8:	ab 8d 7e 8d 51 8d 25 8d f9 8c cd 8c a1 8c 76 8c     ..~.Q.%.......v.
100016e8:	4a 8c 20 8c f5 8b cb 8b a1 8b 77 8b 4e 8b 24 8b     J. .......w.N.$.
100016f8:	fc 8a d3 8a ab 8a 83 8a 5b 8a 33 8a 0c 8a e5 89     ........[.3.....
10001708:	bf 89 98 89 72 89 4d 89 27 89 02 89 dd 88 b8 88     ....r.M.'.......
10001718:	94 88 70 88 4c 88 29 88 06 88 e3 87 c0 87 9e 87     ..p.L.).........
10001728:	7c 87 5a 87 39 87 18 87 f7 86 d6 86 b6 86 96 86     |.Z.9...........
10001738:	76 86 57 86 38 86 19 86 fb 85 dc 85 be 85 a1 85     v.W.8...........
10001748:	83 85 66 85 4a 85 2d 85 11 85 f5 84 da 84 be 84     ..f.J.-.........
10001758:	a3 84 89 84 6e 84 54 84 3b 84 21 84 08 84 ef 83     ....n.T.;.!.....
10001768:	d6 83 be 83 a6 83 8f 83 77 83 60 83 49 83 33 83     ........w.`.I.3.
10001778:	1d 83 07 83 f1 82 dc 82 c7 82 b2 82 9e 82 8a 82     ................
10001788:	76 82 63 82 4f 82 3d 82 2a 82 18 82 06 82 f4 81     v.c.O.=.*.......
10001798:	e3 81 d2 81 c1 81 b1 81 a1 81 91 81 81 81 72 81     ..............r.
100017a8:	63 81 55 81 46 81 38 81 2b 81 1d 81 10 81 03 81     c.U.F.8.+.......
100017b8:	f7 80 eb 80 df 80 d3 80 c8 80 bd 80 b3 80 a8 80     ................
100017c8:	9e 80 95 80 8b 80 82 80 79 80 71 80 69 80 61 80     ........y.q.i.a.
100017d8:	59 80 52 80 4b 80 44 80 3e 80 38 80 32 80 2d 80     Y.R.K.D.>.8.2.-.
100017e8:	28 80 23 80 1f 80 1b 80 17 80 13 80 10 80 0d 80     (.#.............
100017f8:	0a 80 08 80 06 80 04 80 03 80 02 80 01 80 01 80     ................
10001808:	01 80 01 80 01 80 02 80 03 80 04 80 06 80 08 80     ................
10001818:	0a 80 0d 80 10 80 13 80 17 80 1b 80 1f 80 23 80     ..............#.
10001828:	28 80 2d 80 32 80 38 80 3e 80 44 80 4b 80 52 80     (.-.2.8.>.D.K.R.
10001838:	59 80 61 80 69 80 71 80 79 80 82 80 8b 80 95 80     Y.a.i.q.y.......
10001848:	9e 80 a8 80 b3 80 bd 80 c8 80 d3 80 df 80 eb 80     ................
10001858:	f7 80 03 81 10 81 1d 81 2b 81 38 81 46 81 55 81     ........+.8.F.U.
10001868:	63 81 72 81 81 81 91 81 a1 81 b1 81 c1 81 d2 81     c.r.............
10001878:	e3 81 f4 81 06 82 18 82 2a 82 3d 82 4f 82 63 82     ........*.=.O.c.
10001888:	76 82 8a 82 9e 82 b2 82 c7 82 dc 82 f1 82 07 83     v...............
10001898:	1d 83 33 83 49 83 60 83 77 83 8f 83 a6 83 be 83     ..3.I.`.w.......
100018a8:	d6 83 ef 83 08 84 21 84 3b 84 54 84 6e 84 89 84     ......!.;.T.n...
100018b8:	a3 84 be 84 da 84 f5 84 11 85 2d 85 4a 85 66 85     ..........-.J.f.
100018c8:	83 85 a1 85 be 85 dc 85 fb 85 19 86 38 86 57 86     ............8.W.
100018d8:	76 86 96 86 b6 86 d6 86 f7 86 18 87 39 87 5a 87     v...........9.Z.
100018e8:	7c 87 9e 87 c0 87 e3 87 06 88 29 88 4c 88 70 88     |.........).L.p.
100018f8:	94 88 b8 88 dd 88 02 89 27 89 4d 89 72 89 98 89     ........'.M.r...
10001908:	bf 89 e5 89 0c 8a 33 8a 5b 8a 83 8a ab 8a d3 8a     ......3.[.......
10001918:	fc 8a 24 8b 4e 8b 77 8b a1 8b cb 8b f5 8b 20 8c     ..$.N.w....... .
10001928:	4a 8c 76 8c a1 8c cd 8c f9 8c 25 8d 51 8d 7e 8d     J.v.......%.Q.~.
10001938:	ab 8d d9 8d 06 8e 34 8e 62 8e 91 8e bf 8e ee 8e     ......4.b.......
10001948:	1e 8f 4d 8f 7d 8f ad 8f dd 8f 0e 90 3f 90 70 90     ..M.}.......?.p.
10001958:	a1 90 d3 90 05 91 37 91 6a 91 9c 91 cf 91 03 92     ......7.j.......
10001968:	36 92 6a 92 9e 92 d3 92 07 93 3c 93 71 93 a7 93     6.j.......<.q...
10001978:	dc 93 12 94 48 94 7f 94 b5 94 ec 94 24 95 5b 95     ....H.......$.[.
10001988:	93 95 cb 95 03 96 3b 96 74 96 ad 96 e6 96 20 97     ......;.t..... .
10001998:	5a 97 94 97 ce 97 08 98 43 98 7e 98 ba 98 f5 98     Z.......C.~.....
100019a8:	31 99 6d 99 a9 99 e6 99 22 9a 5f 9a 9d 9a da 9a     1.m....."._.....
100019b8:	18 9b 56 9b 94 9b d2 9b 11 9c 50 9c 8f 9c cf 9c     ..V.......P.....
100019c8:	0e 9d 4e 9d 8e 9d cf 9d 0f 9e 50 9e 91 9e d2 9e     ..N.......P.....
100019d8:	14 9f 56 9f 98 9f da 9f 1d a0 5f a0 a2 a0 e5 a0     ..V......._.....
100019e8:	29 a1 6c a1 b0 a1 f4 a1 39 a2 7d a2 c2 a2 07 a3     ).l.....9.}.....
100019f8:	4c a3 92 a3 d7 a3 1d a4 63 a4 a9 a4 f0 a4 37 a5     L.......c.....7.
10001a08:	7e a5 c5 a5 0c a6 54 a6 9c a6 e4 a6 2c a7 75 a7     ~.....T.....,.u.
10001a18:	bd a7 06 a8 4f a8 99 a8 e2 a8 2c a9 76 a9 c0 a9     ....O.....,.v...
10001a28:	0b aa 55 aa a0 aa eb aa 36 ab 82 ab cd ab 19 ac     ..U.....6.......
10001a38:	65 ac b1 ac fe ac 4a ad 97 ad e4 ad 31 ae 7f ae     e.....J.....1...
10001a48:	cc ae 1a af 68 af b6 af 05 b0 53 b0 a2 b0 f1 b0     ....h.....S.....
10001a58:	40 b1 90 b1 df b1 2f b2 7f b2 cf b2 1f b3 70 b3     @...../.......p.
10001a68:	c0 b3 11 b4 62 b4 b3 b4 05 b5 56 b5 a8 b5 fa b5     ....b.....V.....
10001a78:	4c b6 9e b6 f1 b6 43 b7 96 b7 e9 b7 3c b8 90 b8     L.....C.....<...
10001a88:	e3 b8 37 b9 8b b9 df b9 33 ba 87 ba dc ba 30 bb     ..7.....3.....0.
10001a98:	85 bb da bb 2f bc 85 bc da bc 30 bd 86 bd dc bd     ..../.....0.....
10001aa8:	32 be 88 be df be 35 bf 8c bf e3 bf 3a c0 91 c0     2.....5.....:...
10001ab8:	e9 c0 40 c1 98 c1 f0 c1 48 c2 a0 c2 f8 c2 51 c3     ..@.....H.....Q.
10001ac8:	a9 c3 02 c4 5b c4 b4 c4 0d c5 66 c5 c0 c5 19 c6     ....[.....f.....
10001ad8:	73 c6 cd c6 27 c7 81 c7 db c7 36 c8 90 c8 eb c8     s...'.....6.....
10001ae8:	46 c9 a1 c9 fc c9 57 ca b2 ca 0e cb 69 cb c5 cb     F.....W.....i...
10001af8:	21 cc 7d cc d9 cc 35 cd 92 cd ee cd 4b ce a7 ce     !.}...5.....K...
10001b08:	04 cf 61 cf be cf 1b d0 79 d0 d6 d0 33 d1 91 d1     ..a.....y...3...
10001b18:	ef d1 4d d2 ab d2 09 d3 67 d3 c5 d3 24 d4 82 d4     ..M.....g...$...
10001b28:	e1 d4 3f d5 9e d5 fd d5 5c d6 bb d6 1a d7 7a d7     ..?.....\.....z.
10001b38:	d9 d7 39 d8 98 d8 f8 d8 58 d9 b8 d9 18 da 78 da     ..9.....X.....x.
10001b48:	d8 da 38 db 98 db f9 db 59 dc ba dc 1b dd 7b dd     ..8.....Y.....{.
10001b58:	dc dd 3d de 9e de ff de 60 df c2 df 23 e0 84 e0     ..=.....`...#...
10001b68:	e6 e0 47 e1 a9 e1 0b e2 6c e2 ce e2 30 e3 92 e3     ..G.....l...0...
10001b78:	f4 e3 56 e4 b9 e4 1b e5 7d e5 df e5 42 e6 a4 e6     ..V.....}...B...
10001b88:	07 e7 6a e7 cc e7 2f e8 92 e8 f5 e8 58 e9 bb e9     ..j.../.....X...
10001b98:	1e ea 81 ea e4 ea 47 eb aa eb 0d ec 71 ec d4 ec     ......G.....q...
10001ba8:	38 ed 9b ed ff ed 62 ee c6 ee 29 ef 8d ef f1 ef     8.....b...).....
10001bb8:	54 f0 b8 f0 1c f1 80 f1 e4 f1 48 f2 ac f2 10 f3     T.........H.....
10001bc8:	74 f3 d8 f3 3c f4 a0 f4 04 f5 68 f5 cd f5 31 f6     t...<.....h...1.
10001bd8:	95 f6 f9 f6 5e f7 c2 f7 26 f8 8b f8 ef f8 53 f9     ....^...&.....S.
10001be8:	b8 f9 1c fa 81 fa e5 fa 49 fb ae fb 12 fc 77 fc     ........I.....w.
10001bf8:	db fc 40 fd a4 fd 09 fe 6d fe d2 fe 36 ff 9b ff     ..@.....m...6...

10001c08 <time_count>:
	...

10001c10 <adc0_isr_count>:
10001c10:	00 00 00 00                                         ....

10001c14 <adc1_isr_count>:
10001c14:	00 00 00 00                                         ....

10001c18 <adc2_isr_count>:
10001c18:	00 00 00 00                                         ....

10001c1c <ST_Delay_num>:
10001c1c:	78 00 00 00                                         x...

10001c20 <error_state>:
10001c20:	00 00 00 00                                         ....

10001c24 <adc_current_scale>:
10001c24:	00 00 00 00                                         ....

10001c28 <adc_voltage_scale>:
10001c28:	00 00 00 00                                         ....

10001c2c <CORDIC_DATA>:
10001c2c:	00 20 e4 12 fb 09 11 05 8b 02 46 01 a3 00 51 00     . ........F...Q.
10001c3c:	29 00 14 00 0a 00 05 00 03 00 01 00 01 00 00 00     )...............

10001c4c <TableStruct>:
10001c4c:	20 1e 00 10                                          ...

10001c50 <interface>:
	...

10001c68 <protocol>:
	...

10001c94 <bufferLNet>:
	...

10001d94 <sendSerialFcn>:
10001d94:	00 00 00 00                                         ....

10001d98 <receiveSerialFcn>:
10001d98:	00 00 00 00                                         ....

10001d9c <isReceiveDataAvailableFcn>:
10001d9c:	00 00 00 00                                         ....

10001da0 <isSendReadyFcn>:
10001da0:	00 00 00 00                                         ....

10001da4 <lastSyn>:
10001da4:	00 00 00 00                                         ....

10001da8 <nextGlobalState>:
10001da8:	00 00 00 00                                         ....

10001dac <txBufFull.1618>:
10001dac:	00 00 00 00                                         ....

10001db0 <serviceTable>:
	...

10001e1c <_Ctype>:
10001e1c:	81 80 00 00                                         ....

10001e20 <TheTableStruct>:
	...

10001e60 <TScope>:
	...

10001ee0 <ScopeArray>:
	...

10003ee0 <adc_data>:
	...

10003f04 <adc_buf>:
	...

10003f1c <error_param>:
	...

10003f54 <commu_data>:
10003f54:	00 00 00 00                                         ....

10003f58 <sin_data>:
	...

10003f64 <sys_control>:
	...

10003f70 <control_param>:
	...

10003fa4 <SVGenParm>:
	...

10003fb2 <ParkParm>:
	...

10003fd8 <PIParmD>:
	...

10003ff4 <PIParmQ>:
	...

10004010 <PIParmW>:
	...

1000402c <smc1>:
	...

10004060 <speed_data>:
	...

10004098 <run_mode>:
	...

1000409a <DATA_atan2CORDIC>:
	...

1000409c <Data_FracMpy>:
1000409c:	00 00 00 00                                         ....

100040a0 <e10>:
100040a0:	00 00 00 00                                         ....

100040a4 <e2>:
100040a4:	00 00 00 00                                         ....

100040a8 <lf>:
100040a8:	00 00 00 00                                         ....

100040ac <S>:
100040ac:	00 00 00 00                                         ....

100040b0 <__Heap_Start__>:
	...
