
KF32A156_DEMO_PMSM_FOC_V1_1.elf:     file format elf32-kungfu32-little


Disassembly of section .text:

00000000 <_start>:
__vector_entry__:
       0:	00 00 01 10 90 40 00 00 70 34 00 00 74 34 00 00     .....@..p4..t4..
      10:	00 00 00 00 78 34 00 00 00 00 00 00 14 22 fe ef     ....x4......."..
	...
      2c:	7c 34 00 00 00 00 00 00 00 00 00 00 80 34 00 00     |4...........4..
      3c:	84 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .4..............
	...
      6c:	88 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .4..............
	...
      84:	8c 34 00 00 cc 34 00 00 00 00 00 00 00 00 00 00     .4...4..........
      94:	d0 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .4..............
	...

00000200 <ADC_Reset>:
ADC_Reset():
..\src\kf32a9k1xxx_adc.c:55
  * 输入  ADCx: 指向ADC内存结构的指针，取值为ADC0_SFR~ADC2_SFR。
  * 返回  无。
  */
void
ADC_Reset (ADC_SFRmap* ADCx)
{
     200:	81 5f       	PUSH      {R6,LR}
..\src\kf32a9k1xxx_adc.c:57
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     202:	0b 45       	LD        R5, [PC + #11]        ;->0x22c  :=0x40000580
     204:	05 70       	CMP       R0, R5
     206:	1b f0       	JZ        $+27                  ;->0x23c
     208:	0a 45       	LD        R5, [PC + #10]        ;->0x230  :=0x40000600
     20a:	05 70       	CMP       R0, R5
     20c:	32 f0       	JZ        $+50                  ;->0x270
     20e:	61 10       	MOV       R6, #1
     210:	09 45       	LD        R5, [PC + #9]         ;->0x234  :=0x40000680
     212:	05 70       	CMP       R0, R5
     214:	02 f0       	JZ        $+2                   ;->0x218
     216:	60 10       	MOV       R6, #0
     218:	66 d1       	ZXT.B     R6, R6
     21a:	06 58       	MOV       R0, R6
     21c:	07 45       	LD        R5, [PC + #7]         ;->0x238  :=0x371a
     21e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:71
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC1RST, TRUE);
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC1RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_ADC1CLKEN, TRUE);
    }
    else if (ADCx == ADC2_SFR)
     220:	60 38       	CMP       R6, #0
     222:	41 f1       	JNZ       $+65                  ;->0x2a4
..\src\kf32a9k1xxx_adc.c:81
    }
    else
    {
        ;
    }
}
     224:	06 5d       	POP       R6
     226:	0d 5d       	POP       LR
     228:	1d 5c       	JMP       LR
     22a:	00 00       	NOP      NOP      
     22c:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x52c	@@: LD        R0, [PC + #0]         ;->0x22c  :=0x40000580
     230:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0xfffffe30	@@: LD        R0, [PC + #0]         ;->0x230  :=0x40000600
     234:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0xffffff34	@@: LD        R0, [PC + #0]         ;->0x234  :=0x40000680
     238:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_adc.c:57
  */
void
ADC_Reset (ADC_SFRmap* ADCx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     23c:	01 10       	MOV       R0, #1
     23e:	0a 45       	LD        R5, [PC + #10]        ;->0x264  :=0x371a
     240:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:61

    if (ADCx == ADC0_SFR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC0RST, TRUE);
     242:	01 10       	MOV       R0, #1
     244:	83 7a       	LSL       R0, #11
     246:	11 10       	MOV       R1, #1
     248:	08 46       	LD        R6, [PC + #8]         ;->0x268  :=0x2004
     24a:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_adc.c:62
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC0RST, FALSE);
     24c:	01 10       	MOV       R0, #1
     24e:	83 7a       	LSL       R0, #11
     250:	10 10       	MOV       R1, #0
     252:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_adc.c:63
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_ADC0CLKEN, TRUE);
     254:	01 10       	MOV       R0, #1
     256:	83 7a       	LSL       R0, #11
     258:	11 10       	MOV       R1, #1
     25a:	05 45       	LD        R5, [PC + #5]         ;->0x26c  :=0x1ecc
     25c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:81
    }
    else
    {
        ;
    }
}
     25e:	06 5d       	POP       R6
     260:	0d 5d       	POP       LR
     262:	1d 5c       	JMP       LR
     264:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     268:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
     26c:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
..\src\kf32a9k1xxx_adc.c:57
  */
void
ADC_Reset (ADC_SFRmap* ADCx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     270:	01 10       	MOV       R0, #1
     272:	0a 45       	LD        R5, [PC + #10]        ;->0x298  :=0x371a
     274:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:67
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC0RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_ADC0CLKEN, TRUE);
    }
    else if (ADCx == ADC1_SFR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC1RST, TRUE);
     276:	01 10       	MOV       R0, #1
     278:	84 7a       	LSL       R0, #12
     27a:	11 10       	MOV       R1, #1
     27c:	08 46       	LD        R6, [PC + #8]         ;->0x29c  :=0x2004
     27e:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_adc.c:68
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC1RST, FALSE);
     280:	01 10       	MOV       R0, #1
     282:	84 7a       	LSL       R0, #12
     284:	10 10       	MOV       R1, #0
     286:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_adc.c:69
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_ADC1CLKEN, TRUE);
     288:	01 10       	MOV       R0, #1
     28a:	84 7a       	LSL       R0, #12
     28c:	11 10       	MOV       R1, #1
     28e:	05 45       	LD        R5, [PC + #5]         ;->0x2a0  :=0x1ecc
     290:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:81
    }
    else
    {
        ;
    }
}
     292:	06 5d       	POP       R6
     294:	0d 5d       	POP       LR
     296:	1d 5c       	JMP       LR
     298:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     29c:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
     2a0:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
..\src\kf32a9k1xxx_adc.c:73
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC1RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_ADC1CLKEN, TRUE);
    }
    else if (ADCx == ADC2_SFR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC2RST, TRUE);
     2a4:	01 10       	MOV       R0, #1
     2a6:	85 7a       	LSL       R0, #13
     2a8:	11 10       	MOV       R1, #1
     2aa:	07 46       	LD        R6, [PC + #7]         ;->0x2c4  :=0x2004
     2ac:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_adc.c:74
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_ADC2RST, FALSE);
     2ae:	01 10       	MOV       R0, #1
     2b0:	85 7a       	LSL       R0, #13
     2b2:	10 10       	MOV       R1, #0
     2b4:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_adc.c:75
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_ADC2CLKEN, TRUE);
     2b6:	01 10       	MOV       R0, #1
     2b8:	85 7a       	LSL       R0, #13
     2ba:	11 10       	MOV       R1, #1
     2bc:	03 45       	LD        R5, [PC + #3]         ;->0x2c8  :=0x1ecc
     2be:	05 5c       	LJMP      R5
     2c0:	b2 07       	SJMP      $-78                  ;->0x224
     2c2:	00 00       	NOP      NOP      
     2c4:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
     2c8:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      

000002cc <ADC_Configuration>:
ADC_Configuration():
..\src\kf32a9k1xxx_adc.c:91
  *       adcInitStruct: ADC模块配置信息结构体指针。
  * 返回  无。
  */
void
ADC_Configuration (ADC_SFRmap* ADCx, ADC_InitTypeDef* adcInitStruct)
{
     2cc:	87 5f       	PUSH      {R6-R8,LR}
     2ce:	00 59       	MOV       R8, R0
     2d0:	c1 58       	MOV       R6, R1
..\src\kf32a9k1xxx_adc.c:95
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     2d2:	01 10       	MOV       R0, #1
     2d4:	5f 45       	LD        R5, [PC + #95]        ;->0x450  :=0x40000580
     2d6:	85 70       	CMP       R8, R5
     2d8:	08 f0       	JZ        $+8                   ;->0x2e8
     2da:	5f 45       	LD        R5, [PC + #95]        ;->0x454  :=0x40000600
     2dc:	85 70       	CMP       R8, R5
     2de:	05 f0       	JZ        $+5                   ;->0x2e8
     2e0:	5e 45       	LD        R5, [PC + #94]        ;->0x458  :=0x40000680
     2e2:	85 70       	CMP       R8, R5
     2e4:	02 f0       	JZ        $+2                   ;->0x2e8
     2e6:	00 10       	MOV       R0, #0
     2e8:	5d 47       	LD        R7, [PC + #93]        ;->0x45c  :=0x371a
     2ea:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:96
    CHECK_RESTRICTION(CHECK_ADC_CLK(adcInitStruct->m_Clock));
     2ec:	56 82       	LD.W      R5, [R6]
     2ee:	01 10       	MOV       R0, #1
     2f0:	50 38       	CMP       R5, #0
     2f2:	06 f0       	JZ        $+6                   ;->0x2fe
     2f4:	52 38       	CMP       R5, #2
     2f6:	04 f0       	JZ        $+4                   ;->0x2fe
     2f8:	54 38       	CMP       R5, #4
     2fa:	02 f0       	JZ        $+2                   ;->0x2fe
     2fc:	00 10       	MOV       R0, #0
     2fe:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:97
    CHECK_RESTRICTION(CHECK_ADC_CLK_DIV(adcInitStruct->m_ClockDiv));
     300:	6e 98       	LD.W      R5, [R6 + #1]
     302:	01 10       	MOV       R0, #1
     304:	50 38       	CMP       R5, #0
     306:	14 f0       	JZ        $+20                  ;->0x32e
     308:	4f 1f       	MOV       R4, #255
     30a:	64 c0       	ADD       R4, R4, #1
     30c:	54 70       	CMP       R5, R4
     30e:	10 f0       	JZ        $+16                  ;->0x32e
     310:	41 10       	MOV       R4, #1
     312:	a1 7a       	LSL       R4, #9
     314:	54 70       	CMP       R5, R4
     316:	0c f0       	JZ        $+12                  ;->0x32e
     318:	52 44       	LD        R4, [PC + #82]        ;->0x460  :=0x300
     31a:	54 70       	CMP       R5, R4
     31c:	09 f0       	JZ        $+9                   ;->0x32e
     31e:	41 10       	MOV       R4, #1
     320:	a2 7a       	LSL       R4, #10
     322:	54 70       	CMP       R5, R4
     324:	05 f0       	JZ        $+5                   ;->0x32e
     326:	50 44       	LD        R4, [PC + #80]        ;->0x464  :=0x500
     328:	54 70       	CMP       R5, R4
     32a:	02 f0       	JZ        $+2                   ;->0x32e
     32c:	00 10       	MOV       R0, #0
     32e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:98
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_ScanMode));
     330:	01 10       	MOV       R0, #1
     332:	ae 98       	LD.W      R5, [R6 + #2]
     334:	50 70       	CMP       R5, R0
     336:	02 f9       	JLS       $+2                   ;->0x33a
     338:	00 10       	MOV       R0, #0
     33a:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:99
    CHECK_RESTRICTION(CHECK_ADC_CONV_MODE(adcInitStruct->m_ContinuousMode));
     33c:	ee 98       	LD.W      R5, [R6 + #3]
     33e:	01 10       	MOV       R0, #1
     340:	41 10       	MOV       R4, #1
     342:	22 7b       	LSL       R4, #18
     344:	54 70       	CMP       R5, R4
     346:	04 f0       	JZ        $+4                   ;->0x34e
     348:	50 38       	CMP       R5, #0
     34a:	02 f0       	JZ        $+2                   ;->0x34e
     34c:	94 04       	SJMP      $+148                 ;->0x474
     34e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:100
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_ExternalTrig_EN));
     350:	01 10       	MOV       R0, #1
     352:	6e 99       	LD.W      R5, [R6 + #5]
     354:	50 70       	CMP       R5, R0
     356:	02 f9       	JLS       $+2                   ;->0x35a
     358:	00 10       	MOV       R0, #0
     35a:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:101
    CHECK_RESTRICTION(CHECK_ADC_EXT_TRIG(adcInitStruct->m_ExternalTrig));
     35c:	ae 99       	LD.W      R5, [R6 + #6]
     35e:	24 10       	MOV       R2, #4
     360:	a5 dc       	LSR       R4, R5, R2
     362:	00 10       	MOV       R0, #0
     364:	47 3c       	CMP       R4, #71
     366:	07 f8       	JHI       $+7                   ;->0x374
     368:	ac 7b       	LSL       R5, #28
     36a:	41 10       	MOV       R4, #1
     36c:	50 70       	CMP       R5, R0
     36e:	02 f0       	JZ        $+2                   ;->0x372
     370:	86 04       	SJMP      $+134                 ;->0x47c
     372:	04 58       	MOV       R0, R4
     374:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:102
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_HPExternalTrig_EN));
     376:	01 10       	MOV       R0, #1
     378:	ee 99       	LD.W      R5, [R6 + #7]
     37a:	50 70       	CMP       R5, R0
     37c:	02 f9       	JLS       $+2                   ;->0x380
     37e:	00 10       	MOV       R0, #0
     380:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:103
    CHECK_RESTRICTION(CHECK_ADC_HPEXT_TRIG(adcInitStruct->m_HPExternalTrig));
     382:	2e 9a       	LD.W      R5, [R6 + #8]
     384:	34 11       	MOV       R3, #20
     386:	e5 dc       	LSR       R4, R5, R3
     388:	00 10       	MOV       R0, #0
     38a:	47 3c       	CMP       R4, #71
     38c:	06 f8       	JHI       $+6                   ;->0x398
     38e:	ac 7a       	LSL       R5, #12
     390:	41 10       	MOV       R4, #1
     392:	50 70       	CMP       R5, R0
     394:	72 f1       	JNZ       $+114                 ;->0x478
     396:	04 58       	MOV       R0, R4
     398:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:104
    CHECK_RESTRICTION(CHECK_ADC_DATA_ALIGN(adcInitStruct->m_DataAlign));
     39a:	2e 99       	LD.W      R5, [R6 + #4]
     39c:	01 10       	MOV       R0, #1
     39e:	58 38       	CMP       R5, #8
     3a0:	03 f0       	JZ        $+3                   ;->0x3a6
     3a2:	50 38       	CMP       R5, #0
     3a4:	66 f1       	JNZ       $+102                 ;->0x470
     3a6:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:105
    CHECK_RESTRICTION(CHECK_ADC_REF(adcInitStruct->m_VoltageRef));
     3a8:	6e 9a       	LD.W      R5, [R6 + #9]
     3aa:	01 10       	MOV       R0, #1
     3ac:	41 10       	MOV       R4, #1
     3ae:	23 7b       	LSL       R4, #19
     3b0:	54 70       	CMP       R5, R4
     3b2:	0a f0       	JZ        $+10                  ;->0x3c6
     3b4:	41 10       	MOV       R4, #1
     3b6:	22 7b       	LSL       R4, #18
     3b8:	54 70       	CMP       R5, R4
     3ba:	06 f0       	JZ        $+6                   ;->0x3c6
     3bc:	41 10       	MOV       R4, #1
     3be:	21 7b       	LSL       R4, #17
     3c0:	54 70       	CMP       R5, R4
     3c2:	02 f0       	JZ        $+2                   ;->0x3c6
     3c4:	00 10       	MOV       R0, #0
     3c6:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:106
    CHECK_RESTRICTION(CHECK_ADC_REGULAR_LENGTH(adcInitStruct->m_NumOfConv));
     3c8:	a6 9a       	LD.W      R4, [R6 + #10]
     3ca:	6c cc       	SUB       R5, R4, #1
     3cc:	01 10       	MOV       R0, #1
     3ce:	5f 38       	CMP       R5, #15
     3d0:	02 f9       	JLS       $+2                   ;->0x3d4
     3d2:	00 10       	MOV       R0, #0
     3d4:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:107
    CHECK_RESTRICTION(CHECK_ADC_HIGH_PRIORITY_LENGTH(adcInitStruct->m_NumOfHPConv));
     3d6:	d6 9a       	LD.W      R2, [R6 + #11]
     3d8:	6a cc       	SUB       R5, R2, #1
     3da:	01 10       	MOV       R0, #1
     3dc:	53 38       	CMP       R5, #3
     3de:	02 f9       	JLS       $+2                   ;->0x3e2
     3e0:	00 10       	MOV       R0, #0
     3e2:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:121
                        adcInitStruct->m_ClockDiv | \
                        ((uint32_t)adcInitStruct->m_ScanMode << 17) | \
                        adcInitStruct->m_ContinuousMode | \
                        adcInitStruct->m_DataAlign
                        );
    ADCx->CTL0 = SFR_Config (ADCx->CTL0, ~ADC_CTL0_INIT_MASK, tmpreg);
     3e4:	38 82       	LD.W      R3, [R8]
..\src\kf32a9k1xxx_adc.c:115
    /* 根据结构体成员m_Clock，设置CLKS位域 */
    /* 根据结构体成员m_ClockDiv，设置ADCCLKS位域 */
    /* 根据结构体成员m_ScanMode，设置SCANEN位域 */
    /* 根据结构体成员m_ContinuousMode，设置CONT位域 */
    /* 根据结构体成员m_DataAlign，设置LR位域 */
    tmpreg = (uint32_t)(adcInitStruct->m_Clock | \
     3e6:	66 98       	LD.W      R4, [R6 + #1]
     3e8:	26 82       	LD.W      R2, [R6]
     3ea:	ac d6       	ORL       R5, R4, R2
..\src\kf32a9k1xxx_adc.c:116
                        adcInitStruct->m_ClockDiv | \
     3ec:	e6 98       	LD.W      R4, [R6 + #3]
     3ee:	2d d7       	ORL       R5, R5, R4
..\src\kf32a9k1xxx_adc.c:117
                        ((uint32_t)adcInitStruct->m_ScanMode << 17) | \
     3f0:	16 99       	LD.W      R2, [R6 + #4]
     3f2:	ad d6       	ORL       R5, R5, R2
     3f4:	a6 98       	LD.W      R4, [R6 + #2]
     3f6:	21 7b       	LSL       R4, #17
..\src\kf32a9k1xxx_adc.c:115
    /* 根据结构体成员m_Clock，设置CLKS位域 */
    /* 根据结构体成员m_ClockDiv，设置ADCCLKS位域 */
    /* 根据结构体成员m_ScanMode，设置SCANEN位域 */
    /* 根据结构体成员m_ContinuousMode，设置CONT位域 */
    /* 根据结构体成员m_DataAlign，设置LR位域 */
    tmpreg = (uint32_t)(adcInitStruct->m_Clock | \
     3f8:	2d d7       	ORL       R5, R5, R4
KF32A9K1XXX.h:13917
   ---------------------------------------------------------------------------- */
/* 写特殊功能寄存器 */
static inline uint32_t
SFR_Config (uint32_t SfrMem, uint32_t SfrMask, uint32_t WriteVal)
{
    return ((SfrMem & SfrMask) | (WriteVal));
     3fa:	1c 44       	LD        R4, [PC + #28]        ;->0x468  :=0xfff9f8f1
     3fc:	23 d5       	ANL       R4, R3, R4
     3fe:	2d d7       	ORL       R5, R5, R4
..\src\kf32a9k1xxx_adc.c:121
                        adcInitStruct->m_ClockDiv | \
                        ((uint32_t)adcInitStruct->m_ScanMode << 17) | \
                        adcInitStruct->m_ContinuousMode | \
                        adcInitStruct->m_DataAlign
                        );
    ADCx->CTL0 = SFR_Config (ADCx->CTL0, ~ADC_CTL0_INIT_MASK, tmpreg);
     400:	85 85       	ST.W      [R8], R5
..\src\kf32a9k1xxx_adc.c:134
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
                         adcInitStruct->m_ExternalTrig | \
                         adcInitStruct->m_HPExternalTrig | \
                         adcInitStruct->m_VoltageRef);
    ADCx->CTL1 = SFR_Config (ADCx->CTL1, ~ADC_CTL1_INIT_MASK, tmpreg);
     402:	88 58       	MOV       R4, R8
     404:	5c 98       	LD.W      R3, [R4 + #1]
..\src\kf32a9k1xxx_adc.c:129
    /* 根据结构体成员m_ExternalTrig_EN，设置EXTEN位域 */
    /* 根据结构体成员m_HPExternalTrig_EN，设置HPEXTEN位域 */
    /* 根据结构体成员m_ExternalTrig，设置NCH位域 */
    /* 根据结构体成员m_HPExternalTrig，设置HCH位域 */
    /* 根据结构体成员m_VoltageRef，设置REF位域 */
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
     406:	16 9a       	LD.W      R2, [R6 + #8]
     408:	a6 99       	LD.W      R4, [R6 + #6]
     40a:	2a d7       	ORL       R5, R2, R4
..\src\kf32a9k1xxx_adc.c:130
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
     40c:	56 9a       	LD.W      R2, [R6 + #9]
     40e:	ad d6       	ORL       R5, R5, R2
..\src\kf32a9k1xxx_adc.c:129
    /* 根据结构体成员m_ExternalTrig_EN，设置EXTEN位域 */
    /* 根据结构体成员m_HPExternalTrig_EN，设置HPEXTEN位域 */
    /* 根据结构体成员m_ExternalTrig，设置NCH位域 */
    /* 根据结构体成员m_HPExternalTrig，设置HCH位域 */
    /* 根据结构体成员m_VoltageRef，设置REF位域 */
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
     410:	66 99       	LD.W      R4, [R6 + #5]
     412:	a3 7a       	LSL       R4, #11
..\src\kf32a9k1xxx_adc.c:131
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
                         adcInitStruct->m_ExternalTrig | \
     414:	2d d7       	ORL       R5, R5, R4
..\src\kf32a9k1xxx_adc.c:130
    /* 根据结构体成员m_HPExternalTrig_EN，设置HPEXTEN位域 */
    /* 根据结构体成员m_ExternalTrig，设置NCH位域 */
    /* 根据结构体成员m_HPExternalTrig，设置HCH位域 */
    /* 根据结构体成员m_VoltageRef，设置REF位域 */
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
     416:	e6 99       	LD.W      R4, [R6 + #7]
     418:	a3 7b       	LSL       R4, #27
..\src\kf32a9k1xxx_adc.c:129
    /* 根据结构体成员m_ExternalTrig_EN，设置EXTEN位域 */
    /* 根据结构体成员m_HPExternalTrig_EN，设置HPEXTEN位域 */
    /* 根据结构体成员m_ExternalTrig，设置NCH位域 */
    /* 根据结构体成员m_HPExternalTrig，设置HCH位域 */
    /* 根据结构体成员m_VoltageRef，设置REF位域 */
    tmpreg = (uint32_t)(((uint32_t)adcInitStruct->m_ExternalTrig_EN << 11) | \
     41a:	2d d7       	ORL       R5, R5, R4
KF32A9K1XXX.h:13917
     41c:	14 44       	LD        R4, [PC + #20]        ;->0x46c  :=0xf001f00f
     41e:	23 d5       	ANL       R4, R3, R4
     420:	2d d7       	ORL       R5, R5, R4
..\src\kf32a9k1xxx_adc.c:134
                         ((uint32_t)adcInitStruct->m_HPExternalTrig_EN << 27) | \
                         adcInitStruct->m_ExternalTrig | \
                         adcInitStruct->m_HPExternalTrig | \
                         adcInitStruct->m_VoltageRef);
    ADCx->CTL1 = SFR_Config (ADCx->CTL1, ~ADC_CTL1_INIT_MASK, tmpreg);
     422:	68 58       	MOV       R3, R8
     424:	5d a0       	ST.W      [R3 + #1], R5
..\src\kf32a9k1xxx_adc.c:139

    /*---------------- 设置SCANCTL寄存器 ----------------*/
    /* 根据结构体成员m_NumOfConv，设置SLEN位域 */
    tmpreg = adcInitStruct->m_NumOfConv - 1;
    ADCx->SCANCTL = SFR_Config (ADCx->SCANCTL,
     426:	a3 9d       	LD.W      R4, [R3 + #22]
KF32A9K1XXX.h:13917
     428:	5f 10       	MOV       R5, #15
     42a:	55 68       	NOT       R5, R5
     42c:	6c d5       	ANL       R5, R4, R5
..\src\kf32a9k1xxx_adc.c:138
                         adcInitStruct->m_VoltageRef);
    ADCx->CTL1 = SFR_Config (ADCx->CTL1, ~ADC_CTL1_INIT_MASK, tmpreg);

    /*---------------- 设置SCANCTL寄存器 ----------------*/
    /* 根据结构体成员m_NumOfConv，设置SLEN位域 */
    tmpreg = adcInitStruct->m_NumOfConv - 1;
     42e:	9e 9a       	LD.W      R3, [R6 + #10]
     430:	63 cc       	SUB       R4, R3, #1
KF32A9K1XXX.h:13917
     432:	2d d7       	ORL       R5, R5, R4
..\src\kf32a9k1xxx_adc.c:139
    ADCx->SCANCTL = SFR_Config (ADCx->SCANCTL,
     434:	88 58       	MOV       R4, R8
     436:	a5 a5       	ST.W      [R4 + #22], R5
..\src\kf32a9k1xxx_adc.c:146
                                  tmpreg);

    /*---------------- 设置ADC_HSCANSQ寄存器 ----------------*/
    /* 根据结构体成员m_NumOfHPConv，设置HSLEN位域 */
    tmpreg = (adcInitStruct->m_NumOfHPConv - 1) << ADC_SCANCTL_HSLEN0_POS;
    ADCx->SCANCTL = SFR_Config (ADCx->SCANCTL,
     438:	a4 9d       	LD.W      R4, [R4 + #22]
..\src\kf32a9k1xxx_adc.c:145
                                  ~ADC_SCANCTL_SLEN,
                                  tmpreg);

    /*---------------- 设置ADC_HSCANSQ寄存器 ----------------*/
    /* 根据结构体成员m_NumOfHPConv，设置HSLEN位域 */
    tmpreg = (adcInitStruct->m_NumOfHPConv - 1) << ADC_SCANCTL_HSLEN0_POS;
     43a:	ee 9a       	LD.W      R5, [R6 + #11]
     43c:	6d cc       	SUB       R5, R5, #1
     43e:	2c 7a       	LSL       R5, #4
KF32A9K1XXX.h:13917
     440:	24 4a       	CLR       R4, #4
     442:	25 4a       	CLR       R4, #5
     444:	2d d7       	ORL       R5, R5, R4
..\src\kf32a9k1xxx_adc.c:146
    ADCx->SCANCTL = SFR_Config (ADCx->SCANCTL,
     446:	48 58       	MOV       R2, R8
     448:	95 a5       	ST.W      [R2 + #22], R5
..\src\kf32a9k1xxx_adc.c:149
                                  ~ADC_SCANCTL_HSLEN,
                                  tmpreg);
}
     44a:	07 5e       	POP       {R6-R8}
     44c:	0d 5d       	POP       LR
     44e:	1d 5c       	JMP       LR
     450:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x750	@@: LD        R0, [PC + #0]         ;->0x450  :=0x40000580
     454:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x54	@@: LD        R0, [PC + #0]         ;->0x454  :=0x40000600
     458:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x158	@@: LD        R0, [PC + #0]         ;->0x458  :=0x40000680
     45c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     460:	00 03 00 00 	.long     0x00000300 ->000000768  [!!!@4@:JMP       $+0                   ;->0x460
     464:	00 05 00 00 	.long     0x00000500 ->000001280  [!!!@2@:SJMP      $+256                 ;->0x664	@@: NOP      
     468:	f1 f8 f9 ff 	.long     0xfff9f8f1 ->-00395023 
     46c:	0f f0 01 f0 	.long     0xf001f00f ->-268308465  [!!!@2@:JZ        $+15                  ;->0x48a	@@: JZ        $+1                   ;->0x46e
..\src\kf32a9k1xxx_adc.c:104
    CHECK_RESTRICTION(CHECK_ADC_CONV_MODE(adcInitStruct->m_ContinuousMode));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_ExternalTrig_EN));
    CHECK_RESTRICTION(CHECK_ADC_EXT_TRIG(adcInitStruct->m_ExternalTrig));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_HPExternalTrig_EN));
    CHECK_RESTRICTION(CHECK_ADC_HPEXT_TRIG(adcInitStruct->m_HPExternalTrig));
    CHECK_RESTRICTION(CHECK_ADC_DATA_ALIGN(adcInitStruct->m_DataAlign));
     470:	00 10       	MOV       R0, #0
     472:	9a 07       	SJMP      $-102                 ;->0x3a6
..\src\kf32a9k1xxx_adc.c:99
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
    CHECK_RESTRICTION(CHECK_ADC_CLK(adcInitStruct->m_Clock));
    CHECK_RESTRICTION(CHECK_ADC_CLK_DIV(adcInitStruct->m_ClockDiv));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_ScanMode));
    CHECK_RESTRICTION(CHECK_ADC_CONV_MODE(adcInitStruct->m_ContinuousMode));
     474:	00 10       	MOV       R0, #0
     476:	6c 07       	SJMP      $-148                 ;->0x34e
..\src\kf32a9k1xxx_adc.c:103
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_ExternalTrig_EN));
    CHECK_RESTRICTION(CHECK_ADC_EXT_TRIG(adcInitStruct->m_ExternalTrig));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_HPExternalTrig_EN));
    CHECK_RESTRICTION(CHECK_ADC_HPEXT_TRIG(adcInitStruct->m_HPExternalTrig));
     478:	80 58       	MOV       R4, R0
     47a:	8e 07       	SJMP      $-114                 ;->0x396
..\src\kf32a9k1xxx_adc.c:101
    CHECK_RESTRICTION(CHECK_ADC_CLK(adcInitStruct->m_Clock));
    CHECK_RESTRICTION(CHECK_ADC_CLK_DIV(adcInitStruct->m_ClockDiv));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_ScanMode));
    CHECK_RESTRICTION(CHECK_ADC_CONV_MODE(adcInitStruct->m_ContinuousMode));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(adcInitStruct->m_ExternalTrig_EN));
    CHECK_RESTRICTION(CHECK_ADC_EXT_TRIG(adcInitStruct->m_ExternalTrig));
     47c:	80 58       	MOV       R4, R0
     47e:	7a 07       	SJMP      $-134                 ;->0x372

00000480 <ADC_Struct_Init>:
ADC_Struct_Init():
..\src\kf32a9k1xxx_adc.c:160
  */
void
ADC_Struct_Init (ADC_InitTypeDef* adcInitStruct)
{
    /* 初始化 ADC时钟源选择 */
    adcInitStruct->m_Clock = ADC_SCLK;
     480:	50 10       	MOV       R5, #0
     482:	05 85       	ST.W      [R0], R5
..\src\kf32a9k1xxx_adc.c:163

    /* 初始化 ADC时钟分频 */
    adcInitStruct->m_ClockDiv = ADC_CLK_DIV_2;
     484:	45 a0       	ST.W      [R0 + #1], R5
..\src\kf32a9k1xxx_adc.c:166

    /* 初始化 ADC扫描模式使能 */
    adcInitStruct->m_ScanMode = FALSE;
     486:	85 a0       	ST.W      [R0 + #2], R5
..\src\kf32a9k1xxx_adc.c:169

    /* 初始化 ADC连续转换模式 */
    adcInitStruct->m_ContinuousMode = ADC_SINGLE_MODE;
     488:	c5 a0       	ST.W      [R0 + #3], R5
..\src\kf32a9k1xxx_adc.c:172

    /* 初始化 ADC转换结果输出格式 */
    adcInitStruct->m_DataAlign = ADC_DATAALIGN_LEFT;
     48a:	05 a1       	ST.W      [R0 + #4], R5
..\src\kf32a9k1xxx_adc.c:175

    /* 初始化 ADC常规通道外部触发转换模式使能 */
    adcInitStruct->m_ExternalTrig_EN = FALSE;
     48c:	45 a1       	ST.W      [R0 + #5], R5
..\src\kf32a9k1xxx_adc.c:178

    /* 初始化 ADC常规通道外部触发事件 */
    adcInitStruct->m_ExternalTrig = ADC_EXTERNALTRIG_CCP1_CH1;
     48e:	85 a1       	ST.W      [R0 + #6], R5
..\src\kf32a9k1xxx_adc.c:181

    /* 初始化 ADC高优先级通道外部触发转换模式使能 */
    adcInitStruct->m_HPExternalTrig_EN = FALSE;
     490:	c5 a1       	ST.W      [R0 + #7], R5
..\src\kf32a9k1xxx_adc.c:184

    /* 初始化 高优先级通道外部触发事件 */
    adcInitStruct->m_HPExternalTrig = ADC_HPEXTERNALTRIG_CCP1_CH1;
     492:	05 a2       	ST.W      [R0 + #8], R5
..\src\kf32a9k1xxx_adc.c:187

    /* 初始化 ADC参考电压选择 */
    adcInitStruct->m_VoltageRef = ADC_REF_AVDD;
     494:	51 10       	MOV       R5, #1
     496:	29 7b       	LSL       R5, #17
     498:	45 a2       	ST.W      [R0 + #9], R5
..\src\kf32a9k1xxx_adc.c:190

    /* 初始化 ADC常规通道扫描长度 */
    adcInitStruct->m_NumOfConv = 1;
     49a:	51 10       	MOV       R5, #1
     49c:	85 a2       	ST.W      [R0 + #10], R5
..\src\kf32a9k1xxx_adc.c:193

    /* 初始化 ADC高优先级通道扫描长度 */
    adcInitStruct->m_NumOfHPConv = 1;
     49e:	c5 a2       	ST.W      [R0 + #11], R5
..\src\kf32a9k1xxx_adc.c:194
}
     4a0:	1d 5c       	JMP       LR
	...

000004a4 <ADC_Cmd>:
ADC_Cmd():
..\src\kf32a9k1xxx_adc.c:241
  *       NewState: ADC工作使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
ADC_Cmd (ADC_SFRmap* ADCx, FunctionalState NewState)
{
     4a4:	87 5f       	PUSH      {R6-R8,LR}
     4a6:	c0 58       	MOV       R6, R0
     4a8:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_adc.c:243
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     4aa:	01 10       	MOV       R0, #1
     4ac:	0c 45       	LD        R5, [PC + #12]        ;->0x4dc  :=0x40000580
     4ae:	65 70       	CMP       R6, R5
     4b0:	08 f0       	JZ        $+8                   ;->0x4c0
     4b2:	0c 45       	LD        R5, [PC + #12]        ;->0x4e0  :=0x40000600
     4b4:	65 70       	CMP       R6, R5
     4b6:	05 f0       	JZ        $+5                   ;->0x4c0
     4b8:	0b 45       	LD        R5, [PC + #11]        ;->0x4e4  :=0x40000680
     4ba:	65 70       	CMP       R6, R5
     4bc:	02 f0       	JZ        $+2                   ;->0x4c0
     4be:	00 10       	MOV       R0, #0
     4c0:	0a 45       	LD        R5, [PC + #10]        ;->0x4e8  :=0x371a
     4c2:	05 59       	MOV       R8, R5
     4c4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:244
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     4c6:	01 10       	MOV       R0, #1
     4c8:	70 70       	CMP       R7, R0
     4ca:	02 f9       	JLS       $+2                   ;->0x4ce
     4cc:	00 10       	MOV       R0, #0
     4ce:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_adc.c:246

    if (NewState != FALSE)
     4d0:	70 38       	CMP       R7, #0
     4d2:	0d f1       	JNZ       $+13                  ;->0x4ec
..\src\kf32a9k1xxx_adc.c:254
        SFR_SET_BIT_ASM(ADCx->CTL0, ADC_CTL0_EN_POS);
    }
    else
    {
        /* A/D转换器关闭且不消耗工作电流 */
        SFR_CLR_BIT_ASM(ADCx->CTL0, ADC_CTL0_EN_POS);
     4d4:	30 4e       	CLR       [R6], #0
..\src\kf32a9k1xxx_adc.c:256
    }
}
     4d6:	07 5e       	POP       {R6-R8}
     4d8:	0d 5d       	POP       LR
     4da:	1d 5c       	JMP       LR
     4dc:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x7dc	@@: LD        R0, [PC + #0]         ;->0x4dc  :=0x40000580
     4e0:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0xe0	@@: LD        R0, [PC + #0]         ;->0x4e0  :=0x40000600
     4e4:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x1e4	@@: LD        R0, [PC + #0]         ;->0x4e4  :=0x40000680
     4e8:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_adc.c:249
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    if (NewState != FALSE)
    {
        /* 使能A/D转换模块 */
        SFR_SET_BIT_ASM(ADCx->CTL0, ADC_CTL0_EN_POS);
     4ec:	30 4c       	SET       [R6], #0
..\src\kf32a9k1xxx_adc.c:256
    else
    {
        /* A/D转换器关闭且不消耗工作电流 */
        SFR_CLR_BIT_ASM(ADCx->CTL0, ADC_CTL0_EN_POS);
    }
}
     4ee:	07 5e       	POP       {R6-R8}
     4f0:	0d 5d       	POP       LR
     4f2:	1d 5c       	JMP       LR

000004f4 <ADC_High_Priority_Channel_Config>:
ADC_High_Priority_Channel_Config():
..\src\kf32a9k1xxx_adc.c:1144
  * 返回  无。
  */
void
ADC_High_Priority_Channel_Config (ADC_SFRmap* ADCx,
                    uint32_t Channel, uint32_t Rank)
{
     4f4:	8f 5f       	PUSH      {R6-R9,LR}
     4f6:	c0 58       	MOV       R6, R0
     4f8:	01 59       	MOV       R8, R1
     4fa:	22 59       	MOV       R9, R2
..\src\kf32a9k1xxx_adc.c:1149
    uint32_t tmpreg = 0;
    uint32_t tmpmask = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     4fc:	13 45       	LD        R5, [PC + #19]        ;->0x548  :=0x40000580
     4fe:	05 70       	CMP       R0, R5
     500:	2c f0       	JZ        $+44                  ;->0x558
     502:	13 45       	LD        R5, [PC + #19]        ;->0x54c  :=0x40000600
     504:	01 10       	MOV       R0, #1
     506:	65 70       	CMP       R6, R5
     508:	05 f0       	JZ        $+5                   ;->0x512
     50a:	12 45       	LD        R5, [PC + #18]        ;->0x550  :=0x40000680
     50c:	65 70       	CMP       R6, R5
     50e:	02 f0       	JZ        $+2                   ;->0x512
     510:	00 10       	MOV       R0, #0
     512:	11 47       	LD        R7, [PC + #17]        ;->0x554  :=0x371a
     514:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:1150
    CHECK_RESTRICTION(CHECK_ADC_HP_CHANNEL(Channel));
     516:	01 10       	MOV       R0, #1
     518:	8f 3f       	CMP       R8, #127
     51a:	02 f9       	JLS       $+2                   ;->0x51e
     51c:	00 10       	MOV       R0, #0
     51e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:1151
    CHECK_RESTRICTION(CHECK_ADC_HP_RANK(Rank));
     520:	89 58       	MOV       R4, R9
     522:	6c cc       	SUB       R5, R4, #1
     524:	01 10       	MOV       R0, #1
     526:	53 38       	CMP       R5, #3
     528:	02 f9       	JLS       $+2                   ;->0x52c
     52a:	00 10       	MOV       R0, #0
     52c:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_adc.c:1156

    /* 配置第1次转换~第4次转换 */

    /*------------- 设置ADCx_HSCANSQ寄存器HSSQx位 -------------*/
    tmpreg = (uint32_t)Channel << (8 * (Rank - 1));
     52e:	4b 7a       	LSL       R9, #3
     530:	98 30       	SUB       R9, #8
..\src\kf32a9k1xxx_adc.c:1158
    tmpmask = ADC_HSCANSQ_HSSQ0 << (8 * (Rank - 1));
    ADCx->HSCANSQ = SFR_Config (ADCx->HSCANSQ,
     532:	66 99       	LD.W      R4, [R6 + #5]
..\src\kf32a9k1xxx_adc.c:1157

    /* 配置第1次转换~第4次转换 */

    /*------------- 设置ADCx_HSCANSQ寄存器HSSQx位 -------------*/
    tmpreg = (uint32_t)Channel << (8 * (Rank - 1));
    tmpmask = ADC_HSCANSQ_HSSQ0 << (8 * (Rank - 1));
     534:	5f 1f       	MOV       R5, #255
     536:	59 6c       	LSL       R5, R9
..\src\kf32a9k1xxx_adc.c:1158
    ADCx->HSCANSQ = SFR_Config (ADCx->HSCANSQ,
     538:	55 68       	NOT       R5, R5
KF32A9K1XXX.h:13917
     53a:	2d d5       	ANL       R5, R5, R4
..\src\kf32a9k1xxx_adc.c:1156
    CHECK_RESTRICTION(CHECK_ADC_HP_RANK(Rank));

    /* 配置第1次转换~第4次转换 */

    /*------------- 设置ADCx_HSCANSQ寄存器HSSQx位 -------------*/
    tmpreg = (uint32_t)Channel << (8 * (Rank - 1));
     53c:	89 6c       	LSL       R8, R9
KF32A9K1XXX.h:13917
     53e:	58 6a       	ORL       R5, R8
..\src\kf32a9k1xxx_adc.c:1158
    tmpmask = ADC_HSCANSQ_HSSQ0 << (8 * (Rank - 1));
    ADCx->HSCANSQ = SFR_Config (ADCx->HSCANSQ,
     540:	75 a1       	ST.W      [R6 + #5], R5
..\src\kf32a9k1xxx_adc.c:1161
                          ~tmpmask,
                          tmpreg);
}
     542:	0f 5e       	POP       {R6-R9}
     544:	0d 5d       	POP       LR
     546:	1d 5c       	JMP       LR
     548:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x848	@@: LD        R0, [PC + #0]         ;->0x548  :=0x40000580
     54c:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x14c	@@: LD        R0, [PC + #0]         ;->0x54c  :=0x40000600
     550:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x250	@@: LD        R0, [PC + #0]         ;->0x550  :=0x40000680
     554:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_adc.c:1149
{
    uint32_t tmpreg = 0;
    uint32_t tmpmask = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     558:	01 10       	MOV       R0, #1
     55a:	dc 07       	SJMP      $-36                  ;->0x512

0000055c <ADC_Set_INT_Enable>:
ADC_Set_INT_Enable():
..\src\kf32a9k1xxx_adc.c:1519
  * 返回  无。
  */
void
ADC_Set_INT_Enable (ADC_SFRmap* ADCx,
                    uint32_t InterruptType, FunctionalState NewState)
{
     55c:	8f 5f       	PUSH      {R6-R9,LR}
     55e:	c0 58       	MOV       R6, R0
     560:	e1 58       	MOV       R7, R1
     562:	22 59       	MOV       R9, R2
..\src\kf32a9k1xxx_adc.c:1523
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_ADC_ALL_PERIPH(ADCx));
     564:	01 10       	MOV       R0, #1
     566:	18 45       	LD        R5, [PC + #24]        ;->0x5c4  :=0x40000580
     568:	65 70       	CMP       R6, R5
     56a:	08 f0       	JZ        $+8                   ;->0x57a
     56c:	17 45       	LD        R5, [PC + #23]        ;->0x5c8  :=0x40000600
     56e:	65 70       	CMP       R6, R5
     570:	05 f0       	JZ        $+5                   ;->0x57a
     572:	17 45       	LD        R5, [PC + #23]        ;->0x5cc  :=0x40000680
     574:	65 70       	CMP       R6, R5
     576:	02 f0       	JZ        $+2                   ;->0x57a
     578:	00 10       	MOV       R0, #0
     57a:	16 45       	LD        R5, [PC + #22]        ;->0x5d0  :=0x371a
     57c:	05 59       	MOV       R8, R5
     57e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_adc.c:1524
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     580:	01 10       	MOV       R0, #1
     582:	90 70       	CMP       R9, R0
     584:	02 f9       	JLS       $+2                   ;->0x588
     586:	00 10       	MOV       R0, #0
     588:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_adc.c:1525
    CHECK_RESTRICTION(CHECK_ADC_INT(InterruptType));
     58a:	01 10       	MOV       R0, #1
     58c:	12 45       	LD        R5, [PC + #18]        ;->0x5d4  :=0xc0b0d
     58e:	75 70       	CMP       R7, R5
     590:	0b f0       	JZ        $+11                  ;->0x5a6
     592:	12 45       	LD        R5, [PC + #18]        ;->0x5d8  :=0x7040a
     594:	75 70       	CMP       R7, R5
     596:	08 f0       	JZ        $+8                   ;->0x5a6
     598:	11 45       	LD        R5, [PC + #17]        ;->0x5dc  :=0x60309
     59a:	75 70       	CMP       R7, R5
     59c:	05 f0       	JZ        $+5                   ;->0x5a6
     59e:	11 45       	LD        R5, [PC + #17]        ;->0x5e0  :=0x50208
     5a0:	75 70       	CMP       R7, R5
     5a2:	02 f0       	JZ        $+2                   ;->0x5a6
     5a4:	00 10       	MOV       R0, #0
     5a6:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_adc.c:1528

    /* 获取中断类型掩码 */
    tmpreg = (InterruptType & 0x0F);
     5a8:	5f 10       	MOV       R5, #15
     5aa:	7f d5       	ANL       R7, R7, R5
..\src\kf32a9k1xxx_adc.c:1529
    tmpreg = (uint32_t)0x01 << tmpreg;
     5ac:	51 10       	MOV       R5, #1
     5ae:	fd db       	LSL       R7, R5, R7
..\src\kf32a9k1xxx_adc.c:1534

    if (NewState != FALSE)
    {
        /* 使能中断 */
        ADCx->STATE |= tmpreg;
     5b0:	2e 9d       	LD.W      R5, [R6 + #20]
..\src\kf32a9k1xxx_adc.c:1531

    /* 获取中断类型掩码 */
    tmpreg = (InterruptType & 0x0F);
    tmpreg = (uint32_t)0x01 << tmpreg;

    if (NewState != FALSE)
     5b2:	90 38       	CMP       R9, #0
     5b4:	18 f1       	JNZ       $+24                  ;->0x5e4
..\src\kf32a9k1xxx_adc.c:1539
        ADCx->STATE |= tmpreg;
    }
    else
    {
        /* 禁止中断 */
        ADCx->STATE &= (~tmpreg);
     5b6:	77 68       	NOT       R7, R7
     5b8:	7f d5       	ANL       R7, R7, R5
     5ba:	37 a5       	ST.W      [R6 + #20], R7
..\src\kf32a9k1xxx_adc.c:1541
    }
}
     5bc:	0f 5e       	POP       {R6-R9}
     5be:	0d 5d       	POP       LR
     5c0:	1d 5c       	JMP       LR
     5c2:	00 00       	NOP      NOP      
     5c4:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x8c4	@@: LD        R0, [PC + #0]         ;->0x5c4  :=0x40000580
     5c8:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x1c8	@@: LD        R0, [PC + #0]         ;->0x5c8  :=0x40000600
     5cc:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x2cc	@@: LD        R0, [PC + #0]         ;->0x5cc  :=0x40000680
     5d0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     5d4:	0d 0b 0c 00 	.long     0x000c0b0d ->000789261 
     5d8:	0a 04 07 00 	.long     0x0007040a ->000459786  [!!!@2@:SJMP      $+10                  ;->0x5ec	@@: BREAK    
     5dc:	09 03 06 00 	.long     0x00060309 ->000393993  [!!!@4@:JMP       $+589830              ;->0x1205e8
     5e0:	08 02 05 00 	.long     0x00050208 ->000328200  [!!!@2@:SVC      	@@: RESET    
..\src\kf32a9k1xxx_adc.c:1534
    tmpreg = (uint32_t)0x01 << tmpreg;

    if (NewState != FALSE)
    {
        /* 使能中断 */
        ADCx->STATE |= tmpreg;
     5e4:	7f d7       	ORL       R7, R7, R5
     5e6:	37 a5       	ST.W      [R6 + #20], R7
..\src\kf32a9k1xxx_adc.c:1541
    else
    {
        /* 禁止中断 */
        ADCx->STATE &= (~tmpreg);
    }
}
     5e8:	0f 5e       	POP       {R6-R9}
     5ea:	0d 5d       	POP       LR
     5ec:	1d 5c       	JMP       LR
	...

000005f0 <TIM_Reset>:
TIM_Reset():
..\src\kf32a9k1xxx_btim.c:42
  * 输入  TIMx: 定时器内存结构指针，取值为 T0_SFR/T1_SFR/T2_SFR/T3_SFR/T4_SFR/
  *           T5_SFR/T6_SFR/T14_SFR/T18_SFR/T19_SFR/T21_SFR。
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
     5f0:	81 5f       	PUSH      {R6,LR}
..\src\kf32a9k1xxx_btim.c:44
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     5f2:	18 45       	LD        R5, [PC + #24]        ;->0x650  :=0x40000880
     5f4:	05 70       	CMP       R0, R5
     5f6:	52 f0       	JZ        $+82                  ;->0x69a
     5f8:	17 45       	LD        R5, [PC + #23]        ;->0x654  :=0x40000100
     5fa:	05 70       	CMP       R0, R5
     5fc:	6a f0       	JZ        $+106                 ;->0x6d0
     5fe:	17 45       	LD        R5, [PC + #23]        ;->0x658  :=0x40000180
     600:	05 70       	CMP       R0, R5
     602:	7f f0       	JZ        $+127                 ;->0x700
     604:	16 45       	LD        R5, [PC + #22]        ;->0x65c  :=0x40000200
     606:	05 70       	CMP       R0, R5
     608:	02 f1       	JNZ       $+2                   ;->0x60c
     60a:	93 04       	SJMP      $+147                 ;->0x730
     60c:	15 45       	LD        R5, [PC + #21]        ;->0x660  :=0x40000280
     60e:	05 70       	CMP       R0, R5
     610:	36 f0       	JZ        $+54                  ;->0x67c
     612:	15 45       	LD        R5, [PC + #21]        ;->0x664  :=0x40000300
     614:	05 70       	CMP       R0, R5
     616:	02 f1       	JNZ       $+2                   ;->0x61a
     618:	9b 04       	SJMP      $+155                 ;->0x74e
     61a:	14 45       	LD        R5, [PC + #20]        ;->0x668  :=0x40001800
     61c:	05 70       	CMP       R0, R5
     61e:	02 f1       	JNZ       $+2                   ;->0x622
     620:	b5 04       	SJMP      $+181                 ;->0x78a
     622:	13 45       	LD        R5, [PC + #19]        ;->0x66c  :=0x40001a80
     624:	05 70       	CMP       R0, R5
     626:	02 f1       	JNZ       $+2                   ;->0x62a
     628:	c3 04       	SJMP      $+195                 ;->0x7ae
     62a:	12 45       	LD        R5, [PC + #18]        ;->0x670  :=0x40001b00
     62c:	05 70       	CMP       R0, R5
     62e:	02 f1       	JNZ       $+2                   ;->0x632
     630:	d1 04       	SJMP      $+209                 ;->0x7d2
     632:	61 10       	MOV       R6, #1
     634:	10 45       	LD        R5, [PC + #16]        ;->0x674  :=0x40001c00
     636:	05 70       	CMP       R0, R5
     638:	02 f0       	JZ        $+2                   ;->0x63c
     63a:	60 10       	MOV       R6, #0
     63c:	66 d1       	ZXT.B     R6, R6
     63e:	06 58       	MOV       R0, R6
     640:	0e 45       	LD        R5, [PC + #14]        ;->0x678  :=0x371a
     642:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:107
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T19RST, TRUE);
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T19RST, FALSE);
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T19CLKEN, TRUE);
    }
    else if ((uint32_t)TIMx == T21_ADDR)
     644:	60 38       	CMP       R6, #0
     646:	02 f0       	JZ        $+2                   ;->0x64a
     648:	92 04       	SJMP      $+146                 ;->0x76c
..\src\kf32a9k1xxx_btim.c:117
    }
    else
    {
        ;
    }
}
     64a:	06 5d       	POP       R6
     64c:	0d 5d       	POP       LR
     64e:	1d 5c       	JMP       LR
     650:	80 08 00 40 	.long     0x40000880 ->1073744000  [!!!@2@:LD.W      R0, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x650  :=0x40000880
     654:	00 01 00 40 	.long     0x40000100 ->1073742080  [!!!@2@:CMN       R0, R0	@@: LD        R0, [PC + #0]         ;->0x654  :=0x40000100
     658:	80 01 00 40 	.long     0x40000180 ->1073742208  [!!!@2@:CMN       R8, R0	@@: LD        R0, [PC + #0]         ;->0x658  :=0x40000180
     65c:	00 02 00 40 	.long     0x40000200 ->1073742336  [!!!@2@:SVC      	@@: LD        R0, [PC + #0]         ;->0x65c  :=0x40000200
     660:	80 02 00 40 	.long     0x40000280 ->1073742464  [!!!@2@:SVC      	@@: LD        R0, [PC + #0]         ;->0x660  :=0x40000280
     664:	00 03 00 40 	.long     0x40000300 ->1073742592  [!!!@4@:JMP       $+16384               ;->0x8664
     668:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x668  :=0x40001800
     66c:	80 1a 00 40 	.long     0x40001a80 ->1073748608  [!!!@2@:MOV       R8, #160	@@: LD        R0, [PC + #0]         ;->0x66c  :=0x40001a80
     670:	00 1b 00 40 	.long     0x40001b00 ->1073748736  [!!!@2@:MOV       R0, #176	@@: LD        R0, [PC + #0]         ;->0x670  :=0x40001b00
     674:	00 1c 00 40 	.long     0x40001c00 ->1073748992  [!!!@2@:MOV       R0, #192	@@: LD        R0, [PC + #0]         ;->0x674  :=0x40001c00
     678:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_btim.c:44
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     67c:	01 10       	MOV       R0, #1
     67e:	12 45       	LD        R5, [PC + #18]        ;->0x6c4  :=0x371a
     680:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:72
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T3RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T3CLKEN, TRUE);
    }
    else if ((uint32_t)TIMx == T4_ADDR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T4RST, TRUE);
     682:	00 12       	MOV       R0, #32
     684:	11 10       	MOV       R1, #1
     686:	11 46       	LD        R6, [PC + #17]        ;->0x6c8  :=0x2004
     688:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:73
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T4RST, FALSE);
     68a:	00 12       	MOV       R0, #32
     68c:	10 10       	MOV       R1, #0
     68e:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:74
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T4CLKEN, TRUE);
     690:	00 12       	MOV       R0, #32
     692:	11 10       	MOV       R1, #1
     694:	0e 45       	LD        R5, [PC + #14]        ;->0x6cc  :=0x1ecc
     696:	05 5c       	LJMP      R5
     698:	d9 07       	SJMP      $-39                  ;->0x64a
..\src\kf32a9k1xxx_btim.c:44
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     69a:	01 10       	MOV       R0, #1
     69c:	0a 45       	LD        R5, [PC + #10]        ;->0x6c4  :=0x371a
     69e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:48

    if ((uint32_t)TIMx == T0_ADDR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T0RST, TRUE);
     6a0:	01 10       	MOV       R0, #1
     6a2:	01 7b       	LSL       R0, #17
     6a4:	11 10       	MOV       R1, #1
     6a6:	09 46       	LD        R6, [PC + #9]         ;->0x6c8  :=0x2004
     6a8:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:49
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T0RST, FALSE);
     6aa:	01 10       	MOV       R0, #1
     6ac:	01 7b       	LSL       R0, #17
     6ae:	10 10       	MOV       R1, #0
     6b0:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:50
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T0CLKEN, TRUE);
     6b2:	01 10       	MOV       R0, #1
     6b4:	01 7b       	LSL       R0, #17
     6b6:	11 10       	MOV       R1, #1
     6b8:	05 45       	LD        R5, [PC + #5]         ;->0x6cc  :=0x1ecc
     6ba:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:117
    }
    else
    {
        ;
    }
}
     6bc:	06 5d       	POP       R6
     6be:	0d 5d       	POP       LR
     6c0:	1d 5c       	JMP       LR
     6c2:	00 00       	NOP      NOP      
     6c4:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     6c8:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
     6cc:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
..\src\kf32a9k1xxx_btim.c:44
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     6d0:	01 10       	MOV       R0, #1
     6d2:	09 45       	LD        R5, [PC + #9]         ;->0x6f4  :=0x371a
     6d4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:54
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T0RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T0CLKEN, TRUE);
    }
    else if ((uint32_t)TIMx == T1_ADDR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T1RST, TRUE);
     6d6:	04 10       	MOV       R0, #4
     6d8:	11 10       	MOV       R1, #1
     6da:	08 46       	LD        R6, [PC + #8]         ;->0x6f8  :=0x2004
     6dc:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:55
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T1RST, FALSE);
     6de:	04 10       	MOV       R0, #4
     6e0:	10 10       	MOV       R1, #0
     6e2:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:56
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T1CLKEN, TRUE);
     6e4:	04 10       	MOV       R0, #4
     6e6:	11 10       	MOV       R1, #1
     6e8:	05 45       	LD        R5, [PC + #5]         ;->0x6fc  :=0x1ecc
     6ea:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:117
    }
    else
    {
        ;
    }
}
     6ec:	06 5d       	POP       R6
     6ee:	0d 5d       	POP       LR
     6f0:	1d 5c       	JMP       LR
     6f2:	00 00       	NOP      NOP      
     6f4:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     6f8:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
     6fc:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
..\src\kf32a9k1xxx_btim.c:44
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     700:	01 10       	MOV       R0, #1
     702:	09 45       	LD        R5, [PC + #9]         ;->0x724  :=0x371a
     704:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:60
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T1RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T1CLKEN, TRUE);
    }
    else if ((uint32_t)TIMx == T2_ADDR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T2RST, TRUE);
     706:	08 10       	MOV       R0, #8
     708:	11 10       	MOV       R1, #1
     70a:	08 46       	LD        R6, [PC + #8]         ;->0x728  :=0x2004
     70c:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:61
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T2RST, FALSE);
     70e:	08 10       	MOV       R0, #8
     710:	10 10       	MOV       R1, #0
     712:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:62
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T2CLKEN, TRUE);
     714:	08 10       	MOV       R0, #8
     716:	11 10       	MOV       R1, #1
     718:	05 45       	LD        R5, [PC + #5]         ;->0x72c  :=0x1ecc
     71a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:117
    }
    else
    {
        ;
    }
}
     71c:	06 5d       	POP       R6
     71e:	0d 5d       	POP       LR
     720:	1d 5c       	JMP       LR
     722:	00 00       	NOP      NOP      
     724:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     728:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
     72c:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
..\src\kf32a9k1xxx_btim.c:44
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     730:	01 10       	MOV       R0, #1
     732:	32 45       	LD        R5, [PC + #50]        ;->0x7f8  :=0x371a
     734:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:66
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T2RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T2CLKEN, TRUE);
    }
    else if ((uint32_t)TIMx == T3_ADDR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T3RST, TRUE);
     736:	00 11       	MOV       R0, #16
     738:	11 10       	MOV       R1, #1
     73a:	31 46       	LD        R6, [PC + #49]        ;->0x7fc  :=0x2004
     73c:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:67
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T3RST, FALSE);
     73e:	00 11       	MOV       R0, #16
     740:	10 10       	MOV       R1, #0
     742:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:68
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T3CLKEN, TRUE);
     744:	00 11       	MOV       R0, #16
     746:	11 10       	MOV       R1, #1
     748:	2e 45       	LD        R5, [PC + #46]        ;->0x800  :=0x1ecc
     74a:	05 5c       	LJMP      R5
     74c:	7f 07       	SJMP      $-129                 ;->0x64a
..\src\kf32a9k1xxx_btim.c:44
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     74e:	01 10       	MOV       R0, #1
     750:	2a 45       	LD        R5, [PC + #42]        ;->0x7f8  :=0x371a
     752:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:78
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T4RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T4CLKEN, TRUE);
    }
    else if ((uint32_t)TIMx == T5_ADDR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T5T6RST, TRUE);
     754:	00 14       	MOV       R0, #64
     756:	11 10       	MOV       R1, #1
     758:	29 46       	LD        R6, [PC + #41]        ;->0x7fc  :=0x2004
     75a:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:79
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T5T6RST, FALSE);
     75c:	00 14       	MOV       R0, #64
     75e:	10 10       	MOV       R1, #0
     760:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:80
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T5T6CLKEN, TRUE);
     762:	00 14       	MOV       R0, #64
     764:	11 10       	MOV       R1, #1
     766:	27 45       	LD        R5, [PC + #39]        ;->0x800  :=0x1ecc
     768:	05 5c       	LJMP      R5
     76a:	70 07       	SJMP      $-144                 ;->0x64a
..\src\kf32a9k1xxx_btim.c:109
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T19RST, FALSE);
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T19CLKEN, TRUE);
    }
    else if ((uint32_t)TIMx == T21_ADDR)
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T21RST, TRUE);
     76c:	01 10       	MOV       R0, #1
     76e:	80 7b       	LSL       R0, #24
     770:	11 10       	MOV       R1, #1
     772:	25 46       	LD        R6, [PC + #37]        ;->0x804  :=0x2058
     774:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:110
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T21RST, FALSE);
     776:	01 10       	MOV       R0, #1
     778:	80 7b       	LSL       R0, #24
     77a:	10 10       	MOV       R1, #0
     77c:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:111
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T21CLKEN, TRUE);
     77e:	01 10       	MOV       R0, #1
     780:	80 7b       	LSL       R0, #24
     782:	11 10       	MOV       R1, #1
     784:	21 45       	LD        R5, [PC + #33]        ;->0x808  :=0x1f20
     786:	05 5c       	LJMP      R5
     788:	61 07       	SJMP      $-159                 ;->0x64a
..\src\kf32a9k1xxx_btim.c:44
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     78a:	01 10       	MOV       R0, #1
     78c:	1b 45       	LD        R5, [PC + #27]        ;->0x7f8  :=0x371a
     78e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:90
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_T5T6RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_T5T6CLKEN, TRUE);
    }
    else if ((uint32_t)TIMx == T14_ADDR)
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T14RST, TRUE);
     790:	01 10       	MOV       R0, #1
     792:	00 7b       	LSL       R0, #16
     794:	11 10       	MOV       R1, #1
     796:	1c 46       	LD        R6, [PC + #28]        ;->0x804  :=0x2058
     798:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:91
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T14RST, FALSE);
     79a:	01 10       	MOV       R0, #1
     79c:	00 7b       	LSL       R0, #16
     79e:	10 10       	MOV       R1, #0
     7a0:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:92
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T14CLKEN, TRUE);
     7a2:	01 10       	MOV       R0, #1
     7a4:	00 7b       	LSL       R0, #16
     7a6:	11 10       	MOV       R1, #1
     7a8:	18 45       	LD        R5, [PC + #24]        ;->0x808  :=0x1f20
     7aa:	05 5c       	LJMP      R5
     7ac:	4f 07       	SJMP      $-177                 ;->0x64a
..\src\kf32a9k1xxx_btim.c:44
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     7ae:	01 10       	MOV       R0, #1
     7b0:	12 45       	LD        R5, [PC + #18]        ;->0x7f8  :=0x371a
     7b2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:97
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T14CLKEN, TRUE);
    }

    else if ((uint32_t)TIMx == T18_ADDR)
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T18RST, TRUE);
     7b4:	01 10       	MOV       R0, #1
     7b6:	05 7b       	LSL       R0, #21
     7b8:	11 10       	MOV       R1, #1
     7ba:	13 46       	LD        R6, [PC + #19]        ;->0x804  :=0x2058
     7bc:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:98
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T18RST, FALSE);
     7be:	01 10       	MOV       R0, #1
     7c0:	05 7b       	LSL       R0, #21
     7c2:	10 10       	MOV       R1, #0
     7c4:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:99
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T18CLKEN, TRUE);
     7c6:	01 10       	MOV       R0, #1
     7c8:	05 7b       	LSL       R0, #21
     7ca:	11 10       	MOV       R1, #1
     7cc:	0f 45       	LD        R5, [PC + #15]        ;->0x808  :=0x1f20
     7ce:	05 5c       	LJMP      R5
     7d0:	3d 07       	SJMP      $-195                 ;->0x64a
..\src\kf32a9k1xxx_btim.c:44
  * 返回  无
  */
void TIM_Reset (void* TIMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_TIM_ALL_PERIPH((uint32_t)TIMx));
     7d2:	01 10       	MOV       R0, #1
     7d4:	09 45       	LD        R5, [PC + #9]         ;->0x7f8  :=0x371a
     7d6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:103
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T18RST, FALSE);
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T18CLKEN, TRUE);
    }
    else if ((uint32_t)TIMx == T19_ADDR)
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T19RST, TRUE);
     7d8:	01 10       	MOV       R0, #1
     7da:	06 7b       	LSL       R0, #22
     7dc:	11 10       	MOV       R1, #1
     7de:	0a 46       	LD        R6, [PC + #10]        ;->0x804  :=0x2058
     7e0:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:104
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_T19RST, FALSE);
     7e2:	01 10       	MOV       R0, #1
     7e4:	06 7b       	LSL       R0, #22
     7e6:	10 10       	MOV       R1, #0
     7e8:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_btim.c:105
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_T19CLKEN, TRUE);
     7ea:	01 10       	MOV       R0, #1
     7ec:	06 7b       	LSL       R0, #22
     7ee:	11 10       	MOV       R1, #1
     7f0:	06 45       	LD        R5, [PC + #6]         ;->0x808  :=0x1f20
     7f2:	05 5c       	LJMP      R5
     7f4:	2b 07       	SJMP      $-213                 ;->0x64a
     7f6:	00 00       	NOP      NOP      
     7f8:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     7fc:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
     800:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
     804:	58 20 00 00 	.long     0x00002058 ->000008280  [!!!@2@:ST.W      [SP + #88], R0	@@: NOP      
     808:	20 1f 00 00 	.long     0x00001f20 ->000007968  [!!!@2@:MOV       R2, #240	@@: NOP      

0000080c <BTIM_Cmd>:
BTIM_Cmd():
..\src\kf32a9k1xxx_btim.c:251
  *                 取值范围为：TRUE 或 FALSE
  * 返回  无
  */
void
BTIM_Cmd (BTIM_SFRmap* BTIMx, FunctionalState NewState)
{
     80c:	87 5f       	PUSH      {R6-R8,LR}
     80e:	c0 58       	MOV       R6, R0
     810:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_btim.c:253
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     812:	01 10       	MOV       R0, #1
     814:	0a 45       	LD        R5, [PC + #10]        ;->0x83c  :=0x40001800
     816:	65 70       	CMP       R6, R5
     818:	02 f0       	JZ        $+2                   ;->0x81c
     81a:	00 10       	MOV       R0, #0
     81c:	09 45       	LD        R5, [PC + #9]         ;->0x840  :=0x371a
     81e:	05 59       	MOV       R8, R5
     820:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:254
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     822:	01 10       	MOV       R0, #1
     824:	70 70       	CMP       R7, R0
     826:	02 f9       	JLS       $+2                   ;->0x82a
     828:	00 10       	MOV       R0, #0
     82a:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_btim.c:260

    /*-------------------- 设置TXCTL1寄存器TXEN位 --------------------*/
    if (NewState != FALSE)
    {
        /* 计数模式 */
        SFR_SET_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXEN_POS);
     82c:	36 c1       	ADD       R6, R6, #4
..\src\kf32a9k1xxx_btim.c:257
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*-------------------- 设置TXCTL1寄存器TXEN位 --------------------*/
    if (NewState != FALSE)
     82e:	70 38       	CMP       R7, #0
     830:	0a f1       	JNZ       $+10                  ;->0x844
..\src\kf32a9k1xxx_btim.c:265
        SFR_SET_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXEN_POS);
    }
    else
    {
        /* 定时模式 */
        SFR_CLR_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXEN_POS);
     832:	30 4e       	CLR       [R6], #0
..\src\kf32a9k1xxx_btim.c:267
    }
}
     834:	07 5e       	POP       {R6-R8}
     836:	0d 5d       	POP       LR
     838:	1d 5c       	JMP       LR
     83a:	00 00       	NOP      NOP      
     83c:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x83c  :=0x40001800
     840:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_btim.c:260

    /*-------------------- 设置TXCTL1寄存器TXEN位 --------------------*/
    if (NewState != FALSE)
    {
        /* 计数模式 */
        SFR_SET_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXEN_POS);
     844:	30 4c       	SET       [R6], #0
..\src\kf32a9k1xxx_btim.c:267
    else
    {
        /* 定时模式 */
        SFR_CLR_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXEN_POS);
    }
}
     846:	07 5e       	POP       {R6-R8}
     848:	0d 5d       	POP       LR
     84a:	1d 5c       	JMP       LR

0000084c <BTIM_Set_Counter>:
BTIM_Set_Counter():
..\src\kf32a9k1xxx_btim.c:277
  *       Counter: 新的计数值，取值16位数据。
  * 返回  无
  */
void
BTIM_Set_Counter (BTIM_SFRmap* BTIMx, uint16_t Counter)
{
     84c:	83 5f       	PUSH      {R6-R7,LR}
     84e:	c0 58       	MOV       R6, R0
     850:	71 d0       	ZXT.H     R7, R1
..\src\kf32a9k1xxx_btim.c:279
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     852:	01 10       	MOV       R0, #1
     854:	05 45       	LD        R5, [PC + #5]         ;->0x868  :=0x40001800
     856:	65 70       	CMP       R6, R5
     858:	02 f0       	JZ        $+2                   ;->0x85c
     85a:	00 10       	MOV       R0, #0
     85c:	04 45       	LD        R5, [PC + #4]         ;->0x86c  :=0x371a
     85e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:282

    /* 更新定时器计数值 */
    BTIMx->CNT = Counter;
     860:	67 85       	ST.W      [R6], R7
..\src\kf32a9k1xxx_btim.c:283
}
     862:	03 5e       	POP       {R6-R7}
     864:	0d 5d       	POP       LR
     866:	1d 5c       	JMP       LR
     868:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x868  :=0x40001800
     86c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      

00000870 <BTIM_Set_Period>:
BTIM_Set_Period():
..\src\kf32a9k1xxx_btim.c:293
  *       Period: 新的周期值，取值16位数据。
  * 返回  无
  */
void
BTIM_Set_Period (BTIM_SFRmap* BTIMx, uint16_t Period)
{
     870:	83 5f       	PUSH      {R6-R7,LR}
     872:	c0 58       	MOV       R6, R0
     874:	71 d0       	ZXT.H     R7, R1
..\src\kf32a9k1xxx_btim.c:295
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     876:	01 10       	MOV       R0, #1
     878:	05 45       	LD        R5, [PC + #5]         ;->0x88c  :=0x40001800
     87a:	65 70       	CMP       R6, R5
     87c:	02 f0       	JZ        $+2                   ;->0x880
     87e:	00 10       	MOV       R0, #0
     880:	04 45       	LD        R5, [PC + #4]         ;->0x890  :=0x371a
     882:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:298

    /* 更新定时器计数值 */
    BTIMx->PPX = Period;
     884:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_btim.c:299
}
     886:	03 5e       	POP       {R6-R7}
     888:	0d 5d       	POP       LR
     88a:	1d 5c       	JMP       LR
     88c:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x88c  :=0x40001800
     890:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      

00000894 <BTIM_Set_Prescaler>:
BTIM_Set_Prescaler():
..\src\kf32a9k1xxx_btim.c:309
  *       Prescaler: 新的预分频，取值16位数据。
  * 返回  无
  */
void
BTIM_Set_Prescaler (BTIM_SFRmap* BTIMx, uint16_t Prescaler)
{
     894:	83 5f       	PUSH      {R6-R7,LR}
     896:	c0 58       	MOV       R6, R0
     898:	71 d0       	ZXT.H     R7, R1
..\src\kf32a9k1xxx_btim.c:311
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     89a:	01 10       	MOV       R0, #1
     89c:	05 45       	LD        R5, [PC + #5]         ;->0x8b0  :=0x40001800
     89e:	65 70       	CMP       R6, R5
     8a0:	02 f0       	JZ        $+2                   ;->0x8a4
     8a2:	00 10       	MOV       R0, #0
     8a4:	04 45       	LD        R5, [PC + #4]         ;->0x8b4  :=0x371a
     8a6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:314

    /* 更新定时器计数值 */
    BTIMx->PRSC = Prescaler;
     8a8:	f7 a0       	ST.W      [R6 + #3], R7
..\src\kf32a9k1xxx_btim.c:315
}
     8aa:	03 5e       	POP       {R6-R7}
     8ac:	0d 5d       	POP       LR
     8ae:	1d 5c       	JMP       LR
     8b0:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x8b0  :=0x40001800
     8b4:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      

000008b8 <BTIM_Counter_Mode_Config>:
BTIM_Counter_Mode_Config():
..\src\kf32a9k1xxx_btim.c:331
  *                      BTIM_COUNT_UP_DOWN_OUF: 向上-向下计数,上溢和下溢产生中断标志
  * 返回  无
  */
void
BTIM_Counter_Mode_Config (BTIM_SFRmap* BTIMx, uint32_t CounterMode)
{
     8b8:	87 5f       	PUSH      {R6-R8,LR}
     8ba:	c0 58       	MOV       R6, R0
     8bc:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_btim.c:333
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     8be:	01 10       	MOV       R0, #1
     8c0:	0d 45       	LD        R5, [PC + #13]        ;->0x8f4  :=0x40001800
     8c2:	65 70       	CMP       R6, R5
     8c4:	02 f0       	JZ        $+2                   ;->0x8c8
     8c6:	00 10       	MOV       R0, #0
     8c8:	0c 43       	LD        R3, [PC + #12]        ;->0x8f8  :=0x371a
     8ca:	03 59       	MOV       R8, R3
     8cc:	03 5c       	LJMP      R3
..\src\kf32a9k1xxx_btim.c:334
    CHECK_RESTRICTION(CHECK_BTIM_COUNTER_MODE(CounterMode));
     8ce:	5f 13       	MOV       R5, #63
     8d0:	6f d5       	ANL       R5, R7, R5
     8d2:	00 10       	MOV       R0, #0
     8d4:	50 70       	CMP       R5, R0
     8d6:	06 f1       	JNZ       $+6                   ;->0x8e2
     8d8:	39 10       	MOV       R3, #9
     8da:	e7 dc       	LSR       R4, R7, R3
     8dc:	01 10       	MOV       R0, #1
     8de:	40 38       	CMP       R4, #0
     8e0:	10 f1       	JNZ       $+16                  ;->0x900
     8e2:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_btim.c:337

    /*-------------------- 设置TXCTL1寄存器TXCMS位 --------------------*/
    BTIMx->CTL1 = SFR_Config (BTIMx->CTL1,
     8e4:	66 98       	LD.W      R4, [R6 + #1]
KF32A9K1XXX.h:13917
     8e6:	06 45       	LD        R5, [PC + #6]         ;->0x8fc  :=0xfffffe3f
     8e8:	6c d5       	ANL       R5, R4, R5
     8ea:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_btim.c:337
     8ec:	77 a0       	ST.W      [R6 + #1], R7
..\src\kf32a9k1xxx_btim.c:340
                          ~BTIM_CTL1_TXCMS,
                          CounterMode);
}
     8ee:	07 5e       	POP       {R6-R8}
     8f0:	0d 5d       	POP       LR
     8f2:	1d 5c       	JMP       LR
     8f4:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x8f4  :=0x40001800
     8f8:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     8fc:	3f fe ff ff 	.long     0xfffffe3f ->-00000449 
..\src\kf32a9k1xxx_btim.c:334
void
BTIM_Counter_Mode_Config (BTIM_SFRmap* BTIMx, uint32_t CounterMode)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
    CHECK_RESTRICTION(CHECK_BTIM_COUNTER_MODE(CounterMode));
     900:	05 58       	MOV       R0, R5
     902:	f0 07       	SJMP      $-16                  ;->0x8e2

00000904 <BTIM_Clock_Config>:
BTIM_Clock_Config():
..\src\kf32a9k1xxx_btim.c:354
  *                   BTIM_LFCLK: 选用LFCLK时钟
  * 返回  无
  */
void
BTIM_Clock_Config (BTIM_SFRmap* BTIMx, uint32_t NewClock)
{
     904:	87 5f       	PUSH      {R6-R8,LR}
     906:	c0 58       	MOV       R6, R0
     908:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_btim.c:356
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     90a:	01 10       	MOV       R0, #1
     90c:	0d 45       	LD        R5, [PC + #13]        ;->0x940  :=0x40001800
     90e:	65 70       	CMP       R6, R5
     910:	02 f0       	JZ        $+2                   ;->0x914
     912:	00 10       	MOV       R0, #0
     914:	0c 43       	LD        R3, [PC + #12]        ;->0x944  :=0x371a
     916:	03 59       	MOV       R8, R3
     918:	03 5c       	LJMP      R3
..\src\kf32a9k1xxx_btim.c:357
    CHECK_RESTRICTION(CHECK_BTIM_CLOCK_CONFIG(NewClock));
     91a:	57 10       	MOV       R5, #7
     91c:	6f d5       	ANL       R5, R7, R5
     91e:	00 10       	MOV       R0, #0
     920:	50 70       	CMP       R5, R0
     922:	06 f1       	JNZ       $+6                   ;->0x92e
     924:	35 10       	MOV       R3, #5
     926:	e7 dc       	LSR       R4, R7, R3
     928:	01 10       	MOV       R0, #1
     92a:	40 38       	CMP       R4, #0
     92c:	0e f1       	JNZ       $+14                  ;->0x948
     92e:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_btim.c:360

    /*-------------------- 设置TXCTL1寄存器TXCLK位 --------------------*/
    BTIMx->CTL1 = SFR_Config (BTIMx->CTL1,
     930:	6e 98       	LD.W      R5, [R6 + #1]
KF32A9K1XXX.h:13917
     932:	2b 4a       	CLR       R5, #3
     934:	2c 4a       	CLR       R5, #4
     936:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_btim.c:360
     938:	77 a0       	ST.W      [R6 + #1], R7
..\src\kf32a9k1xxx_btim.c:363
                          ~BTIM_CTL1_TXCLK,
                          NewClock);
}
     93a:	07 5e       	POP       {R6-R8}
     93c:	0d 5d       	POP       LR
     93e:	1d 5c       	JMP       LR
     940:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x940  :=0x40001800
     944:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_btim.c:357
void
BTIM_Clock_Config (BTIM_SFRmap* BTIMx, uint32_t NewClock)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
    CHECK_RESTRICTION(CHECK_BTIM_CLOCK_CONFIG(NewClock));
     948:	05 58       	MOV       R0, R5
     94a:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_btim.c:360

    /*-------------------- 设置TXCTL1寄存器TXCLK位 --------------------*/
    BTIMx->CTL1 = SFR_Config (BTIMx->CTL1,
     94c:	6e 98       	LD.W      R5, [R6 + #1]
KF32A9K1XXX.h:13917
     94e:	2b 4a       	CLR       R5, #3
     950:	2c 4a       	CLR       R5, #4
     952:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_btim.c:360
     954:	77 a0       	ST.W      [R6 + #1], R7
..\src\kf32a9k1xxx_btim.c:363
                          ~BTIM_CTL1_TXCLK,
                          NewClock);
}
     956:	07 5e       	POP       {R6-R8}
     958:	0d 5d       	POP       LR
     95a:	1d 5c       	JMP       LR

0000095c <BTIM_Work_Mode_Config>:
BTIM_Work_Mode_Config():
..\src\kf32a9k1xxx_btim.c:405
  *                   BTIM_COUNTER_MODE: 计数模式
  * 返回  无
  */
void
BTIM_Work_Mode_Config (BTIM_SFRmap* BTIMx, uint32_t NewState)
{
     95c:	87 5f       	PUSH      {R6-R8,LR}
     95e:	c0 58       	MOV       R6, R0
     960:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_btim.c:407
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     962:	01 10       	MOV       R0, #1
     964:	09 45       	LD        R5, [PC + #9]         ;->0x988  :=0x40001800
     966:	65 70       	CMP       R6, R5
     968:	02 f0       	JZ        $+2                   ;->0x96c
     96a:	00 10       	MOV       R0, #0
     96c:	08 47       	LD        R7, [PC + #8]         ;->0x98c  :=0x371a
     96e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_btim.c:408
    CHECK_RESTRICTION(CHECK_BTIM_WORK_MODE(NewState));
     970:	01 10       	MOV       R0, #1
     972:	80 38       	CMP       R8, #0
     974:	0e f0       	JZ        $+14                  ;->0x990
     976:	82 38       	CMP       R8, #2
     978:	02 f0       	JZ        $+2                   ;->0x97c
     97a:	00 10       	MOV       R0, #0
     97c:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_btim.c:414

    /*-------------------- 设置TXCTL1寄存器TXCS位 --------------------*/
    if (NewState != BTIM_TIMER_MODE)
    {
        /* 计数模式 */
        SFR_SET_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXCS_POS);
     97e:	36 c1       	ADD       R6, R6, #4
     980:	31 4c       	SET       [R6], #1
..\src\kf32a9k1xxx_btim.c:421
    else
    {
        /* 定时模式 */
        SFR_CLR_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXCS_POS);
    }
}
     982:	07 5e       	POP       {R6-R8}
     984:	0d 5d       	POP       LR
     986:	1d 5c       	JMP       LR
     988:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x988  :=0x40001800
     98c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_btim.c:408
void
BTIM_Work_Mode_Config (BTIM_SFRmap* BTIMx, uint32_t NewState)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
    CHECK_RESTRICTION(CHECK_BTIM_WORK_MODE(NewState));
     990:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_btim.c:419
        SFR_SET_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXCS_POS);
    }
    else
    {
        /* 定时模式 */
        SFR_CLR_BIT_ASM(BTIMx->CTL1, BTIM_CTL1_TXCS_POS);
     992:	36 c1       	ADD       R6, R6, #4
     994:	31 4e       	CLR       [R6], #1
..\src\kf32a9k1xxx_btim.c:421
    }
}
     996:	07 5e       	POP       {R6-R8}
     998:	0d 5d       	POP       LR
     99a:	1d 5c       	JMP       LR

0000099c <BTIM_Updata_Immediately_Config>:
BTIM_Updata_Immediately_Config():
..\src\kf32a9k1xxx_btim.c:515
  * 返回  无
  */
void
BTIM_Updata_Immediately_Config (BTIM_SFRmap* BTIMx,
                    FunctionalState NewState)
{
     99c:	87 5f       	PUSH      {R6-R8,LR}
     99e:	c0 58       	MOV       R6, R0
     9a0:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_btim.c:517
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     9a2:	01 10       	MOV       R0, #1
     9a4:	0a 45       	LD        R5, [PC + #10]        ;->0x9cc  :=0x40001800
     9a6:	65 70       	CMP       R6, R5
     9a8:	02 f0       	JZ        $+2                   ;->0x9ac
     9aa:	00 10       	MOV       R0, #0
     9ac:	09 45       	LD        R5, [PC + #9]         ;->0x9d0  :=0x371a
     9ae:	05 59       	MOV       R8, R5
     9b0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:518
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     9b2:	01 10       	MOV       R0, #1
     9b4:	70 70       	CMP       R7, R0
     9b6:	02 f9       	JLS       $+2                   ;->0x9ba
     9b8:	00 10       	MOV       R0, #0
     9ba:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_btim.c:524

    /*-------------------- 设置TXCTL2寄存器TXUR位 --------------------*/
    if (NewState != FALSE)
    {
        /* 立即更新使能 */
        SFR_SET_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUR_POS);
     9bc:	68 28       	ADD       R6, #8
..\src\kf32a9k1xxx_btim.c:521
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*-------------------- 设置TXCTL2寄存器TXUR位 --------------------*/
    if (NewState != FALSE)
     9be:	70 38       	CMP       R7, #0
     9c0:	0a f1       	JNZ       $+10                  ;->0x9d4
..\src\kf32a9k1xxx_btim.c:529
        SFR_SET_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUR_POS);
    }
    else
    {
        /* 立即更新未使能 */
        SFR_CLR_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUR_POS);
     9c2:	b4 4e       	CLR       [R6], #12
..\src\kf32a9k1xxx_btim.c:531
    }
}
     9c4:	07 5e       	POP       {R6-R8}
     9c6:	0d 5d       	POP       LR
     9c8:	1d 5c       	JMP       LR
     9ca:	00 00       	NOP      NOP      
     9cc:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x9cc  :=0x40001800
     9d0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_btim.c:524

    /*-------------------- 设置TXCTL2寄存器TXUR位 --------------------*/
    if (NewState != FALSE)
    {
        /* 立即更新使能 */
        SFR_SET_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUR_POS);
     9d4:	b4 4c       	SET       [R6], #12
..\src\kf32a9k1xxx_btim.c:531
    else
    {
        /* 立即更新未使能 */
        SFR_CLR_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUR_POS);
    }
}
     9d6:	07 5e       	POP       {R6-R8}
     9d8:	0d 5d       	POP       LR
     9da:	1d 5c       	JMP       LR

000009dc <BTIM_Updata_Enable>:
BTIM_Updata_Enable():
..\src\kf32a9k1xxx_btim.c:687
  * 返回  无
  */
void
BTIM_Updata_Enable (BTIM_SFRmap* BTIMx,
                    FunctionalState NewState)
{
     9dc:	87 5f       	PUSH      {R6-R8,LR}
     9de:	c0 58       	MOV       R6, R0
     9e0:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_btim.c:689
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     9e2:	01 10       	MOV       R0, #1
     9e4:	0a 45       	LD        R5, [PC + #10]        ;->0xa0c  :=0x40001800
     9e6:	65 70       	CMP       R6, R5
     9e8:	02 f0       	JZ        $+2                   ;->0x9ec
     9ea:	00 10       	MOV       R0, #0
     9ec:	09 45       	LD        R5, [PC + #9]         ;->0xa10  :=0x371a
     9ee:	05 59       	MOV       R8, R5
     9f0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:690
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     9f2:	01 10       	MOV       R0, #1
     9f4:	70 70       	CMP       R7, R0
     9f6:	02 f9       	JLS       $+2                   ;->0x9fa
     9f8:	00 10       	MOV       R0, #0
     9fa:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_btim.c:696

    /*-------------------- 设置TXCTL2寄存器TXUDEN位 --------------------*/
    if (NewState != FALSE)
    {
        /* 上升沿立即更新 */
        SFR_SET_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUDEN_POS);
     9fc:	68 28       	ADD       R6, #8
..\src\kf32a9k1xxx_btim.c:693
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*-------------------- 设置TXCTL2寄存器TXUDEN位 --------------------*/
    if (NewState != FALSE)
     9fe:	70 38       	CMP       R7, #0
     a00:	0a f1       	JNZ       $+10                  ;->0xa14
..\src\kf32a9k1xxx_btim.c:701
        SFR_SET_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUDEN_POS);
    }
    else
    {
        /* 每周期更新 */
        SFR_CLR_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUDEN_POS);
     a02:	30 4e       	CLR       [R6], #0
..\src\kf32a9k1xxx_btim.c:703
    }
}
     a04:	07 5e       	POP       {R6-R8}
     a06:	0d 5d       	POP       LR
     a08:	1d 5c       	JMP       LR
     a0a:	00 00       	NOP      NOP      
     a0c:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xa0c  :=0x40001800
     a10:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_btim.c:696

    /*-------------------- 设置TXCTL2寄存器TXUDEN位 --------------------*/
    if (NewState != FALSE)
    {
        /* 上升沿立即更新 */
        SFR_SET_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUDEN_POS);
     a14:	30 4c       	SET       [R6], #0
..\src\kf32a9k1xxx_btim.c:703
    else
    {
        /* 每周期更新 */
        SFR_CLR_BIT_ASM(BTIMx->CTL2, BTIM_CTL2_TXUDEN_POS);
    }
}
     a16:	07 5e       	POP       {R6-R8}
     a18:	0d 5d       	POP       LR
     a1a:	1d 5c       	JMP       LR

00000a1c <BTIM_Overflow_INT_Enable>:
BTIM_Overflow_INT_Enable():
..\src\kf32a9k1xxx_btim.c:848
  * 返回  无
  */
void
BTIM_Overflow_INT_Enable (BTIM_SFRmap* BTIMx,
                    FunctionalState NewState)
{
     a1c:	87 5f       	PUSH      {R6-R8,LR}
     a1e:	c0 58       	MOV       R6, R0
     a20:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_btim.c:850
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
     a22:	01 10       	MOV       R0, #1
     a24:	0a 45       	LD        R5, [PC + #10]        ;->0xa4c  :=0x40001800
     a26:	65 70       	CMP       R6, R5
     a28:	02 f0       	JZ        $+2                   ;->0xa2c
     a2a:	00 10       	MOV       R0, #0
     a2c:	09 45       	LD        R5, [PC + #9]         ;->0xa50  :=0x371a
     a2e:	05 59       	MOV       R8, R5
     a30:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_btim.c:851
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     a32:	01 10       	MOV       R0, #1
     a34:	70 70       	CMP       R7, R0
     a36:	02 f9       	JLS       $+2                   ;->0xa3a
     a38:	00 10       	MOV       R0, #0
     a3a:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_btim.c:857

    /*-------------------- 设置TXDIER寄存器TXIE位 --------------------*/
    if (NewState != FALSE)
    {
        /* 允许Tx计数溢出引起中断 */
        SFR_SET_BIT_ASM(BTIMx->DIER, BTIM_DIER_TXIE_POS);
     a3c:	64 29       	ADD       R6, #20
..\src\kf32a9k1xxx_btim.c:854
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_BTIM_PERIPH(BTIMx));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*-------------------- 设置TXDIER寄存器TXIE位 --------------------*/
    if (NewState != FALSE)
     a3e:	70 38       	CMP       R7, #0
     a40:	0a f1       	JNZ       $+10                  ;->0xa54
..\src\kf32a9k1xxx_btim.c:862
        SFR_SET_BIT_ASM(BTIMx->DIER, BTIM_DIER_TXIE_POS);
    }
    else
    {
        /* 禁止Tx计数溢出引起中断 */
        SFR_CLR_BIT_ASM(BTIMx->DIER, BTIM_DIER_TXIE_POS);
     a42:	32 4e       	CLR       [R6], #2
..\src\kf32a9k1xxx_btim.c:864
    }
}
     a44:	07 5e       	POP       {R6-R8}
     a46:	0d 5d       	POP       LR
     a48:	1d 5c       	JMP       LR
     a4a:	00 00       	NOP      NOP      
     a4c:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0xa4c  :=0x40001800
     a50:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_btim.c:857

    /*-------------------- 设置TXDIER寄存器TXIE位 --------------------*/
    if (NewState != FALSE)
    {
        /* 允许Tx计数溢出引起中断 */
        SFR_SET_BIT_ASM(BTIMx->DIER, BTIM_DIER_TXIE_POS);
     a54:	32 4c       	SET       [R6], #2
..\src\kf32a9k1xxx_btim.c:864
    else
    {
        /* 禁止Tx计数溢出引起中断 */
        SFR_CLR_BIT_ASM(BTIMx->DIER, BTIM_DIER_TXIE_POS);
    }
}
     a56:	07 5e       	POP       {R6-R8}
     a58:	0d 5d       	POP       LR
     a5a:	1d 5c       	JMP       LR

00000a5c <EPWM_Reset>:
EPWM_Reset():
..\src\kf32a9k1xxx_epwm.c:24
  * 输入  EPWMx: 指向EPWM内存结构的指针，取值为EPWM11_SFR、EPWM12_SFR、EPWM13_SFR、EPWM16_SFR。
  * 返回  无。
  */
void
EPWM_Reset (EPWM_SFRmap* EPWMx)
{
     a5c:	81 5f       	PUSH      {R6,LR}
..\src\kf32a9k1xxx_epwm.c:26
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     a5e:	0c 45       	LD        R5, [PC + #12]        ;->0xa8c  :=0x40001a00
     a60:	05 70       	CMP       R0, R5
     a62:	1f f0       	JZ        $+31                  ;->0xaa0
     a64:	0b 45       	LD        R5, [PC + #11]        ;->0xa90  :=0x40001300
     a66:	05 70       	CMP       R0, R5
     a68:	36 f0       	JZ        $+54                  ;->0xad4
     a6a:	0b 45       	LD        R5, [PC + #11]        ;->0xa94  :=0x40001380
     a6c:	05 70       	CMP       R0, R5
     a6e:	4d f0       	JZ        $+77                  ;->0xb08
     a70:	61 10       	MOV       R6, #1
     a72:	0a 45       	LD        R5, [PC + #10]        ;->0xa98  :=0x40002e00
     a74:	05 70       	CMP       R0, R5
     a76:	02 f0       	JZ        $+2                   ;->0xa7a
     a78:	60 10       	MOV       R6, #0
     a7a:	66 d1       	ZXT.B     R6, R6
     a7c:	06 58       	MOV       R0, R6
     a7e:	08 45       	LD        R5, [PC + #8]         ;->0xa9c  :=0x371a
     a80:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:46
    {
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM13TRST, TRUE);
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM13TRST, FALSE);
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM13CLKEN, TRUE);
    }
    else if (EPWMx == EPWM16_SFR)
     a82:	60 38       	CMP       R6, #0
     a84:	5c f1       	JNZ       $+92                  ;->0xb3c
..\src\kf32a9k1xxx_epwm.c:56
    }
    else
    {
    	;
    }
}
     a86:	06 5d       	POP       R6
     a88:	0d 5d       	POP       LR
     a8a:	1d 5c       	JMP       LR
     a8c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xa8c  :=0x40001a00
     a90:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xa90  :=0x40001300
     a94:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xa94  :=0x40001380
     a98:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xa98  :=0x40002e00
     a9c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:26
  */
void
EPWM_Reset (EPWM_SFRmap* EPWMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     aa0:	01 10       	MOV       R0, #1
     aa2:	0a 45       	LD        R5, [PC + #10]        ;->0xac8  :=0x371a
     aa4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:30

    if (EPWMx == EPWM11_SFR)
    {
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM11TRST, TRUE);
     aa6:	0f 1f       	MOV       R0, #255
     aa8:	40 c0       	ADD       R0, R0, #1
     aaa:	11 10       	MOV       R1, #1
     aac:	08 46       	LD        R6, [PC + #8]         ;->0xacc  :=0x2058
     aae:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_epwm.c:31
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM11TRST, FALSE);
     ab0:	0f 1f       	MOV       R0, #255
     ab2:	40 c0       	ADD       R0, R0, #1
     ab4:	10 10       	MOV       R1, #0
     ab6:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_epwm.c:32
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM11CLKEN, TRUE);
     ab8:	0f 1f       	MOV       R0, #255
     aba:	40 c0       	ADD       R0, R0, #1
     abc:	11 10       	MOV       R1, #1
     abe:	05 45       	LD        R5, [PC + #5]         ;->0xad0  :=0x1f20
     ac0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:56
    }
    else
    {
    	;
    }
}
     ac2:	06 5d       	POP       R6
     ac4:	0d 5d       	POP       LR
     ac6:	1d 5c       	JMP       LR
     ac8:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     acc:	58 20 00 00 	.long     0x00002058 ->000008280  [!!!@2@:ST.W      [SP + #88], R0	@@: NOP      
     ad0:	20 1f 00 00 	.long     0x00001f20 ->000007968  [!!!@2@:MOV       R2, #240	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:26
  */
void
EPWM_Reset (EPWM_SFRmap* EPWMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     ad4:	01 10       	MOV       R0, #1
     ad6:	0a 45       	LD        R5, [PC + #10]        ;->0xafc  :=0x371a
     ad8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:36
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM11TRST, FALSE);
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM11CLKEN, TRUE);
    }
    else if (EPWMx == EPWM12_SFR)
    {
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM12TRST, TRUE);
     ada:	01 10       	MOV       R0, #1
     adc:	81 7a       	LSL       R0, #9
     ade:	11 10       	MOV       R1, #1
     ae0:	08 46       	LD        R6, [PC + #8]         ;->0xb00  :=0x2058
     ae2:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_epwm.c:37
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM12TRST, FALSE);
     ae4:	01 10       	MOV       R0, #1
     ae6:	81 7a       	LSL       R0, #9
     ae8:	10 10       	MOV       R1, #0
     aea:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_epwm.c:38
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM12CLKEN, TRUE);
     aec:	01 10       	MOV       R0, #1
     aee:	81 7a       	LSL       R0, #9
     af0:	11 10       	MOV       R1, #1
     af2:	05 45       	LD        R5, [PC + #5]         ;->0xb04  :=0x1f20
     af4:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:56
    }
    else
    {
    	;
    }
}
     af6:	06 5d       	POP       R6
     af8:	0d 5d       	POP       LR
     afa:	1d 5c       	JMP       LR
     afc:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     b00:	58 20 00 00 	.long     0x00002058 ->000008280  [!!!@2@:ST.W      [SP + #88], R0	@@: NOP      
     b04:	20 1f 00 00 	.long     0x00001f20 ->000007968  [!!!@2@:MOV       R2, #240	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:26
  */
void
EPWM_Reset (EPWM_SFRmap* EPWMx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     b08:	01 10       	MOV       R0, #1
     b0a:	0a 45       	LD        R5, [PC + #10]        ;->0xb30  :=0x371a
     b0c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:42
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM12TRST, FALSE);
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM12CLKEN, TRUE);
    }
    else if (EPWMx == EPWM13_SFR)
    {
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM13TRST, TRUE);
     b0e:	01 10       	MOV       R0, #1
     b10:	82 7a       	LSL       R0, #10
     b12:	11 10       	MOV       R1, #1
     b14:	08 46       	LD        R6, [PC + #8]         ;->0xb34  :=0x2058
     b16:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_epwm.c:43
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM13TRST, FALSE);
     b18:	01 10       	MOV       R0, #1
     b1a:	82 7a       	LSL       R0, #10
     b1c:	10 10       	MOV       R1, #0
     b1e:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_epwm.c:44
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM13CLKEN, TRUE);
     b20:	01 10       	MOV       R0, #1
     b22:	82 7a       	LSL       R0, #10
     b24:	11 10       	MOV       R1, #1
     b26:	05 45       	LD        R5, [PC + #5]         ;->0xb38  :=0x1f20
     b28:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:56
    }
    else
    {
    	;
    }
}
     b2a:	06 5d       	POP       R6
     b2c:	0d 5d       	POP       LR
     b2e:	1d 5c       	JMP       LR
     b30:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     b34:	58 20 00 00 	.long     0x00002058 ->000008280  [!!!@2@:ST.W      [SP + #88], R0	@@: NOP      
     b38:	20 1f 00 00 	.long     0x00001f20 ->000007968  [!!!@2@:MOV       R2, #240	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:48
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM13TRST, FALSE);
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM13CLKEN, TRUE);
    }
    else if (EPWMx == EPWM16_SFR)
    {
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM16TRST, TRUE);
     b3c:	01 10       	MOV       R0, #1
     b3e:	83 7a       	LSL       R0, #11
     b40:	11 10       	MOV       R1, #1
     b42:	07 46       	LD        R6, [PC + #7]         ;->0xb5c  :=0x2058
     b44:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_epwm.c:49
    	RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_EPWM16TRST, FALSE);
     b46:	01 10       	MOV       R0, #1
     b48:	83 7a       	LSL       R0, #11
     b4a:	10 10       	MOV       R1, #0
     b4c:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_epwm.c:50
    	PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_EPWM16CLKEN, TRUE);
     b4e:	01 10       	MOV       R0, #1
     b50:	83 7a       	LSL       R0, #11
     b52:	11 10       	MOV       R1, #1
     b54:	03 45       	LD        R5, [PC + #3]         ;->0xb60  :=0x1f20
     b56:	05 5c       	LJMP      R5
     b58:	97 07       	SJMP      $-105                 ;->0xa86
     b5a:	00 00       	NOP      NOP      
     b5c:	58 20 00 00 	.long     0x00002058 ->000008280  [!!!@2@:ST.W      [SP + #88], R0	@@: NOP      
     b60:	20 1f 00 00 	.long     0x00001f20 ->000007968  [!!!@2@:MOV       R2, #240	@@: NOP      

00000b64 <EPWM_TxPHS_Value_Config>:
EPWM_TxPHS_Value_Config():
..\src\kf32a9k1xxx_epwm.c:93
  * 	 Value ： Value <= 0xFFFFFFFF;
  * 返回  无。
  */
void
EPWM_TxPHS_Value_Config(EPWM_SFRmap* EPWMx, uint32_t Value)
{
     b64:	87 5f       	PUSH      {R6-R8,LR}
     b66:	c0 58       	MOV       R6, R0
     b68:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_epwm.c:95
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     b6a:	0c 45       	LD        R5, [PC + #12]        ;->0xb98  :=0x40001a00
     b6c:	05 70       	CMP       R0, R5
     b6e:	1f f0       	JZ        $+31                  ;->0xbac
     b70:	0b 45       	LD        R5, [PC + #11]        ;->0xb9c  :=0x40001300
     b72:	05 70       	CMP       R0, R5
     b74:	1c f0       	JZ        $+28                  ;->0xbac
     b76:	0b 45       	LD        R5, [PC + #11]        ;->0xba0  :=0x40001380
     b78:	01 10       	MOV       R0, #1
     b7a:	65 70       	CMP       R6, R5
     b7c:	05 f0       	JZ        $+5                   ;->0xb86
     b7e:	0a 45       	LD        R5, [PC + #10]        ;->0xba4  :=0x40002e00
     b80:	65 70       	CMP       R6, R5
     b82:	02 f0       	JZ        $+2                   ;->0xb86
     b84:	00 10       	MOV       R0, #0
     b86:	09 47       	LD        R7, [PC + #9]         ;->0xba8  :=0x371a
     b88:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:96
    CHECK_RESTRICTION(CHECK_EPWM_32BIT_LIMIT(Value));
     b8a:	01 10       	MOV       R0, #1
     b8c:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:98

    EPWMx->PHS = Value;
     b8e:	a8 58       	MOV       R5, R8
     b90:	75 a0       	ST.W      [R6 + #1], R5
..\src\kf32a9k1xxx_epwm.c:99
}
     b92:	07 5e       	POP       {R6-R8}
     b94:	0d 5d       	POP       LR
     b96:	1d 5c       	JMP       LR
     b98:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xb98  :=0x40001a00
     b9c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xb9c  :=0x40001300
     ba0:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xba0  :=0x40001380
     ba4:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xba4  :=0x40002e00
     ba8:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:95
  */
void
EPWM_TxPHS_Value_Config(EPWM_SFRmap* EPWMx, uint32_t Value)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     bac:	01 10       	MOV       R0, #1
     bae:	ec 07       	SJMP      $-20                  ;->0xb86

00000bb0 <EPWM_TxPRSC_Value_Config>:
EPWM_TxPRSC_Value_Config():
..\src\kf32a9k1xxx_epwm.c:150
  * 返回  无。
  * 注：分频值 = Value + 1;
  */
void
EPWM_TxPRSC_Value_Config(EPWM_SFRmap* EPWMx, uint32_t Value)
{
     bb0:	87 5f       	PUSH      {R6-R8,LR}
     bb2:	c0 58       	MOV       R6, R0
     bb4:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_epwm.c:152
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     bb6:	0c 45       	LD        R5, [PC + #12]        ;->0xbe4  :=0x40001a00
     bb8:	05 70       	CMP       R0, R5
     bba:	1f f0       	JZ        $+31                  ;->0xbf8
     bbc:	0b 45       	LD        R5, [PC + #11]        ;->0xbe8  :=0x40001300
     bbe:	05 70       	CMP       R0, R5
     bc0:	1c f0       	JZ        $+28                  ;->0xbf8
     bc2:	0b 45       	LD        R5, [PC + #11]        ;->0xbec  :=0x40001380
     bc4:	01 10       	MOV       R0, #1
     bc6:	65 70       	CMP       R6, R5
     bc8:	05 f0       	JZ        $+5                   ;->0xbd2
     bca:	0a 45       	LD        R5, [PC + #10]        ;->0xbf0  :=0x40002e00
     bcc:	65 70       	CMP       R6, R5
     bce:	02 f0       	JZ        $+2                   ;->0xbd2
     bd0:	00 10       	MOV       R0, #0
     bd2:	09 47       	LD        R7, [PC + #9]         ;->0xbf4  :=0x371a
     bd4:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:153
    CHECK_RESTRICTION(CHECK_EPWM_32BIT_LIMIT(Value));
     bd6:	01 10       	MOV       R0, #1
     bd8:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:155

    EPWMx->PRSC = Value;
     bda:	a8 58       	MOV       R5, R8
     bdc:	f5 a0       	ST.W      [R6 + #3], R5
..\src\kf32a9k1xxx_epwm.c:156
}
     bde:	07 5e       	POP       {R6-R8}
     be0:	0d 5d       	POP       LR
     be2:	1d 5c       	JMP       LR
     be4:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xbe4  :=0x40001a00
     be8:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xbe8  :=0x40001300
     bec:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xbec  :=0x40001380
     bf0:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xbf0  :=0x40002e00
     bf4:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:152
  */
void
EPWM_TxPRSC_Value_Config(EPWM_SFRmap* EPWMx, uint32_t Value)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     bf8:	01 10       	MOV       R0, #1
     bfa:	ec 07       	SJMP      $-20                  ;->0xbd2

00000bfc <EPWM_Phase_Direction_Config>:
EPWM_Phase_Direction_Config():
..\src\kf32a9k1xxx_epwm.c:339
  * 	 				EPWM_SYNC_TRIGGER_UP : 同步事件触发后向上计数
  * 返回  无。
  */
void
EPWM_Phase_Direction_Config(EPWM_SFRmap* EPWMx, uint32_t Direction)
{
     bfc:	87 5f       	PUSH      {R6-R8,LR}
     bfe:	c0 58       	MOV       R6, R0
     c00:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:343
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     c02:	10 45       	LD        R5, [PC + #16]        ;->0xc40  :=0x40001a00
     c04:	05 70       	CMP       R0, R5
     c06:	27 f0       	JZ        $+39                  ;->0xc54
     c08:	0f 45       	LD        R5, [PC + #15]        ;->0xc44  :=0x40001300
     c0a:	05 70       	CMP       R0, R5
     c0c:	24 f0       	JZ        $+36                  ;->0xc54
     c0e:	0f 45       	LD        R5, [PC + #15]        ;->0xc48  :=0x40001380
     c10:	01 10       	MOV       R0, #1
     c12:	65 70       	CMP       R6, R5
     c14:	05 f0       	JZ        $+5                   ;->0xc1e
     c16:	0e 45       	LD        R5, [PC + #14]        ;->0xc4c  :=0x40002e00
     c18:	65 70       	CMP       R6, R5
     c1a:	02 f0       	JZ        $+2                   ;->0xc1e
     c1c:	00 10       	MOV       R0, #0
     c1e:	0d 45       	LD        R5, [PC + #13]        ;->0xc50  :=0x371a
     c20:	05 59       	MOV       R8, R5
     c22:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:344
	CHECK_RESTRICTION(CHECK_EPWM_SYNC_TRIGGER_DIRECTION(Direction));
     c24:	01 10       	MOV       R0, #1
     c26:	70 70       	CMP       R7, R0
     c28:	02 f9       	JLS       $+2                   ;->0xc2c
     c2a:	00 10       	MOV       R0, #0
     c2c:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:347

	tmpreg = Direction << EPWM_CTL_PHSDIR_POS;
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_PHSDIR, tmpreg);
     c2e:	2e 99       	LD.W      R5, [R6 + #4]
..\src\kf32a9k1xxx_epwm.c:346

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_EPWM_SYNC_TRIGGER_DIRECTION(Direction));

	tmpreg = Direction << EPWM_CTL_PHSDIR_POS;
     c30:	3a 7b       	LSL       R7, #18
KF32A9K1XXX.h:13917
     c32:	2a 4b       	CLR       R5, #18
     c34:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:347
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_PHSDIR, tmpreg);
     c36:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_epwm.c:348
}
     c38:	07 5e       	POP       {R6-R8}
     c3a:	0d 5d       	POP       LR
     c3c:	1d 5c       	JMP       LR
     c3e:	00 00       	NOP      NOP      
     c40:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xc40  :=0x40001a00
     c44:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xc44  :=0x40001300
     c48:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xc48  :=0x40001380
     c4c:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xc4c  :=0x40002e00
     c50:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:343
EPWM_Phase_Direction_Config(EPWM_SFRmap* EPWMx, uint32_t Direction)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     c54:	01 10       	MOV       R0, #1
     c56:	e4 07       	SJMP      $-28                  ;->0xc1e

00000c58 <EPWM_SYNC_Event_Out_Select>:
EPWM_SYNC_Event_Out_Select():
..\src\kf32a9k1xxx_epwm.c:373
  * 	 			EPWM_SYNC_EVENT_OUT_DISABLE  : 禁止EPWMxSYNCO输出
  * 返回  无。
  */
void
EPWM_SYNC_Event_Out_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
     c58:	87 5f       	PUSH      {R6-R8,LR}
     c5a:	c0 58       	MOV       R6, R0
     c5c:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:377
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     c5e:	10 45       	LD        R5, [PC + #16]        ;->0xc9c  :=0x40001a00
     c60:	05 70       	CMP       R0, R5
     c62:	27 f0       	JZ        $+39                  ;->0xcb0
     c64:	0f 45       	LD        R5, [PC + #15]        ;->0xca0  :=0x40001300
     c66:	05 70       	CMP       R0, R5
     c68:	24 f0       	JZ        $+36                  ;->0xcb0
     c6a:	0f 45       	LD        R5, [PC + #15]        ;->0xca4  :=0x40001380
     c6c:	01 10       	MOV       R0, #1
     c6e:	65 70       	CMP       R6, R5
     c70:	05 f0       	JZ        $+5                   ;->0xc7a
     c72:	0e 45       	LD        R5, [PC + #14]        ;->0xca8  :=0x40002e00
     c74:	65 70       	CMP       R6, R5
     c76:	02 f0       	JZ        $+2                   ;->0xc7a
     c78:	00 10       	MOV       R0, #0
     c7a:	0d 45       	LD        R5, [PC + #13]        ;->0xcac  :=0x371a
     c7c:	05 59       	MOV       R8, R5
     c7e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:378
	CHECK_RESTRICTION(CHECK_EPWM_SYNC_EVENT_OUT(Select));
     c80:	01 10       	MOV       R0, #1
     c82:	73 38       	CMP       R7, #3
     c84:	02 f9       	JLS       $+2                   ;->0xc88
     c86:	00 10       	MOV       R0, #0
     c88:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:381

	tmpreg = Select << EPWM_CTL_SYNCOSEL0_POS;
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_SYNCOSEL, tmpreg);
     c8a:	2e 99       	LD.W      R5, [R6 + #4]
..\src\kf32a9k1xxx_epwm.c:380

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_EPWM_SYNC_EVENT_OUT(Select));

	tmpreg = Select << EPWM_CTL_SYNCOSEL0_POS;
     c8c:	bf 7a       	LSL       R7, #15
KF32A9K1XXX.h:13917
     c8e:	af 4a       	CLR       R5, #15
     c90:	28 4b       	CLR       R5, #16
     c92:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:381
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_SYNCOSEL, tmpreg);
     c94:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_epwm.c:382
}
     c96:	07 5e       	POP       {R6-R8}
     c98:	0d 5d       	POP       LR
     c9a:	1d 5c       	JMP       LR
     c9c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xc9c  :=0x40001a00
     ca0:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xca0  :=0x40001300
     ca4:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xca4  :=0x40001380
     ca8:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xca8  :=0x40002e00
     cac:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:377
EPWM_SYNC_Event_Out_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     cb0:	01 10       	MOV       R0, #1
     cb2:	e4 07       	SJMP      $-28                  ;->0xc7a

00000cb4 <EPWM_Phase_Register_Loading_Enable>:
EPWM_Phase_Register_Loading_Enable():
..\src\kf32a9k1xxx_epwm.c:392
  * 	 				FALSE : 不将相位寄存器TXPHS载入定时器
  * 返回  无。
  */
void
EPWM_Phase_Register_Loading_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
     cb4:	87 5f       	PUSH      {R6-R8,LR}
     cb6:	c0 58       	MOV       R6, R0
     cb8:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:396
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     cba:	10 45       	LD        R5, [PC + #16]        ;->0xcf8  :=0x40001a00
     cbc:	05 70       	CMP       R0, R5
     cbe:	27 f0       	JZ        $+39                  ;->0xd0c
     cc0:	0f 45       	LD        R5, [PC + #15]        ;->0xcfc  :=0x40001300
     cc2:	05 70       	CMP       R0, R5
     cc4:	24 f0       	JZ        $+36                  ;->0xd0c
     cc6:	0f 45       	LD        R5, [PC + #15]        ;->0xd00  :=0x40001380
     cc8:	01 10       	MOV       R0, #1
     cca:	65 70       	CMP       R6, R5
     ccc:	05 f0       	JZ        $+5                   ;->0xcd6
     cce:	0e 45       	LD        R5, [PC + #14]        ;->0xd04  :=0x40002e00
     cd0:	65 70       	CMP       R6, R5
     cd2:	02 f0       	JZ        $+2                   ;->0xcd6
     cd4:	00 10       	MOV       R0, #0
     cd6:	0d 45       	LD        R5, [PC + #13]        ;->0xd08  :=0x371a
     cd8:	05 59       	MOV       R8, R5
     cda:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:397
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     cdc:	01 10       	MOV       R0, #1
     cde:	70 70       	CMP       R7, R0
     ce0:	02 f9       	JLS       $+2                   ;->0xce4
     ce2:	00 10       	MOV       R0, #0
     ce4:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:400

	tmpreg = NewState << EPWM_CTL_PHSEN_POS;
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_PHSEN, tmpreg);
     ce6:	2e 99       	LD.W      R5, [R6 + #4]
..\src\kf32a9k1xxx_epwm.c:399

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	tmpreg = NewState << EPWM_CTL_PHSEN_POS;
     ce8:	be 7a       	LSL       R7, #14
KF32A9K1XXX.h:13917
     cea:	ae 4a       	CLR       R5, #14
     cec:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:400
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_PHSEN, tmpreg);
     cee:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_epwm.c:401
}
     cf0:	07 5e       	POP       {R6-R8}
     cf2:	0d 5d       	POP       LR
     cf4:	1d 5c       	JMP       LR
     cf6:	00 00       	NOP      NOP      
     cf8:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xcf8  :=0x40001a00
     cfc:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xcfc  :=0x40001300
     d00:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xd00  :=0x40001380
     d04:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xd04  :=0x40002e00
     d08:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:396
EPWM_Phase_Register_Loading_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     d0c:	01 10       	MOV       R0, #1
     d0e:	e4 07       	SJMP      $-28                  ;->0xcd6

00000d10 <EPWM_Updata_Event_Generate_Enable>:
EPWM_Updata_Event_Generate_Enable():
..\src\kf32a9k1xxx_epwm.c:438
  * 	 			FALSE ： 未使能
  * 返回  无。
  */
void
EPWM_Updata_Event_Generate_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
     d10:	87 5f       	PUSH      {R6-R8,LR}
     d12:	c0 58       	MOV       R6, R0
     d14:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:442
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     d16:	10 45       	LD        R5, [PC + #16]        ;->0xd54  :=0x40001a00
     d18:	05 70       	CMP       R0, R5
     d1a:	27 f0       	JZ        $+39                  ;->0xd68
     d1c:	0f 45       	LD        R5, [PC + #15]        ;->0xd58  :=0x40001300
     d1e:	05 70       	CMP       R0, R5
     d20:	24 f0       	JZ        $+36                  ;->0xd68
     d22:	0f 45       	LD        R5, [PC + #15]        ;->0xd5c  :=0x40001380
     d24:	01 10       	MOV       R0, #1
     d26:	65 70       	CMP       R6, R5
     d28:	05 f0       	JZ        $+5                   ;->0xd32
     d2a:	0e 45       	LD        R5, [PC + #14]        ;->0xd60  :=0x40002e00
     d2c:	65 70       	CMP       R6, R5
     d2e:	02 f0       	JZ        $+2                   ;->0xd32
     d30:	00 10       	MOV       R0, #0
     d32:	0d 45       	LD        R5, [PC + #13]        ;->0xd64  :=0x371a
     d34:	05 59       	MOV       R8, R5
     d36:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:443
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     d38:	01 10       	MOV       R0, #1
     d3a:	70 70       	CMP       R7, R0
     d3c:	02 f9       	JLS       $+2                   ;->0xd40
     d3e:	00 10       	MOV       R0, #0
     d40:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:446

	tmpreg = NewState << EPWM_CTL_TXUR_POS;
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXUR, tmpreg);
     d42:	2e 99       	LD.W      R5, [R6 + #4]
..\src\kf32a9k1xxx_epwm.c:445

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	tmpreg = NewState << EPWM_CTL_TXUR_POS;
     d44:	bc 7a       	LSL       R7, #12
KF32A9K1XXX.h:13917
     d46:	ac 4a       	CLR       R5, #12
     d48:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:446
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXUR, tmpreg);
     d4a:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_epwm.c:447
}
     d4c:	07 5e       	POP       {R6-R8}
     d4e:	0d 5d       	POP       LR
     d50:	1d 5c       	JMP       LR
     d52:	00 00       	NOP      NOP      
     d54:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xd54  :=0x40001a00
     d58:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xd58  :=0x40001300
     d5c:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xd5c  :=0x40001380
     d60:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xd60  :=0x40002e00
     d64:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:442
EPWM_Updata_Event_Generate_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     d68:	01 10       	MOV       R0, #1
     d6a:	e4 07       	SJMP      $-28                  ;->0xd32

00000d6c <EPWM_Updata_Event_Enable>:
EPWM_Updata_Event_Enable():
..\src\kf32a9k1xxx_epwm.c:478
  * 	 			FALSE ： 禁止以Tx为时基占空比、周期、输出控制、预分频寄存器更新
  * 返回  无。
  */
void
EPWM_Updata_Event_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
     d6c:	87 5f       	PUSH      {R6-R8,LR}
     d6e:	c0 58       	MOV       R6, R0
     d70:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:482
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     d72:	10 45       	LD        R5, [PC + #16]        ;->0xdb0  :=0x40001a00
     d74:	05 70       	CMP       R0, R5
     d76:	27 f0       	JZ        $+39                  ;->0xdc4
     d78:	0f 45       	LD        R5, [PC + #15]        ;->0xdb4  :=0x40001300
     d7a:	05 70       	CMP       R0, R5
     d7c:	24 f0       	JZ        $+36                  ;->0xdc4
     d7e:	0f 45       	LD        R5, [PC + #15]        ;->0xdb8  :=0x40001380
     d80:	01 10       	MOV       R0, #1
     d82:	65 70       	CMP       R6, R5
     d84:	05 f0       	JZ        $+5                   ;->0xd8e
     d86:	0e 45       	LD        R5, [PC + #14]        ;->0xdbc  :=0x40002e00
     d88:	65 70       	CMP       R6, R5
     d8a:	02 f0       	JZ        $+2                   ;->0xd8e
     d8c:	00 10       	MOV       R0, #0
     d8e:	0d 45       	LD        R5, [PC + #13]        ;->0xdc0  :=0x371a
     d90:	05 59       	MOV       R8, R5
     d92:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:483
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     d94:	01 10       	MOV       R0, #1
     d96:	70 70       	CMP       R7, R0
     d98:	02 f9       	JLS       $+2                   ;->0xd9c
     d9a:	00 10       	MOV       R0, #0
     d9c:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:486

	tmpreg = NewState << EPWM_CTL_TXUDEN_POS;
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXUDEN, tmpreg);
     d9e:	2e 99       	LD.W      R5, [R6 + #4]
..\src\kf32a9k1xxx_epwm.c:485

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	tmpreg = NewState << EPWM_CTL_TXUDEN_POS;
     da0:	ba 7a       	LSL       R7, #10
KF32A9K1XXX.h:13917
     da2:	aa 4a       	CLR       R5, #10
     da4:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:486
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXUDEN, tmpreg);
     da6:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_epwm.c:487
}
     da8:	07 5e       	POP       {R6-R8}
     daa:	0d 5d       	POP       LR
     dac:	1d 5c       	JMP       LR
     dae:	00 00       	NOP      NOP      
     db0:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xdb0  :=0x40001a00
     db4:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xdb4  :=0x40001300
     db8:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xdb8  :=0x40001380
     dbc:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xdbc  :=0x40002e00
     dc0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:482
EPWM_Updata_Event_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     dc4:	01 10       	MOV       R0, #1
     dc6:	e4 07       	SJMP      $-28                  ;->0xd8e

00000dc8 <EPWM_Counter_Mode_Select>:
EPWM_Counter_Mode_Select():
..\src\kf32a9k1xxx_epwm.c:500
  * 	 			EPWM_COUNT_UP_DOWM_OUF ： 向上-向下计数，上溢和下溢时都产生中断标志
  * 返回  无。
  */
void
EPWM_Counter_Mode_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
     dc8:	87 5f       	PUSH      {R6-R8,LR}
     dca:	c0 58       	MOV       R6, R0
     dcc:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:504
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     dce:	01 10       	MOV       R0, #1
     dd0:	13 45       	LD        R5, [PC + #19]        ;->0xe1c  :=0x40001a00
     dd2:	65 70       	CMP       R6, R5
     dd4:	0b f0       	JZ        $+11                  ;->0xdea
     dd6:	13 45       	LD        R5, [PC + #19]        ;->0xe20  :=0x40001300
     dd8:	65 70       	CMP       R6, R5
     dda:	08 f0       	JZ        $+8                   ;->0xdea
     ddc:	12 45       	LD        R5, [PC + #18]        ;->0xe24  :=0x40001380
     dde:	65 70       	CMP       R6, R5
     de0:	05 f0       	JZ        $+5                   ;->0xdea
     de2:	12 45       	LD        R5, [PC + #18]        ;->0xe28  :=0x40002e00
     de4:	65 70       	CMP       R6, R5
     de6:	02 f0       	JZ        $+2                   ;->0xdea
     de8:	00 10       	MOV       R0, #0
     dea:	11 45       	LD        R5, [PC + #17]        ;->0xe2c  :=0x371a
     dec:	05 59       	MOV       R8, R5
     dee:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:505
	CHECK_RESTRICTION(CHECK_EPWM_COUNT_MODE(Select));
     df0:	01 10       	MOV       R0, #1
     df2:	70 38       	CMP       R7, #0
     df4:	0a f0       	JZ        $+10                  ;->0xe08
     df6:	74 38       	CMP       R7, #4
     df8:	08 f0       	JZ        $+8                   ;->0xe08
     dfa:	75 38       	CMP       R7, #5
     dfc:	06 f0       	JZ        $+6                   ;->0xe08
     dfe:	76 38       	CMP       R7, #6
     e00:	04 f0       	JZ        $+4                   ;->0xe08
     e02:	77 38       	CMP       R7, #7
     e04:	02 f0       	JZ        $+2                   ;->0xe08
     e06:	00 10       	MOV       R0, #0
     e08:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:508

	tmpreg = Select << EPWM_CTL_TXCMS0_POS;
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXCMS, tmpreg);
     e0a:	26 99       	LD.W      R4, [R6 + #4]
..\src\kf32a9k1xxx_epwm.c:507

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_EPWM_COUNT_MODE(Select));

	tmpreg = Select << EPWM_CTL_TXCMS0_POS;
     e0c:	3f 7a       	LSL       R7, #7
KF32A9K1XXX.h:13917
     e0e:	09 45       	LD        R5, [PC + #9]         ;->0xe30  :=0xfffffc7f
     e10:	6c d5       	ANL       R5, R4, R5
     e12:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:508
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXCMS, tmpreg);
     e14:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_epwm.c:509
}
     e16:	07 5e       	POP       {R6-R8}
     e18:	0d 5d       	POP       LR
     e1a:	1d 5c       	JMP       LR
     e1c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xe1c  :=0x40001a00
     e20:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xe20  :=0x40001300
     e24:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xe24  :=0x40001380
     e28:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xe28  :=0x40002e00
     e2c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
     e30:	7f fc ff ff 	.long     0xfffffc7f ->-00000897 

00000e34 <EPWM_Work_Clock_Select>:
EPWM_Work_Clock_Select():
..\src\kf32a9k1xxx_epwm.c:534
  * 	 		EPWM_CLK_LFCLK : 选用LFCLK时钟为Tx工作时钟
  * 返回  无。
  */
void
EPWM_Work_Clock_Select(EPWM_SFRmap* EPWMx, uint32_t CLK)
{
     e34:	87 5f       	PUSH      {R6-R8,LR}
     e36:	c0 58       	MOV       R6, R0
     e38:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:538
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     e3a:	10 45       	LD        R5, [PC + #16]        ;->0xe78  :=0x40001a00
     e3c:	05 70       	CMP       R0, R5
     e3e:	27 f0       	JZ        $+39                  ;->0xe8c
     e40:	0f 45       	LD        R5, [PC + #15]        ;->0xe7c  :=0x40001300
     e42:	05 70       	CMP       R0, R5
     e44:	24 f0       	JZ        $+36                  ;->0xe8c
     e46:	0f 45       	LD        R5, [PC + #15]        ;->0xe80  :=0x40001380
     e48:	01 10       	MOV       R0, #1
     e4a:	65 70       	CMP       R6, R5
     e4c:	05 f0       	JZ        $+5                   ;->0xe56
     e4e:	0e 45       	LD        R5, [PC + #14]        ;->0xe84  :=0x40002e00
     e50:	65 70       	CMP       R6, R5
     e52:	02 f0       	JZ        $+2                   ;->0xe56
     e54:	00 10       	MOV       R0, #0
     e56:	0d 45       	LD        R5, [PC + #13]        ;->0xe88  :=0x371a
     e58:	05 59       	MOV       R8, R5
     e5a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:539
	CHECK_RESTRICTION(CHECK_EPWM_CLK(CLK));
     e5c:	01 10       	MOV       R0, #1
     e5e:	73 38       	CMP       R7, #3
     e60:	02 f9       	JLS       $+2                   ;->0xe64
     e62:	00 10       	MOV       R0, #0
     e64:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:542

	tmpreg = CLK << EPWM_CTL_TXCLK0_POS;
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXCLK, tmpreg);
     e66:	2e 99       	LD.W      R5, [R6 + #4]
..\src\kf32a9k1xxx_epwm.c:541

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_EPWM_CLK(CLK));

	tmpreg = CLK << EPWM_CTL_TXCLK0_POS;
     e68:	3c 7a       	LSL       R7, #4
KF32A9K1XXX.h:13917
     e6a:	2c 4a       	CLR       R5, #4
     e6c:	2d 4a       	CLR       R5, #5
     e6e:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:542
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXCLK, tmpreg);
     e70:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_epwm.c:543
}
     e72:	07 5e       	POP       {R6-R8}
     e74:	0d 5d       	POP       LR
     e76:	1d 5c       	JMP       LR
     e78:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xe78  :=0x40001a00
     e7c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xe7c  :=0x40001300
     e80:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xe80  :=0x40001380
     e84:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xe84  :=0x40002e00
     e88:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:538
EPWM_Work_Clock_Select(EPWM_SFRmap* EPWMx, uint32_t CLK)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     e8c:	01 10       	MOV       R0, #1
     e8e:	e4 07       	SJMP      $-28                  ;->0xe56

00000e90 <EPWM_Work_Mode_Config>:
EPWM_Work_Mode_Config():
..\src\kf32a9k1xxx_epwm.c:593
  *                EPWM_COUNTER_MODE: 计数模式
  * 返回  无。
  */
void
EPWM_Work_Mode_Config(EPWM_SFRmap* EPWMx, uint32_t Mode)
{
     e90:	87 5f       	PUSH      {R6-R8,LR}
     e92:	c0 58       	MOV       R6, R0
     e94:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:597
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     e96:	10 45       	LD        R5, [PC + #16]        ;->0xed4  :=0x40001a00
     e98:	05 70       	CMP       R0, R5
     e9a:	27 f0       	JZ        $+39                  ;->0xee8
     e9c:	0f 45       	LD        R5, [PC + #15]        ;->0xed8  :=0x40001300
     e9e:	05 70       	CMP       R0, R5
     ea0:	24 f0       	JZ        $+36                  ;->0xee8
     ea2:	0f 45       	LD        R5, [PC + #15]        ;->0xedc  :=0x40001380
     ea4:	01 10       	MOV       R0, #1
     ea6:	65 70       	CMP       R6, R5
     ea8:	05 f0       	JZ        $+5                   ;->0xeb2
     eaa:	0e 45       	LD        R5, [PC + #14]        ;->0xee0  :=0x40002e00
     eac:	65 70       	CMP       R6, R5
     eae:	02 f0       	JZ        $+2                   ;->0xeb2
     eb0:	00 10       	MOV       R0, #0
     eb2:	0d 45       	LD        R5, [PC + #13]        ;->0xee4  :=0x371a
     eb4:	05 59       	MOV       R8, R5
     eb6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:598
	CHECK_RESTRICTION(CHECK_EPWM_MODE(Mode));
     eb8:	01 10       	MOV       R0, #1
     eba:	70 70       	CMP       R7, R0
     ebc:	02 f9       	JLS       $+2                   ;->0xec0
     ebe:	00 10       	MOV       R0, #0
     ec0:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:601

	tmpreg = Mode << EPWM_CTL_TXCS_POS;
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXCS, tmpreg);
     ec2:	2e 99       	LD.W      R5, [R6 + #4]
..\src\kf32a9k1xxx_epwm.c:600

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_EPWM_MODE(Mode));

	tmpreg = Mode << EPWM_CTL_TXCS_POS;
     ec4:	ff c3       	ADD       R7, R7, R7
KF32A9K1XXX.h:13917
     ec6:	29 4a       	CLR       R5, #1
     ec8:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:601
	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXCS, tmpreg);
     eca:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_epwm.c:602
}
     ecc:	07 5e       	POP       {R6-R8}
     ece:	0d 5d       	POP       LR
     ed0:	1d 5c       	JMP       LR
     ed2:	00 00       	NOP      NOP      
     ed4:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xed4  :=0x40001a00
     ed8:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xed8  :=0x40001300
     edc:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xedc  :=0x40001380
     ee0:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xee0  :=0x40002e00
     ee4:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:597
EPWM_Work_Mode_Config(EPWM_SFRmap* EPWMx, uint32_t Mode)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     ee8:	01 10       	MOV       R0, #1
     eea:	e4 07       	SJMP      $-28                  ;->0xeb2

00000eec <EPWM_Enable>:
EPWM_Enable():
..\src\kf32a9k1xxx_epwm.c:612
  *      			FALSE : 禁止Tx
  * 返回  无。
  */
void
EPWM_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
     eec:	87 5f       	PUSH      {R6-R8,LR}
     eee:	c0 58       	MOV       R6, R0
     ef0:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:614
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     ef2:	0f 45       	LD        R5, [PC + #15]        ;->0xf2c  :=0x40001a00
     ef4:	05 70       	CMP       R0, R5
     ef6:	25 f0       	JZ        $+37                  ;->0xf40
     ef8:	0e 45       	LD        R5, [PC + #14]        ;->0xf30  :=0x40001300
     efa:	05 70       	CMP       R0, R5
     efc:	22 f0       	JZ        $+34                  ;->0xf40
     efe:	0e 45       	LD        R5, [PC + #14]        ;->0xf34  :=0x40001380
     f00:	01 10       	MOV       R0, #1
     f02:	65 70       	CMP       R6, R5
     f04:	05 f0       	JZ        $+5                   ;->0xf0e
     f06:	0d 45       	LD        R5, [PC + #13]        ;->0xf38  :=0x40002e00
     f08:	65 70       	CMP       R6, R5
     f0a:	02 f0       	JZ        $+2                   ;->0xf0e
     f0c:	00 10       	MOV       R0, #0
     f0e:	0c 45       	LD        R5, [PC + #12]        ;->0xf3c  :=0x371a
     f10:	05 59       	MOV       R8, R5
     f12:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:615
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
     f14:	01 10       	MOV       R0, #1
     f16:	70 70       	CMP       R7, R0
     f18:	02 f9       	JLS       $+2                   ;->0xf1c
     f1a:	00 10       	MOV       R0, #0
     f1c:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:617

	EPWMx->CTL = SFR_Config(EPWMx->CTL, ~EPWM_CTL_TXEN, NewState);
     f1e:	2e 99       	LD.W      R5, [R6 + #4]
KF32A9K1XXX.h:13917
     f20:	28 4a       	CLR       R5, #0
     f22:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:617
     f24:	37 a1       	ST.W      [R6 + #4], R7
..\src\kf32a9k1xxx_epwm.c:618
}
     f26:	07 5e       	POP       {R6-R8}
     f28:	0d 5d       	POP       LR
     f2a:	1d 5c       	JMP       LR
     f2c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xf2c  :=0x40001a00
     f30:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xf30  :=0x40001300
     f34:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xf34  :=0x40001380
     f38:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xf38  :=0x40002e00
     f3c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:614
  */
void
EPWM_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     f40:	01 10       	MOV       R0, #1
     f42:	e6 07       	SJMP      $-26                  ;->0xf0e

00000f44 <EPWM_Continuous_Mandatory_Output_Config>:
EPWM_Continuous_Mandatory_Output_Config():
..\src\kf32a9k1xxx_epwm.c:765
 *      			EPWM_OUT_PROHIBIT : 禁止
 * 返回  无。
 */
void
EPWM_Continuous_Mandatory_Output_Config(EPWM_SFRmap* EPWMx, uint32_t Register, uint32_t Select)
{
     f44:	8f 5f       	PUSH      {R6-R9,LR}
     f46:	c0 58       	MOV       R6, R0
     f48:	01 59       	MOV       R8, R1
     f4a:	22 59       	MOV       R9, R2
..\src\kf32a9k1xxx_epwm.c:769
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     f4c:	01 10       	MOV       R0, #1
     f4e:	11 45       	LD        R5, [PC + #17]        ;->0xf90  :=0x40001a00
     f50:	65 70       	CMP       R6, R5
     f52:	0b f0       	JZ        $+11                  ;->0xf68
     f54:	10 45       	LD        R5, [PC + #16]        ;->0xf94  :=0x40001300
     f56:	65 70       	CMP       R6, R5
     f58:	08 f0       	JZ        $+8                   ;->0xf68
     f5a:	10 45       	LD        R5, [PC + #16]        ;->0xf98  :=0x40001380
     f5c:	65 70       	CMP       R6, R5
     f5e:	05 f0       	JZ        $+5                   ;->0xf68
     f60:	0f 45       	LD        R5, [PC + #15]        ;->0xf9c  :=0x40002e00
     f62:	65 70       	CMP       R6, R5
     f64:	02 f0       	JZ        $+2                   ;->0xf68
     f66:	00 10       	MOV       R0, #0
     f68:	0e 47       	LD        R7, [PC + #14]        ;->0xfa0  :=0x371a
     f6a:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:770
	CHECK_RESTRICTION(CHECK_EPWM_REGISTER_AB(Register));
     f6c:	01 10       	MOV       R0, #1
     f6e:	83 38       	CMP       R8, #3
     f70:	02 f9       	JLS       $+2                   ;->0xf74
     f72:	00 10       	MOV       R0, #0
     f74:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:771
	CHECK_RESTRICTION(CHECK_EPWM_MANDATORY_OUT(Select));
     f76:	01 10       	MOV       R0, #1
     f78:	93 38       	CMP       R9, #3
     f7a:	02 f9       	JLS       $+2                   ;->0xf7e
     f7c:	00 10       	MOV       R0, #0
     f7e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:773

	tmpreg = Select << EPWM_CTLA_CSFA0_POS;
     f80:	cc 7a       	LSL       R9, #12
..\src\kf32a9k1xxx_epwm.c:774
	if(Register == EPWM_REGISTER_A)
     f82:	80 38       	CMP       R8, #0
     f84:	19 f0       	JZ        $+25                  ;->0xfb6
..\src\kf32a9k1xxx_epwm.c:778
	{
		EPWMx->CTLA = SFR_Config(EPWMx->CTLA, ~EPWM_CTLA_CSFA, tmpreg);
	}
	else if(Register == EPWM_REGISTER_B)
     f86:	81 38       	CMP       R8, #1
     f88:	0e f0       	JZ        $+14                  ;->0xfa4
..\src\kf32a9k1xxx_epwm.c:782
	{
		EPWMx->CTLB = SFR_Config(EPWMx->CTLB, ~EPWM_CTLA_CSFA, tmpreg);
	}
}
     f8a:	0f 5e       	POP       {R6-R9}
     f8c:	0d 5d       	POP       LR
     f8e:	1d 5c       	JMP       LR
     f90:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0xf90  :=0x40001a00
     f94:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0xf94  :=0x40001300
     f98:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0xf98  :=0x40001380
     f9c:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0xf9c  :=0x40002e00
     fa0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:780
	{
		EPWMx->CTLA = SFR_Config(EPWMx->CTLA, ~EPWM_CTLA_CSFA, tmpreg);
	}
	else if(Register == EPWM_REGISTER_B)
	{
		EPWMx->CTLB = SFR_Config(EPWMx->CTLB, ~EPWM_CTLA_CSFA, tmpreg);
     fa4:	2e 9a       	LD.W      R5, [R6 + #8]
KF32A9K1XXX.h:13917
     fa6:	ac 4a       	CLR       R5, #12
     fa8:	ad 4a       	CLR       R5, #13
     faa:	89 58       	MOV       R4, R9
     fac:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:780
     fae:	35 a2       	ST.W      [R6 + #8], R5
..\src\kf32a9k1xxx_epwm.c:782
	}
}
     fb0:	0f 5e       	POP       {R6-R9}
     fb2:	0d 5d       	POP       LR
     fb4:	1d 5c       	JMP       LR
..\src\kf32a9k1xxx_epwm.c:776
	CHECK_RESTRICTION(CHECK_EPWM_MANDATORY_OUT(Select));

	tmpreg = Select << EPWM_CTLA_CSFA0_POS;
	if(Register == EPWM_REGISTER_A)
	{
		EPWMx->CTLA = SFR_Config(EPWMx->CTLA, ~EPWM_CTLA_CSFA, tmpreg);
     fb6:	ee 99       	LD.W      R5, [R6 + #7]
KF32A9K1XXX.h:13917
     fb8:	ac 4a       	CLR       R5, #12
     fba:	ad 4a       	CLR       R5, #13
     fbc:	89 58       	MOV       R4, R9
     fbe:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:776
     fc0:	f5 a1       	ST.W      [R6 + #7], R5
..\src\kf32a9k1xxx_epwm.c:782
	}
	else if(Register == EPWM_REGISTER_B)
	{
		EPWMx->CTLB = SFR_Config(EPWMx->CTLB, ~EPWM_CTLA_CSFA, tmpreg);
	}
}
     fc2:	0f 5e       	POP       {R6-R9}
     fc4:	0d 5d       	POP       LR
     fc6:	1d 5c       	JMP       LR

00000fc8 <EPWM_EPWMxAB_OUTPUT_Select>:
EPWM_EPWMxAB_OUTPUT_Select():
..\src\kf32a9k1xxx_epwm.c:803
 * 返回  无。
 */
void
EPWM_EPWMxAB_OUTPUT_Select(EPWM_SFRmap* EPWMx,
			uint32_t Register, uint32_t Event, uint32_t Select)
{
     fc8:	9f 5f       	PUSH      {R6-R10,LR}
     fca:	c0 58       	MOV       R6, R0
     fcc:	21 59       	MOV       R9, R1
     fce:	02 59       	MOV       R8, R2
     fd0:	43 59       	MOV       R10, R3
..\src\kf32a9k1xxx_epwm.c:808
	uint32_t tmpreg = 0;
	uint32_t tmask = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
     fd2:	01 10       	MOV       R0, #1
     fd4:	15 45       	LD        R5, [PC + #21]        ;->0x1028  :=0x40001a00
     fd6:	65 70       	CMP       R6, R5
     fd8:	0b f0       	JZ        $+11                  ;->0xfee
     fda:	15 45       	LD        R5, [PC + #21]        ;->0x102c  :=0x40001300
     fdc:	65 70       	CMP       R6, R5
     fde:	08 f0       	JZ        $+8                   ;->0xfee
     fe0:	14 45       	LD        R5, [PC + #20]        ;->0x1030  :=0x40001380
     fe2:	65 70       	CMP       R6, R5
     fe4:	05 f0       	JZ        $+5                   ;->0xfee
     fe6:	14 45       	LD        R5, [PC + #20]        ;->0x1034  :=0x40002e00
     fe8:	65 70       	CMP       R6, R5
     fea:	02 f0       	JZ        $+2                   ;->0xfee
     fec:	00 10       	MOV       R0, #0
     fee:	13 47       	LD        R7, [PC + #19]        ;->0x1038  :=0x371a
     ff0:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:809
	CHECK_RESTRICTION(CHECK_EPWM_REGISTER_AB(Register));
     ff2:	01 10       	MOV       R0, #1
     ff4:	93 38       	CMP       R9, #3
     ff6:	02 f9       	JLS       $+2                   ;->0xffa
     ff8:	00 10       	MOV       R0, #0
     ffa:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:810
	CHECK_RESTRICTION(CHECK_EPWM_TXCOUNT_EQUAL_XX_EPWMAB_OUT(Event));
     ffc:	01 10       	MOV       R0, #1
     ffe:	85 38       	CMP       R8, #5
    1000:	02 f9       	JLS       $+2                   ;->0x1004
    1002:	00 10       	MOV       R0, #0
    1004:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:811
	CHECK_RESTRICTION(CHECK_EPWM_MANDATORY_OUT(Select));
    1006:	01 10       	MOV       R0, #1
    1008:	a3 38       	CMP       R10, #3
    100a:	02 f9       	JLS       $+2                   ;->0x100e
    100c:	00 10       	MOV       R0, #0
    100e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:813

	tmpreg = Select << (Event*2);
    1010:	88 64       	ADD       R8, R8
    1012:	a8 6c       	LSL       R10, R8
..\src\kf32a9k1xxx_epwm.c:814
	tmask = 0x03 << (Event*2);
    1014:	53 10       	MOV       R5, #3
    1016:	58 6c       	LSL       R5, R8
..\src\kf32a9k1xxx_epwm.c:815
	if(Register == EPWM_REGISTER_A)
    1018:	90 38       	CMP       R9, #0
    101a:	19 f0       	JZ        $+25                  ;->0x104c
..\src\kf32a9k1xxx_epwm.c:819
	{
		EPWMx->CTLA = SFR_Config(EPWMx->CTLA, ~tmask, tmpreg);
	}
	else if(Register == EPWM_REGISTER_B)
    101c:	91 38       	CMP       R9, #1
    101e:	0f f0       	JZ        $+15                  ;->0x103c
..\src\kf32a9k1xxx_epwm.c:823
	{
		EPWMx->CTLB = SFR_Config(EPWMx->CTLB, ~tmask, tmpreg);
	}
}
    1020:	1f 5e       	POP       {R6-R10}
    1022:	0d 5d       	POP       LR
    1024:	1d 5c       	JMP       LR
    1026:	00 00       	NOP      NOP      
    1028:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1028  :=0x40001a00
    102c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x102c  :=0x40001300
    1030:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1030  :=0x40001380
    1034:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1034  :=0x40002e00
    1038:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:821
	{
		EPWMx->CTLA = SFR_Config(EPWMx->CTLA, ~tmask, tmpreg);
	}
	else if(Register == EPWM_REGISTER_B)
	{
		EPWMx->CTLB = SFR_Config(EPWMx->CTLB, ~tmask, tmpreg);
    103c:	26 9a       	LD.W      R4, [R6 + #8]
    103e:	55 68       	NOT       R5, R5
KF32A9K1XXX.h:13917
    1040:	2d d5       	ANL       R5, R5, R4
    1042:	5a 6a       	ORL       R5, R10
..\src\kf32a9k1xxx_epwm.c:821
    1044:	35 a2       	ST.W      [R6 + #8], R5
..\src\kf32a9k1xxx_epwm.c:823
	}
}
    1046:	1f 5e       	POP       {R6-R10}
    1048:	0d 5d       	POP       LR
    104a:	1d 5c       	JMP       LR
..\src\kf32a9k1xxx_epwm.c:817

	tmpreg = Select << (Event*2);
	tmask = 0x03 << (Event*2);
	if(Register == EPWM_REGISTER_A)
	{
		EPWMx->CTLA = SFR_Config(EPWMx->CTLA, ~tmask, tmpreg);
    104c:	e6 99       	LD.W      R4, [R6 + #7]
    104e:	55 68       	NOT       R5, R5
KF32A9K1XXX.h:13917
    1050:	2d d5       	ANL       R5, R5, R4
    1052:	5a 6a       	ORL       R5, R10
..\src\kf32a9k1xxx_epwm.c:817
    1054:	f5 a1       	ST.W      [R6 + #7], R5
..\src\kf32a9k1xxx_epwm.c:823
	}
	else if(Register == EPWM_REGISTER_B)
	{
		EPWMx->CTLB = SFR_Config(EPWMx->CTLB, ~tmask, tmpreg);
	}
}
    1056:	1f 5e       	POP       {R6-R10}
    1058:	0d 5d       	POP       LR
    105a:	1d 5c       	JMP       LR

0000105c <EPWM_Dead_Zone_Input_Select>:
EPWM_Dead_Zone_Input_Select():
..\src\kf32a9k1xxx_epwm.c:839
 *      			EPWM_EPWMB_UP_EPWMB_DOWM : 	（来自波形发生模块）作为上升/下降沿死区模块的输入
 * 返回  无。
 */
void
EPWM_Dead_Zone_Input_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    105c:	87 5f       	PUSH      {R6-R8,LR}
    105e:	c0 58       	MOV       R6, R0
    1060:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:843
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1062:	10 45       	LD        R5, [PC + #16]        ;->0x10a0  :=0x40001a00
    1064:	05 70       	CMP       R0, R5
    1066:	27 f0       	JZ        $+39                  ;->0x10b4
    1068:	0f 45       	LD        R5, [PC + #15]        ;->0x10a4  :=0x40001300
    106a:	05 70       	CMP       R0, R5
    106c:	24 f0       	JZ        $+36                  ;->0x10b4
    106e:	0f 45       	LD        R5, [PC + #15]        ;->0x10a8  :=0x40001380
    1070:	01 10       	MOV       R0, #1
    1072:	65 70       	CMP       R6, R5
    1074:	05 f0       	JZ        $+5                   ;->0x107e
    1076:	0e 45       	LD        R5, [PC + #14]        ;->0x10ac  :=0x40002e00
    1078:	65 70       	CMP       R6, R5
    107a:	02 f0       	JZ        $+2                   ;->0x107e
    107c:	00 10       	MOV       R0, #0
    107e:	0d 45       	LD        R5, [PC + #13]        ;->0x10b0  :=0x371a
    1080:	05 59       	MOV       R8, R5
    1082:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:844
	CHECK_RESTRICTION(CHECK_EPWM_DEAD_ZONE(Select));
    1084:	01 10       	MOV       R0, #1
    1086:	73 38       	CMP       R7, #3
    1088:	02 f9       	JLS       $+2                   ;->0x108c
    108a:	00 10       	MOV       R0, #0
    108c:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:847

	tmpreg = Select << EPWM_DBCTL_INMODE0_POS;
	EPWMx->DBCTL = SFR_Config(EPWMx->DBCTL, ~EPWM_DBCTL_INMODE, tmpreg);
    108e:	6e 9a       	LD.W      R5, [R6 + #9]
..\src\kf32a9k1xxx_epwm.c:846

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_EPWM_DEAD_ZONE(Select));

	tmpreg = Select << EPWM_DBCTL_INMODE0_POS;
    1090:	3c 7a       	LSL       R7, #4
KF32A9K1XXX.h:13917
    1092:	2c 4a       	CLR       R5, #4
    1094:	2d 4a       	CLR       R5, #5
    1096:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:847
	EPWMx->DBCTL = SFR_Config(EPWMx->DBCTL, ~EPWM_DBCTL_INMODE, tmpreg);
    1098:	77 a2       	ST.W      [R6 + #9], R7
..\src\kf32a9k1xxx_epwm.c:848
}
    109a:	07 5e       	POP       {R6-R8}
    109c:	0d 5d       	POP       LR
    109e:	1d 5c       	JMP       LR
    10a0:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x10a0  :=0x40001a00
    10a4:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x10a4  :=0x40001300
    10a8:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x10a8  :=0x40001380
    10ac:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x10ac  :=0x40002e00
    10b0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:843
EPWM_Dead_Zone_Input_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    10b4:	01 10       	MOV       R0, #1
    10b6:	e4 07       	SJMP      $-28                  ;->0x107e

000010b8 <EPWM_Dead_Zone_Output_Polarity_Select>:
EPWM_Dead_Zone_Output_Polarity_Select():
..\src\kf32a9k1xxx_epwm.c:860
 *      			EPWM_EPWMA_TOGGLE_EPWMB_TOGGLE : 	EPWMxA和EPWMxB（来自上升/下降沿死区模块）都翻转
 * 返回  无。
 */
void
EPWM_Dead_Zone_Output_Polarity_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    10b8:	87 5f       	PUSH      {R6-R8,LR}
    10ba:	c0 58       	MOV       R6, R0
    10bc:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:864
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    10be:	10 45       	LD        R5, [PC + #16]        ;->0x10fc  :=0x40001a00
    10c0:	05 70       	CMP       R0, R5
    10c2:	27 f0       	JZ        $+39                  ;->0x1110
    10c4:	0f 45       	LD        R5, [PC + #15]        ;->0x1100  :=0x40001300
    10c6:	05 70       	CMP       R0, R5
    10c8:	24 f0       	JZ        $+36                  ;->0x1110
    10ca:	0f 45       	LD        R5, [PC + #15]        ;->0x1104  :=0x40001380
    10cc:	01 10       	MOV       R0, #1
    10ce:	65 70       	CMP       R6, R5
    10d0:	05 f0       	JZ        $+5                   ;->0x10da
    10d2:	0e 45       	LD        R5, [PC + #14]        ;->0x1108  :=0x40002e00
    10d4:	65 70       	CMP       R6, R5
    10d6:	02 f0       	JZ        $+2                   ;->0x10da
    10d8:	00 10       	MOV       R0, #0
    10da:	0d 45       	LD        R5, [PC + #13]        ;->0x110c  :=0x371a
    10dc:	05 59       	MOV       R8, R5
    10de:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:865
	CHECK_RESTRICTION(CHECK_EPWM_DEAD_ZONE_OUT_POLARITY(Select));
    10e0:	01 10       	MOV       R0, #1
    10e2:	73 38       	CMP       R7, #3
    10e4:	02 f9       	JLS       $+2                   ;->0x10e8
    10e6:	00 10       	MOV       R0, #0
    10e8:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:868

	tmpreg = Select << EPWM_DBCTL_POLSEL0_POS;
	EPWMx->DBCTL = SFR_Config(EPWMx->DBCTL, ~EPWM_DBCTL_POLSEL, tmpreg);
    10ea:	6e 9a       	LD.W      R5, [R6 + #9]
..\src\kf32a9k1xxx_epwm.c:867

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_EPWM_DEAD_ZONE_OUT_POLARITY(Select));

	tmpreg = Select << EPWM_DBCTL_POLSEL0_POS;
    10ec:	3a 7a       	LSL       R7, #2
KF32A9K1XXX.h:13917
    10ee:	2a 4a       	CLR       R5, #2
    10f0:	2b 4a       	CLR       R5, #3
    10f2:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:868
	EPWMx->DBCTL = SFR_Config(EPWMx->DBCTL, ~EPWM_DBCTL_POLSEL, tmpreg);
    10f4:	77 a2       	ST.W      [R6 + #9], R7
..\src\kf32a9k1xxx_epwm.c:869
}
    10f6:	07 5e       	POP       {R6-R8}
    10f8:	0d 5d       	POP       LR
    10fa:	1d 5c       	JMP       LR
    10fc:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x10fc  :=0x40001a00
    1100:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1100  :=0x40001300
    1104:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1104  :=0x40001380
    1108:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1108  :=0x40002e00
    110c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:864
EPWM_Dead_Zone_Output_Polarity_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1110:	01 10       	MOV       R0, #1
    1112:	e4 07       	SJMP      $-28                  ;->0x10da

00001114 <EPWM_Dead_Zone_Output_Select>:
EPWM_Dead_Zone_Output_Select():
..\src\kf32a9k1xxx_epwm.c:881
 *      			EPWM_UP_ENABLE_DOWN_ENABLE : 	上升/下降沿死区模块都使能
 * 返回  无。
 */
void
EPWM_Dead_Zone_Output_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    1114:	87 5f       	PUSH      {R6-R8,LR}
    1116:	c0 58       	MOV       R6, R0
    1118:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:885
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    111a:	10 45       	LD        R5, [PC + #16]        ;->0x1158  :=0x40001a00
    111c:	05 70       	CMP       R0, R5
    111e:	27 f0       	JZ        $+39                  ;->0x116c
    1120:	0f 45       	LD        R5, [PC + #15]        ;->0x115c  :=0x40001300
    1122:	05 70       	CMP       R0, R5
    1124:	24 f0       	JZ        $+36                  ;->0x116c
    1126:	0f 45       	LD        R5, [PC + #15]        ;->0x1160  :=0x40001380
    1128:	01 10       	MOV       R0, #1
    112a:	65 70       	CMP       R6, R5
    112c:	05 f0       	JZ        $+5                   ;->0x1136
    112e:	0e 45       	LD        R5, [PC + #14]        ;->0x1164  :=0x40002e00
    1130:	65 70       	CMP       R6, R5
    1132:	02 f0       	JZ        $+2                   ;->0x1136
    1134:	00 10       	MOV       R0, #0
    1136:	0d 45       	LD        R5, [PC + #13]        ;->0x1168  :=0x371a
    1138:	05 59       	MOV       R8, R5
    113a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:886
	CHECK_RESTRICTION(CHECK_EPWM_DEAD_ZONE_OUT(Select));
    113c:	01 10       	MOV       R0, #1
    113e:	73 38       	CMP       R7, #3
    1140:	02 f9       	JLS       $+2                   ;->0x1144
    1142:	00 10       	MOV       R0, #0
    1144:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:889

	tmpreg = Select << EPWM_DBCTL_OUTMODE0_POS;
	EPWMx->DBCTL = SFR_Config(EPWMx->DBCTL, ~EPWM_DBCTL_OUTMODE, tmpreg);
    1146:	6e 9a       	LD.W      R5, [R6 + #9]
KF32A9K1XXX.h:13917
    1148:	28 4a       	CLR       R5, #0
    114a:	29 4a       	CLR       R5, #1
    114c:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:889
    114e:	77 a2       	ST.W      [R6 + #9], R7
..\src\kf32a9k1xxx_epwm.c:890
}
    1150:	07 5e       	POP       {R6-R8}
    1152:	0d 5d       	POP       LR
    1154:	1d 5c       	JMP       LR
    1156:	00 00       	NOP      NOP      
    1158:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1158  :=0x40001a00
    115c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x115c  :=0x40001300
    1160:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1160  :=0x40001380
    1164:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1164  :=0x40002e00
    1168:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:885
EPWM_Dead_Zone_Output_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    116c:	01 10       	MOV       R0, #1
    116e:	e4 07       	SJMP      $-28                  ;->0x1136

00001170 <EPWM_Dead_Zone_Time_Config>:
EPWM_Dead_Zone_Time_Config():
..\src\kf32a9k1xxx_epwm.c:901
 *      Value : 死区时间 Value <= 0xFFFF
 * 返回  无。
 */
void
EPWM_Dead_Zone_Time_Config(EPWM_SFRmap* EPWMx, uint32_t Select, uint32_t Value)
{
    1170:	8f 5f       	PUSH      {R6-R9,LR}
    1172:	c0 58       	MOV       R6, R0
    1174:	01 59       	MOV       R8, R1
    1176:	22 59       	MOV       R9, R2
..\src\kf32a9k1xxx_epwm.c:905
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1178:	01 10       	MOV       R0, #1
    117a:	14 45       	LD        R5, [PC + #20]        ;->0x11c8  :=0x40001a00
    117c:	65 70       	CMP       R6, R5
    117e:	0b f0       	JZ        $+11                  ;->0x1194
    1180:	13 45       	LD        R5, [PC + #19]        ;->0x11cc  :=0x40001300
    1182:	65 70       	CMP       R6, R5
    1184:	08 f0       	JZ        $+8                   ;->0x1194
    1186:	13 45       	LD        R5, [PC + #19]        ;->0x11d0  :=0x40001380
    1188:	65 70       	CMP       R6, R5
    118a:	05 f0       	JZ        $+5                   ;->0x1194
    118c:	12 45       	LD        R5, [PC + #18]        ;->0x11d4  :=0x40002e00
    118e:	65 70       	CMP       R6, R5
    1190:	02 f0       	JZ        $+2                   ;->0x1194
    1192:	00 10       	MOV       R0, #0
    1194:	11 47       	LD        R7, [PC + #17]        ;->0x11d8  :=0x371a
    1196:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:906
	CHECK_RESTRICTION(CHECK_EPWM_UP_DOWN_EDGE_DEAD_ZONE(Select));
    1198:	01 10       	MOV       R0, #1
    119a:	80 70       	CMP       R8, R0
    119c:	02 f9       	JLS       $+2                   ;->0x11a0
    119e:	00 10       	MOV       R0, #0
    11a0:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:907
	CHECK_RESTRICTION(CHECK_EPWM_16BIT_LIMIT(Value));
    11a2:	01 10       	MOV       R0, #1
    11a4:	0e 45       	LD        R5, [PC + #14]        ;->0x11dc  :=0xffff
    11a6:	95 70       	CMP       R9, R5
    11a8:	02 f9       	JLS       $+2                   ;->0x11ac
    11aa:	00 10       	MOV       R0, #0
    11ac:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:909

	if(Select == EPWM_UP_EDGE_DEAD_ZONE)
    11ae:	81 38       	CMP       R8, #1
    11b0:	1a f0       	JZ        $+26                  ;->0x11e4
..\src\kf32a9k1xxx_epwm.c:913
	{
		EPWMx->DBT = SFR_Config(EPWMx->DBT, ~EPWM_DBT_RDBT, Value << EPWM_DBT_RDBT0_POS);
	}
	else if(Select == EPWM_DOWM_EDGE_DEAD_ZONE)
    11b2:	80 38       	CMP       R8, #0
    11b4:	07 f1       	JNZ       $+7                   ;->0x11c2
..\src\kf32a9k1xxx_epwm.c:915
	{
		EPWMx->DBT = SFR_Config(EPWMx->DBT, ~EPWM_DBT_FDBT, Value);
    11b6:	a6 9a       	LD.W      R4, [R6 + #10]
KF32A9K1XXX.h:13917
    11b8:	0a 45       	LD        R5, [PC + #10]        ;->0x11e0  :=0xffff0000
    11ba:	6c d5       	ANL       R5, R4, R5
    11bc:	89 58       	MOV       R4, R9
    11be:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:915
    11c0:	b5 a2       	ST.W      [R6 + #10], R5
..\src\kf32a9k1xxx_epwm.c:917
	}
}
    11c2:	0f 5e       	POP       {R6-R9}
    11c4:	0d 5d       	POP       LR
    11c6:	1d 5c       	JMP       LR
    11c8:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x11c8  :=0x40001a00
    11cc:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x11cc  :=0x40001300
    11d0:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x11d0  :=0x40001380
    11d4:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x11d4  :=0x40002e00
    11d8:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    11dc:	ff ff 00 00 	.long     0x0000ffff ->000065535 
    11e0:	00 00 ff ff 	.long     0xffff0000 ->-00065536 
..\src\kf32a9k1xxx_epwm.c:911
	CHECK_RESTRICTION(CHECK_EPWM_UP_DOWN_EDGE_DEAD_ZONE(Select));
	CHECK_RESTRICTION(CHECK_EPWM_16BIT_LIMIT(Value));

	if(Select == EPWM_UP_EDGE_DEAD_ZONE)
	{
		EPWMx->DBT = SFR_Config(EPWMx->DBT, ~EPWM_DBT_RDBT, Value << EPWM_DBT_RDBT0_POS);
    11e4:	ae 9a       	LD.W      R5, [R6 + #10]
    11e6:	48 7b       	LSL       R9, #16
KF32A9K1XXX.h:13917
    11e8:	55 d0       	ZXT.H     R5, R5
    11ea:	89 58       	MOV       R4, R9
    11ec:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:911
    11ee:	b5 a2       	ST.W      [R6 + #10], R5
..\src\kf32a9k1xxx_epwm.c:917
	}
	else if(Select == EPWM_DOWM_EDGE_DEAD_ZONE)
	{
		EPWMx->DBT = SFR_Config(EPWMx->DBT, ~EPWM_DBT_FDBT, Value);
	}
}
    11f0:	0f 5e       	POP       {R6-R9}
    11f2:	0d 5d       	POP       LR
    11f4:	1d 5c       	JMP       LR
	...

000011f8 <EPWM_Auto_ShowDown_Source_Select>:
EPWM_Auto_ShowDown_Source_Select():
..\src\kf32a9k1xxx_epwm.c:1120
 * 				  EPWM_AUTO_SHOWDOWN_SOURCE_QEIIF :  QEI错误中断
 * 返回  无。
 */
void
EPWM_Auto_ShowDown_Source_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
    11f8:	87 5f       	PUSH      {R6-R8,LR}
    11fa:	c0 58       	MOV       R6, R0
    11fc:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:1124
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    11fe:	10 45       	LD        R5, [PC + #16]        ;->0x123c  :=0x40001a00
    1200:	05 70       	CMP       R0, R5
    1202:	27 f0       	JZ        $+39                  ;->0x1250
    1204:	0f 45       	LD        R5, [PC + #15]        ;->0x1240  :=0x40001300
    1206:	05 70       	CMP       R0, R5
    1208:	24 f0       	JZ        $+36                  ;->0x1250
    120a:	0f 45       	LD        R5, [PC + #15]        ;->0x1244  :=0x40001380
    120c:	01 10       	MOV       R0, #1
    120e:	65 70       	CMP       R6, R5
    1210:	05 f0       	JZ        $+5                   ;->0x121a
    1212:	0e 45       	LD        R5, [PC + #14]        ;->0x1248  :=0x40002e00
    1214:	65 70       	CMP       R6, R5
    1216:	02 f0       	JZ        $+2                   ;->0x121a
    1218:	00 10       	MOV       R0, #0
    121a:	0d 45       	LD        R5, [PC + #13]        ;->0x124c  :=0x371a
    121c:	05 59       	MOV       R8, R5
    121e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1125
	CHECK_RESTRICTION(CHECK_EPWM_AUTO_SHOWDOWN_SOURCE(Select));
    1220:	01 10       	MOV       R0, #1
    1222:	76 38       	CMP       R7, #6
    1224:	02 f9       	JLS       $+2                   ;->0x1228
    1226:	00 10       	MOV       R0, #0
    1228:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:1128

	tmpreg = Select << EPWM_PXASCTL_PXASS0_POS;
	EPWMx->PXASCTL = SFR_Config(EPWMx->PXASCTL, ~EPWM_PXASCTL_PXASS, tmpreg);
    122a:	26 9b       	LD.W      R4, [R6 + #12]
KF32A9K1XXX.h:13917
    122c:	57 10       	MOV       R5, #7
    122e:	55 68       	NOT       R5, R5
    1230:	6c d5       	ANL       R5, R4, R5
    1232:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:1128
    1234:	37 a3       	ST.W      [R6 + #12], R7
..\src\kf32a9k1xxx_epwm.c:1129
}
    1236:	07 5e       	POP       {R6-R8}
    1238:	0d 5d       	POP       LR
    123a:	1d 5c       	JMP       LR
    123c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x123c  :=0x40001a00
    1240:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1240  :=0x40001300
    1244:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1244  :=0x40001380
    1248:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1248  :=0x40002e00
    124c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:1124
EPWM_Auto_ShowDown_Source_Select(EPWM_SFRmap* EPWMx, uint32_t Select)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1250:	01 10       	MOV       R0, #1
    1252:	e4 07       	SJMP      $-28                  ;->0x121a

00001254 <EPWM_Trigger_AD_Event_Mode_Select>:
EPWM_Trigger_AD_Event_Mode_Select():
..\src\kf32a9k1xxx_epwm.c:1144
 * 				  EPWM_TRIGGER_AD_UD :  	选择在向上向下计数方式下触发AD
 * 返回  无。
 */
void
EPWM_Trigger_AD_Event_Mode_Select(EPWM_SFRmap* EPWMx, uint32_t Event, uint32_t Select)
{
    1254:	8f 5f       	PUSH      {R6-R9,LR}
    1256:	c0 58       	MOV       R6, R0
    1258:	01 59       	MOV       R8, R1
    125a:	22 59       	MOV       R9, R2
..\src\kf32a9k1xxx_epwm.c:1148
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    125c:	01 10       	MOV       R0, #1
    125e:	14 45       	LD        R5, [PC + #20]        ;->0x12ac  :=0x40001a00
    1260:	65 70       	CMP       R6, R5
    1262:	0b f0       	JZ        $+11                  ;->0x1278
    1264:	13 45       	LD        R5, [PC + #19]        ;->0x12b0  :=0x40001300
    1266:	65 70       	CMP       R6, R5
    1268:	08 f0       	JZ        $+8                   ;->0x1278
    126a:	13 45       	LD        R5, [PC + #19]        ;->0x12b4  :=0x40001380
    126c:	65 70       	CMP       R6, R5
    126e:	05 f0       	JZ        $+5                   ;->0x1278
    1270:	12 45       	LD        R5, [PC + #18]        ;->0x12b8  :=0x40002e00
    1272:	65 70       	CMP       R6, R5
    1274:	02 f0       	JZ        $+2                   ;->0x1278
    1276:	00 10       	MOV       R0, #0
    1278:	11 47       	LD        R7, [PC + #17]        ;->0x12bc  :=0x371a
    127a:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1149
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
    127c:	01 10       	MOV       R0, #1
    127e:	80 70       	CMP       R8, R0
    1280:	02 f9       	JLS       $+2                   ;->0x1284
    1282:	00 10       	MOV       R0, #0
    1284:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1150
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_UD(Select));
    1286:	01 10       	MOV       R0, #1
    1288:	92 38       	CMP       R9, #2
    128a:	02 f9       	JLS       $+2                   ;->0x128e
    128c:	00 10       	MOV       R0, #0
    128e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1152

	if(Event == EPWM_TRIGGER_AD_EVENT1)
    1290:	81 38       	CMP       R8, #1
    1292:	17 f0       	JZ        $+23                  ;->0x12c0
..\src\kf32a9k1xxx_epwm.c:1157
	{
		tmpreg = Select << EPWM_ETCTL_BTSEL0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BTSEL, tmpreg);
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
    1294:	80 38       	CMP       R8, #0
    1296:	08 f1       	JNZ       $+8                   ;->0x12a6
..\src\kf32a9k1xxx_epwm.c:1160
	{
		tmpreg = Select << EPWM_ETCTL_ATSEL0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_ATSEL, tmpreg);
    1298:	6e 9b       	LD.W      R5, [R6 + #13]
..\src\kf32a9k1xxx_epwm.c:1159
		tmpreg = Select << EPWM_ETCTL_BTSEL0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BTSEL, tmpreg);
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
	{
		tmpreg = Select << EPWM_ETCTL_ATSEL0_POS;
    129a:	c8 7a       	LSL       R9, #8
KF32A9K1XXX.h:13917
    129c:	a8 4a       	CLR       R5, #8
    129e:	a9 4a       	CLR       R5, #9
    12a0:	89 58       	MOV       R4, R9
    12a2:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:1160
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_ATSEL, tmpreg);
    12a4:	75 a3       	ST.W      [R6 + #13], R5
..\src\kf32a9k1xxx_epwm.c:1162
	}
}
    12a6:	0f 5e       	POP       {R6-R9}
    12a8:	0d 5d       	POP       LR
    12aa:	1d 5c       	JMP       LR
    12ac:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x12ac  :=0x40001a00
    12b0:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x12b0  :=0x40001300
    12b4:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x12b4  :=0x40001380
    12b8:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x12b8  :=0x40002e00
    12bc:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:1155
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_UD(Select));

	if(Event == EPWM_TRIGGER_AD_EVENT1)
	{
		tmpreg = Select << EPWM_ETCTL_BTSEL0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BTSEL, tmpreg);
    12c0:	6e 9b       	LD.W      R5, [R6 + #13]
..\src\kf32a9k1xxx_epwm.c:1154
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_UD(Select));

	if(Event == EPWM_TRIGGER_AD_EVENT1)
	{
		tmpreg = Select << EPWM_ETCTL_BTSEL0_POS;
    12c2:	c8 7b       	LSL       R9, #24
KF32A9K1XXX.h:13917
    12c4:	a8 4b       	CLR       R5, #24
    12c6:	a9 4b       	CLR       R5, #25
    12c8:	89 58       	MOV       R4, R9
    12ca:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:1155
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BTSEL, tmpreg);
    12cc:	75 a3       	ST.W      [R6 + #13], R5
..\src\kf32a9k1xxx_epwm.c:1162
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
	{
		tmpreg = Select << EPWM_ETCTL_ATSEL0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_ATSEL, tmpreg);
	}
}
    12ce:	0f 5e       	POP       {R6-R9}
    12d0:	0d 5d       	POP       LR
    12d2:	1d 5c       	JMP       LR

000012d4 <EPWM_Trigger_Event_Cycle_Select>:
EPWM_Trigger_Event_Cycle_Select():
..\src\kf32a9k1xxx_epwm.c:1201
 * 				  EPWM_4_TRIGGER_EVENT_TRIGGER_AD : 每四次触发信号产生触发AD事件
 * 返回  无。
 */
void
EPWM_Trigger_Event_Cycle_Select(EPWM_SFRmap* EPWMx, uint32_t Event, uint32_t Select)
{
    12d4:	8f 5f       	PUSH      {R6-R9,LR}
    12d6:	c0 58       	MOV       R6, R0
    12d8:	01 59       	MOV       R8, R1
    12da:	22 59       	MOV       R9, R2
..\src\kf32a9k1xxx_epwm.c:1205
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    12dc:	01 10       	MOV       R0, #1
    12de:	14 45       	LD        R5, [PC + #20]        ;->0x132c  :=0x40001a00
    12e0:	65 70       	CMP       R6, R5
    12e2:	0b f0       	JZ        $+11                  ;->0x12f8
    12e4:	13 45       	LD        R5, [PC + #19]        ;->0x1330  :=0x40001300
    12e6:	65 70       	CMP       R6, R5
    12e8:	08 f0       	JZ        $+8                   ;->0x12f8
    12ea:	13 45       	LD        R5, [PC + #19]        ;->0x1334  :=0x40001380
    12ec:	65 70       	CMP       R6, R5
    12ee:	05 f0       	JZ        $+5                   ;->0x12f8
    12f0:	12 45       	LD        R5, [PC + #18]        ;->0x1338  :=0x40002e00
    12f2:	65 70       	CMP       R6, R5
    12f4:	02 f0       	JZ        $+2                   ;->0x12f8
    12f6:	00 10       	MOV       R0, #0
    12f8:	11 47       	LD        R7, [PC + #17]        ;->0x133c  :=0x371a
    12fa:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1206
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
    12fc:	01 10       	MOV       R0, #1
    12fe:	80 70       	CMP       R8, R0
    1300:	02 f9       	JLS       $+2                   ;->0x1304
    1302:	00 10       	MOV       R0, #0
    1304:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1207
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_EVENT_TRIGGER_AD(Select));
    1306:	01 10       	MOV       R0, #1
    1308:	93 38       	CMP       R9, #3
    130a:	02 f9       	JLS       $+2                   ;->0x130e
    130c:	00 10       	MOV       R0, #0
    130e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1209

	if(Event == EPWM_TRIGGER_AD_EVENT1)
    1310:	81 38       	CMP       R8, #1
    1312:	17 f0       	JZ        $+23                  ;->0x1340
..\src\kf32a9k1xxx_epwm.c:1214
	{
		tmpreg = Select << EPWM_ETCTL_BPP0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BPP, tmpreg);
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
    1314:	80 38       	CMP       R8, #0
    1316:	08 f1       	JNZ       $+8                   ;->0x1326
..\src\kf32a9k1xxx_epwm.c:1217
	{
		tmpreg = Select << EPWM_ETCTL_APP0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_APP, tmpreg);
    1318:	6e 9b       	LD.W      R5, [R6 + #13]
..\src\kf32a9k1xxx_epwm.c:1216
		tmpreg = Select << EPWM_ETCTL_BPP0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BPP, tmpreg);
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
	{
		tmpreg = Select << EPWM_ETCTL_APP0_POS;
    131a:	4c 7a       	LSL       R9, #4
KF32A9K1XXX.h:13917
    131c:	2c 4a       	CLR       R5, #4
    131e:	2d 4a       	CLR       R5, #5
    1320:	89 58       	MOV       R4, R9
    1322:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:1217
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_APP, tmpreg);
    1324:	75 a3       	ST.W      [R6 + #13], R5
..\src\kf32a9k1xxx_epwm.c:1219
	}
}
    1326:	0f 5e       	POP       {R6-R9}
    1328:	0d 5d       	POP       LR
    132a:	1d 5c       	JMP       LR
    132c:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x132c  :=0x40001a00
    1330:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1330  :=0x40001300
    1334:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1334  :=0x40001380
    1338:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1338  :=0x40002e00
    133c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:1212
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_EVENT_TRIGGER_AD(Select));

	if(Event == EPWM_TRIGGER_AD_EVENT1)
	{
		tmpreg = Select << EPWM_ETCTL_BPP0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BPP, tmpreg);
    1340:	6e 9b       	LD.W      R5, [R6 + #13]
..\src\kf32a9k1xxx_epwm.c:1211
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_EVENT_TRIGGER_AD(Select));

	if(Event == EPWM_TRIGGER_AD_EVENT1)
	{
		tmpreg = Select << EPWM_ETCTL_BPP0_POS;
    1342:	4c 7b       	LSL       R9, #20
KF32A9K1XXX.h:13917
    1344:	2c 4b       	CLR       R5, #20
    1346:	2d 4b       	CLR       R5, #21
    1348:	89 58       	MOV       R4, R9
    134a:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:1212
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_BPP, tmpreg);
    134c:	75 a3       	ST.W      [R6 + #13], R5
..\src\kf32a9k1xxx_epwm.c:1219
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
	{
		tmpreg = Select << EPWM_ETCTL_APP0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_APP, tmpreg);
	}
}
    134e:	0f 5e       	POP       {R6-R9}
    1350:	0d 5d       	POP       LR
    1352:	1d 5c       	JMP       LR

00001354 <EPWM_Trigger_AD_Event_Select>:
EPWM_Trigger_AD_Event_Select():
..\src\kf32a9k1xxx_epwm.c:1263
 * 				  EPWM_TIMER_EQUAL_DUTYB : 定时器值等于占空比B寄存器脉冲
 * 返回  无。
 */
void
EPWM_Trigger_AD_Event_Select(EPWM_SFRmap* EPWMx, uint32_t Event, uint32_t Select)
{
    1354:	8f 5f       	PUSH      {R6-R9,LR}
    1356:	c0 58       	MOV       R6, R0
    1358:	01 59       	MOV       R8, R1
    135a:	22 59       	MOV       R9, R2
..\src\kf32a9k1xxx_epwm.c:1267
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    135c:	01 10       	MOV       R0, #1
    135e:	14 45       	LD        R5, [PC + #20]        ;->0x13ac  :=0x40001a00
    1360:	65 70       	CMP       R6, R5
    1362:	0b f0       	JZ        $+11                  ;->0x1378
    1364:	13 45       	LD        R5, [PC + #19]        ;->0x13b0  :=0x40001300
    1366:	65 70       	CMP       R6, R5
    1368:	08 f0       	JZ        $+8                   ;->0x1378
    136a:	13 45       	LD        R5, [PC + #19]        ;->0x13b4  :=0x40001380
    136c:	65 70       	CMP       R6, R5
    136e:	05 f0       	JZ        $+5                   ;->0x1378
    1370:	12 45       	LD        R5, [PC + #18]        ;->0x13b8  :=0x40002e00
    1372:	65 70       	CMP       R6, R5
    1374:	02 f0       	JZ        $+2                   ;->0x1378
    1376:	00 10       	MOV       R0, #0
    1378:	11 47       	LD        R7, [PC + #17]        ;->0x13bc  :=0x371a
    137a:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1268
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
    137c:	01 10       	MOV       R0, #1
    137e:	80 70       	CMP       R8, R0
    1380:	02 f9       	JLS       $+2                   ;->0x1384
    1382:	00 10       	MOV       R0, #0
    1384:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1269
	CHECK_RESTRICTION(CEHCK_EPWM_TRIGGER_AD_EVENT(Select));
    1386:	01 10       	MOV       R0, #1
    1388:	93 38       	CMP       R9, #3
    138a:	02 f9       	JLS       $+2                   ;->0x138e
    138c:	00 10       	MOV       R0, #0
    138e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1271

	if(Event == EPWM_TRIGGER_AD_EVENT1)
    1390:	81 38       	CMP       R8, #1
    1392:	17 f0       	JZ        $+23                  ;->0x13c0
..\src\kf32a9k1xxx_epwm.c:1276
	{
		tmpreg = Select << EPWM_ETCTL_SELB0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_SELB, tmpreg);
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
    1394:	80 38       	CMP       R8, #0
    1396:	08 f1       	JNZ       $+8                   ;->0x13a6
..\src\kf32a9k1xxx_epwm.c:1279
	{
		tmpreg = Select << EPWM_ETCTL_SELA0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_SELA, tmpreg);
    1398:	6e 9b       	LD.W      R5, [R6 + #13]
..\src\kf32a9k1xxx_epwm.c:1278
		tmpreg = Select << EPWM_ETCTL_SELB0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_SELB, tmpreg);
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
	{
		tmpreg = Select << EPWM_ETCTL_SELA0_POS;
    139a:	99 64       	ADD       R9, R9
KF32A9K1XXX.h:13917
    139c:	29 4a       	CLR       R5, #1
    139e:	2a 4a       	CLR       R5, #2
    13a0:	89 58       	MOV       R4, R9
    13a2:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:1279
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_SELA, tmpreg);
    13a4:	75 a3       	ST.W      [R6 + #13], R5
..\src\kf32a9k1xxx_epwm.c:1281
	}
}
    13a6:	0f 5e       	POP       {R6-R9}
    13a8:	0d 5d       	POP       LR
    13aa:	1d 5c       	JMP       LR
    13ac:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x13ac  :=0x40001a00
    13b0:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x13b0  :=0x40001300
    13b4:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x13b4  :=0x40001380
    13b8:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x13b8  :=0x40002e00
    13bc:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:1274
	CHECK_RESTRICTION(CEHCK_EPWM_TRIGGER_AD_EVENT(Select));

	if(Event == EPWM_TRIGGER_AD_EVENT1)
	{
		tmpreg = Select << EPWM_ETCTL_SELB0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_SELB, tmpreg);
    13c0:	6e 9b       	LD.W      R5, [R6 + #13]
..\src\kf32a9k1xxx_epwm.c:1273
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
	CHECK_RESTRICTION(CEHCK_EPWM_TRIGGER_AD_EVENT(Select));

	if(Event == EPWM_TRIGGER_AD_EVENT1)
	{
		tmpreg = Select << EPWM_ETCTL_SELB0_POS;
    13c2:	49 7b       	LSL       R9, #17
KF32A9K1XXX.h:13917
    13c4:	29 4b       	CLR       R5, #17
    13c6:	2a 4b       	CLR       R5, #18
    13c8:	89 58       	MOV       R4, R9
    13ca:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:1274
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_SELB, tmpreg);
    13cc:	75 a3       	ST.W      [R6 + #13], R5
..\src\kf32a9k1xxx_epwm.c:1281
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
	{
		tmpreg = Select << EPWM_ETCTL_SELA0_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_SELA, tmpreg);
	}
}
    13ce:	0f 5e       	POP       {R6-R9}
    13d0:	0d 5d       	POP       LR
    13d2:	1d 5c       	JMP       LR

000013d4 <EPWM_Trigger_AD_Event_Enable>:
EPWM_Trigger_AD_Event_Enable():
..\src\kf32a9k1xxx_epwm.c:1293
 * 					FALSE : 禁止触发AD事件
 * 返回  无。
 */
void
EPWM_Trigger_AD_Event_Enable(EPWM_SFRmap* EPWMx, uint32_t Event, FunctionalState NewState)
{
    13d4:	8f 5f       	PUSH      {R6-R9,LR}
    13d6:	c0 58       	MOV       R6, R0
    13d8:	01 59       	MOV       R8, R1
    13da:	22 59       	MOV       R9, R2
..\src\kf32a9k1xxx_epwm.c:1297
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    13dc:	01 10       	MOV       R0, #1
    13de:	13 45       	LD        R5, [PC + #19]        ;->0x1428  :=0x40001a00
    13e0:	65 70       	CMP       R6, R5
    13e2:	0b f0       	JZ        $+11                  ;->0x13f8
    13e4:	12 45       	LD        R5, [PC + #18]        ;->0x142c  :=0x40001300
    13e6:	65 70       	CMP       R6, R5
    13e8:	08 f0       	JZ        $+8                   ;->0x13f8
    13ea:	12 45       	LD        R5, [PC + #18]        ;->0x1430  :=0x40001380
    13ec:	65 70       	CMP       R6, R5
    13ee:	05 f0       	JZ        $+5                   ;->0x13f8
    13f0:	11 45       	LD        R5, [PC + #17]        ;->0x1434  :=0x40002e00
    13f2:	65 70       	CMP       R6, R5
    13f4:	02 f0       	JZ        $+2                   ;->0x13f8
    13f6:	00 10       	MOV       R0, #0
    13f8:	10 47       	LD        R7, [PC + #16]        ;->0x1438  :=0x371a
    13fa:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1298
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
    13fc:	01 10       	MOV       R0, #1
    13fe:	80 70       	CMP       R8, R0
    1400:	02 f9       	JLS       $+2                   ;->0x1404
    1402:	00 10       	MOV       R0, #0
    1404:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1299
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1406:	01 10       	MOV       R0, #1
    1408:	90 70       	CMP       R9, R0
    140a:	02 f9       	JLS       $+2                   ;->0x140e
    140c:	00 10       	MOV       R0, #0
    140e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_epwm.c:1301

	if(Event == EPWM_TRIGGER_AD_EVENT1)
    1410:	81 38       	CMP       R8, #1
    1412:	15 f0       	JZ        $+21                  ;->0x143c
..\src\kf32a9k1xxx_epwm.c:1306
	{
		tmpreg = NewState << EPWM_ETCTL_TOADENB_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_TOADENB, tmpreg);
	}
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
    1414:	80 38       	CMP       R8, #0
    1416:	06 f1       	JNZ       $+6                   ;->0x1422
..\src\kf32a9k1xxx_epwm.c:1309
	{
		tmpreg = NewState << EPWM_ETCTL_TOADENA_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_TOADENA, tmpreg);
    1418:	6e 9b       	LD.W      R5, [R6 + #13]
KF32A9K1XXX.h:13917
    141a:	28 4a       	CLR       R5, #0
    141c:	89 58       	MOV       R4, R9
    141e:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:1309
    1420:	75 a3       	ST.W      [R6 + #13], R5
..\src\kf32a9k1xxx_epwm.c:1311
	}
}
    1422:	0f 5e       	POP       {R6-R9}
    1424:	0d 5d       	POP       LR
    1426:	1d 5c       	JMP       LR
    1428:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1428  :=0x40001a00
    142c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x142c  :=0x40001300
    1430:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x1430  :=0x40001380
    1434:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x1434  :=0x40002e00
    1438:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:1304
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	if(Event == EPWM_TRIGGER_AD_EVENT1)
	{
		tmpreg = NewState << EPWM_ETCTL_TOADENB_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_TOADENB, tmpreg);
    143c:	6e 9b       	LD.W      R5, [R6 + #13]
..\src\kf32a9k1xxx_epwm.c:1303
	CHECK_RESTRICTION(CHECK_EPWM_TRIGGER_AD_EVENT(Event));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	if(Event == EPWM_TRIGGER_AD_EVENT1)
	{
		tmpreg = NewState << EPWM_ETCTL_TOADENB_POS;
    143e:	48 7b       	LSL       R9, #16
KF32A9K1XXX.h:13917
    1440:	28 4b       	CLR       R5, #16
    1442:	89 58       	MOV       R4, R9
    1444:	6c d7       	ORL       R5, R4, R5
..\src\kf32a9k1xxx_epwm.c:1304
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_TOADENB, tmpreg);
    1446:	75 a3       	ST.W      [R6 + #13], R5
..\src\kf32a9k1xxx_epwm.c:1311
	else if(Event == EPWM_TRIGGER_AD_EVENT0)
	{
		tmpreg = NewState << EPWM_ETCTL_TOADENA_POS;
		EPWMx->ETCTL = SFR_Config(EPWMx->ETCTL, ~EPWM_ETCTL_TOADENA, tmpreg);
	}
}
    1448:	0f 5e       	POP       {R6-R9}
    144a:	0d 5d       	POP       LR
    144c:	1d 5c       	JMP       LR
	...

00001450 <EPWM_Global_Loading_Enable>:
EPWM_Global_Loading_Enable():
..\src\kf32a9k1xxx_epwm.c:1595
 * 					FALSE : 选择全局加载
 * 返回  无
 */
void
EPWM_Global_Loading_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
    1450:	87 5f       	PUSH      {R6-R8,LR}
    1452:	c0 58       	MOV       R6, R0
    1454:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_epwm.c:1599
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    1456:	10 45       	LD        R5, [PC + #16]        ;->0x1494  :=0x40001a00
    1458:	05 70       	CMP       R0, R5
    145a:	27 f0       	JZ        $+39                  ;->0x14a8
    145c:	0f 45       	LD        R5, [PC + #15]        ;->0x1498  :=0x40001300
    145e:	05 70       	CMP       R0, R5
    1460:	24 f0       	JZ        $+36                  ;->0x14a8
    1462:	0f 45       	LD        R5, [PC + #15]        ;->0x149c  :=0x40001380
    1464:	01 10       	MOV       R0, #1
    1466:	65 70       	CMP       R6, R5
    1468:	05 f0       	JZ        $+5                   ;->0x1472
    146a:	0e 45       	LD        R5, [PC + #14]        ;->0x14a0  :=0x40002e00
    146c:	65 70       	CMP       R6, R5
    146e:	02 f0       	JZ        $+2                   ;->0x1472
    1470:	00 10       	MOV       R0, #0
    1472:	0d 45       	LD        R5, [PC + #13]        ;->0x14a4  :=0x371a
    1474:	05 59       	MOV       R8, R5
    1476:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_epwm.c:1600
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1478:	01 10       	MOV       R0, #1
    147a:	70 70       	CMP       R7, R0
    147c:	02 f9       	JLS       $+2                   ;->0x1480
    147e:	00 10       	MOV       R0, #0
    1480:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_epwm.c:1603

	tmpreg = NewState << EPWM_UDCTL_GBUDEN_POS;
	EPWMx->UDCTL = SFR_Config(EPWMx->UDCTL, ~EPWM_UDCTL_GBUDEN, tmpreg);
    1482:	6e 9e       	LD.W      R5, [R6 + #25]
..\src\kf32a9k1xxx_epwm.c:1602

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	tmpreg = NewState << EPWM_UDCTL_GBUDEN_POS;
    1484:	bb 7b       	LSL       R7, #27
KF32A9K1XXX.h:13917
    1486:	ab 4b       	CLR       R5, #27
    1488:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_epwm.c:1603
	EPWMx->UDCTL = SFR_Config(EPWMx->UDCTL, ~EPWM_UDCTL_GBUDEN, tmpreg);
    148a:	77 a6       	ST.W      [R6 + #25], R7
..\src\kf32a9k1xxx_epwm.c:1604
}
    148c:	07 5e       	POP       {R6-R8}
    148e:	0d 5d       	POP       LR
    1490:	1d 5c       	JMP       LR
    1492:	00 00       	NOP      NOP      
    1494:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x1494  :=0x40001a00
    1498:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x1498  :=0x40001300
    149c:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x149c  :=0x40001380
    14a0:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x14a0  :=0x40002e00
    14a4:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_epwm.c:1599
EPWM_Global_Loading_Enable(EPWM_SFRmap* EPWMx, FunctionalState NewState)
{
	uint32_t tmpreg = 0;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_EPWM_ALL_PERIPH(EPWMx));
    14a8:	01 10       	MOV       R0, #1
    14aa:	e4 07       	SJMP      $-28                  ;->0x1472

000014ac <GPIO_Reset>:
GPIO_Reset():
..\src\kf32a9k1xxx_gpio.c:29
  * 输入  GPIOx: 指向GPIO内存结构的指针，取值为GPIOA_SFR~GPIOH_SFR。
  * 返回  无。
  **/
void
GPIO_Reset (GPIO_SFRmap * GPIOx)
{
    14ac:	81 5f       	PUSH      {R6,LR}
..\src\kf32a9k1xxx_gpio.c:31
	/*参数校验*/
	CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    14ae:	11 45       	LD        R5, [PC + #17]        ;->0x14f0  :=0x50000000
    14b0:	05 70       	CMP       R0, R5
    14b2:	31 f0       	JZ        $+49                  ;->0x1514
    14b4:	51 10       	MOV       R5, #1
    14b6:	10 44       	LD        R4, [PC + #16]        ;->0x14f4  :=0x50000040
    14b8:	04 70       	CMP       R0, R4
    14ba:	14 f0       	JZ        $+20                  ;->0x14e2
    14bc:	0f 44       	LD        R4, [PC + #15]        ;->0x14f8  :=0x50000080
    14be:	04 70       	CMP       R0, R4
    14c0:	11 f0       	JZ        $+17                  ;->0x14e2
    14c2:	0f 44       	LD        R4, [PC + #15]        ;->0x14fc  :=0x500000c0
    14c4:	04 70       	CMP       R0, R4
    14c6:	0e f0       	JZ        $+14                  ;->0x14e2
    14c8:	0e 44       	LD        R4, [PC + #14]        ;->0x1500  :=0x50000100
    14ca:	04 70       	CMP       R0, R4
    14cc:	0b f0       	JZ        $+11                  ;->0x14e2
    14ce:	0e 44       	LD        R4, [PC + #14]        ;->0x1504  :=0x50000140
    14d0:	04 70       	CMP       R0, R4
    14d2:	08 f0       	JZ        $+8                   ;->0x14e2
    14d4:	0d 44       	LD        R4, [PC + #13]        ;->0x1508  :=0x50000180
    14d6:	04 70       	CMP       R0, R4
    14d8:	05 f0       	JZ        $+5                   ;->0x14e2
    14da:	0d 44       	LD        R4, [PC + #13]        ;->0x150c  :=0x500001c0
    14dc:	04 70       	CMP       R0, R4
    14de:	02 f0       	JZ        $+2                   ;->0x14e2
    14e0:	50 10       	MOV       R5, #0
    14e2:	05 58       	MOV       R0, R5
    14e4:	0b 45       	LD        R5, [PC + #11]        ;->0x1510  :=0x371a
    14e6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:88
	    else
	    {
	        ;
	    }
	}
}
    14e8:	06 5d       	POP       R6
    14ea:	0d 5d       	POP       LR
    14ec:	1d 5c       	JMP       LR
    14ee:	00 00       	NOP      NOP      
    14f0:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    14f4:	40 00 00 50 	.long     0x50000040 ->1342177344 
    14f8:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xb4f8
    14fc:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    1500:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    1504:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    1508:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    150c:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    1510:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_gpio.c:31
  **/
void
GPIO_Reset (GPIO_SFRmap * GPIOx)
{
	/*参数校验*/
	CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    1514:	01 10       	MOV       R0, #1
    1516:	09 45       	LD        R5, [PC + #9]         ;->0x1538  :=0x371a
    1518:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:37

	if(GPIOx == GPIOA_SFR)
	{
	    if (GPIOx == GPIOA_SFR)
	    {
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOARST, TRUE);
    151a:	01 10       	MOV       R0, #1
    151c:	20 58       	MOV       R1, R0
    151e:	08 46       	LD        R6, [PC + #8]         ;->0x153c  :=0x1fb4
    1520:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_gpio.c:38
	        RST_CTL0_Peripheral_Reset_Enable(RST_CTL0_GPIOARST, FALSE);
    1522:	01 10       	MOV       R0, #1
    1524:	10 10       	MOV       R1, #0
    1526:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_gpio.c:39
	        PCLK_CTL0_Peripheral_Clock_Enable(PCLK_CTL0_GPIOACLKEN, TRUE);
    1528:	01 10       	MOV       R0, #1
    152a:	20 58       	MOV       R1, R0
    152c:	05 45       	LD        R5, [PC + #5]         ;->0x1540  :=0x1e7c
    152e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:88
	    else
	    {
	        ;
	    }
	}
}
    1530:	06 5d       	POP       R6
    1532:	0d 5d       	POP       LR
    1534:	1d 5c       	JMP       LR
    1536:	00 00       	NOP      NOP      
    1538:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    153c:	b4 1f 00 00 	.long     0x00001fb4 ->000008116  [!!!@2@:MOV       R11, #244	@@: NOP      
    1540:	7c 1e 00 00 	.long     0x00001e7c ->000007804  [!!!@2@:MOV       R7, #236	@@: NOP      

00001544 <GPIO_Configuration>:
GPIO_Configuration():
..\src\kf32a9k1xxx_gpio.c:98
  *       gpioInitStruct: GPIO配置信息结构体指针。
  * 返回  无。
  **/
void
GPIO_Configuration (GPIO_SFRmap* GPIOx, GPIO_InitTypeDef* gpioInitStruct)
{
    1544:	ff 5f       	PUSH      {R6-R12,LR}
    1546:	e0 58       	MOV       R7, R0
    1548:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_gpio.c:105
    uint32_t pos = 0x00;
    uint32_t currentpin = 0x00;
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    154a:	01 10       	MOV       R0, #1
    154c:	3d 45       	LD        R5, [PC + #61]        ;->0x1640  :=0x50000000
    154e:	75 70       	CMP       R7, R5
    1550:	17 f0       	JZ        $+23                  ;->0x157e
    1552:	3d 45       	LD        R5, [PC + #61]        ;->0x1644  :=0x50000040
    1554:	75 70       	CMP       R7, R5
    1556:	14 f0       	JZ        $+20                  ;->0x157e
    1558:	3c 45       	LD        R5, [PC + #60]        ;->0x1648  :=0x50000080
    155a:	75 70       	CMP       R7, R5
    155c:	11 f0       	JZ        $+17                  ;->0x157e
    155e:	3c 45       	LD        R5, [PC + #60]        ;->0x164c  :=0x500000c0
    1560:	75 70       	CMP       R7, R5
    1562:	0e f0       	JZ        $+14                  ;->0x157e
    1564:	3b 45       	LD        R5, [PC + #59]        ;->0x1650  :=0x50000100
    1566:	75 70       	CMP       R7, R5
    1568:	0b f0       	JZ        $+11                  ;->0x157e
    156a:	3b 45       	LD        R5, [PC + #59]        ;->0x1654  :=0x50000140
    156c:	75 70       	CMP       R7, R5
    156e:	08 f0       	JZ        $+8                   ;->0x157e
    1570:	3a 45       	LD        R5, [PC + #58]        ;->0x1658  :=0x50000180
    1572:	75 70       	CMP       R7, R5
    1574:	05 f0       	JZ        $+5                   ;->0x157e
    1576:	3a 45       	LD        R5, [PC + #58]        ;->0x165c  :=0x500001c0
    1578:	75 70       	CMP       R7, R5
    157a:	02 f0       	JZ        $+2                   ;->0x157e
    157c:	00 10       	MOV       R0, #0
    157e:	39 41       	LD        R1, [PC + #57]        ;->0x1660  :=0x371a
    1580:	81 59       	MOV       R12, R1
    1582:	01 5c       	LJMP      R1
..\src\kf32a9k1xxx_gpio.c:106
    CHECK_RESTRICTION(CHECK_GPIO_PIN_MASK(gpioInitStruct->m_Pin));
    1584:	48 58       	MOV       R2, R8
    1586:	52 a8       	LD.H      R2, [R2 + #1]
    1588:	52 d0       	ZXT.H     R5, R2
    158a:	01 10       	MOV       R0, #1
    158c:	50 38       	CMP       R5, #0
    158e:	02 f0       	JZ        $+2                   ;->0x1592
    1590:	00 10       	MOV       R0, #0
    1592:	0c 5c       	LJMP      R12
..\src\kf32a9k1xxx_gpio.c:107
    CHECK_RESTRICTION(CHECK_GPIO_MODE(gpioInitStruct->m_Mode));
    1594:	01 10       	MOV       R0, #1
    1596:	68 58       	MOV       R3, R8
    1598:	6b 98       	LD.W      R5, [R3 + #1]
    159a:	53 38       	CMP       R5, #3
    159c:	02 f9       	JLS       $+2                   ;->0x15a0
    159e:	00 10       	MOV       R0, #0
    15a0:	0c 5c       	LJMP      R12
..\src\kf32a9k1xxx_gpio.c:108
    CHECK_RESTRICTION(CHECK_GPIO_SPEED(gpioInitStruct->m_Speed));
    15a2:	01 10       	MOV       R0, #1
    15a4:	88 58       	MOV       R4, R8
    15a6:	ac 98       	LD.W      R5, [R4 + #2]
    15a8:	50 70       	CMP       R5, R0
    15aa:	02 f9       	JLS       $+2                   ;->0x15ae
    15ac:	00 10       	MOV       R0, #0
    15ae:	0c 5c       	LJMP      R12
..\src\kf32a9k1xxx_gpio.c:109
    CHECK_RESTRICTION(CHECK_GPIO_PU(gpioInitStruct->m_PullUp));
    15b0:	01 10       	MOV       R0, #1
    15b2:	28 58       	MOV       R1, R8
    15b4:	29 99       	LD.W      R5, [R1 + #4]
    15b6:	50 70       	CMP       R5, R0
    15b8:	02 f9       	JLS       $+2                   ;->0x15bc
    15ba:	00 10       	MOV       R0, #0
    15bc:	0c 5c       	LJMP      R12
..\src\kf32a9k1xxx_gpio.c:110
    CHECK_RESTRICTION(CHECK_GPIO_PD(gpioInitStruct->m_PullDown));
    15be:	01 10       	MOV       R0, #1
    15c0:	48 58       	MOV       R2, R8
    15c2:	6a 99       	LD.W      R5, [R2 + #5]
    15c4:	50 70       	CMP       R5, R0
    15c6:	02 f9       	JLS       $+2                   ;->0x15ca
    15c8:	00 10       	MOV       R0, #0
    15ca:	0c 5c       	LJMP      R12
..\src\kf32a9k1xxx_gpio.c:113

    /* 配置一个引脚信息 */
    for(pinpos = 0x00; pinpos < 0x10; pinpos++)
    15cc:	60 10       	MOV       R6, #0
..\src\kf32a9k1xxx_gpio.c:115
    {
    	pos = ((uint32_t)0x01) << pinpos;
    15ce:	b1 10       	MOV       R11, #1
    15d0:	04 04       	SJMP      $+4                   ;->0x15d8
..\src\kf32a9k1xxx_gpio.c:113
    CHECK_RESTRICTION(CHECK_GPIO_SPEED(gpioInitStruct->m_Speed));
    CHECK_RESTRICTION(CHECK_GPIO_PU(gpioInitStruct->m_PullUp));
    CHECK_RESTRICTION(CHECK_GPIO_PD(gpioInitStruct->m_PullDown));

    /* 配置一个引脚信息 */
    for(pinpos = 0x00; pinpos < 0x10; pinpos++)
    15d2:	76 c0       	ADD       R6, R6, #1
    15d4:	60 39       	CMP       R6, #16
    15d6:	31 f0       	JZ        $+49                  ;->0x1638
..\src\kf32a9k1xxx_gpio.c:115
    {
    	pos = ((uint32_t)0x01) << pinpos;
    15d8:	6b 58       	MOV       R3, R11
    15da:	ab db       	LSL       R5, R3, R6
..\src\kf32a9k1xxx_gpio.c:117
    	/* 获取引脚位置信息 */
    	currentpin = (gpioInitStruct->m_Pin) & pos;
    15dc:	48 82       	LD.W      R4, [R8]
    15de:	25 d5       	ANL       R4, R5, R4
    15e0:	24 59       	MOV       R9, R4
..\src\kf32a9k1xxx_gpio.c:119

    	if(currentpin == pos)
    15e2:	45 70       	CMP       R4, R5
    15e4:	f7 f1       	JNZ       $-9                   ;->0x15d2
..\src\kf32a9k1xxx_gpio.c:123
    	{
            /*----------- 设置GPIOx_PMOD寄存器 -----------*/
            /* 根据结构体成员m_Mode，设置PXPMDy位域 */
    		tmpreg = (((uint32_t)gpioInitStruct->m_Mode) << (pinpos * 2));
    15e6:	28 58       	MOV       R1, R8
    15e8:	69 98       	LD.W      R5, [R1 + #1]
..\src\kf32a9k1xxx_gpio.c:97
  * 输入  GPIOx: 指向GPIO内存结构的指针，取值为GPIOA_SFR~GPIOH_SFR。
  *       gpioInitStruct: GPIO配置信息结构体指针。
  * 返回  无。
  **/
void
GPIO_Configuration (GPIO_SFRmap* GPIOx, GPIO_InitTypeDef* gpioInitStruct)
    15ea:	96 c3       	ADD       R2, R6, R6
    15ec:	42 59       	MOV       R10, R2
..\src\kf32a9k1xxx_gpio.c:124
    	if(currentpin == pos)
    	{
            /*----------- 设置GPIOx_PMOD寄存器 -----------*/
            /* 根据结构体成员m_Mode，设置PXPMDy位域 */
    		tmpreg = (((uint32_t)gpioInitStruct->m_Mode) << (pinpos * 2));
    		GPIOx->PMOD = SFR_Config(GPIOx->PMOD,
    15ee:	5f 99       	LD.W      R3, [R7 + #5]
..\src\kf32a9k1xxx_gpio.c:125
    								~(GPIO_PMOD_PXPMD0 << (pinpos * 2)),
    15f0:	43 10       	MOV       R4, #3
    15f2:	a4 da       	LSL       R4, R4, R2
..\src\kf32a9k1xxx_gpio.c:124
    	if(currentpin == pos)
    	{
            /*----------- 设置GPIOx_PMOD寄存器 -----------*/
            /* 根据结构体成员m_Mode，设置PXPMDy位域 */
    		tmpreg = (((uint32_t)gpioInitStruct->m_Mode) << (pinpos * 2));
    		GPIOx->PMOD = SFR_Config(GPIOx->PMOD,
    15f4:	44 68       	NOT       R4, R4
KF32A9K1XXX.h:13917
    15f6:	e4 d4       	ANL       R4, R4, R3
..\src\kf32a9k1xxx_gpio.c:123

    	if(currentpin == pos)
    	{
            /*----------- 设置GPIOx_PMOD寄存器 -----------*/
            /* 根据结构体成员m_Mode，设置PXPMDy位域 */
    		tmpreg = (((uint32_t)gpioInitStruct->m_Mode) << (pinpos * 2));
    15f8:	9d da       	LSL       R3, R5, R2
KF32A9K1XXX.h:13917
    15fa:	e4 d6       	ORL       R4, R4, R3
..\src\kf32a9k1xxx_gpio.c:124
    		GPIOx->PMOD = SFR_Config(GPIOx->PMOD,
    15fc:	7c a1       	ST.W      [R7 + #5], R4
..\src\kf32a9k1xxx_gpio.c:129
    								~(GPIO_PMOD_PXPMD0 << (pinpos * 2)),
    								tmpreg);

            if ((gpioInitStruct->m_Mode == GPIO_MODE_OUT)
                || (gpioInitStruct->m_Mode == GPIO_MODE_RMP))
    15fe:	6d cc       	SUB       R5, R5, #1
..\src\kf32a9k1xxx_gpio.c:128
    		tmpreg = (((uint32_t)gpioInitStruct->m_Mode) << (pinpos * 2));
    		GPIOx->PMOD = SFR_Config(GPIOx->PMOD,
    								~(GPIO_PMOD_PXPMD0 << (pinpos * 2)),
    								tmpreg);

            if ((gpioInitStruct->m_Mode == GPIO_MODE_OUT)
    1600:	51 38       	CMP       R5, #1
    1602:	31 f9       	JLS       $+49                  ;->0x1664
    1604:	59 68       	NOT       R5, R9
..\src\kf32a9k1xxx_gpio.c:149
            }

            /*----------- 设置GPIOx_OMOD寄存器 -----------*/
            /* 根据结构体成员m_Speed，设置PXOMD位域 */
            tmpreg = ((uint32_t)gpioInitStruct->m_Speed) << (pinpos * 2);
            GPIOx->OMOD = SFR_Config(GPIOx->OMOD,
    1606:	a7 99       	LD.W      R4, [R7 + #6]
    1608:	31 10       	MOV       R3, #1
    160a:	33 68       	NOT       R3, R3
    160c:	3a 6c       	LSL       R3, R10
KF32A9K1XXX.h:13917
    160e:	23 d5       	ANL       R4, R3, R4
..\src\kf32a9k1xxx_gpio.c:148
                ;
            }

            /*----------- 设置GPIOx_OMOD寄存器 -----------*/
            /* 根据结构体成员m_Speed，设置PXOMD位域 */
            tmpreg = ((uint32_t)gpioInitStruct->m_Speed) << (pinpos * 2);
    1610:	48 58       	MOV       R2, R8
    1612:	9a 98       	LD.W      R3, [R2 + #2]
    1614:	3a 6c       	LSL       R3, R10
KF32A9K1XXX.h:13917
    1616:	e4 d6       	ORL       R4, R4, R3
..\src\kf32a9k1xxx_gpio.c:149
            GPIOx->OMOD = SFR_Config(GPIOx->OMOD,
    1618:	bc a1       	ST.W      [R7 + #6], R4
..\src\kf32a9k1xxx_gpio.c:156
            					tmpreg);

            /*----------- 设置GPIOx_PUR寄存器 -----------*/
            /* 根据结构体成员m_PullUp，设置PXPUR位域 */
            tmpreg = (((uint32_t)gpioInitStruct->m_PullUp) << (pinpos));
            GPIOx->PUR = SFR_Config(GPIOx->PUR,
    161a:	a7 98       	LD.W      R4, [R7 + #2]
KF32A9K1XXX.h:13917
    161c:	25 d5       	ANL       R4, R5, R4
..\src\kf32a9k1xxx_gpio.c:155
            					~(GPIO_OMOD_PXOMD0) << (pinpos * 2),
            					tmpreg);

            /*----------- 设置GPIOx_PUR寄存器 -----------*/
            /* 根据结构体成员m_PullUp，设置PXPUR位域 */
            tmpreg = (((uint32_t)gpioInitStruct->m_PullUp) << (pinpos));
    161e:	0a 99       	LD.W      R1, [R2 + #4]
    1620:	99 db       	LSL       R3, R1, R6
KF32A9K1XXX.h:13917
    1622:	e4 d6       	ORL       R4, R4, R3
..\src\kf32a9k1xxx_gpio.c:156
            GPIOx->PUR = SFR_Config(GPIOx->PUR,
    1624:	bc a0       	ST.W      [R7 + #2], R4
..\src\kf32a9k1xxx_gpio.c:163
            					tmpreg);

            /*----------- 设置GPIOx_PDR寄存器 -----------*/
            /* 根据结构体成员m_PullDown，设置PXPDR位域 */
            tmpreg = (((uint32_t)gpioInitStruct->m_PullDown) << pinpos);
            GPIOx->PDR = SFR_Config(GPIOx->PDR,
    1626:	e7 98       	LD.W      R4, [R7 + #3]
KF32A9K1XXX.h:13917
    1628:	2d d5       	ANL       R5, R5, R4
..\src\kf32a9k1xxx_gpio.c:162
            					~(GPIO_PUR_PXPUR0 << pinpos),
            					tmpreg);

            /*----------- 设置GPIOx_PDR寄存器 -----------*/
            /* 根据结构体成员m_PullDown，设置PXPDR位域 */
            tmpreg = (((uint32_t)gpioInitStruct->m_PullDown) << pinpos);
    162a:	52 99       	LD.W      R2, [R2 + #5]
    162c:	a2 db       	LSL       R4, R2, R6
KF32A9K1XXX.h:13917
    162e:	2d d7       	ORL       R5, R5, R4
..\src\kf32a9k1xxx_gpio.c:163
            GPIOx->PDR = SFR_Config(GPIOx->PDR,
    1630:	fd a0       	ST.W      [R7 + #3], R5
..\src\kf32a9k1xxx_gpio.c:113
    CHECK_RESTRICTION(CHECK_GPIO_SPEED(gpioInitStruct->m_Speed));
    CHECK_RESTRICTION(CHECK_GPIO_PU(gpioInitStruct->m_PullUp));
    CHECK_RESTRICTION(CHECK_GPIO_PD(gpioInitStruct->m_PullDown));

    /* 配置一个引脚信息 */
    for(pinpos = 0x00; pinpos < 0x10; pinpos++)
    1632:	76 c0       	ADD       R6, R6, #1
    1634:	60 39       	CMP       R6, #16
    1636:	d1 f1       	JNZ       $-47                  ;->0x15d8
..\src\kf32a9k1xxx_gpio.c:172
    	else
    	{
    		;
    	}
    }
}
    1638:	7f 5e       	POP       {R6-R12}
    163a:	0d 5d       	POP       LR
    163c:	1d 5c       	JMP       LR
    163e:	00 00       	NOP      NOP      
    1640:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    1644:	40 00 00 50 	.long     0x50000040 ->1342177344 
    1648:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xb648
    164c:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    1650:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    1654:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    1658:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    165c:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    1660:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_gpio.c:132

            if ((gpioInitStruct->m_Mode == GPIO_MODE_OUT)
                || (gpioInitStruct->m_Mode == GPIO_MODE_RMP))
            {
                /* GPIO开漏控制参数校验 */
                CHECK_RESTRICTION(CHECK_GPIO_POD(gpioInitStruct->m_OpenDrain));
    1664:	01 10       	MOV       R0, #1
    1666:	e9 98       	LD.W      R5, [R1 + #3]
    1668:	50 70       	CMP       R5, R0
    166a:	0b f8       	JHI       $+11                  ;->0x1680
    166c:	0c 5c       	LJMP      R12
..\src\kf32a9k1xxx_gpio.c:137

                /*----------- 设置GPIOx_PODR寄存器 -----------*/
                /* 根据结构体成员m_OpenDrain，设置PXPODR位域 */
                tmpreg = (((uint32_t)gpioInitStruct->m_OpenDrain) << (pinpos));
                GPIOx->PODR = SFR_Config (GPIOx->PODR,
    166e:	27 99       	LD.W      R4, [R7 + #4]
    1670:	59 68       	NOT       R5, R9
KF32A9K1XXX.h:13917
    1672:	25 d5       	ANL       R4, R5, R4
..\src\kf32a9k1xxx_gpio.c:136
                /* GPIO开漏控制参数校验 */
                CHECK_RESTRICTION(CHECK_GPIO_POD(gpioInitStruct->m_OpenDrain));

                /*----------- 设置GPIOx_PODR寄存器 -----------*/
                /* 根据结构体成员m_OpenDrain，设置PXPODR位域 */
                tmpreg = (((uint32_t)gpioInitStruct->m_OpenDrain) << (pinpos));
    1674:	28 58       	MOV       R1, R8
    1676:	c9 98       	LD.W      R1, [R1 + #3]
    1678:	99 db       	LSL       R3, R1, R6
KF32A9K1XXX.h:13917
    167a:	e4 d6       	ORL       R4, R4, R3
..\src\kf32a9k1xxx_gpio.c:137
                GPIOx->PODR = SFR_Config (GPIOx->PODR,
    167c:	3c a1       	ST.W      [R7 + #4], R4
    167e:	c4 07       	SJMP      $-60                  ;->0x1606
..\src\kf32a9k1xxx_gpio.c:132

            if ((gpioInitStruct->m_Mode == GPIO_MODE_OUT)
                || (gpioInitStruct->m_Mode == GPIO_MODE_RMP))
            {
                /* GPIO开漏控制参数校验 */
                CHECK_RESTRICTION(CHECK_GPIO_POD(gpioInitStruct->m_OpenDrain));
    1680:	00 10       	MOV       R0, #0
    1682:	f5 07       	SJMP      $-11                  ;->0x166c

00001684 <GPIO_Struct_Init>:
GPIO_Struct_Init():
..\src\kf32a9k1xxx_gpio.c:183
  */
void
GPIO_Struct_Init (GPIO_InitTypeDef* gpioInitStruct)
{
    /* 初始化 GPIO端口掩码 */
    gpioInitStruct->m_Pin  = GPIO_PIN_MASK_All;
    1684:	05 45       	LD        R5, [PC + #5]         ;->0x1698  :=0xffff
    1686:	05 85       	ST.W      [R0], R5
..\src\kf32a9k1xxx_gpio.c:186

    /* 初始化 GPIO输出模式 */
    gpioInitStruct->m_Mode = GPIO_MODE_AN;
    1688:	53 10       	MOV       R5, #3
    168a:	45 a0       	ST.W      [R0 + #1], R5
..\src\kf32a9k1xxx_gpio.c:189

    /* 初始化 GPIO输出速度 */
    gpioInitStruct->m_Speed = GPIO_LOW_SPEED;
    168c:	50 10       	MOV       R5, #0
    168e:	85 a0       	ST.W      [R0 + #2], R5
..\src\kf32a9k1xxx_gpio.c:192

    /* 初始化 GPIO开漏控制 */
    gpioInitStruct->m_OpenDrain = GPIO_POD_PP;
    1690:	c5 a0       	ST.W      [R0 + #3], R5
..\src\kf32a9k1xxx_gpio.c:195

    /* 初始化 GPIO上拉配置 */
    gpioInitStruct->m_PullUp = GPIO_NOPULL;
    1692:	05 a1       	ST.W      [R0 + #4], R5
..\src\kf32a9k1xxx_gpio.c:198

    /* 初始化 GPIO下拉配置 */
    gpioInitStruct->m_PullDown = GPIO_NOPULL;
    1694:	45 a1       	ST.W      [R0 + #5], R5
..\src\kf32a9k1xxx_gpio.c:199
}
    1696:	1d 5c       	JMP       LR
    1698:	ff ff 00 00 	.long     0x0000ffff ->000065535 

0000169c <GPIO_Write_Mode_Bits>:
GPIO_Write_Mode_Bits():
..\src\kf32a9k1xxx_gpio.c:400
  * 返回  无。
  */
void
GPIO_Write_Mode_Bits (GPIO_SFRmap* GPIOx,
					uint16_t GpioPin, GPIOMode_TypeDef NewState)
{
    169c:	8f 5f       	PUSH      {R6-R9,LR}
    169e:	e0 58       	MOV       R7, R0
    16a0:	02 59       	MOV       R8, R2
    16a2:	61 d0       	ZXT.H     R6, R1
..\src\kf32a9k1xxx_gpio.c:405
	uint32_t pinpos = 0x00;
	uint32_t tmpreg = 0x00;

	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    16a4:	01 10       	MOV       R0, #1
    16a6:	1d 45       	LD        R5, [PC + #29]        ;->0x1718  :=0x50000000
    16a8:	75 70       	CMP       R7, R5
    16aa:	17 f0       	JZ        $+23                  ;->0x16d8
    16ac:	1c 45       	LD        R5, [PC + #28]        ;->0x171c  :=0x50000040
    16ae:	75 70       	CMP       R7, R5
    16b0:	14 f0       	JZ        $+20                  ;->0x16d8
    16b2:	1c 45       	LD        R5, [PC + #28]        ;->0x1720  :=0x50000080
    16b4:	75 70       	CMP       R7, R5
    16b6:	11 f0       	JZ        $+17                  ;->0x16d8
    16b8:	1b 45       	LD        R5, [PC + #27]        ;->0x1724  :=0x500000c0
    16ba:	75 70       	CMP       R7, R5
    16bc:	0e f0       	JZ        $+14                  ;->0x16d8
    16be:	1b 45       	LD        R5, [PC + #27]        ;->0x1728  :=0x50000100
    16c0:	75 70       	CMP       R7, R5
    16c2:	0b f0       	JZ        $+11                  ;->0x16d8
    16c4:	1a 45       	LD        R5, [PC + #26]        ;->0x172c  :=0x50000140
    16c6:	75 70       	CMP       R7, R5
    16c8:	08 f0       	JZ        $+8                   ;->0x16d8
    16ca:	1a 45       	LD        R5, [PC + #26]        ;->0x1730  :=0x50000180
    16cc:	75 70       	CMP       R7, R5
    16ce:	05 f0       	JZ        $+5                   ;->0x16d8
    16d0:	19 45       	LD        R5, [PC + #25]        ;->0x1734  :=0x500001c0
    16d2:	75 70       	CMP       R7, R5
    16d4:	02 f0       	JZ        $+2                   ;->0x16d8
    16d6:	00 10       	MOV       R0, #0
    16d8:	18 45       	LD        R5, [PC + #24]        ;->0x1738  :=0x371a
    16da:	25 59       	MOV       R9, R5
    16dc:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_gpio.c:406
	CHECK_RESTRICTION(CHECK_GPIO_PIN_MASK(GpioPin));
    16de:	01 10       	MOV       R0, #1
    16e0:	09 5c       	LJMP      R9
..\src\kf32a9k1xxx_gpio.c:407
	CHECK_RESTRICTION(CHECK_GPIO_MODE(NewState));
    16e2:	01 10       	MOV       R0, #1
    16e4:	83 38       	CMP       R8, #3
    16e6:	02 f9       	JLS       $+2                   ;->0x16ea
    16e8:	00 10       	MOV       R0, #0
    16ea:	09 5c       	LJMP      R9
..\src\kf32a9k1xxx_gpio.c:410

	/*----------- 获取GPIOx_PMOD寄存器 -----------*/
	tmpreg = GPIOx->PMOD;
    16ec:	5f 99       	LD.W      R3, [R7 + #5]
..\src\kf32a9k1xxx_gpio.c:411
	while(GpioPin)
    16ee:	60 38       	CMP       R6, #0
    16f0:	10 f0       	JZ        $+16                  ;->0x1710
    16f2:	50 10       	MOV       R5, #0
..\src\kf32a9k1xxx_gpio.c:413
	{
		if(GpioPin & (uint16_t)0x01)
    16f4:	11 10       	MOV       R1, #1
..\src\kf32a9k1xxx_gpio.c:416
		{
            /* 记录配置信息 */
            tmpreg &= ~(GPIO_PMOD_PXPMD0 << pinpos);
    16f6:	23 10       	MOV       R2, #3
..\src\kf32a9k1xxx_gpio.c:413

	/*----------- 获取GPIOx_PMOD寄存器 -----------*/
	tmpreg = GPIOx->PMOD;
	while(GpioPin)
	{
		if(GpioPin & (uint16_t)0x01)
    16f8:	66 d4       	ANL       R4, R6, R1
    16fa:	07 f0       	JZ        $+7                   ;->0x1708
..\src\kf32a9k1xxx_gpio.c:416
		{
            /* 记录配置信息 */
            tmpreg &= ~(GPIO_PMOD_PXPMD0 << pinpos);
    16fc:	62 db       	LSL       R4, R2, R5
    16fe:	44 68       	NOT       R4, R4
    1700:	dc d4       	ANL       R3, R4, R3
..\src\kf32a9k1xxx_gpio.c:417
            tmpreg |= (uint32_t)NewState << pinpos;
    1702:	08 58       	MOV       R0, R8
    1704:	60 db       	LSL       R4, R0, R5
    1706:	1b d7       	ORL       R3, R3, R4
..\src\kf32a9k1xxx_gpio.c:423
		}
		else
		{
			;
		}
		GpioPin >>= 1;
    1708:	31 7c       	LSR       R6, #1
..\src\kf32a9k1xxx_gpio.c:424
		pinpos += 2;
    170a:	ad c0       	ADD       R5, R5, #2
..\src\kf32a9k1xxx_gpio.c:411
	CHECK_RESTRICTION(CHECK_GPIO_PIN_MASK(GpioPin));
	CHECK_RESTRICTION(CHECK_GPIO_MODE(NewState));

	/*----------- 获取GPIOx_PMOD寄存器 -----------*/
	tmpreg = GPIOx->PMOD;
	while(GpioPin)
    170c:	60 38       	CMP       R6, #0
    170e:	f5 f1       	JNZ       $-11                  ;->0x16f8
..\src\kf32a9k1xxx_gpio.c:428
		GpioPin >>= 1;
		pinpos += 2;
	}

    /*----------- 配置GPIOx_PMOD寄存器 -----------*/
    GPIOx->PMOD = tmpreg;
    1710:	7b a1       	ST.W      [R7 + #5], R3
..\src\kf32a9k1xxx_gpio.c:429
}
    1712:	0f 5e       	POP       {R6-R9}
    1714:	0d 5d       	POP       LR
    1716:	1d 5c       	JMP       LR
    1718:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    171c:	40 00 00 50 	.long     0x50000040 ->1342177344 
    1720:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xb720
    1724:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    1728:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    172c:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    1730:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    1734:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    1738:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      

0000173c <GPIO_Read_Input_Data_Bit>:
GPIO_Read_Input_Data_Bit():
..\src\kf32a9k1xxx_gpio.c:528
  *       GpioPin: 指定端口引脚，取值为GPIO_PIN_MASK_0~GPIO_PIN_MASK_15中的一个。
  * 返回  指定引脚的信息，1：逻辑高电平，0：逻辑低电平。
  */
BitAction
GPIO_Read_Input_Data_Bit (GPIO_SFRmap* GPIOx, uint16_t GpioPin)
{
    173c:	87 5f       	PUSH      {R6-R8,LR}
    173e:	c0 58       	MOV       R6, R0
    1740:	81 d0       	ZXT.H     R8, R1
..\src\kf32a9k1xxx_gpio.c:532
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    1742:	01 10       	MOV       R0, #1
    1744:	13 45       	LD        R5, [PC + #19]        ;->0x1790  :=0x50000000
    1746:	65 70       	CMP       R6, R5
    1748:	17 f0       	JZ        $+23                  ;->0x1776
    174a:	13 45       	LD        R5, [PC + #19]        ;->0x1794  :=0x50000040
    174c:	65 70       	CMP       R6, R5
    174e:	14 f0       	JZ        $+20                  ;->0x1776
    1750:	12 45       	LD        R5, [PC + #18]        ;->0x1798  :=0x50000080
    1752:	65 70       	CMP       R6, R5
    1754:	11 f0       	JZ        $+17                  ;->0x1776
    1756:	12 45       	LD        R5, [PC + #18]        ;->0x179c  :=0x500000c0
    1758:	65 70       	CMP       R6, R5
    175a:	0e f0       	JZ        $+14                  ;->0x1776
    175c:	11 45       	LD        R5, [PC + #17]        ;->0x17a0  :=0x50000100
    175e:	65 70       	CMP       R6, R5
    1760:	0b f0       	JZ        $+11                  ;->0x1776
    1762:	11 45       	LD        R5, [PC + #17]        ;->0x17a4  :=0x50000140
    1764:	65 70       	CMP       R6, R5
    1766:	08 f0       	JZ        $+8                   ;->0x1776
    1768:	10 45       	LD        R5, [PC + #16]        ;->0x17a8  :=0x50000180
    176a:	65 70       	CMP       R6, R5
    176c:	05 f0       	JZ        $+5                   ;->0x1776
    176e:	10 45       	LD        R5, [PC + #16]        ;->0x17ac  :=0x500001c0
    1770:	65 70       	CMP       R6, R5
    1772:	02 f0       	JZ        $+2                   ;->0x1776
    1774:	00 10       	MOV       R0, #0
    1776:	0f 47       	LD        R7, [PC + #15]        ;->0x17b0  :=0x371a
    1778:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_gpio.c:533
    CHECK_RESTRICTION(CHECK_GPIO_PIN_MASK(GpioPin));
    177a:	01 10       	MOV       R0, #1
    177c:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_gpio.c:537

    /*---------------- 获取GPIOx_PIR寄存器PXPIRy位 ----------------*/
    tmpreg = (uint32_t)GpioPin;
    if ((GPIOx->PIR & tmpreg) != Bit_RESET)
    177e:	06 82       	LD.W      R0, [R6]
    1780:	80 69       	ANL       R8, R0
    1782:	00 10       	MOV       R0, #0
    1784:	08 66       	SUB       R0, R8
..\src\kf32a9k1xxx_gpio.c:547
    else
    {
        /* 逻辑低电平 */
        return Bit_RESET;
    }
}
    1786:	87 7d       	LSR       R0, #31
    1788:	07 5e       	POP       {R6-R8}
    178a:	0d 5d       	POP       LR
    178c:	1d 5c       	JMP       LR
    178e:	00 00       	NOP      NOP      
    1790:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    1794:	40 00 00 50 	.long     0x50000040 ->1342177344 
    1798:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xb798
    179c:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    17a0:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    17a4:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    17a8:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    17ac:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    17b0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      

000017b4 <GPIO_Pin_RMP_Config>:
GPIO_Pin_RMP_Config():
..\src\kf32a9k1xxx_gpio.c:700
  *
  * 返回  无。
  */
void
GPIO_Pin_RMP_Config(GPIO_SFRmap* GPIOx, uint16_t GpioPinNum, uint32_t PinRemap)
{
    17b4:	bf 5f       	PUSH      {R6-R11,LR}
    17b6:	c0 58       	MOV       R6, R0
    17b8:	42 59       	MOV       R10, R2
    17ba:	71 d0       	ZXT.H     R7, R1
..\src\kf32a9k1xxx_gpio.c:703
    uint32_t tmask = 0x00;
    uint32_t tmpreg = 0x00;
    uint32_t PageNum = (PinRemap&0x300)>>8;
    17bc:	2a 45       	LD        R5, [PC + #42]        ;->0x1864  :=0x300
    17be:	6a d5       	ANL       R5, R2, R5
    17c0:	a8 7c       	LSR       R5, #8
    17c2:	05 59       	MOV       R8, R5
..\src\kf32a9k1xxx_gpio.c:706

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    17c4:	01 10       	MOV       R0, #1
    17c6:	29 45       	LD        R5, [PC + #41]        ;->0x1868  :=0x50000000
    17c8:	65 70       	CMP       R6, R5
    17ca:	17 f0       	JZ        $+23                  ;->0x17f8
    17cc:	28 45       	LD        R5, [PC + #40]        ;->0x186c  :=0x50000040
    17ce:	65 70       	CMP       R6, R5
    17d0:	14 f0       	JZ        $+20                  ;->0x17f8
    17d2:	28 45       	LD        R5, [PC + #40]        ;->0x1870  :=0x50000080
    17d4:	65 70       	CMP       R6, R5
    17d6:	11 f0       	JZ        $+17                  ;->0x17f8
    17d8:	27 45       	LD        R5, [PC + #39]        ;->0x1874  :=0x500000c0
    17da:	65 70       	CMP       R6, R5
    17dc:	0e f0       	JZ        $+14                  ;->0x17f8
    17de:	27 45       	LD        R5, [PC + #39]        ;->0x1878  :=0x50000100
    17e0:	65 70       	CMP       R6, R5
    17e2:	0b f0       	JZ        $+11                  ;->0x17f8
    17e4:	26 45       	LD        R5, [PC + #38]        ;->0x187c  :=0x50000140
    17e6:	65 70       	CMP       R6, R5
    17e8:	08 f0       	JZ        $+8                   ;->0x17f8
    17ea:	26 45       	LD        R5, [PC + #38]        ;->0x1880  :=0x50000180
    17ec:	65 70       	CMP       R6, R5
    17ee:	05 f0       	JZ        $+5                   ;->0x17f8
    17f0:	25 45       	LD        R5, [PC + #37]        ;->0x1884  :=0x500001c0
    17f2:	65 70       	CMP       R6, R5
    17f4:	02 f0       	JZ        $+2                   ;->0x17f8
    17f6:	00 10       	MOV       R0, #0
    17f8:	24 44       	LD        R4, [PC + #36]        ;->0x1888  :=0x371a
    17fa:	24 59       	MOV       R9, R4
    17fc:	04 5c       	LJMP      R4
..\src\kf32a9k1xxx_gpio.c:707
    CHECK_RESTRICTION(CHECK_GPIO_PIN_NUM(GpioPinNum));
    17fe:	b1 10       	MOV       R11, #1
    1800:	7f 38       	CMP       R7, #15
    1802:	02 f9       	JLS       $+2                   ;->0x1806
    1804:	b0 10       	MOV       R11, #0
    1806:	bb d1       	ZXT.B     R11, R11
    1808:	0b 58       	MOV       R0, R11
    180a:	09 5c       	LJMP      R9
..\src\kf32a9k1xxx_gpio.c:708
    switch(PageNum)
    180c:	82 38       	CMP       R8, #2
    180e:	61 f0       	JZ        $+97                  ;->0x18d0
    1810:	83 38       	CMP       R8, #3
    1812:	46 f0       	JZ        $+70                  ;->0x189e
    1814:	81 38       	CMP       R8, #1
    1816:	3b f0       	JZ        $+59                  ;->0x188c
..\src\kf32a9k1xxx_gpio.c:723
    	break;
    default:break;
    }

    /* 配置GPIOx_RMP_MSB寄存器 */
    tmask = ((uint32_t)1 << (GpioPinNum+16)) + ((uint32_t)1 << GpioPinNum);
    1818:	50 11       	MOV       R5, #16
    181a:	67 c3       	ADD       R4, R7, R5
..\src\kf32a9k1xxx_gpio.c:724
    tmpreg = ((uint32_t)((PageNum-1)/2) << (GpioPinNum+16)) + ((uint32_t)((PageNum-1)%2) << GpioPinNum);
    181c:	a8 58       	MOV       R5, R8
    181e:	5d cc       	SUB       R3, R5, #1
..\src\kf32a9k1xxx_gpio.c:725
    GPIOx->RMP_MSB = SFR_Config(GPIOx->RMP_MSB,~tmask,tmpreg);
    1820:	56 9b       	LD.W      R2, [R6 + #13]
..\src\kf32a9k1xxx_gpio.c:724
    default:break;
    }

    /* 配置GPIOx_RMP_MSB寄存器 */
    tmask = ((uint32_t)1 << (GpioPinNum+16)) + ((uint32_t)1 << GpioPinNum);
    tmpreg = ((uint32_t)((PageNum-1)/2) << (GpioPinNum+16)) + ((uint32_t)((PageNum-1)%2) << GpioPinNum);
    1822:	51 10       	MOV       R5, #1
    1824:	4b d5       	ANL       R1, R3, R5
    1826:	c9 db       	LSL       R1, R1, R7
    1828:	5b dd       	LSR       R3, R3, R5
    182a:	1b db       	LSL       R3, R3, R4
    182c:	d9 c2       	ADD       R3, R1, R3
..\src\kf32a9k1xxx_gpio.c:723
    	break;
    default:break;
    }

    /* 配置GPIOx_RMP_MSB寄存器 */
    tmask = ((uint32_t)1 << (GpioPinNum+16)) + ((uint32_t)1 << GpioPinNum);
    182e:	25 db       	LSL       R4, R5, R4
    1830:	ed db       	LSL       R5, R5, R7
    1832:	6c c3       	ADD       R5, R4, R5
..\src\kf32a9k1xxx_gpio.c:725
    tmpreg = ((uint32_t)((PageNum-1)/2) << (GpioPinNum+16)) + ((uint32_t)((PageNum-1)%2) << GpioPinNum);
    GPIOx->RMP_MSB = SFR_Config(GPIOx->RMP_MSB,~tmask,tmpreg);
    1834:	55 68       	NOT       R5, R5
KF32A9K1XXX.h:13917
    1836:	ad d4       	ANL       R5, R5, R2
    1838:	5b d7       	ORL       R3, R3, R5
..\src\kf32a9k1xxx_gpio.c:725
    183a:	73 a3       	ST.W      [R6 + #13], R3
..\src\kf32a9k1xxx_gpio.c:728

    /* 配置GPIOx_RMPH\L寄存器 */
    if(GpioPinNum <= GPIO_Pin_Num_7)
    183c:	77 38       	CMP       R7, #7
    183e:	39 f9       	JLS       $+57                  ;->0x18b0
..\src\kf32a9k1xxx_gpio.c:734
    {
    	tmask = 0xF << (GpioPinNum*4);
    	tmpreg = (PinRemap&0xF) << (GpioPinNum*4);
    	GPIOx->RMP[0] = SFR_Config(GPIOx->RMP[0],~tmask,tmpreg);
    }
    else if(GpioPinNum <= GPIO_Pin_Num_15)
    1840:	b0 38       	CMP       R11, #0
    1842:	0d f0       	JZ        $+13                  ;->0x185c
..\src\kf32a9k1xxx_gpio.c:736
    {
    	tmask = 0xF << ((GpioPinNum - 8)*4);
    1844:	78 30       	SUB       R7, #8
    1846:	3a 7a       	LSL       R7, #2
..\src\kf32a9k1xxx_gpio.c:738
    	tmpreg = (PinRemap&0xF) << ((GpioPinNum - 8)*4);
    	GPIOx->RMP[1] = SFR_Config(GPIOx->RMP[1],~tmask,tmpreg);
    1848:	5e 9a       	LD.W      R3, [R6 + #9]
..\src\kf32a9k1xxx_gpio.c:736
    	tmpreg = (PinRemap&0xF) << (GpioPinNum*4);
    	GPIOx->RMP[0] = SFR_Config(GPIOx->RMP[0],~tmask,tmpreg);
    }
    else if(GpioPinNum <= GPIO_Pin_Num_15)
    {
    	tmask = 0xF << ((GpioPinNum - 8)*4);
    184a:	5f 10       	MOV       R5, #15
    184c:	e5 db       	LSL       R4, R5, R7
..\src\kf32a9k1xxx_gpio.c:738
    	tmpreg = (PinRemap&0xF) << ((GpioPinNum - 8)*4);
    	GPIOx->RMP[1] = SFR_Config(GPIOx->RMP[1],~tmask,tmpreg);
    184e:	44 68       	NOT       R4, R4
KF32A9K1XXX.h:13917
    1850:	e4 d4       	ANL       R4, R4, R3
..\src\kf32a9k1xxx_gpio.c:737
    	GPIOx->RMP[0] = SFR_Config(GPIOx->RMP[0],~tmask,tmpreg);
    }
    else if(GpioPinNum <= GPIO_Pin_Num_15)
    {
    	tmask = 0xF << ((GpioPinNum - 8)*4);
    	tmpreg = (PinRemap&0xF) << ((GpioPinNum - 8)*4);
    1852:	a5 69       	ANL       R10, R5
    1854:	aa 58       	MOV       R5, R10
    1856:	fd db       	LSL       R7, R5, R7
KF32A9K1XXX.h:13917
    1858:	fc d7       	ORL       R7, R4, R7
..\src\kf32a9k1xxx_gpio.c:738
    	GPIOx->RMP[1] = SFR_Config(GPIOx->RMP[1],~tmask,tmpreg);
    185a:	77 a2       	ST.W      [R6 + #9], R7
..\src\kf32a9k1xxx_gpio.c:740
    }
}
    185c:	3f 5e       	POP       {R6-R11}
    185e:	0d 5d       	POP       LR
    1860:	1d 5c       	JMP       LR
    1862:	00 00       	NOP      NOP      
    1864:	00 03 00 00 	.long     0x00000300 ->000000768  [!!!@4@:JMP       $+0                   ;->0x1864
    1868:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    186c:	40 00 00 50 	.long     0x50000040 ->1342177344 
    1870:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xb870
    1874:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    1878:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    187c:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    1880:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    1884:	c0 01 00 50 	.long     0x500001c0 ->1342177728  [!!!@2@:CMN       R12, R0	@@: JB        [R0], #0
    1888:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_gpio.c:711
    CHECK_RESTRICTION(CHECK_GPIO_ALL_PERIPH(GPIOx));
    CHECK_RESTRICTION(CHECK_GPIO_PIN_NUM(GpioPinNum));
    switch(PageNum)
    {
    case 0x01:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE1_REMAP(PinRemap));
    188c:	5f 1f       	MOV       R5, #255
    188e:	6d c0       	ADD       R5, R5, #1
    1890:	8a 58       	MOV       R4, R10
    1892:	6c c7       	SUB       R5, R4, R5
    1894:	08 58       	MOV       R0, R8
    1896:	5f 38       	CMP       R5, #15
    1898:	09 f8       	JHI       $+9                   ;->0x18aa
..\src\kf32a9k1xxx_gpio.c:717
    	break;
    case 0x02:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE2_REMAP(PinRemap));
    	break;
    case 0x03:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE3_REMAP(PinRemap));
    189a:	09 5c       	LJMP      R9
..\src\kf32a9k1xxx_gpio.c:718
    	break;
    189c:	be 07       	SJMP      $-66                  ;->0x1818
..\src\kf32a9k1xxx_gpio.c:717
    	break;
    case 0x02:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE2_REMAP(PinRemap));
    	break;
    case 0x03:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE3_REMAP(PinRemap));
    189e:	0c 45       	LD        R5, [PC + #12]        ;->0x18cc  :=0x300
    18a0:	8a 58       	MOV       R4, R10
    18a2:	6c c7       	SUB       R5, R4, R5
    18a4:	01 10       	MOV       R0, #1
    18a6:	5e 38       	CMP       R5, #14
    18a8:	f9 f9       	JLS       $-7                   ;->0x189a
    18aa:	00 10       	MOV       R0, #0
    18ac:	09 5c       	LJMP      R9
    18ae:	b5 07       	SJMP      $-75                  ;->0x1818
..\src\kf32a9k1xxx_gpio.c:730
    GPIOx->RMP_MSB = SFR_Config(GPIOx->RMP_MSB,~tmask,tmpreg);

    /* 配置GPIOx_RMPH\L寄存器 */
    if(GpioPinNum <= GPIO_Pin_Num_7)
    {
    	tmask = 0xF << (GpioPinNum*4);
    18b0:	3a 7a       	LSL       R7, #2
..\src\kf32a9k1xxx_gpio.c:732
    	tmpreg = (PinRemap&0xF) << (GpioPinNum*4);
    	GPIOx->RMP[0] = SFR_Config(GPIOx->RMP[0],~tmask,tmpreg);
    18b2:	1e 9a       	LD.W      R3, [R6 + #8]
..\src\kf32a9k1xxx_gpio.c:730
    GPIOx->RMP_MSB = SFR_Config(GPIOx->RMP_MSB,~tmask,tmpreg);

    /* 配置GPIOx_RMPH\L寄存器 */
    if(GpioPinNum <= GPIO_Pin_Num_7)
    {
    	tmask = 0xF << (GpioPinNum*4);
    18b4:	5f 10       	MOV       R5, #15
    18b6:	e5 db       	LSL       R4, R5, R7
..\src\kf32a9k1xxx_gpio.c:732
    	tmpreg = (PinRemap&0xF) << (GpioPinNum*4);
    	GPIOx->RMP[0] = SFR_Config(GPIOx->RMP[0],~tmask,tmpreg);
    18b8:	44 68       	NOT       R4, R4
KF32A9K1XXX.h:13917
    18ba:	e4 d4       	ANL       R4, R4, R3
..\src\kf32a9k1xxx_gpio.c:731

    /* 配置GPIOx_RMPH\L寄存器 */
    if(GpioPinNum <= GPIO_Pin_Num_7)
    {
    	tmask = 0xF << (GpioPinNum*4);
    	tmpreg = (PinRemap&0xF) << (GpioPinNum*4);
    18bc:	a5 69       	ANL       R10, R5
    18be:	aa 58       	MOV       R5, R10
    18c0:	fd db       	LSL       R7, R5, R7
KF32A9K1XXX.h:13917
    18c2:	fc d7       	ORL       R7, R4, R7
..\src\kf32a9k1xxx_gpio.c:732
    	GPIOx->RMP[0] = SFR_Config(GPIOx->RMP[0],~tmask,tmpreg);
    18c4:	37 a2       	ST.W      [R6 + #8], R7
..\src\kf32a9k1xxx_gpio.c:740
    {
    	tmask = 0xF << ((GpioPinNum - 8)*4);
    	tmpreg = (PinRemap&0xF) << ((GpioPinNum - 8)*4);
    	GPIOx->RMP[1] = SFR_Config(GPIOx->RMP[1],~tmask,tmpreg);
    }
}
    18c6:	3f 5e       	POP       {R6-R11}
    18c8:	0d 5d       	POP       LR
    18ca:	1d 5c       	JMP       LR
    18cc:	00 03 00 00 	.long     0x00000300 ->000000768  [!!!@4@:JMP       $+0                   ;->0x18cc
..\src\kf32a9k1xxx_gpio.c:714
    {
    case 0x01:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE1_REMAP(PinRemap));
    	break;
    case 0x02:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE2_REMAP(PinRemap));
    18d0:	51 10       	MOV       R5, #1
    18d2:	a9 7a       	LSL       R5, #9
    18d4:	8a 58       	MOV       R4, R10
    18d6:	6c c7       	SUB       R5, R4, R5
    18d8:	01 10       	MOV       R0, #1
    18da:	5c 38       	CMP       R5, #12
    18dc:	e7 f8       	JHI       $-25                  ;->0x18aa
..\src\kf32a9k1xxx_gpio.c:717
    	break;
    case 0x03:
    	CHECK_RESTRICTION(CHECK_GPIO_PAGE3_REMAP(PinRemap));
    18de:	09 5c       	LJMP      R9
    18e0:	9c 07       	SJMP      $-100                 ;->0x1818
	...

000018e4 <INT_Stack_Align_Config>:
INT_Stack_Align_Config():
..\src\kf32a9k1xxx_int.c:95
  *                     INT_STACK_SINGLE_ALIGN: 中断自动堆栈使用单字对齐
  * 返回  无。
  */
void
INT_Stack_Align_Config (uint32_t StackAlign)
{
    18e4:	2d 5d       	PUSH      LR
..\src\kf32a9k1xxx_int.c:96
    CHECK_RESTRICTION(CHECK_INT_STACK_ALIGN(StackAlign));
    18e6:	00 38       	CMP       R0, #0
    18e8:	12 f0       	JZ        $+18                  ;->0x190c
    18ea:	51 10       	MOV       R5, #1
    18ec:	40 18       	MOV       R4, #128
    18ee:	04 70       	CMP       R0, R4
    18f0:	02 f0       	JZ        $+2                   ;->0x18f4
    18f2:	50 10       	MOV       R5, #0
    18f4:	05 58       	MOV       R0, R5
    18f6:	04 45       	LD        R5, [PC + #4]         ;->0x1904  :=0x371a
    18f8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:102

    /*---------------- 设置INT_CTL0寄存器DSALIGN位 ----------------*/
    if (StackAlign != INT_STACK_DOUBLE_ALIGN)
    {
        /* 中断自动堆栈使用单字对齐 */
        SFR_SET_BIT_ASM(INT_CTL0, INT_CTL0_DSALIGN_POS);
    18fa:	04 45       	LD        R5, [PC + #4]         ;->0x1908  :=0x40200000
    18fc:	2f 4c       	SET       [R5], #7
..\src\kf32a9k1xxx_int.c:109
    else
    {
        /* 中断自动堆栈使用双字对齐 */
        SFR_CLR_BIT_ASM(INT_CTL0, INT_CTL0_DSALIGN_POS);
    }
}
    18fe:	0d 5d       	POP       LR
    1900:	1d 5c       	JMP       LR
    1902:	00 00       	NOP      NOP      
    1904:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1908:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x1988  :=0x6844dba4
..\src\kf32a9k1xxx_int.c:96
  * 返回  无。
  */
void
INT_Stack_Align_Config (uint32_t StackAlign)
{
    CHECK_RESTRICTION(CHECK_INT_STACK_ALIGN(StackAlign));
    190c:	01 10       	MOV       R0, #1
    190e:	04 45       	LD        R5, [PC + #4]         ;->0x191c  :=0x371a
    1910:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:107
        SFR_SET_BIT_ASM(INT_CTL0, INT_CTL0_DSALIGN_POS);
    }
    else
    {
        /* 中断自动堆栈使用双字对齐 */
        SFR_CLR_BIT_ASM(INT_CTL0, INT_CTL0_DSALIGN_POS);
    1912:	04 45       	LD        R5, [PC + #4]         ;->0x1920  :=0x40200000
    1914:	2f 4e       	CLR       [R5], #7
..\src\kf32a9k1xxx_int.c:109
    }
}
    1916:	0d 5d       	POP       LR
    1918:	1d 5c       	JMP       LR
    191a:	00 00       	NOP      NOP      
    191c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1920:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x19a0  :=0x40200000

00001924 <INT_All_Enable>:
INT_All_Enable():
..\src\kf32a9k1xxx_int.c:226
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
INT_All_Enable (FunctionalState NewState)
{
    1924:	81 5f       	PUSH      {R6,LR}
    1926:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_int.c:228
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1928:	01 10       	MOV       R0, #1
    192a:	60 70       	CMP       R6, R0
    192c:	02 f9       	JLS       $+2                   ;->0x1930
    192e:	00 10       	MOV       R0, #0
    1930:	05 45       	LD        R5, [PC + #5]         ;->0x1944  :=0x371a
    1932:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:234

    /*---------------- 设置INT_CTL0寄存器AIE位 ----------------*/
    if (NewState != FALSE)
    {
        /* 全局可屏蔽中断使能 */
        SFR_SET_BIT_ASM(INT_CTL0, INT_CTL0_AIE_POS);
    1934:	05 45       	LD        R5, [PC + #5]         ;->0x1948  :=0x40200000
..\src\kf32a9k1xxx_int.c:231
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*---------------- 设置INT_CTL0寄存器AIE位 ----------------*/
    if (NewState != FALSE)
    1936:	60 38       	CMP       R6, #0
    1938:	0a f1       	JNZ       $+10                  ;->0x194c
..\src\kf32a9k1xxx_int.c:239
        SFR_SET_BIT_ASM(INT_CTL0, INT_CTL0_AIE_POS);
    }
    else
    {
        /* 全局可屏蔽中断禁止 */
        SFR_CLR_BIT_ASM(INT_CTL0, INT_CTL0_AIE_POS);
    193a:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_int.c:241
    }
}
    193c:	06 5d       	POP       R6
    193e:	0d 5d       	POP       LR
    1940:	1d 5c       	JMP       LR
    1942:	00 00       	NOP      NOP      
    1944:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1948:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x19c8  :=0xdba41041
..\src\kf32a9k1xxx_int.c:234

    /*---------------- 设置INT_CTL0寄存器AIE位 ----------------*/
    if (NewState != FALSE)
    {
        /* 全局可屏蔽中断使能 */
        SFR_SET_BIT_ASM(INT_CTL0, INT_CTL0_AIE_POS);
    194c:	28 4c       	SET       [R5], #0
..\src\kf32a9k1xxx_int.c:241
    else
    {
        /* 全局可屏蔽中断禁止 */
        SFR_CLR_BIT_ASM(INT_CTL0, INT_CTL0_AIE_POS);
    }
}
    194e:	06 5d       	POP       R6
    1950:	0d 5d       	POP       LR
    1952:	1d 5c       	JMP       LR

00001954 <INT_Interrupt_Enable>:
INT_Interrupt_Enable():
..\src\kf32a9k1xxx_int.c:254
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
INT_Interrupt_Enable (InterruptIndex Peripheral, FunctionalState NewState)
{
    1954:	8f 5f       	PUSH      {R6-R9,LR}
    1956:	c0 58       	MOV       R6, R0
    1958:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_int.c:259
	uint32_t tmask = 0x00;
	uint32_t tmpreg = 0x00;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    195a:	01 10       	MOV       R0, #1
    195c:	6f 3c       	CMP       R6, #79
    195e:	02 f9       	JLS       $+2                   ;->0x1962
    1960:	00 10       	MOV       R0, #0
    1962:	90 d1       	ZXT.B     R9, R0
    1964:	09 58       	MOV       R0, R9
    1966:	0e 47       	LD        R7, [PC + #14]        ;->0x199c  :=0x371a
    1968:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_int.c:260
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    196a:	01 10       	MOV       R0, #1
    196c:	80 70       	CMP       R8, R0
    196e:	02 f9       	JLS       $+2                   ;->0x1972
    1970:	00 10       	MOV       R0, #0
    1972:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_int.c:262

    if(Peripheral <= INT_SysTick)
    1974:	6f 38       	CMP       R6, #15
    1976:	27 f9       	JLS       $+39                  ;->0x19c4
..\src\kf32a9k1xxx_int.c:269
    	/*---------------- 设置INT_EIE0寄存器 ----------------*/
    	tmask = ((uint32_t)1 << Peripheral);
    	tmpreg = ((uint32_t)NewState << Peripheral);
    	INT_EIE0 = SFR_Config(INT_EIE0, ~tmask, tmpreg);
    }
    else if(Peripheral <= INT_SPI1)
    1978:	6f 3a       	CMP       R6, #47
    197a:	15 f9       	JLS       $+21                  ;->0x19a4
..\src\kf32a9k1xxx_int.c:276
    	/*---------------- 设置INT_EIE1寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_WWDT));
    	tmpreg = ((uint32_t)NewState << (Peripheral - INT_WWDT));
    	INT_EIE1 = SFR_Config(INT_EIE1, ~tmask, tmpreg);
    }
    else if(Peripheral <= INT_USART7)
    197c:	90 38       	CMP       R9, #0
    197e:	0c f0       	JZ        $+12                  ;->0x1996
..\src\kf32a9k1xxx_int.c:279
    {
    	/*---------------- 设置INT_EIE2寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_DMA1));
    1980:	60 33       	SUB       R6, #48
..\src\kf32a9k1xxx_int.c:281
    	tmpreg = ((uint32_t)NewState << (Peripheral - INT_DMA1));
    	INT_EIE2 = SFR_Config(INT_EIE2, ~tmask, tmpreg);
    1982:	08 45       	LD        R5, [PC + #8]         ;->0x19a0  :=0x40200000
    1984:	5d 99       	LD.W      R3, [R5 + #5]
..\src\kf32a9k1xxx_int.c:279
    	INT_EIE1 = SFR_Config(INT_EIE1, ~tmask, tmpreg);
    }
    else if(Peripheral <= INT_USART7)
    {
    	/*---------------- 设置INT_EIE2寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_DMA1));
    1986:	41 10       	MOV       R4, #1
    1988:	a4 db       	LSL       R4, R4, R6
..\src\kf32a9k1xxx_int.c:281
    	tmpreg = ((uint32_t)NewState << (Peripheral - INT_DMA1));
    	INT_EIE2 = SFR_Config(INT_EIE2, ~tmask, tmpreg);
    198a:	44 68       	NOT       R4, R4
KF32A9K1XXX.h:13917
    198c:	e4 d4       	ANL       R4, R4, R3
..\src\kf32a9k1xxx_int.c:280
    }
    else if(Peripheral <= INT_USART7)
    {
    	/*---------------- 设置INT_EIE2寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_DMA1));
    	tmpreg = ((uint32_t)NewState << (Peripheral - INT_DMA1));
    198e:	68 58       	MOV       R3, R8
    1990:	b3 db       	LSL       R6, R3, R6
KF32A9K1XXX.h:13917
    1992:	b4 d7       	ORL       R6, R4, R6
..\src\kf32a9k1xxx_int.c:281
    	INT_EIE2 = SFR_Config(INT_EIE2, ~tmask, tmpreg);
    1994:	6e a1       	ST.W      [R5 + #5], R6
..\src\kf32a9k1xxx_int.c:287
    }
    else
    {
    	;
    }
}
    1996:	0f 5e       	POP       {R6-R9}
    1998:	0d 5d       	POP       LR
    199a:	1d 5c       	JMP       LR
    199c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    19a0:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x1a20  :=0x40200000
..\src\kf32a9k1xxx_int.c:272
    	INT_EIE0 = SFR_Config(INT_EIE0, ~tmask, tmpreg);
    }
    else if(Peripheral <= INT_SPI1)
    {
    	/*---------------- 设置INT_EIE1寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_WWDT));
    19a4:	60 31       	SUB       R6, #16
..\src\kf32a9k1xxx_int.c:274
    	tmpreg = ((uint32_t)NewState << (Peripheral - INT_WWDT));
    	INT_EIE1 = SFR_Config(INT_EIE1, ~tmask, tmpreg);
    19a6:	07 45       	LD        R5, [PC + #7]         ;->0x19c0  :=0x40200000
    19a8:	dd 98       	LD.W      R3, [R5 + #3]
..\src\kf32a9k1xxx_int.c:272
    	INT_EIE0 = SFR_Config(INT_EIE0, ~tmask, tmpreg);
    }
    else if(Peripheral <= INT_SPI1)
    {
    	/*---------------- 设置INT_EIE1寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_WWDT));
    19aa:	41 10       	MOV       R4, #1
    19ac:	a4 db       	LSL       R4, R4, R6
..\src\kf32a9k1xxx_int.c:274
    	tmpreg = ((uint32_t)NewState << (Peripheral - INT_WWDT));
    	INT_EIE1 = SFR_Config(INT_EIE1, ~tmask, tmpreg);
    19ae:	44 68       	NOT       R4, R4
KF32A9K1XXX.h:13917
    19b0:	e4 d4       	ANL       R4, R4, R3
..\src\kf32a9k1xxx_int.c:273
    }
    else if(Peripheral <= INT_SPI1)
    {
    	/*---------------- 设置INT_EIE1寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_WWDT));
    	tmpreg = ((uint32_t)NewState << (Peripheral - INT_WWDT));
    19b2:	68 58       	MOV       R3, R8
    19b4:	b3 db       	LSL       R6, R3, R6
KF32A9K1XXX.h:13917
    19b6:	b4 d7       	ORL       R6, R4, R6
..\src\kf32a9k1xxx_int.c:274
    	INT_EIE1 = SFR_Config(INT_EIE1, ~tmask, tmpreg);
    19b8:	ee a0       	ST.W      [R5 + #3], R6
..\src\kf32a9k1xxx_int.c:287
    }
    else
    {
    	;
    }
}
    19ba:	0f 5e       	POP       {R6-R9}
    19bc:	0d 5d       	POP       LR
    19be:	1d 5c       	JMP       LR
    19c0:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x1a40  :=0x99e54505
..\src\kf32a9k1xxx_int.c:267
    if(Peripheral <= INT_SysTick)
    {
    	/*---------------- 设置INT_EIE0寄存器 ----------------*/
    	tmask = ((uint32_t)1 << Peripheral);
    	tmpreg = ((uint32_t)NewState << Peripheral);
    	INT_EIE0 = SFR_Config(INT_EIE0, ~tmask, tmpreg);
    19c4:	07 45       	LD        R5, [PC + #7]         ;->0x19e0  :=0x40200000
    19c6:	5d 98       	LD.W      R3, [R5 + #1]
..\src\kf32a9k1xxx_int.c:265
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    if(Peripheral <= INT_SysTick)
    {
    	/*---------------- 设置INT_EIE0寄存器 ----------------*/
    	tmask = ((uint32_t)1 << Peripheral);
    19c8:	41 10       	MOV       R4, #1
    19ca:	a4 db       	LSL       R4, R4, R6
..\src\kf32a9k1xxx_int.c:267
    	tmpreg = ((uint32_t)NewState << Peripheral);
    	INT_EIE0 = SFR_Config(INT_EIE0, ~tmask, tmpreg);
    19cc:	44 68       	NOT       R4, R4
KF32A9K1XXX.h:13917
    19ce:	e4 d4       	ANL       R4, R4, R3
..\src\kf32a9k1xxx_int.c:266

    if(Peripheral <= INT_SysTick)
    {
    	/*---------------- 设置INT_EIE0寄存器 ----------------*/
    	tmask = ((uint32_t)1 << Peripheral);
    	tmpreg = ((uint32_t)NewState << Peripheral);
    19d0:	86 6c       	LSL       R8, R6
KF32A9K1XXX.h:13917
    19d2:	68 58       	MOV       R3, R8
    19d4:	f4 d6       	ORL       R6, R4, R3
..\src\kf32a9k1xxx_int.c:267
    	INT_EIE0 = SFR_Config(INT_EIE0, ~tmask, tmpreg);
    19d6:	6e a0       	ST.W      [R5 + #1], R6
..\src\kf32a9k1xxx_int.c:287
    }
    else
    {
    	;
    }
}
    19d8:	0f 5e       	POP       {R6-R9}
    19da:	0d 5d       	POP       LR
    19dc:	1d 5c       	JMP       LR
    19de:	00 00       	NOP      NOP      
    19e0:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x1a60  :=0x82654518

000019e4 <INT_Clear_Interrupt_Flag>:
INT_Clear_Interrupt_Flag():
..\src\kf32a9k1xxx_int.c:393
  *                   枚举类型InterruptIndex中的外设中断向量编号。
  * 返回  无。
  */
void
INT_Clear_Interrupt_Flag (InterruptIndex Peripheral)
{
    19e4:	83 5f       	PUSH      {R6-R7,LR}
    19e6:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_int.c:397
    uint32_t tmask = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    19e8:	01 10       	MOV       R0, #1
    19ea:	6f 3c       	CMP       R6, #79
    19ec:	02 f9       	JLS       $+2                   ;->0x19f0
    19ee:	00 10       	MOV       R0, #0
    19f0:	70 d1       	ZXT.B     R7, R0
    19f2:	07 58       	MOV       R0, R7
    19f4:	0a 45       	LD        R5, [PC + #10]        ;->0x1a1c  :=0x371a
    19f6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_int.c:399

    if(Peripheral <= INT_SysTick)
    19f8:	6f 38       	CMP       R6, #15
    19fa:	23 f9       	JLS       $+35                  ;->0x1a40
..\src\kf32a9k1xxx_int.c:405
    {
    	/*---------------- 读取INT_EIF0寄存器 ----------------*/
    	tmask = ((uint32_t)1 << Peripheral);
    	INT_EIF0 = SFR_Config(INT_EIF0,~tmask,0);
    }
    else if(Peripheral <= INT_SPI1)
    19fc:	6f 3a       	CMP       R6, #47
    19fe:	13 f9       	JLS       $+19                  ;->0x1a24
..\src\kf32a9k1xxx_int.c:411
    {
    	/*---------------- 读取INT_EIF1寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_WWDT));
    	INT_EIF1 = SFR_Config(INT_EIF1,~tmask,0);
    }
    else if(Peripheral <= INT_USART7)
    1a00:	70 38       	CMP       R7, #0
    1a02:	09 f0       	JZ        $+9                   ;->0x1a14
..\src\kf32a9k1xxx_int.c:415
    {
    	/*---------------- 读取INT_EIF2寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_DMA1));
    	INT_EIF2 = SFR_Config(INT_EIF2,~tmask,0);
    1a04:	07 45       	LD        R5, [PC + #7]         ;->0x1a20  :=0x40200000
    1a06:	e5 9a       	LD.W      R4, [R5 + #11]
..\src\kf32a9k1xxx_int.c:414
    	INT_EIF1 = SFR_Config(INT_EIF1,~tmask,0);
    }
    else if(Peripheral <= INT_USART7)
    {
    	/*---------------- 读取INT_EIF2寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_DMA1));
    1a08:	60 33       	SUB       R6, #48
    1a0a:	31 10       	MOV       R3, #1
    1a0c:	b3 db       	LSL       R6, R3, R6
..\src\kf32a9k1xxx_int.c:415
    	INT_EIF2 = SFR_Config(INT_EIF2,~tmask,0);
    1a0e:	66 68       	NOT       R6, R6
KF32A9K1XXX.h:13917
    1a10:	36 d5       	ANL       R6, R6, R4
..\src\kf32a9k1xxx_int.c:415
    1a12:	ee a2       	ST.W      [R5 + #11], R6
..\src\kf32a9k1xxx_int.c:421
    }
    else
    {
    	;
    }
}
    1a14:	03 5e       	POP       {R6-R7}
    1a16:	0d 5d       	POP       LR
    1a18:	1d 5c       	JMP       LR
    1a1a:	00 00       	NOP      NOP      
    1a1c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1a20:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x1aa0  :=0x7c32cd37
..\src\kf32a9k1xxx_int.c:409
    }
    else if(Peripheral <= INT_SPI1)
    {
    	/*---------------- 读取INT_EIF1寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_WWDT));
    	INT_EIF1 = SFR_Config(INT_EIF1,~tmask,0);
    1a24:	06 45       	LD        R5, [PC + #6]         ;->0x1a3c  :=0x40200000
    1a26:	65 9a       	LD.W      R4, [R5 + #9]
..\src\kf32a9k1xxx_int.c:408
    	INT_EIF0 = SFR_Config(INT_EIF0,~tmask,0);
    }
    else if(Peripheral <= INT_SPI1)
    {
    	/*---------------- 读取INT_EIF1寄存器 ----------------*/
    	tmask = ((uint32_t)1 << (Peripheral - INT_WWDT));
    1a28:	60 31       	SUB       R6, #16
    1a2a:	31 10       	MOV       R3, #1
    1a2c:	b3 db       	LSL       R6, R3, R6
..\src\kf32a9k1xxx_int.c:409
    	INT_EIF1 = SFR_Config(INT_EIF1,~tmask,0);
    1a2e:	66 68       	NOT       R6, R6
KF32A9K1XXX.h:13917
    1a30:	36 d5       	ANL       R6, R6, R4
..\src\kf32a9k1xxx_int.c:409
    1a32:	6e a2       	ST.W      [R5 + #9], R6
..\src\kf32a9k1xxx_int.c:421
    }
    else
    {
    	;
    }
}
    1a34:	03 5e       	POP       {R6-R7}
    1a36:	0d 5d       	POP       LR
    1a38:	1d 5c       	JMP       LR
    1a3a:	00 00       	NOP      NOP      
    1a3c:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x1abc  :=0x5c1d
..\src\kf32a9k1xxx_int.c:403

    if(Peripheral <= INT_SysTick)
    {
    	/*---------------- 读取INT_EIF0寄存器 ----------------*/
    	tmask = ((uint32_t)1 << Peripheral);
    	INT_EIF0 = SFR_Config(INT_EIF0,~tmask,0);
    1a40:	05 45       	LD        R5, [PC + #5]         ;->0x1a54  :=0x40200000
    1a42:	e5 99       	LD.W      R4, [R5 + #7]
..\src\kf32a9k1xxx_int.c:402
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));

    if(Peripheral <= INT_SysTick)
    {
    	/*---------------- 读取INT_EIF0寄存器 ----------------*/
    	tmask = ((uint32_t)1 << Peripheral);
    1a44:	31 10       	MOV       R3, #1
    1a46:	b3 db       	LSL       R6, R3, R6
..\src\kf32a9k1xxx_int.c:403
    	INT_EIF0 = SFR_Config(INT_EIF0,~tmask,0);
    1a48:	66 68       	NOT       R6, R6
KF32A9K1XXX.h:13917
    1a4a:	36 d5       	ANL       R6, R6, R4
..\src\kf32a9k1xxx_int.c:403
    1a4c:	ee a1       	ST.W      [R5 + #7], R6
..\src\kf32a9k1xxx_int.c:421
    }
    else
    {
    	;
    }
}
    1a4e:	03 5e       	POP       {R6-R7}
    1a50:	0d 5d       	POP       LR
    1a52:	1d 5c       	JMP       LR
    1a54:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x1ad4  :=0xf81b38b3

00001a58 <INT_Interrupt_Priority_Config>:
INT_Interrupt_Priority_Config():
..\src\kf32a9k1xxx_int.c:440
  * 返回  无。
  */
void
INT_Interrupt_Priority_Config (InterruptIndex Peripheral,
                    uint32_t Preemption, uint32_t SubPriority)
{
    1a58:	bf 5f       	PUSH      {R6-R11,LR}
    1a5a:	e0 58       	MOV       R7, R0
    1a5c:	21 59       	MOV       R9, R1
    1a5e:	62 59       	MOV       R11, R2
..\src\kf32a9k1xxx_int.c:447
    uint32_t regoffset = 0;
    uint32_t bitoffset = 0;
    uint32_t priorityconfig = 0;

    /*--------- 获取INT_CTL0寄存器的PRIGROUP位 ---------*/
    tmpreg = INT_CTL0;
    1a60:	18 45       	LD        R5, [PC + #24]        ;->0x1ac0  :=0x40200000
    1a62:	65 82       	LD.W      R6, [R5]
..\src\kf32a9k1xxx_int.c:448
    tmpreg &= INT_CTL0_PRIGROUP;
    1a64:	56 10       	MOV       R5, #6
    1a66:	76 d5       	ANL       R6, R6, R5
..\src\kf32a9k1xxx_int.c:451

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    1a68:	a1 10       	MOV       R10, #1
    1a6a:	0f 3c       	CMP       R0, #79
    1a6c:	02 f9       	JLS       $+2                   ;->0x1a70
    1a6e:	a0 10       	MOV       R10, #0
    1a70:	aa d1       	ZXT.B     R10, R10
    1a72:	0a 58       	MOV       R0, R10
    1a74:	14 44       	LD        R4, [PC + #20]        ;->0x1ac4  :=0x371a
    1a76:	04 59       	MOV       R8, R4
    1a78:	04 5c       	LJMP      R4
..\src\kf32a9k1xxx_int.c:452
    CHECK_RESTRICTION(CHECK_PRIORITY_CONFIG(tmpreg, Preemption, SubPriority));
    1a7a:	60 38       	CMP       R6, #0
    1a7c:	28 f1       	JNZ       $+40                  ;->0x1acc
    1a7e:	97 38       	CMP       R9, #7
    1a80:	2f f9       	JLS       $+47                  ;->0x1ade
    1a82:	00 10       	MOV       R0, #0
    1a84:	08 5c       	LJMP      R8
    1a86:	53 10       	MOV       R5, #3
    1a88:	6f d5       	ANL       R5, R7, R5
    1a8a:	2b 7a       	LSL       R5, #3
    1a8c:	2d c1       	ADD       R5, R5, #4
..\src\kf32a9k1xxx_int.c:458

    /*--------- 获取中断优先级控制位的值 ---------*/
    switch (tmpreg)
    {
    case INT_PRIORITY_GROUP_3VS1:
        priorityconfig = (Preemption << 1) | (SubPriority & 0x1);
    1a8e:	41 10       	MOV       R4, #1
    1a90:	b4 69       	ANL       R11, R4
    1a92:	99 64       	ADD       R9, R9
    1a94:	8b 58       	MOV       R4, R11
    1a96:	49 6a       	ORL       R4, R9
    1a98:	24 59       	MOV       R9, R4
    1a9a:	95 6c       	LSL       R9, R5
..\src\kf32a9k1xxx_int.c:475
        CHECK_RESTRICTION(0);
        break;
    }

    /*--------- 配置中断优先级控制位 ---------*/
    if (Peripheral <= INT_USART7)
    1a9c:	a0 38       	CMP       R10, #0
    1a9e:	06 f0       	JZ        $+6                   ;->0x1aaa
..\src\kf32a9k1xxx_int.c:479
    {
        /*---------------- 设置INT_IPx(x=0~18)寄存器 ----------------*/
        /* 获取中断优先级寄存器地址 */
        regoffset = (Peripheral - INT_Reserved4) >> 2;
    1aa0:	37 cd       	SUB       R6, R7, #4
    1aa2:	32 7c       	LSR       R6, #2
..\src\kf32a9k1xxx_int.c:481
        tmpreg = (uint32_t)&INT_IP0;
        tmpreg = tmpreg + (regoffset << 2);
    1aa4:	32 7a       	LSL       R6, #2
    1aa6:	09 44       	LD        R4, [PC + #9]         ;->0x1ac8  :=0x40200034
    1aa8:	36 c3       	ADD       R6, R6, R4
..\src\kf32a9k1xxx_int.c:491
    }

    /*---------------- 设置INT_IPx(x=0~30)寄存器 ----------------*/
    bitoffset = ((Peripheral & 0x3) * 8) + 4;
    *(volatile uint32_t*)tmpreg
          = SFR_Config (*(volatile uint32_t*)tmpreg,
    1aaa:	b6 82       	LD.W      R11, [R6]
..\src\kf32a9k1xxx_int.c:492
                      ~(0xF << bitoffset),
    1aac:	4f 10       	MOV       R4, #15
    1aae:	6c db       	LSL       R5, R4, R5
    1ab0:	55 68       	NOT       R5, R5
KF32A9K1XXX.h:13917
    1ab2:	b5 69       	ANL       R11, R5
    1ab4:	b9 6a       	ORL       R11, R9
..\src\kf32a9k1xxx_int.c:491
    }

    /*---------------- 设置INT_IPx(x=0~30)寄存器 ----------------*/
    bitoffset = ((Peripheral & 0x3) * 8) + 4;
    *(volatile uint32_t*)tmpreg
          = SFR_Config (*(volatile uint32_t*)tmpreg,
    1ab6:	6b 85       	ST.W      [R6], R11
..\src\kf32a9k1xxx_int.c:494
                      ~(0xF << bitoffset),
                      priorityconfig << bitoffset);
}
    1ab8:	3f 5e       	POP       {R6-R11}
    1aba:	0d 5d       	POP       LR
    1abc:	1d 5c       	JMP       LR
    1abe:	00 00       	NOP      NOP      
    1ac0:	00 00 20 40 	.long     0x40200000 ->1075838976  [!!!@2@:NOP      	@@: LD        R0, [PC + #32]        ;->0x1b40  :=0xf90238bf
    1ac4:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1ac8:	34 00 20 40 	.long     0x40200034 ->1075839028 
..\src\kf32a9k1xxx_int.c:452
    tmpreg = INT_CTL0;
    tmpreg &= INT_CTL0_PRIGROUP;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    CHECK_RESTRICTION(CHECK_PRIORITY_CONFIG(tmpreg, Preemption, SubPriority));
    1acc:	62 38       	CMP       R6, #2
    1ace:	0d f1       	JNZ       $+13                  ;->0x1ae8
    1ad0:	93 38       	CMP       R9, #3
    1ad2:	1d f8       	JHI       $+29                  ;->0x1b0c
    1ad4:	b3 38       	CMP       R11, #3
    1ad6:	1b f8       	JHI       $+27                  ;->0x1b0c
    1ad8:	01 10       	MOV       R0, #1
    1ada:	08 5c       	LJMP      R8
    1adc:	1a 04       	SJMP      $+26                  ;->0x1b10
    1ade:	b1 38       	CMP       R11, #1
    1ae0:	d1 f8       	JHI       $-47                  ;->0x1a82
    1ae2:	01 10       	MOV       R0, #1
    1ae4:	08 5c       	LJMP      R8
    1ae6:	d0 07       	SJMP      $-48                  ;->0x1a86
    1ae8:	00 10       	MOV       R0, #0
    1aea:	64 38       	CMP       R6, #4
    1aec:	25 f1       	JNZ       $+37                  ;->0x1b36
    1aee:	91 38       	CMP       R9, #1
    1af0:	1b f9       	JLS       $+27                  ;->0x1b26
    1af2:	08 5c       	LJMP      R8
    1af4:	53 10       	MOV       R5, #3
    1af6:	6f d5       	ANL       R5, R7, R5
    1af8:	2b 7a       	LSL       R5, #3
    1afa:	2d c1       	ADD       R5, R5, #4
..\src\kf32a9k1xxx_int.c:464
        break;
    case INT_PRIORITY_GROUP_2VS2:
        priorityconfig = (Preemption << 2) | (SubPriority & 0x3);
        break;
    case INT_PRIORITY_GROUP_1VS3:
        priorityconfig = (Preemption << 3) | (SubPriority & 0x7);
    1afc:	47 10       	MOV       R4, #7
    1afe:	b4 69       	ANL       R11, R4
    1b00:	4b 7a       	LSL       R9, #3
    1b02:	8b 58       	MOV       R4, R11
    1b04:	49 6a       	ORL       R4, R9
    1b06:	24 59       	MOV       R9, R4
    1b08:	95 6c       	LSL       R9, R5
..\src\kf32a9k1xxx_int.c:465
        break;
    1b0a:	c9 07       	SJMP      $-55                  ;->0x1a9c
..\src\kf32a9k1xxx_int.c:452
    tmpreg = INT_CTL0;
    tmpreg &= INT_CTL0_PRIGROUP;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    CHECK_RESTRICTION(CHECK_PRIORITY_CONFIG(tmpreg, Preemption, SubPriority));
    1b0c:	00 10       	MOV       R0, #0
    1b0e:	08 5c       	LJMP      R8
    1b10:	43 10       	MOV       R4, #3
    1b12:	2f d5       	ANL       R5, R7, R4
    1b14:	2d db       	LSL       R5, R5, R4
    1b16:	2d c1       	ADD       R5, R5, #4
..\src\kf32a9k1xxx_int.c:461
    {
    case INT_PRIORITY_GROUP_3VS1:
        priorityconfig = (Preemption << 1) | (SubPriority & 0x1);
        break;
    case INT_PRIORITY_GROUP_2VS2:
        priorityconfig = (Preemption << 2) | (SubPriority & 0x3);
    1b18:	b4 69       	ANL       R11, R4
    1b1a:	4a 7a       	LSL       R9, #2
    1b1c:	8b 58       	MOV       R4, R11
    1b1e:	49 6a       	ORL       R4, R9
    1b20:	24 59       	MOV       R9, R4
    1b22:	95 6c       	LSL       R9, R5
..\src\kf32a9k1xxx_int.c:462
        break;
    1b24:	bc 07       	SJMP      $-68                  ;->0x1a9c
..\src\kf32a9k1xxx_int.c:452
    tmpreg = INT_CTL0;
    tmpreg &= INT_CTL0_PRIGROUP;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    CHECK_RESTRICTION(CHECK_PRIORITY_CONFIG(tmpreg, Preemption, SubPriority));
    1b26:	51 10       	MOV       R5, #1
    1b28:	b7 38       	CMP       R11, #7
    1b2a:	03 f8       	JHI       $+3                   ;->0x1b30
    1b2c:	05 58       	MOV       R0, R5
    1b2e:	e2 07       	SJMP      $-30                  ;->0x1af2
    1b30:	a0 58       	MOV       R5, R0
    1b32:	05 58       	MOV       R0, R5
    1b34:	df 07       	SJMP      $-33                  ;->0x1af2
    1b36:	66 38       	CMP       R6, #6
    1b38:	12 f1       	JNZ       $+18                  ;->0x1b5c
    1b3a:	90 70       	CMP       R9, R0
    1b3c:	05 f1       	JNZ       $+5                   ;->0x1b46
    1b3e:	01 10       	MOV       R0, #1
    1b40:	bf 38       	CMP       R11, #15
    1b42:	02 f9       	JLS       $+2                   ;->0x1b46
    1b44:	09 58       	MOV       R0, R9
    1b46:	08 5c       	LJMP      R8
    1b48:	53 10       	MOV       R5, #3
    1b4a:	6f d5       	ANL       R5, R7, R5
    1b4c:	2b 7a       	LSL       R5, #3
    1b4e:	2d c1       	ADD       R5, R5, #4
..\src\kf32a9k1xxx_int.c:467
        break;
    case INT_PRIORITY_GROUP_1VS3:
        priorityconfig = (Preemption << 3) | (SubPriority & 0x7);
        break;
    case INT_PRIORITY_GROUP_0VS4:
        priorityconfig = SubPriority & 0xF;
    1b50:	9f 10       	MOV       R9, #15
    1b52:	b9 69       	ANL       R11, R9
    1b54:	8b 58       	MOV       R4, R11
    1b56:	64 db       	LSL       R4, R4, R5
    1b58:	24 59       	MOV       R9, R4
..\src\kf32a9k1xxx_int.c:468
        break;
    1b5a:	a1 07       	SJMP      $-95                  ;->0x1a9c
..\src\kf32a9k1xxx_int.c:452
    tmpreg = INT_CTL0;
    tmpreg &= INT_CTL0_PRIGROUP;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    CHECK_RESTRICTION(CHECK_PRIORITY_CONFIG(tmpreg, Preemption, SubPriority));
    1b5c:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_int.c:455

    /*--------- 获取中断优先级控制位的值 ---------*/
    switch (tmpreg)
    1b5e:	62 38       	CMP       R6, #2
    1b60:	d8 f0       	JZ        $-40                  ;->0x1b10
    1b62:	62 38       	CMP       R6, #2
    1b64:	0b f8       	JHI       $+11                  ;->0x1b7a
    1b66:	60 38       	CMP       R6, #0
    1b68:	8f f0       	JZ        $-113                 ;->0x1a86
..\src\kf32a9k1xxx_int.c:470
        break;
    case INT_PRIORITY_GROUP_0VS4:
        priorityconfig = SubPriority & 0xF;
        break;
    default:
        CHECK_RESTRICTION(0);
    1b6a:	00 10       	MOV       R0, #0
    1b6c:	08 5c       	LJMP      R8
    1b6e:	53 10       	MOV       R5, #3
    1b70:	6f d5       	ANL       R5, R7, R5
    1b72:	2b 7a       	LSL       R5, #3
    1b74:	2d c1       	ADD       R5, R5, #4
..\src\kf32a9k1xxx_int.c:471
        break;
    1b76:	90 10       	MOV       R9, #0
    1b78:	92 07       	SJMP      $-110                 ;->0x1a9c
..\src\kf32a9k1xxx_int.c:455
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PERIPHERAL_INTERRUPT_INDEX(Peripheral));
    CHECK_RESTRICTION(CHECK_PRIORITY_CONFIG(tmpreg, Preemption, SubPriority));

    /*--------- 获取中断优先级控制位的值 ---------*/
    switch (tmpreg)
    1b7a:	64 38       	CMP       R6, #4
    1b7c:	bc f0       	JZ        $-68                  ;->0x1af4
    1b7e:	66 38       	CMP       R6, #6
    1b80:	f5 f1       	JNZ       $-11                  ;->0x1b6a
    1b82:	e3 07       	SJMP      $-29                  ;->0x1b48

00001b84 <OSC_LFCK_Division_Config>:
OSC_LFCK_Division_Config():
..\src\kf32a9k1xxx_osc.c:173
  *                         LFCK_DIVISION_128: 1/128分频,
  * 返回  无。
  */
void
OSC_LFCK_Division_Config (uint32_t LFDivision)
{
    1b84:	81 5f       	PUSH      {R6,LR}
    1b86:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:177
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_LFCK_DIVISION(LFDivision));
    1b88:	01 10       	MOV       R0, #1
    1b8a:	67 38       	CMP       R6, #7
    1b8c:	02 f9       	JLS       $+2                   ;->0x1b90
    1b8e:	00 10       	MOV       R0, #0
    1b90:	07 45       	LD        R5, [PC + #7]         ;->0x1bac  :=0x371a
    1b92:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:181

    /*---------------- 设置OSC_CTL0寄存器LFCKDIV位 ----------------*/
    tmpreg = LFDivision << OSC_CTL0_LFCKDIV0_POS;
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_LFCKDIV, tmpreg);
    1b94:	51 10       	MOV       R5, #1
    1b96:	ae 7b       	LSL       R5, #30
    1b98:	35 82       	LD.W      R3, [R5]
..\src\kf32a9k1xxx_osc.c:180

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_LFCK_DIVISION(LFDivision));

    /*---------------- 设置OSC_CTL0寄存器LFCKDIV位 ----------------*/
    tmpreg = LFDivision << OSC_CTL0_LFCKDIV0_POS;
    1b9a:	b0 7b       	LSL       R6, #24
KF32A9K1XXX.h:13917
    1b9c:	05 44       	LD        R4, [PC + #5]         ;->0x1bb0  :=0xf8ffffff
    1b9e:	23 d5       	ANL       R4, R3, R4
    1ba0:	36 d7       	ORL       R6, R6, R4
..\src\kf32a9k1xxx_osc.c:181
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_LFCKDIV, tmpreg);
    1ba2:	56 85       	ST.W      [R5], R6
..\src\kf32a9k1xxx_osc.c:182
}
    1ba4:	06 5d       	POP       R6
    1ba6:	0d 5d       	POP       LR
    1ba8:	1d 5c       	JMP       LR
    1baa:	00 00       	NOP      NOP      
    1bac:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1bb0:	ff ff ff f8 	.long     0xf8ffffff ->-117440513 

00001bb4 <OSC_HFCK_Division_Config>:
OSC_HFCK_Division_Config():
..\src\kf32a9k1xxx_osc.c:201
  *                         HFCK_DIVISION_512: 1/512分频,
  * 返回  无。
  */
void
OSC_HFCK_Division_Config (uint32_t HFDivision)
{
    1bb4:	81 5f       	PUSH      {R6,LR}
    1bb6:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:205
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_HFCK_DIVISION(HFDivision));
    1bb8:	01 10       	MOV       R0, #1
    1bba:	69 38       	CMP       R6, #9
    1bbc:	02 f9       	JLS       $+2                   ;->0x1bc0
    1bbe:	00 10       	MOV       R0, #0
    1bc0:	07 45       	LD        R5, [PC + #7]         ;->0x1bdc  :=0x371a
    1bc2:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:209

    /*---------------- 设置OSC_CTL0寄存器HFCKDIV位 ----------------*/
    tmpreg = HFDivision << OSC_CTL0_HFCKDIV0_POS;
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_HFCKDIV, tmpreg);
    1bc4:	51 10       	MOV       R5, #1
    1bc6:	ae 7b       	LSL       R5, #30
    1bc8:	35 82       	LD.W      R3, [R5]
..\src\kf32a9k1xxx_osc.c:208

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_HFCK_DIVISION(HFDivision));

    /*---------------- 设置OSC_CTL0寄存器HFCKDIV位 ----------------*/
    tmpreg = HFDivision << OSC_CTL0_HFCKDIV0_POS;
    1bca:	34 7b       	LSL       R6, #20
KF32A9K1XXX.h:13917
    1bcc:	05 44       	LD        R4, [PC + #5]         ;->0x1be0  :=0xff0fffff
    1bce:	23 d5       	ANL       R4, R3, R4
    1bd0:	36 d7       	ORL       R6, R6, R4
..\src\kf32a9k1xxx_osc.c:209
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_HFCKDIV, tmpreg);
    1bd2:	56 85       	ST.W      [R5], R6
..\src\kf32a9k1xxx_osc.c:210
}
    1bd4:	06 5d       	POP       R6
    1bd6:	0d 5d       	POP       LR
    1bd8:	1d 5c       	JMP       LR
    1bda:	00 00       	NOP      NOP      
    1bdc:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1be0:	ff ff 0f ff 	.long     0xff0fffff ->-15728641 

00001be4 <OSC_PLL_Input_Source_Config>:
OSC_PLL_Input_Source_Config():
..\src\kf32a9k1xxx_osc.c:247
  *                   PLL_INPUT_EXTHF: 选择EXTHF作为PLL输入时钟。
  * 返回  无。
  */
void
OSC_PLL_Input_Source_Config (uint32_t NewState)
{
    1be4:	81 5f       	PUSH      {R6,LR}
    1be6:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:249
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_INPUT(NewState));
    1be8:	41 10       	MOV       R4, #1
    1bea:	28 dd       	LSR       R5, R0, R4
    1bec:	04 58       	MOV       R0, R4
    1bee:	50 38       	CMP       R5, #0
    1bf0:	02 f0       	JZ        $+2                   ;->0x1bf4
    1bf2:	00 10       	MOV       R0, #0
    1bf4:	05 45       	LD        R5, [PC + #5]         ;->0x1c08  :=0x371a
    1bf6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:255

    /*---------------- 设置OSC_CTL0寄存器PLL0CKS位 ----------------*/
    if (NewState != PLL_INPUT_INTHF)
    {
        /* 选择EXTHF作为PLL输入时钟 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_PLLCKS_POS);
    1bf8:	51 10       	MOV       R5, #1
    1bfa:	ae 7b       	LSL       R5, #30
..\src\kf32a9k1xxx_osc.c:252
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_INPUT(NewState));

    /*---------------- 设置OSC_CTL0寄存器PLL0CKS位 ----------------*/
    if (NewState != PLL_INPUT_INTHF)
    1bfc:	60 38       	CMP       R6, #0
    1bfe:	07 f1       	JNZ       $+7                   ;->0x1c0c
..\src\kf32a9k1xxx_osc.c:260
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_PLLCKS_POS);
    }
    else
    {
        /* 选择INTHF作为PLL输入时钟 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_PLLCKS_POS);
    1c00:	ac 4e       	CLR       [R5], #12
..\src\kf32a9k1xxx_osc.c:262
    }
}
    1c02:	06 5d       	POP       R6
    1c04:	0d 5d       	POP       LR
    1c06:	1d 5c       	JMP       LR
    1c08:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_osc.c:255

    /*---------------- 设置OSC_CTL0寄存器PLL0CKS位 ----------------*/
    if (NewState != PLL_INPUT_INTHF)
    {
        /* 选择EXTHF作为PLL输入时钟 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_PLLCKS_POS);
    1c0c:	ac 4c       	SET       [R5], #12
..\src\kf32a9k1xxx_osc.c:262
    else
    {
        /* 选择INTHF作为PLL输入时钟 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_PLLCKS_POS);
    }
}
    1c0e:	06 5d       	POP       R6
    1c10:	0d 5d       	POP       LR
    1c12:	1d 5c       	JMP       LR

00001c14 <OSC_HFCK_Source_Config>:
OSC_HFCK_Source_Config():
..\src\kf32a9k1xxx_osc.c:275
  *                   HFCK_SOURCE_LP4M:  选择LPM输出作为HFCLK时钟,
  * 返回  无。
  */
void
OSC_HFCK_Source_Config (uint32_t HFSource)
{
    1c14:	81 5f       	PUSH      {R6,LR}
    1c16:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:279
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_HFCK_SOURCE(HFSource));
    1c18:	43 10       	MOV       R4, #3
    1c1a:	28 dd       	LSR       R5, R0, R4
    1c1c:	01 10       	MOV       R0, #1
    1c1e:	50 38       	CMP       R5, #0
    1c20:	02 f0       	JZ        $+2                   ;->0x1c24
    1c22:	00 10       	MOV       R0, #0
    1c24:	07 45       	LD        R5, [PC + #7]         ;->0x1c40  :=0x371a
    1c26:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:283

    /*---------------- 设置OSC_CTL0寄存器HFCKS位 ----------------*/
    tmpreg = HFSource << OSC_CTL0_HFCKS0_POS;
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_HFCKS, tmpreg);
    1c28:	51 10       	MOV       R5, #1
    1c2a:	ae 7b       	LSL       R5, #30
    1c2c:	35 82       	LD.W      R3, [R5]
..\src\kf32a9k1xxx_osc.c:282

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_HFCK_SOURCE(HFSource));

    /*---------------- 设置OSC_CTL0寄存器HFCKS位 ----------------*/
    tmpreg = HFSource << OSC_CTL0_HFCKS0_POS;
    1c2e:	b1 7a       	LSL       R6, #9
KF32A9K1XXX.h:13917
    1c30:	05 44       	LD        R4, [PC + #5]         ;->0x1c44  :=0xfffff1ff
    1c32:	23 d5       	ANL       R4, R3, R4
    1c34:	36 d7       	ORL       R6, R6, R4
..\src\kf32a9k1xxx_osc.c:283
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_HFCKS, tmpreg);
    1c36:	56 85       	ST.W      [R5], R6
..\src\kf32a9k1xxx_osc.c:284
}
    1c38:	06 5d       	POP       R6
    1c3a:	0d 5d       	POP       LR
    1c3c:	1d 5c       	JMP       LR
    1c3e:	00 00       	NOP      NOP      
    1c40:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1c44:	ff f1 ff ff 	.long     0xfffff1ff ->-00003585 

00001c48 <OSC_HFCK_Enable>:
OSC_HFCK_Enable():
..\src\kf32a9k1xxx_osc.c:294
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
OSC_HFCK_Enable (FunctionalState NewState)
{
    1c48:	81 5f       	PUSH      {R6,LR}
    1c4a:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:296
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1c4c:	01 10       	MOV       R0, #1
    1c4e:	60 70       	CMP       R6, R0
    1c50:	02 f9       	JLS       $+2                   ;->0x1c54
    1c52:	00 10       	MOV       R0, #0
    1c54:	05 45       	LD        R5, [PC + #5]         ;->0x1c68  :=0x371a
    1c56:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:302

    /*---------------- 设置OSC_CTL0寄存器HFCKEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* HFCLK时钟信号允许 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_HFCKEN_POS);
    1c58:	51 10       	MOV       R5, #1
    1c5a:	ae 7b       	LSL       R5, #30
..\src\kf32a9k1xxx_osc.c:299
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*---------------- 设置OSC_CTL0寄存器HFCKEN位 ----------------*/
    if (NewState != FALSE)
    1c5c:	60 38       	CMP       R6, #0
    1c5e:	07 f1       	JNZ       $+7                   ;->0x1c6c
..\src\kf32a9k1xxx_osc.c:307
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_HFCKEN_POS);
    }
    else
    {
        /* HFCLK时钟信号禁止 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_HFCKEN_POS);
    1c60:	a8 4e       	CLR       [R5], #8
..\src\kf32a9k1xxx_osc.c:309
    }
}
    1c62:	06 5d       	POP       R6
    1c64:	0d 5d       	POP       LR
    1c66:	1d 5c       	JMP       LR
    1c68:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_osc.c:302

    /*---------------- 设置OSC_CTL0寄存器HFCKEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* HFCLK时钟信号允许 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_HFCKEN_POS);
    1c6c:	a8 4c       	SET       [R5], #8
..\src\kf32a9k1xxx_osc.c:309
    else
    {
        /* HFCLK时钟信号禁止 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_HFCKEN_POS);
    }
}
    1c6e:	06 5d       	POP       R6
    1c70:	0d 5d       	POP       LR
    1c72:	1d 5c       	JMP       LR

00001c74 <OSC_LFCK_Source_Config>:
OSC_LFCK_Source_Config():
..\src\kf32a9k1xxx_osc.c:320
  *                   LFCK_INPUT_EXTLF: 选择EXTLF作为LFCLK时钟。
  * 返回  无。
  */
void
OSC_LFCK_Source_Config (uint32_t NewState)
{
    1c74:	81 5f       	PUSH      {R6,LR}
    1c76:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:322
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_LFCK_INPUT(NewState));
    1c78:	01 10       	MOV       R0, #1
    1c7a:	60 70       	CMP       R6, R0
    1c7c:	02 f9       	JLS       $+2                   ;->0x1c80
    1c7e:	00 10       	MOV       R0, #0
    1c80:	05 45       	LD        R5, [PC + #5]         ;->0x1c94  :=0x371a
    1c82:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:328

    /*---------------- 设置OSC_CTL0寄存器LFCKS位 ----------------*/
    if (NewState != LFCK_INPUT_INTLF)
    {
        /* 选择EXTLF作为LFCLK时钟 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKS_POS);
    1c84:	51 10       	MOV       R5, #1
    1c86:	ae 7b       	LSL       R5, #30
..\src\kf32a9k1xxx_osc.c:325
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_LFCK_INPUT(NewState));

    /*---------------- 设置OSC_CTL0寄存器LFCKS位 ----------------*/
    if (NewState != LFCK_INPUT_INTLF)
    1c88:	60 38       	CMP       R6, #0
    1c8a:	07 f1       	JNZ       $+7                   ;->0x1c98
..\src\kf32a9k1xxx_osc.c:333
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKS_POS);
    }
    else
    {
        /* 选择INTLF作为LFCLK时钟 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKS_POS);
    1c8c:	2e 4e       	CLR       [R5], #6
..\src\kf32a9k1xxx_osc.c:335
    }
}
    1c8e:	06 5d       	POP       R6
    1c90:	0d 5d       	POP       LR
    1c92:	1d 5c       	JMP       LR
    1c94:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_osc.c:328

    /*---------------- 设置OSC_CTL0寄存器LFCKS位 ----------------*/
    if (NewState != LFCK_INPUT_INTLF)
    {
        /* 选择EXTLF作为LFCLK时钟 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKS_POS);
    1c98:	2e 4c       	SET       [R5], #6
..\src\kf32a9k1xxx_osc.c:335
    else
    {
        /* 选择INTLF作为LFCLK时钟 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKS_POS);
    }
}
    1c9a:	06 5d       	POP       R6
    1c9c:	0d 5d       	POP       LR
    1c9e:	1d 5c       	JMP       LR

00001ca0 <OSC_LFCK_Enable>:
OSC_LFCK_Enable():
..\src\kf32a9k1xxx_osc.c:345
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
OSC_LFCK_Enable (FunctionalState NewState)
{
    1ca0:	81 5f       	PUSH      {R6,LR}
    1ca2:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:347
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1ca4:	01 10       	MOV       R0, #1
    1ca6:	60 70       	CMP       R6, R0
    1ca8:	02 f9       	JLS       $+2                   ;->0x1cac
    1caa:	00 10       	MOV       R0, #0
    1cac:	05 45       	LD        R5, [PC + #5]         ;->0x1cc0  :=0x371a
    1cae:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:353

    /*---------------- 设置OSC_CTL0寄存器LFCKEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* LFCLK时钟信号允许 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKEN_POS);
    1cb0:	51 10       	MOV       R5, #1
    1cb2:	ae 7b       	LSL       R5, #30
..\src\kf32a9k1xxx_osc.c:350
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*---------------- 设置OSC_CTL0寄存器LFCKEN位 ----------------*/
    if (NewState != FALSE)
    1cb4:	60 38       	CMP       R6, #0
    1cb6:	07 f1       	JNZ       $+7                   ;->0x1cc4
..\src\kf32a9k1xxx_osc.c:358
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKEN_POS);
    }
    else
    {
        /* LFCLK时钟信号禁止 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKEN_POS);
    1cb8:	2c 4e       	CLR       [R5], #4
..\src\kf32a9k1xxx_osc.c:360
    }
}
    1cba:	06 5d       	POP       R6
    1cbc:	0d 5d       	POP       LR
    1cbe:	1d 5c       	JMP       LR
    1cc0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_osc.c:353

    /*---------------- 设置OSC_CTL0寄存器LFCKEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* LFCLK时钟信号允许 */
        SFR_SET_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKEN_POS);
    1cc4:	2c 4c       	SET       [R5], #4
..\src\kf32a9k1xxx_osc.c:360
    else
    {
        /* LFCLK时钟信号禁止 */
        SFR_CLR_BIT_ASM(OSC_CTL0, OSC_CTL0_LFCKEN_POS);
    }
}
    1cc6:	06 5d       	POP       R6
    1cc8:	0d 5d       	POP       LR
    1cca:	1d 5c       	JMP       LR

00001ccc <OSC_SCK_Source_Config>:
OSC_SCK_Source_Config():
..\src\kf32a9k1xxx_osc.c:375
  *                     SCLK_SOURCE_LP4M:  选择 LP4M 输出作为系统时钟
  * 返回  无。
  */
void
OSC_SCK_Source_Config (uint32_t SclkSource)
{
    1ccc:	81 5f       	PUSH      {R6,LR}
    1cce:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:379
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_SCLK_SOURCE(SclkSource));
    1cd0:	43 10       	MOV       R4, #3
    1cd2:	28 dd       	LSR       R5, R0, R4
    1cd4:	01 10       	MOV       R0, #1
    1cd6:	50 38       	CMP       R5, #0
    1cd8:	02 f0       	JZ        $+2                   ;->0x1cdc
    1cda:	00 10       	MOV       R0, #0
    1cdc:	07 45       	LD        R5, [PC + #7]         ;->0x1cf8  :=0x371a
    1cde:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:383

    /*---------------- 设置OSC_CTL0寄存器SCKS位 ----------------*/
    tmpreg = SclkSource << OSC_CTL0_SCKS0_POS;
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_SCKS, tmpreg);
    1ce0:	51 10       	MOV       R5, #1
    1ce2:	ae 7b       	LSL       R5, #30
    1ce4:	35 82       	LD.W      R3, [R5]
..\src\kf32a9k1xxx_osc.c:382

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_SCLK_SOURCE(SclkSource));

    /*---------------- 设置OSC_CTL0寄存器SCKS位 ----------------*/
    tmpreg = SclkSource << OSC_CTL0_SCKS0_POS;
    1ce6:	b6 c3       	ADD       R6, R6, R6
KF32A9K1XXX.h:13917
    1ce8:	4e 10       	MOV       R4, #14
    1cea:	44 68       	NOT       R4, R4
    1cec:	23 d5       	ANL       R4, R3, R4
    1cee:	36 d7       	ORL       R6, R6, R4
..\src\kf32a9k1xxx_osc.c:383
    OSC_CTL0 = SFR_Config (OSC_CTL0, ~OSC_CTL0_SCKS, tmpreg);
    1cf0:	56 85       	ST.W      [R5], R6
..\src\kf32a9k1xxx_osc.c:384
}
    1cf2:	06 5d       	POP       R6
    1cf4:	0d 5d       	POP       LR
    1cf6:	1d 5c       	JMP       LR
    1cf8:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      

00001cfc <OSC_PLL_Multiple_Value_Select>:
OSC_PLL_Multiple_Value_Select():
..\src\kf32a9k1xxx_osc.c:543
  *					放大倍数=PLLmultiple_M/（PLLmultiple_N*PLLmultiple_NO）
  * 返回  无。
  */
void
OSC_PLL_Multiple_Value_Select (uint32_t PLLmultiple_M,uint32_t PLLmultiple_N,uint32_t PLLmultiple_NO)
{
    1cfc:	9f 5f       	PUSH      {R6-R10,LR}
    1cfe:	00 59       	MOV       R8, R0
    1d00:	21 59       	MOV       R9, R1
    1d02:	c2 58       	MOV       R6, R2
..\src\kf32a9k1xxx_osc.c:547
    uint32_t tmpreg = 0x00;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_MValue(PLLmultiple_M));
    1d04:	01 10       	MOV       R0, #1
    1d06:	19 45       	LD        R5, [PC + #25]        ;->0x1d68  :=0x3fff
    1d08:	85 70       	CMP       R8, R5
    1d0a:	02 f9       	JLS       $+2                   ;->0x1d0e
    1d0c:	00 10       	MOV       R0, #0
    1d0e:	18 47       	LD        R7, [PC + #24]        ;->0x1d6c  :=0x371a
    1d10:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_osc.c:548
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_NValue(PLLmultiple_N));
    1d12:	01 10       	MOV       R0, #1
    1d14:	9f 38       	CMP       R9, #15
    1d16:	02 f9       	JLS       $+2                   ;->0x1d1a
    1d18:	00 10       	MOV       R0, #0
    1d1a:	15 43       	LD        R3, [PC + #21]        ;->0x1d6c  :=0x371a
    1d1c:	43 59       	MOV       R10, R3
    1d1e:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_osc.c:549
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_NOValue(PLLmultiple_NO));
    1d20:	6e cc       	SUB       R5, R6, #1
    1d22:	51 38       	CMP       R5, #1
    1d24:	2a f9       	JLS       $+42                  ;->0x1d78
    1d26:	64 38       	CMP       R6, #4
    1d28:	2f f0       	JZ        $+47                  ;->0x1d86
    1d2a:	a1 10       	MOV       R10, #1
    1d2c:	68 38       	CMP       R6, #8
    1d2e:	02 f0       	JZ        $+2                   ;->0x1d32
    1d30:	a0 10       	MOV       R10, #0
    1d32:	aa d1       	ZXT.B     R10, R10
    1d34:	0a 58       	MOV       R0, R10
    1d36:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_osc.c:551

    if(PLLmultiple_NO==8){PLLmultiple_NO=3;}
    1d38:	a0 38       	CMP       R10, #0
    1d3a:	2b f1       	JNZ       $+43                  ;->0x1d90
..\src\kf32a9k1xxx_osc.c:553
    else if(PLLmultiple_NO==4){PLLmultiple_NO=2;}
    else if(PLLmultiple_NO==2){PLLmultiple_NO=1;}
    1d3c:	62 38       	CMP       R6, #2
    1d3e:	21 f0       	JZ        $+33                  ;->0x1d80
..\src\kf32a9k1xxx_osc.c:554
    else if(PLLmultiple_NO==1){PLLmultiple_NO=0;}
    1d40:	40 10       	MOV       R4, #0
    1d42:	61 38       	CMP       R6, #1
    1d44:	03 f0       	JZ        $+3                   ;->0x1d4a
    1d46:	54 11       	MOV       R5, #20
    1d48:	66 db       	LSL       R4, R6, R5
..\src\kf32a9k1xxx_osc.c:561
    /*---------------- 设置PLL_CTL寄存器OD位N位M位 ----------------*/
    tmpreg |= ((PLLmultiple_M << PLL_CTL_M0_POS) \
    		 | (PLLmultiple_N << PLL_CTL_N0_POS) \
    		 | (PLLmultiple_NO << PLL_CTL_OD0_POS));

    PLL_CTL = SFR_Config (PLL_CTL, ~(PLL_CTL_M | PLL_CTL_N | PLL_CTL_OD), tmpreg);
    1d4a:	0a 45       	LD        R5, [PC + #10]        ;->0x1d70  :=0x40002580
    1d4c:	25 82       	LD.W      R2, [R5]
..\src\kf32a9k1xxx_osc.c:557
    else if(PLLmultiple_NO==4){PLLmultiple_NO=2;}
    else if(PLLmultiple_NO==2){PLLmultiple_NO=1;}
    else if(PLLmultiple_NO==1){PLLmultiple_NO=0;}

    /*---------------- 设置PLL_CTL寄存器OD位N位M位 ----------------*/
    tmpreg |= ((PLLmultiple_M << PLL_CTL_M0_POS) \
    1d4e:	42 7a       	LSL       R8, #2
KF32A9K1XXX.h:13917
    1d50:	09 43       	LD        R3, [PC + #9]         ;->0x1d74  :=0xffc00003
    1d52:	da d4       	ANL       R3, R2, R3
..\src\kf32a9k1xxx_osc.c:558
    		 | (PLLmultiple_N << PLL_CTL_N0_POS) \
    1d54:	83 6a       	ORL       R8, R3
    1d56:	48 7b       	LSL       R9, #16
..\src\kf32a9k1xxx_osc.c:559
    		 | (PLLmultiple_NO << PLL_CTL_OD0_POS));
    1d58:	68 58       	MOV       R3, R8
    1d5a:	39 6a       	ORL       R3, R9
KF32A9K1XXX.h:13917
    1d5c:	23 d7       	ORL       R4, R3, R4
..\src\kf32a9k1xxx_osc.c:561

    PLL_CTL = SFR_Config (PLL_CTL, ~(PLL_CTL_M | PLL_CTL_N | PLL_CTL_OD), tmpreg);
    1d5e:	54 85       	ST.W      [R5], R4
..\src\kf32a9k1xxx_osc.c:562
}
    1d60:	1f 5e       	POP       {R6-R10}
    1d62:	0d 5d       	POP       LR
    1d64:	1d 5c       	JMP       LR
    1d66:	00 00       	NOP      NOP      
    1d68:	ff 3f 00 00 	.long     0x00003fff ->000016383  [!!!@2@:CMP       PC, #127	@@: NOP      
    1d6c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1d70:	80 25 00 40 	.long     0x40002580 ->1073751424  [!!!@2@:ST.W      [SP + #128], R5	@@: LD        R0, [PC + #0]         ;->0x1d70  :=0x40002580
    1d74:	03 00 c0 ff 	.long     0xffc00003 ->-04194301 
..\src\kf32a9k1xxx_osc.c:549
    uint32_t tmpreg = 0x00;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_MValue(PLLmultiple_M));
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_NValue(PLLmultiple_N));
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_NOValue(PLLmultiple_NO));
    1d78:	01 10       	MOV       R0, #1
    1d7a:	0a 5c       	LJMP      R10
..\src\kf32a9k1xxx_osc.c:553

    if(PLLmultiple_NO==8){PLLmultiple_NO=3;}
    else if(PLLmultiple_NO==4){PLLmultiple_NO=2;}
    else if(PLLmultiple_NO==2){PLLmultiple_NO=1;}
    1d7c:	62 38       	CMP       R6, #2
    1d7e:	e1 f1       	JNZ       $-31                  ;->0x1d40
    1d80:	41 10       	MOV       R4, #1
    1d82:	24 7b       	LSL       R4, #20
    1d84:	e3 07       	SJMP      $-29                  ;->0x1d4a
..\src\kf32a9k1xxx_osc.c:549
    uint32_t tmpreg = 0x00;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_MValue(PLLmultiple_M));
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_NValue(PLLmultiple_N));
    CHECK_RESTRICTION(CHECK_PLL_MULTIPLE_NOValue(PLLmultiple_NO));
    1d86:	01 10       	MOV       R0, #1
    1d88:	0a 5c       	LJMP      R10
    1d8a:	41 10       	MOV       R4, #1
    1d8c:	25 7b       	LSL       R4, #21
    1d8e:	de 07       	SJMP      $-34                  ;->0x1d4a
..\src\kf32a9k1xxx_osc.c:551

    if(PLLmultiple_NO==8){PLLmultiple_NO=3;}
    1d90:	01 44       	LD        R4, [PC + #1]         ;->0x1d94  :=0x300000
    1d92:	dc 07       	SJMP      $-36                  ;->0x1d4a
    1d94:	00 00 30 00 	.long     0x00300000 ->003145728 

00001d98 <OSC_PLL_RST>:
OSC_PLL_RST():
..\src\kf32a9k1xxx_osc.c:573
  */
void
OSC_PLL_RST(void)
{
    /*---------------- 设置PLL_CTL寄存器PDRST位 ----------------*/
    SFR_SET_BIT_ASM(PLL_CTL, PLL_CTL_PDRST_POS);
    1d98:	02 45       	LD        R5, [PC + #2]         ;->0x1da0  :=0x40002580
    1d9a:	28 4c       	SET       [R5], #0
..\src\kf32a9k1xxx_osc.c:574
}
    1d9c:	1d 5c       	JMP       LR
    1d9e:	00 00       	NOP      NOP      
    1da0:	80 25 00 40 	.long     0x40002580 ->1073751424  [!!!@2@:ST.W      [SP + #128], R5	@@: LD        R0, [PC + #0]         ;->0x1da0  :=0x40002580

00001da4 <OSC_PLL_Start_Delay_Config>:
OSC_PLL_Start_Delay_Config():
..\src\kf32a9k1xxx_osc.c:593
  *                   PLL_START_DELAY_32768: 延迟32768个时钟
  * 返回  无。
  */
void
OSC_PLL_Start_Delay_Config (uint32_t PLLDelay)
{
    1da4:	81 5f       	PUSH      {R6,LR}
    1da6:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:597
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_START_DELAY(PLLDelay));
    1da8:	44 10       	MOV       R4, #4
    1daa:	28 dd       	LSR       R5, R0, R4
    1dac:	01 10       	MOV       R0, #1
    1dae:	50 38       	CMP       R5, #0
    1db0:	02 f0       	JZ        $+2                   ;->0x1db4
    1db2:	00 10       	MOV       R0, #0
    1db4:	07 45       	LD        R5, [PC + #7]         ;->0x1dd0  :=0x371a
    1db6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:601

    /*---------------- 设置OSC_CTL2寄存器PLLDLY位 ----------------*/
    tmpreg = PLLDelay << OSC_CTL2_PLLDLY0_POS;
    OSC_CTL2 = SFR_Config (OSC_CTL2, ~OSC_CTL2_PLLDLY, tmpreg);
    1db8:	51 10       	MOV       R5, #1
    1dba:	ae 7b       	LSL       R5, #30
    1dbc:	dd 98       	LD.W      R3, [R5 + #3]
..\src\kf32a9k1xxx_osc.c:600

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PLL_START_DELAY(PLLDelay));

    /*---------------- 设置OSC_CTL2寄存器PLLDLY位 ----------------*/
    tmpreg = PLLDelay << OSC_CTL2_PLLDLY0_POS;
    1dbe:	b0 7b       	LSL       R6, #24
KF32A9K1XXX.h:13917
    1dc0:	05 44       	LD        R4, [PC + #5]         ;->0x1dd4  :=0xf0ffffff
    1dc2:	23 d5       	ANL       R4, R3, R4
    1dc4:	36 d7       	ORL       R6, R6, R4
..\src\kf32a9k1xxx_osc.c:601
    OSC_CTL2 = SFR_Config (OSC_CTL2, ~OSC_CTL2_PLLDLY, tmpreg);
    1dc6:	ee a0       	ST.W      [R5 + #3], R6
..\src\kf32a9k1xxx_osc.c:602
}
    1dc8:	06 5d       	POP       R6
    1dca:	0d 5d       	POP       LR
    1dcc:	1d 5c       	JMP       LR
    1dce:	00 00       	NOP      NOP      
    1dd0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1dd4:	ff ff ff f0 	.long     0xf0ffffff ->-251658241 

00001dd8 <OSC_EXTHF_Start_Delay_Config>:
OSC_EXTHF_Start_Delay_Config():
..\src\kf32a9k1xxx_osc.c:621
  *                        EXT_START_DELAY_65536: 延迟65536个时钟
  * 返回  无。
  */
void
OSC_EXTHF_Start_Delay_Config (uint32_t ExternalDelay)
{
    1dd8:	81 5f       	PUSH      {R6,LR}
    1dda:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:625
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EXT_START_DELAY(ExternalDelay));
    1ddc:	44 10       	MOV       R4, #4
    1dde:	28 dd       	LSR       R5, R0, R4
    1de0:	01 10       	MOV       R0, #1
    1de2:	50 38       	CMP       R5, #0
    1de4:	02 f0       	JZ        $+2                   ;->0x1de8
    1de6:	00 10       	MOV       R0, #0
    1de8:	07 45       	LD        R5, [PC + #7]         ;->0x1e04  :=0x371a
    1dea:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:629

    /*---------------- 设置OSC_CTL2寄存器EHFDLY位 ----------------*/
    tmpreg = ExternalDelay << OSC_CTL2_EHFDLY0_POS;
    OSC_CTL2 = SFR_Config (OSC_CTL2, ~OSC_CTL2_EHFDLY, tmpreg);
    1dec:	51 10       	MOV       R5, #1
    1dee:	ae 7b       	LSL       R5, #30
    1df0:	dd 98       	LD.W      R3, [R5 + #3]
..\src\kf32a9k1xxx_osc.c:628

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_EXT_START_DELAY(ExternalDelay));

    /*---------------- 设置OSC_CTL2寄存器EHFDLY位 ----------------*/
    tmpreg = ExternalDelay << OSC_CTL2_EHFDLY0_POS;
    1df2:	34 7b       	LSL       R6, #20
KF32A9K1XXX.h:13917
    1df4:	05 44       	LD        R4, [PC + #5]         ;->0x1e08  :=0xff0fffff
    1df6:	23 d5       	ANL       R4, R3, R4
    1df8:	36 d7       	ORL       R6, R6, R4
..\src\kf32a9k1xxx_osc.c:629
    OSC_CTL2 = SFR_Config (OSC_CTL2, ~OSC_CTL2_EHFDLY, tmpreg);
    1dfa:	ee a0       	ST.W      [R5 + #3], R6
..\src\kf32a9k1xxx_osc.c:630
}
    1dfc:	06 5d       	POP       R6
    1dfe:	0d 5d       	POP       LR
    1e00:	1d 5c       	JMP       LR
    1e02:	00 00       	NOP      NOP      
    1e04:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1e08:	ff ff 0f ff 	.long     0xff0fffff ->-15728641 

00001e0c <OSC_PLL_Software_Enable>:
OSC_PLL_Software_Enable():
..\src\kf32a9k1xxx_osc.c:691
  * 输入  NewState: PLL软件使能状态，取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
OSC_PLL_Software_Enable (FunctionalState NewState)
{
    1e0c:	81 5f       	PUSH      {R6,LR}
    1e0e:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:693
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1e10:	01 10       	MOV       R0, #1
    1e12:	60 70       	CMP       R6, R0
    1e14:	02 f9       	JLS       $+2                   ;->0x1e18
    1e16:	00 10       	MOV       R0, #0
    1e18:	05 45       	LD        R5, [PC + #5]         ;->0x1e2c  :=0x371a
    1e1a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:699

    /*---------------- 设置OSC_CTL2寄存器PLLSWEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能PLL工作 */
        SFR_SET_BIT_ASM(OSC_CTL2, OSC_CTL2_PLLSWEN_POS);
    1e1c:	05 45       	LD        R5, [PC + #5]         ;->0x1e30  :=0x4000000c
..\src\kf32a9k1xxx_osc.c:696
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*---------------- 设置OSC_CTL2寄存器PLLSWEN位 ----------------*/
    if (NewState != FALSE)
    1e1e:	60 38       	CMP       R6, #0
    1e20:	0a f1       	JNZ       $+10                  ;->0x1e34
..\src\kf32a9k1xxx_osc.c:704
        SFR_SET_BIT_ASM(OSC_CTL2, OSC_CTL2_PLLSWEN_POS);
    }
    else
    {
        /* 无效 */
        SFR_CLR_BIT_ASM(OSC_CTL2, OSC_CTL2_PLLSWEN_POS);
    1e22:	2c 4e       	CLR       [R5], #4
..\src\kf32a9k1xxx_osc.c:706
    }
}
    1e24:	06 5d       	POP       R6
    1e26:	0d 5d       	POP       LR
    1e28:	1d 5c       	JMP       LR
    1e2a:	00 00       	NOP      NOP      
    1e2c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1e30:	0c 00 00 40 	.long     0x4000000c ->1073741836 
..\src\kf32a9k1xxx_osc.c:699

    /*---------------- 设置OSC_CTL2寄存器PLLSWEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能PLL工作 */
        SFR_SET_BIT_ASM(OSC_CTL2, OSC_CTL2_PLLSWEN_POS);
    1e34:	2c 4c       	SET       [R5], #4
..\src\kf32a9k1xxx_osc.c:706
    else
    {
        /* 无效 */
        SFR_CLR_BIT_ASM(OSC_CTL2, OSC_CTL2_PLLSWEN_POS);
    }
}
    1e36:	06 5d       	POP       R6
    1e38:	0d 5d       	POP       LR
    1e3a:	1d 5c       	JMP       LR

00001e3c <OSC_EXTHF_Software_Enable>:
OSC_EXTHF_Software_Enable():
..\src\kf32a9k1xxx_osc.c:715
  * 输入  NewState: 外部高频振荡器软件使能状态，取值范围为：TRUE 或 FALSE。
  * 返回  无。
  */
void
OSC_EXTHF_Software_Enable (FunctionalState NewState)
{
    1e3c:	81 5f       	PUSH      {R6,LR}
    1e3e:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_osc.c:717
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1e40:	01 10       	MOV       R0, #1
    1e42:	60 70       	CMP       R6, R0
    1e44:	02 f9       	JLS       $+2                   ;->0x1e48
    1e46:	00 10       	MOV       R0, #0
    1e48:	05 45       	LD        R5, [PC + #5]         ;->0x1e5c  :=0x371a
    1e4a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_osc.c:723

    /*---------------- 设置OSC_CTL2寄存器EXTHFSWEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能外部高频振荡器工作 */
        SFR_SET_BIT_ASM(OSC_CTL2, OSC_CTL2_EXTHFSWEN_POS);
    1e4c:	05 45       	LD        R5, [PC + #5]         ;->0x1e60  :=0x4000000c
..\src\kf32a9k1xxx_osc.c:720
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*---------------- 设置OSC_CTL2寄存器EXTHFSWEN位 ----------------*/
    if (NewState != FALSE)
    1e4e:	60 38       	CMP       R6, #0
    1e50:	0a f1       	JNZ       $+10                  ;->0x1e64
..\src\kf32a9k1xxx_osc.c:728
        SFR_SET_BIT_ASM(OSC_CTL2, OSC_CTL2_EXTHFSWEN_POS);
    }
    else
    {
        /* 无效 */
        SFR_CLR_BIT_ASM(OSC_CTL2, OSC_CTL2_EXTHFSWEN_POS);
    1e52:	2b 4e       	CLR       [R5], #3
..\src\kf32a9k1xxx_osc.c:730
    }
}
    1e54:	06 5d       	POP       R6
    1e56:	0d 5d       	POP       LR
    1e58:	1d 5c       	JMP       LR
    1e5a:	00 00       	NOP      NOP      
    1e5c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1e60:	0c 00 00 40 	.long     0x4000000c ->1073741836 
..\src\kf32a9k1xxx_osc.c:723

    /*---------------- 设置OSC_CTL2寄存器EXTHFSWEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能外部高频振荡器工作 */
        SFR_SET_BIT_ASM(OSC_CTL2, OSC_CTL2_EXTHFSWEN_POS);
    1e64:	2b 4c       	SET       [R5], #3
..\src\kf32a9k1xxx_osc.c:730
    else
    {
        /* 无效 */
        SFR_CLR_BIT_ASM(OSC_CTL2, OSC_CTL2_EXTHFSWEN_POS);
    }
}
    1e66:	06 5d       	POP       R6
    1e68:	0d 5d       	POP       LR
    1e6a:	1d 5c       	JMP       LR

00001e6c <OSC_Get_EXTHF_INT_Flag>:
OSC_Get_EXTHF_INT_Flag():
..\src\kf32a9k1xxx_osc.c:1193
  */
FlagStatus
OSC_Get_EXTHF_INT_Flag (void)
{
    /*---------------- 设置OSC_INT寄存器EHFIF位 ----------------*/
    if (OSC_INT & OSC_INT_EHFIF)
    1e6c:	51 10       	MOV       R5, #1
    1e6e:	ae 7b       	LSL       R5, #30
    1e70:	85 98       	LD.W      R0, [R5 + #2]
    1e72:	03 7c       	LSR       R0, #3
..\src\kf32a9k1xxx_osc.c:1203
    else
    {
        /* PLL未锁定 */
        return RESET;
    }
}
    1e74:	51 10       	MOV       R5, #1
    1e76:	40 d5       	ANL       R0, R0, R5
    1e78:	1d 5c       	JMP       LR
	...

00001e7c <PCLK_CTL0_Peripheral_Clock_Enable>:
PCLK_CTL0_Peripheral_Clock_Enable():
..\src\kf32a9k1xxx_pclk.c:36
  * 返回  无。
  **/
void
PCLK_CTL0_Peripheral_Clock_Enable (uint32_t PCLK_CTL0_bit,
                    FunctionalState NewState)
{
    1e7c:	87 5f       	PUSH      {R6-R8,LR}
    1e7e:	c0 58       	MOV       R6, R0
    1e80:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_pclk.c:38
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PCLK_CTL0_PERIPH(PCLK_CTL0_bit));
    1e82:	48 10       	MOV       R4, #8
    1e84:	28 dd       	LSR       R5, R0, R4
    1e86:	00 10       	MOV       R0, #0
    1e88:	50 70       	CMP       R5, R0
    1e8a:	04 f1       	JNZ       $+4                   ;->0x1e92
    1e8c:	80 c7       	SUB       R0, R0, R6
    1e8e:	80 d7       	ORL       R0, R0, R6
    1e90:	87 7d       	LSR       R0, #31
    1e92:	0a 45       	LD        R5, [PC + #10]        ;->0x1eb8  :=0x371a
    1e94:	05 59       	MOV       R8, R5
    1e96:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pclk.c:39
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1e98:	01 10       	MOV       R0, #1
    1e9a:	70 70       	CMP       R7, R0
    1e9c:	02 f9       	JLS       $+2                   ;->0x1ea0
    1e9e:	00 10       	MOV       R0, #0
    1ea0:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_pclk.c:43

    if (NewState != FALSE)
    {
        PCLK_CTL0 |= PCLK_CTL0_bit;
    1ea2:	07 45       	LD        R5, [PC + #7]         ;->0x1ebc  :=0x40002640
    1ea4:	45 82       	LD.W      R4, [R5]
..\src\kf32a9k1xxx_pclk.c:41
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PCLK_CTL0_PERIPH(PCLK_CTL0_bit));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    if (NewState != FALSE)
    1ea6:	70 38       	CMP       R7, #0
    1ea8:	0c f1       	JNZ       $+12                  ;->0x1ec0
..\src\kf32a9k1xxx_pclk.c:47
    {
        PCLK_CTL0 |= PCLK_CTL0_bit;
    }
    else
    {
        PCLK_CTL0 &= ~PCLK_CTL0_bit;
    1eaa:	66 68       	NOT       R6, R6
    1eac:	36 d5       	ANL       R6, R6, R4
    1eae:	56 85       	ST.W      [R5], R6
..\src\kf32a9k1xxx_pclk.c:49
    }
}
    1eb0:	07 5e       	POP       {R6-R8}
    1eb2:	0d 5d       	POP       LR
    1eb4:	1d 5c       	JMP       LR
    1eb6:	00 00       	NOP      NOP      
    1eb8:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1ebc:	40 26 00 40 	.long     0x40002640 ->1073751616  [!!!@2@:ST.W      [SP + #64], R6	@@: LD        R0, [PC + #0]         ;->0x1ebc  :=0x40002640
..\src\kf32a9k1xxx_pclk.c:43
    CHECK_RESTRICTION(CHECK_PCLK_CTL0_PERIPH(PCLK_CTL0_bit));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    if (NewState != FALSE)
    {
        PCLK_CTL0 |= PCLK_CTL0_bit;
    1ec0:	36 d7       	ORL       R6, R6, R4
    1ec2:	56 85       	ST.W      [R5], R6
..\src\kf32a9k1xxx_pclk.c:49
    }
    else
    {
        PCLK_CTL0 &= ~PCLK_CTL0_bit;
    }
}
    1ec4:	07 5e       	POP       {R6-R8}
    1ec6:	0d 5d       	POP       LR
    1ec8:	1d 5c       	JMP       LR
	...

00001ecc <PCLK_CTL1_Peripheral_Clock_Enable>:
PCLK_CTL1_Peripheral_Clock_Enable():
..\src\kf32a9k1xxx_pclk.c:83
  * 返回  无。
  **/
void
PCLK_CTL1_Peripheral_Clock_Enable (uint32_t PCLK_CTL1_bit,
                    FunctionalState NewState)
{
    1ecc:	87 5f       	PUSH      {R6-R8,LR}
    1ece:	c0 58       	MOV       R6, R0
    1ed0:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_pclk.c:85
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PCLK_CTL1_PERIPH(PCLK_CTL1_bit));
    1ed2:	0e 45       	LD        R5, [PC + #14]        ;->0x1f08  :=0xe0440381
    1ed4:	68 d5       	ANL       R5, R0, R5
    1ed6:	00 10       	MOV       R0, #0
    1ed8:	50 70       	CMP       R5, R0
    1eda:	04 f1       	JNZ       $+4                   ;->0x1ee2
    1edc:	80 c7       	SUB       R0, R0, R6
    1ede:	80 d7       	ORL       R0, R0, R6
    1ee0:	87 7d       	LSR       R0, #31
    1ee2:	0b 45       	LD        R5, [PC + #11]        ;->0x1f0c  :=0x371a
    1ee4:	05 59       	MOV       R8, R5
    1ee6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pclk.c:86
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1ee8:	01 10       	MOV       R0, #1
    1eea:	70 70       	CMP       R7, R0
    1eec:	02 f9       	JLS       $+2                   ;->0x1ef0
    1eee:	00 10       	MOV       R0, #0
    1ef0:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_pclk.c:90

    if (NewState != FALSE)
    {
        PCLK_CTL1 |= PCLK_CTL1_bit;
    1ef2:	08 45       	LD        R5, [PC + #8]         ;->0x1f10  :=0x40002640
    1ef4:	65 98       	LD.W      R4, [R5 + #1]
..\src\kf32a9k1xxx_pclk.c:88
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PCLK_CTL1_PERIPH(PCLK_CTL1_bit));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    if (NewState != FALSE)
    1ef6:	70 38       	CMP       R7, #0
    1ef8:	0e f1       	JNZ       $+14                  ;->0x1f14
..\src\kf32a9k1xxx_pclk.c:94
    {
        PCLK_CTL1 |= PCLK_CTL1_bit;
    }
    else
    {
        PCLK_CTL1 &= ~PCLK_CTL1_bit;
    1efa:	66 68       	NOT       R6, R6
    1efc:	36 d5       	ANL       R6, R6, R4
    1efe:	6e a0       	ST.W      [R5 + #1], R6
..\src\kf32a9k1xxx_pclk.c:96
    }
}
    1f00:	07 5e       	POP       {R6-R8}
    1f02:	0d 5d       	POP       LR
    1f04:	1d 5c       	JMP       LR
    1f06:	00 00       	NOP      NOP      
    1f08:	81 03 44 e0 	.long     0xe0440381 ->-532413567  [!!!@4@:JMP       $-8265660             ;->0xff03df90
    1f0c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1f10:	40 26 00 40 	.long     0x40002640 ->1073751616  [!!!@2@:ST.W      [SP + #64], R6	@@: LD        R0, [PC + #0]         ;->0x1f10  :=0x40002640
..\src\kf32a9k1xxx_pclk.c:90
    CHECK_RESTRICTION(CHECK_PCLK_CTL1_PERIPH(PCLK_CTL1_bit));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    if (NewState != FALSE)
    {
        PCLK_CTL1 |= PCLK_CTL1_bit;
    1f14:	36 d7       	ORL       R6, R6, R4
    1f16:	6e a0       	ST.W      [R5 + #1], R6
..\src\kf32a9k1xxx_pclk.c:96
    }
    else
    {
        PCLK_CTL1 &= ~PCLK_CTL1_bit;
    }
}
    1f18:	07 5e       	POP       {R6-R8}
    1f1a:	0d 5d       	POP       LR
    1f1c:	1d 5c       	JMP       LR
	...

00001f20 <PCLK_CTL2_Peripheral_Clock_Enable>:
PCLK_CTL2_Peripheral_Clock_Enable():
..\src\kf32a9k1xxx_pclk.c:124
  * 返回  无。
  **/
void
PCLK_CTL2_Peripheral_Clock_Enable (uint32_t PCLK_CTL2_bit,
					FunctionalState NewState)
{
    1f20:	87 5f       	PUSH      {R6-R8,LR}
    1f22:	c0 58       	MOV       R6, R0
    1f24:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_pclk.c:126
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_PCLK_CTL2_PERIPH(PCLK_CTL2_bit));
    1f26:	0e 45       	LD        R5, [PC + #14]        ;->0x1f5c  :=0x469ea0dc
    1f28:	68 d5       	ANL       R5, R0, R5
    1f2a:	00 10       	MOV       R0, #0
    1f2c:	50 70       	CMP       R5, R0
    1f2e:	04 f1       	JNZ       $+4                   ;->0x1f36
    1f30:	80 c7       	SUB       R0, R0, R6
    1f32:	80 d7       	ORL       R0, R0, R6
    1f34:	87 7d       	LSR       R0, #31
    1f36:	0b 45       	LD        R5, [PC + #11]        ;->0x1f60  :=0x371a
    1f38:	05 59       	MOV       R8, R5
    1f3a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pclk.c:127
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1f3c:	01 10       	MOV       R0, #1
    1f3e:	70 70       	CMP       R7, R0
    1f40:	02 f9       	JLS       $+2                   ;->0x1f44
    1f42:	00 10       	MOV       R0, #0
    1f44:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_pclk.c:131

	if(NewState != FALSE)
	{
		PCLK_CTL2 |= PCLK_CTL2_bit;
    1f46:	08 45       	LD        R5, [PC + #8]         ;->0x1f64  :=0x40002640
    1f48:	a5 98       	LD.W      R4, [R5 + #2]
..\src\kf32a9k1xxx_pclk.c:129
{
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_PCLK_CTL2_PERIPH(PCLK_CTL2_bit));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	if(NewState != FALSE)
    1f4a:	70 38       	CMP       R7, #0
    1f4c:	0e f1       	JNZ       $+14                  ;->0x1f68
..\src\kf32a9k1xxx_pclk.c:135
	{
		PCLK_CTL2 |= PCLK_CTL2_bit;
	}
	else
	{
		PCLK_CTL2 &= ~PCLK_CTL2_bit;
    1f4e:	66 68       	NOT       R6, R6
    1f50:	36 d5       	ANL       R6, R6, R4
    1f52:	ae a0       	ST.W      [R5 + #2], R6
..\src\kf32a9k1xxx_pclk.c:137
	}
}
    1f54:	07 5e       	POP       {R6-R8}
    1f56:	0d 5d       	POP       LR
    1f58:	1d 5c       	JMP       LR
    1f5a:	00 00       	NOP      NOP      
    1f5c:	dc a0 9e 46 	.long     0x469ea0dc ->1184800988  [!!!@2@:ST.W      [R3 + #3], R4	@@: LD        R6, [PC + #158]       ;->0x21d4  :=0x5c06460a
    1f60:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1f64:	40 26 00 40 	.long     0x40002640 ->1073751616  [!!!@2@:ST.W      [SP + #64], R6	@@: LD        R0, [PC + #0]         ;->0x1f64  :=0x40002640
..\src\kf32a9k1xxx_pclk.c:131
	CHECK_RESTRICTION(CHECK_PCLK_CTL2_PERIPH(PCLK_CTL2_bit));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	if(NewState != FALSE)
	{
		PCLK_CTL2 |= PCLK_CTL2_bit;
    1f68:	36 d7       	ORL       R6, R6, R4
    1f6a:	ae a0       	ST.W      [R5 + #2], R6
..\src\kf32a9k1xxx_pclk.c:137
	}
	else
	{
		PCLK_CTL2 &= ~PCLK_CTL2_bit;
	}
}
    1f6c:	07 5e       	POP       {R6-R8}
    1f6e:	0d 5d       	POP       LR
    1f70:	1d 5c       	JMP       LR
	...

00001f74 <PM_EXTHF_PIN_Selection_Config>:
PM_EXTHF_PIN_Selection_Config():
..\src\kf32a9k1xxx_pm.c:1847
  *                         PM_EXTHF_PIN2_IO_PORT: 选择外部高频晶振2
  * 返回  无。
  */
void
PM_EXTHF_PIN_Selection_Config (uint32_t PeripheralPort)
{
    1f74:	2d 5d       	PUSH      LR
..\src\kf32a9k1xxx_pm.c:1849
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PM_EXTHF_PIN_IO(PeripheralPort));
    1f76:	00 38       	CMP       R0, #0
    1f78:	12 f0       	JZ        $+18                  ;->0x1f9c
    1f7a:	51 10       	MOV       R5, #1
    1f7c:	41 10       	MOV       R4, #1
    1f7e:	a7 7a       	LSL       R4, #15
    1f80:	04 70       	CMP       R0, R4
    1f82:	02 f0       	JZ        $+2                   ;->0x1f86
    1f84:	50 10       	MOV       R5, #0
    1f86:	05 58       	MOV       R0, R5
    1f88:	03 45       	LD        R5, [PC + #3]         ;->0x1f94  :=0x371a
    1f8a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pm.c:1855

    /*---------------- 设置PM_CTL1寄存器HSESEL位 ----------------*/
    if (PeripheralPort != PM_EXTHF_PIN1_IO_PORT)
    {
        /* 选择外部低频晶振2*/
        SFR_SET_BIT_ASM(PM_CAL1, PM_CAL1_HSE_SEL_POS);
    1f8c:	03 45       	LD        R5, [PC + #3]         ;->0x1f98  :=0x4000159c
    1f8e:	af 4c       	SET       [R5], #15
..\src\kf32a9k1xxx_pm.c:1862
    else
    {
        /* 选择外部低频晶振1 */
        SFR_CLR_BIT_ASM(PM_CAL1, PM_CAL1_HSE_SEL_POS);
    }
}
    1f90:	0d 5d       	POP       LR
    1f92:	1d 5c       	JMP       LR
    1f94:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1f98:	9c 15 00 40 	.long     0x4000159c ->1073747356  [!!!@2@:MOV       R9, #92	@@: LD        R0, [PC + #0]         ;->0x1f98  :=0x4000159c
..\src\kf32a9k1xxx_pm.c:1849
  */
void
PM_EXTHF_PIN_Selection_Config (uint32_t PeripheralPort)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_PM_EXTHF_PIN_IO(PeripheralPort));
    1f9c:	01 10       	MOV       R0, #1
    1f9e:	04 45       	LD        R5, [PC + #4]         ;->0x1fac  :=0x371a
    1fa0:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_pm.c:1860
        SFR_SET_BIT_ASM(PM_CAL1, PM_CAL1_HSE_SEL_POS);
    }
    else
    {
        /* 选择外部低频晶振1 */
        SFR_CLR_BIT_ASM(PM_CAL1, PM_CAL1_HSE_SEL_POS);
    1fa2:	04 45       	LD        R5, [PC + #4]         ;->0x1fb0  :=0x4000159c
    1fa4:	af 4e       	CLR       [R5], #15
..\src\kf32a9k1xxx_pm.c:1862
    }
}
    1fa6:	0d 5d       	POP       LR
    1fa8:	1d 5c       	JMP       LR
    1faa:	00 00       	NOP      NOP      
    1fac:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1fb0:	9c 15 00 40 	.long     0x4000159c ->1073747356  [!!!@2@:MOV       R9, #92	@@: LD        R0, [PC + #0]         ;->0x1fb0  :=0x4000159c

00001fb4 <RST_CTL0_Peripheral_Reset_Enable>:
RST_CTL0_Peripheral_Reset_Enable():
..\src\kf32a9k1xxx_rst.c:37
  * 返回  无。
  **/
void
RST_CTL0_Peripheral_Reset_Enable (uint32_t RST_CTL0_bit,
					FunctionalState NewState)
{
    1fb4:	87 5f       	PUSH      {R6-R8,LR}
    1fb6:	c0 58       	MOV       R6, R0
    1fb8:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_rst.c:39
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_RST_CTL0_RESET_PERIPH(RST_CTL0_bit));
    1fba:	49 10       	MOV       R4, #9
    1fbc:	28 dd       	LSR       R5, R0, R4
    1fbe:	00 10       	MOV       R0, #0
    1fc0:	50 70       	CMP       R5, R0
    1fc2:	04 f1       	JNZ       $+4                   ;->0x1fca
    1fc4:	80 c7       	SUB       R0, R0, R6
    1fc6:	80 d7       	ORL       R0, R0, R6
    1fc8:	87 7d       	LSR       R0, #31
    1fca:	0a 45       	LD        R5, [PC + #10]        ;->0x1ff0  :=0x371a
    1fcc:	05 59       	MOV       R8, R5
    1fce:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_rst.c:40
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    1fd0:	01 10       	MOV       R0, #1
    1fd2:	70 70       	CMP       R7, R0
    1fd4:	02 f9       	JLS       $+2                   ;->0x1fd8
    1fd6:	00 10       	MOV       R0, #0
    1fd8:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_rst.c:44

	if(NewState != FALSE)
	{
		RST_CTL0 |= RST_CTL0_bit;
    1fda:	07 45       	LD        R5, [PC + #7]         ;->0x1ff4  :=0x40001500
    1fdc:	45 82       	LD.W      R4, [R5]
..\src\kf32a9k1xxx_rst.c:42
{
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_RST_CTL0_RESET_PERIPH(RST_CTL0_bit));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	if(NewState != FALSE)
    1fde:	70 38       	CMP       R7, #0
    1fe0:	0c f1       	JNZ       $+12                  ;->0x1ff8
..\src\kf32a9k1xxx_rst.c:48
	{
		RST_CTL0 |= RST_CTL0_bit;
	}
	else
	{
		RST_CTL0 &= ~RST_CTL0_bit;
    1fe2:	66 68       	NOT       R6, R6
    1fe4:	36 d5       	ANL       R6, R6, R4
    1fe6:	56 85       	ST.W      [R5], R6
..\src\kf32a9k1xxx_rst.c:50
	}
}
    1fe8:	07 5e       	POP       {R6-R8}
    1fea:	0d 5d       	POP       LR
    1fec:	1d 5c       	JMP       LR
    1fee:	00 00       	NOP      NOP      
    1ff0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    1ff4:	00 15 00 40 	.long     0x40001500 ->1073747200  [!!!@2@:MOV       R0, #80	@@: LD        R0, [PC + #0]         ;->0x1ff4  :=0x40001500
..\src\kf32a9k1xxx_rst.c:44
	CHECK_RESTRICTION(CHECK_RST_CTL0_RESET_PERIPH(RST_CTL0_bit));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	if(NewState != FALSE)
	{
		RST_CTL0 |= RST_CTL0_bit;
    1ff8:	36 d7       	ORL       R6, R6, R4
    1ffa:	56 85       	ST.W      [R5], R6
..\src\kf32a9k1xxx_rst.c:50
	}
	else
	{
		RST_CTL0 &= ~RST_CTL0_bit;
	}
}
    1ffc:	07 5e       	POP       {R6-R8}
    1ffe:	0d 5d       	POP       LR
    2000:	1d 5c       	JMP       LR
	...

00002004 <RST_CTL1_Peripheral_Reset_Enable>:
RST_CTL1_Peripheral_Reset_Enable():
..\src\kf32a9k1xxx_rst.c:84
  * 返回  无。
  **/
void
RST_CTL1_Peripheral_Reset_Enable (uint32_t RST_CTL1_bit,
					FunctionalState NewState)
{
    2004:	87 5f       	PUSH      {R6-R8,LR}
    2006:	c0 58       	MOV       R6, R0
    2008:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_rst.c:86
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_RST_CTL1_RESET_PERIPH(RST_CTL1_bit));
    200a:	0e 45       	LD        R5, [PC + #14]        ;->0x2040  :=0xe0440381
    200c:	68 d5       	ANL       R5, R0, R5
    200e:	00 10       	MOV       R0, #0
    2010:	50 70       	CMP       R5, R0
    2012:	04 f1       	JNZ       $+4                   ;->0x201a
    2014:	80 c7       	SUB       R0, R0, R6
    2016:	80 d7       	ORL       R0, R0, R6
    2018:	87 7d       	LSR       R0, #31
    201a:	0b 45       	LD        R5, [PC + #11]        ;->0x2044  :=0x371a
    201c:	05 59       	MOV       R8, R5
    201e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_rst.c:87
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2020:	01 10       	MOV       R0, #1
    2022:	70 70       	CMP       R7, R0
    2024:	02 f9       	JLS       $+2                   ;->0x2028
    2026:	00 10       	MOV       R0, #0
    2028:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_rst.c:91

	if(NewState != FALSE)
	{
		RST_CTL1 |= RST_CTL1_bit;
    202a:	08 45       	LD        R5, [PC + #8]         ;->0x2048  :=0x40001500
    202c:	65 98       	LD.W      R4, [R5 + #1]
..\src\kf32a9k1xxx_rst.c:89
{
	/* 参数校验 */
	CHECK_RESTRICTION(CHECK_RST_CTL1_RESET_PERIPH(RST_CTL1_bit));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	if(NewState != FALSE)
    202e:	70 38       	CMP       R7, #0
    2030:	0e f1       	JNZ       $+14                  ;->0x204c
..\src\kf32a9k1xxx_rst.c:95
	{
		RST_CTL1 |= RST_CTL1_bit;
	}
	else
	{
		RST_CTL1 &= ~RST_CTL1_bit;
    2032:	66 68       	NOT       R6, R6
    2034:	36 d5       	ANL       R6, R6, R4
    2036:	6e a0       	ST.W      [R5 + #1], R6
..\src\kf32a9k1xxx_rst.c:97
	}
}
    2038:	07 5e       	POP       {R6-R8}
    203a:	0d 5d       	POP       LR
    203c:	1d 5c       	JMP       LR
    203e:	00 00       	NOP      NOP      
    2040:	81 03 44 e0 	.long     0xe0440381 ->-532413567  [!!!@4@:JMP       $-8265660             ;->0xff03e0c8
    2044:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    2048:	00 15 00 40 	.long     0x40001500 ->1073747200  [!!!@2@:MOV       R0, #80	@@: LD        R0, [PC + #0]         ;->0x2048  :=0x40001500
..\src\kf32a9k1xxx_rst.c:91
	CHECK_RESTRICTION(CHECK_RST_CTL1_RESET_PERIPH(RST_CTL1_bit));
	CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

	if(NewState != FALSE)
	{
		RST_CTL1 |= RST_CTL1_bit;
    204c:	36 d7       	ORL       R6, R6, R4
    204e:	6e a0       	ST.W      [R5 + #1], R6
..\src\kf32a9k1xxx_rst.c:97
	}
	else
	{
		RST_CTL1 &= ~RST_CTL1_bit;
	}
}
    2050:	07 5e       	POP       {R6-R8}
    2052:	0d 5d       	POP       LR
    2054:	1d 5c       	JMP       LR
	...

00002058 <RST_CTL2_Peripheral_Reset_Enable>:
RST_CTL2_Peripheral_Reset_Enable():
..\src\kf32a9k1xxx_rst.c:125
  * 返回  无。
  */
void
RST_CTL2_Peripheral_Reset_Enable (uint32_t RST_CTL2_bit,
					FunctionalState NewState)
{
    2058:	87 5f       	PUSH      {R6-R8,LR}
    205a:	c0 58       	MOV       R6, R0
    205c:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_rst.c:127
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_RST_CTL2_RESET_PERIPH(RST_CTL2_bit));
    205e:	0e 45       	LD        R5, [PC + #14]        ;->0x2094  :=0x469ea0dc
    2060:	68 d5       	ANL       R5, R0, R5
    2062:	00 10       	MOV       R0, #0
    2064:	50 70       	CMP       R5, R0
    2066:	04 f1       	JNZ       $+4                   ;->0x206e
    2068:	80 c7       	SUB       R0, R0, R6
    206a:	80 d7       	ORL       R0, R0, R6
    206c:	87 7d       	LSR       R0, #31
    206e:	0b 45       	LD        R5, [PC + #11]        ;->0x2098  :=0x371a
    2070:	05 59       	MOV       R8, R5
    2072:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_rst.c:128
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2074:	01 10       	MOV       R0, #1
    2076:	70 70       	CMP       R7, R0
    2078:	02 f9       	JLS       $+2                   ;->0x207c
    207a:	00 10       	MOV       R0, #0
    207c:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_rst.c:132

    if (NewState != FALSE)
    {
        RST_CTL2 |= RST_CTL2_bit;
    207e:	08 45       	LD        R5, [PC + #8]         ;->0x209c  :=0x40001500
    2080:	a5 98       	LD.W      R4, [R5 + #2]
..\src\kf32a9k1xxx_rst.c:130
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_RST_CTL2_RESET_PERIPH(RST_CTL2_bit));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    if (NewState != FALSE)
    2082:	70 38       	CMP       R7, #0
    2084:	0e f1       	JNZ       $+14                  ;->0x20a0
..\src\kf32a9k1xxx_rst.c:136
    {
        RST_CTL2 |= RST_CTL2_bit;
    }
    else
    {
        RST_CTL2 &= ~RST_CTL2_bit;
    2086:	66 68       	NOT       R6, R6
    2088:	36 d5       	ANL       R6, R6, R4
    208a:	ae a0       	ST.W      [R5 + #2], R6
..\src\kf32a9k1xxx_rst.c:138
    }
}
    208c:	07 5e       	POP       {R6-R8}
    208e:	0d 5d       	POP       LR
    2090:	1d 5c       	JMP       LR
    2092:	00 00       	NOP      NOP      
    2094:	dc a0 9e 46 	.long     0x469ea0dc ->1184800988  [!!!@2@:ST.W      [R3 + #3], R4	@@: LD        R6, [PC + #158]       ;->0x230c  :=0x5c1d
    2098:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    209c:	00 15 00 40 	.long     0x40001500 ->1073747200  [!!!@2@:MOV       R0, #80	@@: LD        R0, [PC + #0]         ;->0x209c  :=0x40001500
..\src\kf32a9k1xxx_rst.c:132
    CHECK_RESTRICTION(CHECK_RST_CTL2_RESET_PERIPH(RST_CTL2_bit));
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    if (NewState != FALSE)
    {
        RST_CTL2 |= RST_CTL2_bit;
    20a0:	36 d7       	ORL       R6, R6, R4
    20a2:	ae a0       	ST.W      [R5 + #2], R6
..\src\kf32a9k1xxx_rst.c:138
    }
    else
    {
        RST_CTL2 &= ~RST_CTL2_bit;
    }
}
    20a4:	07 5e       	POP       {R6-R8}
    20a6:	0d 5d       	POP       LR
    20a8:	1d 5c       	JMP       LR
	...

000020ac <SYSTICK_Configuration>:
SYSTICK_Configuration():
..\src\kf32a9k1xxx_systick.c:43
  *               取值为24位数据。
  * 返回  无
  */
void
SYSTICK_Configuration (uint32_t Clock, uint32_t SysTickINT, uint32_t Reload)
{
    20ac:	8f 5f       	PUSH      {R6-R9,LR}
    20ae:	00 59       	MOV       R8, R0
    20b0:	c1 58       	MOV       R6, R1
    20b2:	22 59       	MOV       R9, R2
..\src\kf32a9k1xxx_systick.c:47
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_SYSTICK_CLOCK(Clock));
    20b4:	01 10       	MOV       R0, #1
    20b6:	80 38       	CMP       R8, #0
    20b8:	04 f0       	JZ        $+4                   ;->0x20c0
    20ba:	84 38       	CMP       R8, #4
    20bc:	02 f0       	JZ        $+2                   ;->0x20c0
    20be:	00 10       	MOV       R0, #0
    20c0:	10 47       	LD        R7, [PC + #16]        ;->0x2100  :=0x371a
    20c2:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_systick.c:48
    CHECK_RESTRICTION(CHECK_SYSTICK_RELOAD(Reload));
    20c4:	a9 58       	MOV       R5, R9
    20c6:	a8 7d       	LSR       R5, #24
    20c8:	01 10       	MOV       R0, #1
    20ca:	50 38       	CMP       R5, #0
    20cc:	02 f0       	JZ        $+2                   ;->0x20d0
    20ce:	00 10       	MOV       R0, #0
    20d0:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_systick.c:49
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(SysTickINT));
    20d2:	01 10       	MOV       R0, #1
    20d4:	60 70       	CMP       R6, R0
    20d6:	02 f9       	JLS       $+2                   ;->0x20da
    20d8:	00 10       	MOV       R0, #0
    20da:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_systick.c:52

    /*------------ 禁止节拍定时器，防止意外中断 -------------*/
    SFR_CLR_BIT_ASM(ST_CTL, ST_CTL_STEN_POS);
    20dc:	0a 45       	LD        R5, [PC + #10]        ;->0x2104  :=0x402000a0
    20de:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_systick.c:55

    /*--------------- 设置ST_RELOAD寄存器 ---------------*/
    ST_RELOAD = Reload;
    20e0:	89 58       	MOV       R4, R9
    20e2:	6c a0       	ST.W      [R5 + #1], R4
..\src\kf32a9k1xxx_systick.c:59

    /*-- 设置ST_CV寄存器，以清零当前值寄存器并清零COUNTZERO标志位，
         确保重载值能加载到当前值寄存器中 -------------------*/
    ST_CV = 0;
    20e4:	40 10       	MOV       R4, #0
    20e6:	ac a0       	ST.W      [R5 + #2], R4
..\src\kf32a9k1xxx_systick.c:65

    /*------------------ 设置ST_CTL寄存器 -----------------*/
    /* 根据参数Clock，设置STCLKS位域 */
    /* 根据参数SysTickINT，设置TICKINTEN位域 */
    tmpreg = Clock | (SysTickINT << ST_CTL_TICKINTEN_POS);
    ST_CTL = SFR_Config (ST_CTL,
    20e8:	45 82       	LD.W      R4, [R5]
KF32A9K1XXX.h:13917
    20ea:	21 4a       	CLR       R4, #1
    20ec:	22 4a       	CLR       R4, #2
..\src\kf32a9k1xxx_systick.c:64
    ST_CV = 0;

    /*------------------ 设置ST_CTL寄存器 -----------------*/
    /* 根据参数Clock，设置STCLKS位域 */
    /* 根据参数SysTickINT，设置TICKINTEN位域 */
    tmpreg = Clock | (SysTickINT << ST_CTL_TICKINTEN_POS);
    20ee:	84 6a       	ORL       R8, R4
    20f0:	b6 c3       	ADD       R6, R6, R6
KF32A9K1XXX.h:13917
    20f2:	88 58       	MOV       R4, R8
    20f4:	b4 d7       	ORL       R6, R4, R6
..\src\kf32a9k1xxx_systick.c:65
    ST_CTL = SFR_Config (ST_CTL,
    20f6:	56 85       	ST.W      [R5], R6
..\src\kf32a9k1xxx_systick.c:68
                          ~SYSTICK_CTL_INIT_MASK,
                          tmpreg);
}
    20f8:	0f 5e       	POP       {R6-R9}
    20fa:	0d 5d       	POP       LR
    20fc:	1d 5c       	JMP       LR
    20fe:	00 00       	NOP      NOP      
    2100:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    2104:	a0 00 20 40 	.long     0x402000a0 ->1075839136 

00002108 <SYSTICK_Cmd>:
SYSTICK_Cmd():
..\src\kf32a9k1xxx_systick.c:86
  *                 取值范围为：TRUE 或 FALSE。
  * 返回  无
  */
void
SYSTICK_Cmd (FunctionalState NewState)
{
    2108:	81 5f       	PUSH      {R6,LR}
    210a:	c0 58       	MOV       R6, R0
..\src\kf32a9k1xxx_systick.c:88
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    210c:	01 10       	MOV       R0, #1
    210e:	60 70       	CMP       R6, R0
    2110:	02 f9       	JLS       $+2                   ;->0x2114
    2112:	00 10       	MOV       R0, #0
    2114:	05 45       	LD        R5, [PC + #5]         ;->0x2128  :=0x371a
    2116:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_systick.c:94

    /*---------------- 设置ST_CTL寄存器STEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能系统节拍定时器 */
        SFR_SET_BIT_ASM(ST_CTL, ST_CTL_STEN_POS);
    2118:	05 45       	LD        R5, [PC + #5]         ;->0x212c  :=0x402000a0
..\src\kf32a9k1xxx_systick.c:91
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));

    /*---------------- 设置ST_CTL寄存器STEN位 ----------------*/
    if (NewState != FALSE)
    211a:	60 38       	CMP       R6, #0
    211c:	0a f1       	JNZ       $+10                  ;->0x2130
..\src\kf32a9k1xxx_systick.c:99
        SFR_SET_BIT_ASM(ST_CTL, ST_CTL_STEN_POS);
    }
    else
    {
        /* 禁止系统节拍定时器 */
        SFR_CLR_BIT_ASM(ST_CTL, ST_CTL_STEN_POS);
    211e:	28 4e       	CLR       [R5], #0
..\src\kf32a9k1xxx_systick.c:101
    }
}
    2120:	06 5d       	POP       R6
    2122:	0d 5d       	POP       LR
    2124:	1d 5c       	JMP       LR
    2126:	00 00       	NOP      NOP      
    2128:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    212c:	a0 00 20 40 	.long     0x402000a0 ->1075839136 
..\src\kf32a9k1xxx_systick.c:94

    /*---------------- 设置ST_CTL寄存器STEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能系统节拍定时器 */
        SFR_SET_BIT_ASM(ST_CTL, ST_CTL_STEN_POS);
    2130:	28 4c       	SET       [R5], #0
..\src\kf32a9k1xxx_systick.c:101
    else
    {
        /* 禁止系统节拍定时器 */
        SFR_CLR_BIT_ASM(ST_CTL, ST_CTL_STEN_POS);
    }
}
    2132:	06 5d       	POP       R6
    2134:	0d 5d       	POP       LR
    2136:	1d 5c       	JMP       LR

00002138 <SYSTICK_Get_Count_Zero_Flag>:
SYSTICK_Get_Count_Zero_Flag():
..\src\kf32a9k1xxx_systick.c:165
  */
FlagStatus
SYSTICK_Get_Count_Zero_Flag (void)
{
    /*-------------------- 设置ST_CTL寄存器COUNTZERO位 --------------------*/
    if (ST_CTL & ST_CTL_COUNTZERO)
    2138:	03 45       	LD        R5, [PC + #3]         ;->0x2144  :=0x402000a0
    213a:	05 82       	LD.W      R0, [R5]
    213c:	00 7d       	LSR       R0, #16
..\src\kf32a9k1xxx_systick.c:175
    else
    {
        /* 计数未到零 */
        return RESET;
    }
}
    213e:	51 10       	MOV       R5, #1
    2140:	40 d5       	ANL       R0, R0, R5
    2142:	1d 5c       	JMP       LR
    2144:	a0 00 20 40 	.long     0x402000a0 ->1075839136 

00002148 <USART_Reset>:
USART_Reset():
..\src\kf32a9k1xxx_usart.c:56
  * 输入  USARTx: 指向USART内存结构的指针，取值为USART0_SFR/USART1_SFR/USART2_SFR/USART4_SFR/USART5_SFR/USART7_SFR。
  * 返回  无。
  */
void
USART_Reset (USART_SFRmap* USARTx)
{
    2148:	81 5f       	PUSH      {R6,LR}
..\src\kf32a9k1xxx_usart.c:58
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    214a:	10 45       	LD        R5, [PC + #16]        ;->0x2188  :=0x40000980
    214c:	05 70       	CMP       R0, R5
    214e:	3d f0       	JZ        $+61                  ;->0x21c8
    2150:	0f 45       	LD        R5, [PC + #15]        ;->0x218c  :=0x40000a00
    2152:	05 70       	CMP       R0, R5
    2154:	58 f0       	JZ        $+88                  ;->0x2204
    2156:	0f 45       	LD        R5, [PC + #15]        ;->0x2190  :=0x40000a80
    2158:	05 70       	CMP       R0, R5
    215a:	6f f0       	JZ        $+111                 ;->0x2238
    215c:	0e 45       	LD        R5, [PC + #14]        ;->0x2194  :=0x40000b80
    215e:	05 70       	CMP       R0, R5
    2160:	02 f1       	JNZ       $+2                   ;->0x2164
    2162:	85 04       	SJMP      $+133                 ;->0x226c
    2164:	0d 45       	LD        R5, [PC + #13]        ;->0x2198  :=0x40001e80
    2166:	05 70       	CMP       R0, R5
    2168:	1e f0       	JZ        $+30                  ;->0x21a4
    216a:	61 10       	MOV       R6, #1
    216c:	0c 45       	LD        R5, [PC + #12]        ;->0x219c  :=0x40001f80
    216e:	05 70       	CMP       R0, R5
    2170:	02 f0       	JZ        $+2                   ;->0x2174
    2172:	60 10       	MOV       R6, #0
    2174:	66 d1       	ZXT.B     R6, R6
    2176:	06 58       	MOV       R0, R6
    2178:	0a 45       	LD        R5, [PC + #10]        ;->0x21a0  :=0x371a
    217a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:90
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART5RST, TRUE);
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART5RST, FALSE);
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_USART5CLKEN, TRUE);
    }
    else if (USARTx == USART7_SFR)
    217c:	60 38       	CMP       R6, #0
    217e:	02 f0       	JZ        $+2                   ;->0x2182
    2180:	88 04       	SJMP      $+136                 ;->0x2290
..\src\kf32a9k1xxx_usart.c:100
    }
    else
    {
        ;
    }
}
    2182:	06 5d       	POP       R6
    2184:	0d 5d       	POP       LR
    2186:	1d 5c       	JMP       LR
    2188:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2188  :=0x40000980
    218c:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x218c  :=0x40000a00
    2190:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2190  :=0x40000a80
    2194:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2194  :=0x40000b80
    2198:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x2198  :=0x40001e80
    219c:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x219c  :=0x40001f80
    21a0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:58
  */
void
USART_Reset (USART_SFRmap* USARTx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    21a4:	01 10       	MOV       R0, #1
    21a6:	13 45       	LD        R5, [PC + #19]        ;->0x21f0  :=0x371a
    21a8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:86
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART4RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART4CLKEN, TRUE);
    }
    else if (USARTx == USART5_SFR)
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART5RST, TRUE);
    21aa:	01 10       	MOV       R0, #1
    21ac:	85 7b       	LSL       R0, #29
    21ae:	11 10       	MOV       R1, #1
    21b0:	11 46       	LD        R6, [PC + #17]        ;->0x21f4  :=0x2058
    21b2:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:87
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART5RST, FALSE);
    21b4:	01 10       	MOV       R0, #1
    21b6:	85 7b       	LSL       R0, #29
    21b8:	10 10       	MOV       R1, #0
    21ba:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:88
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_USART5CLKEN, TRUE);
    21bc:	01 10       	MOV       R0, #1
    21be:	85 7b       	LSL       R0, #29
    21c0:	11 10       	MOV       R1, #1
    21c2:	0e 45       	LD        R5, [PC + #14]        ;->0x21f8  :=0x1f20
    21c4:	05 5c       	LJMP      R5
    21c6:	de 07       	SJMP      $-34                  ;->0x2182
..\src\kf32a9k1xxx_usart.c:58
  */
void
USART_Reset (USART_SFRmap* USARTx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    21c8:	01 10       	MOV       R0, #1
    21ca:	0a 45       	LD        R5, [PC + #10]        ;->0x21f0  :=0x371a
    21cc:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:62

    if (USARTx == USART0_SFR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART0RST, TRUE);
    21ce:	01 10       	MOV       R0, #1
    21d0:	03 7b       	LSL       R0, #19
    21d2:	11 10       	MOV       R1, #1
    21d4:	0a 46       	LD        R6, [PC + #10]        ;->0x21fc  :=0x2004
    21d6:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:63
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART0RST, FALSE);
    21d8:	01 10       	MOV       R0, #1
    21da:	03 7b       	LSL       R0, #19
    21dc:	10 10       	MOV       R1, #0
    21de:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:64
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART0CLKEN, TRUE);
    21e0:	01 10       	MOV       R0, #1
    21e2:	03 7b       	LSL       R0, #19
    21e4:	11 10       	MOV       R1, #1
    21e6:	07 45       	LD        R5, [PC + #7]         ;->0x2200  :=0x1ecc
    21e8:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:100
    }
    else
    {
        ;
    }
}
    21ea:	06 5d       	POP       R6
    21ec:	0d 5d       	POP       LR
    21ee:	1d 5c       	JMP       LR
    21f0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    21f4:	58 20 00 00 	.long     0x00002058 ->000008280  [!!!@2@:ST.W      [SP + #88], R0	@@: NOP      
    21f8:	20 1f 00 00 	.long     0x00001f20 ->000007968  [!!!@2@:MOV       R2, #240	@@: NOP      
    21fc:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
    2200:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
..\src\kf32a9k1xxx_usart.c:58
  */
void
USART_Reset (USART_SFRmap* USARTx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    2204:	01 10       	MOV       R0, #1
    2206:	0a 45       	LD        R5, [PC + #10]        ;->0x222c  :=0x371a
    2208:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:68
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART0RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART0CLKEN, TRUE);
    }
    else if (USARTx == USART1_SFR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART1RST, TRUE);
    220a:	01 10       	MOV       R0, #1
    220c:	04 7b       	LSL       R0, #20
    220e:	11 10       	MOV       R1, #1
    2210:	08 46       	LD        R6, [PC + #8]         ;->0x2230  :=0x2004
    2212:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:69
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART1RST, FALSE);
    2214:	01 10       	MOV       R0, #1
    2216:	04 7b       	LSL       R0, #20
    2218:	10 10       	MOV       R1, #0
    221a:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:70
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART1CLKEN, TRUE);
    221c:	01 10       	MOV       R0, #1
    221e:	04 7b       	LSL       R0, #20
    2220:	11 10       	MOV       R1, #1
    2222:	05 45       	LD        R5, [PC + #5]         ;->0x2234  :=0x1ecc
    2224:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:100
    }
    else
    {
        ;
    }
}
    2226:	06 5d       	POP       R6
    2228:	0d 5d       	POP       LR
    222a:	1d 5c       	JMP       LR
    222c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    2230:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
    2234:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
..\src\kf32a9k1xxx_usart.c:58
  */
void
USART_Reset (USART_SFRmap* USARTx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    2238:	01 10       	MOV       R0, #1
    223a:	0a 45       	LD        R5, [PC + #10]        ;->0x2260  :=0x371a
    223c:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:74
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART1RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART1CLKEN, TRUE);
    }
    else if (USARTx == USART2_SFR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART2RST, TRUE);
    223e:	01 10       	MOV       R0, #1
    2240:	05 7b       	LSL       R0, #21
    2242:	11 10       	MOV       R1, #1
    2244:	08 46       	LD        R6, [PC + #8]         ;->0x2264  :=0x2004
    2246:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:75
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART2RST, FALSE);
    2248:	01 10       	MOV       R0, #1
    224a:	05 7b       	LSL       R0, #21
    224c:	10 10       	MOV       R1, #0
    224e:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:76
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART2CLKEN, TRUE);
    2250:	01 10       	MOV       R0, #1
    2252:	05 7b       	LSL       R0, #21
    2254:	11 10       	MOV       R1, #1
    2256:	05 45       	LD        R5, [PC + #5]         ;->0x2268  :=0x1ecc
    2258:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:100
    }
    else
    {
        ;
    }
}
    225a:	06 5d       	POP       R6
    225c:	0d 5d       	POP       LR
    225e:	1d 5c       	JMP       LR
    2260:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    2264:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
    2268:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
..\src\kf32a9k1xxx_usart.c:58
  */
void
USART_Reset (USART_SFRmap* USARTx)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    226c:	01 10       	MOV       R0, #1
    226e:	11 45       	LD        R5, [PC + #17]        ;->0x22b0  :=0x371a
    2270:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:80
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART2RST, FALSE);
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART2CLKEN, TRUE);
    }
    else if (USARTx == USART4_SFR)
    {
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART4RST, TRUE);
    2272:	01 10       	MOV       R0, #1
    2274:	07 7b       	LSL       R0, #23
    2276:	11 10       	MOV       R1, #1
    2278:	0f 46       	LD        R6, [PC + #15]        ;->0x22b4  :=0x2004
    227a:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:81
        RST_CTL1_Peripheral_Reset_Enable(RST_CTL1_USART4RST, FALSE);
    227c:	01 10       	MOV       R0, #1
    227e:	07 7b       	LSL       R0, #23
    2280:	10 10       	MOV       R1, #0
    2282:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:82
        PCLK_CTL1_Peripheral_Clock_Enable(PCLK_CTL1_USART4CLKEN, TRUE);
    2284:	01 10       	MOV       R0, #1
    2286:	07 7b       	LSL       R0, #23
    2288:	11 10       	MOV       R1, #1
    228a:	0c 45       	LD        R5, [PC + #12]        ;->0x22b8  :=0x1ecc
    228c:	05 5c       	LJMP      R5
    228e:	7a 07       	SJMP      $-134                 ;->0x2182
..\src\kf32a9k1xxx_usart.c:92
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART5RST, FALSE);
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_USART5CLKEN, TRUE);
    }
    else if (USARTx == USART7_SFR)
    {
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART7RST, TRUE);
    2290:	01 10       	MOV       R0, #1
    2292:	87 7b       	LSL       R0, #31
    2294:	11 10       	MOV       R1, #1
    2296:	0a 46       	LD        R6, [PC + #10]        ;->0x22bc  :=0x2058
    2298:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:93
        RST_CTL2_Peripheral_Reset_Enable(RST_CTL2_USART7RST, FALSE);
    229a:	01 10       	MOV       R0, #1
    229c:	87 7b       	LSL       R0, #31
    229e:	10 10       	MOV       R1, #0
    22a0:	06 5c       	LJMP      R6
..\src\kf32a9k1xxx_usart.c:94
        PCLK_CTL2_Peripheral_Clock_Enable(PCLK_CTL2_USART7CLKEN, TRUE);
    22a2:	01 10       	MOV       R0, #1
    22a4:	87 7b       	LSL       R0, #31
    22a6:	11 10       	MOV       R1, #1
    22a8:	06 45       	LD        R5, [PC + #6]         ;->0x22c0  :=0x1f20
    22aa:	05 5c       	LJMP      R5
    22ac:	6b 07       	SJMP      $-149                 ;->0x2182
    22ae:	00 00       	NOP      NOP      
    22b0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    22b4:	04 20 00 00 	.long     0x00002004 ->000008196  [!!!@2@:ST.W      [SP + #4], R0	@@: NOP      
    22b8:	cc 1e 00 00 	.long     0x00001ecc ->000007884  [!!!@2@:MOV       R12, #236	@@: NOP      
    22bc:	58 20 00 00 	.long     0x00002058 ->000008280  [!!!@2@:ST.W      [SP + #88], R0	@@: NOP      
    22c0:	20 1f 00 00 	.long     0x00001f20 ->000007968  [!!!@2@:MOV       R2, #240	@@: NOP      

000022c4 <USART_Cmd>:
USART_Cmd():
..\src\kf32a9k1xxx_usart.c:301
  *       NewState: USART使能使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_Cmd (USART_SFRmap* USARTx, FunctionalState NewState)
{
    22c4:	87 5f       	PUSH      {R6-R8,LR}
    22c6:	c0 58       	MOV       R6, R0
    22c8:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_usart.c:303
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    22ca:	01 10       	MOV       R0, #1
    22cc:	11 45       	LD        R5, [PC + #17]        ;->0x2310  :=0x40000980
    22ce:	65 70       	CMP       R6, R5
    22d0:	11 f0       	JZ        $+17                  ;->0x22f2
    22d2:	11 45       	LD        R5, [PC + #17]        ;->0x2314  :=0x40000a00
    22d4:	65 70       	CMP       R6, R5
    22d6:	0e f0       	JZ        $+14                  ;->0x22f2
    22d8:	10 45       	LD        R5, [PC + #16]        ;->0x2318  :=0x40000a80
    22da:	65 70       	CMP       R6, R5
    22dc:	0b f0       	JZ        $+11                  ;->0x22f2
    22de:	10 45       	LD        R5, [PC + #16]        ;->0x231c  :=0x40000b80
    22e0:	65 70       	CMP       R6, R5
    22e2:	08 f0       	JZ        $+8                   ;->0x22f2
    22e4:	0f 45       	LD        R5, [PC + #15]        ;->0x2320  :=0x40001e80
    22e6:	65 70       	CMP       R6, R5
    22e8:	05 f0       	JZ        $+5                   ;->0x22f2
    22ea:	0f 45       	LD        R5, [PC + #15]        ;->0x2324  :=0x40001f80
    22ec:	65 70       	CMP       R6, R5
    22ee:	02 f0       	JZ        $+2                   ;->0x22f2
    22f0:	00 10       	MOV       R0, #0
    22f2:	0e 45       	LD        R5, [PC + #14]        ;->0x2328  :=0x371a
    22f4:	05 59       	MOV       R8, R5
    22f6:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:304
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    22f8:	01 10       	MOV       R0, #1
    22fa:	70 70       	CMP       R7, R0
    22fc:	02 f9       	JLS       $+2                   ;->0x2300
    22fe:	00 10       	MOV       R0, #0
    2300:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_usart.c:307

    /*---------------- 配置USART_CTLR寄存器USARTEN位 ----------------*/
    if (NewState != FALSE)
    2302:	70 38       	CMP       R7, #0
    2304:	14 f1       	JNZ       $+20                  ;->0x232c
..\src\kf32a9k1xxx_usart.c:315
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_USARTEN_POS);
    }
    else
    {
        /* 禁止USART */
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_USARTEN_POS);
    2306:	30 4e       	CLR       [R6], #0
..\src\kf32a9k1xxx_usart.c:317
    }
}
    2308:	07 5e       	POP       {R6-R8}
    230a:	0d 5d       	POP       LR
    230c:	1d 5c       	JMP       LR
    230e:	00 00       	NOP      NOP      
    2310:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2310  :=0x40000980
    2314:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x2314  :=0x40000a00
    2318:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2318  :=0x40000a80
    231c:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x231c  :=0x40000b80
    2320:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x2320  :=0x40001e80
    2324:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x2324  :=0x40001f80
    2328:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:310

    /*---------------- 配置USART_CTLR寄存器USARTEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能USART */
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_USARTEN_POS);
    232c:	30 4c       	SET       [R6], #0
..\src\kf32a9k1xxx_usart.c:317
    else
    {
        /* 禁止USART */
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_USARTEN_POS);
    }
}
    232e:	07 5e       	POP       {R6-R8}
    2330:	0d 5d       	POP       LR
    2332:	1d 5c       	JMP       LR

00002334 <USART_BaudRate_Clock_Config>:
USART_BaudRate_Clock_Config():
..\src\kf32a9k1xxx_usart.c:330
  *              USART_CLK_LFCLK :低频外设时钟
  * 返回  无。
  */
void
USART_BaudRate_Clock_Config(USART_SFRmap* USARTx, uint32_t CLK)
{
    2334:	87 5f       	PUSH      {R6-R8,LR}
    2336:	c0 58       	MOV       R6, R0
    2338:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_usart.c:332
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    233a:	01 10       	MOV       R0, #1
    233c:	15 45       	LD        R5, [PC + #21]        ;->0x2390  :=0x40000980
    233e:	65 70       	CMP       R6, R5
    2340:	11 f0       	JZ        $+17                  ;->0x2362
    2342:	15 45       	LD        R5, [PC + #21]        ;->0x2394  :=0x40000a00
    2344:	65 70       	CMP       R6, R5
    2346:	0e f0       	JZ        $+14                  ;->0x2362
    2348:	14 45       	LD        R5, [PC + #20]        ;->0x2398  :=0x40000a80
    234a:	65 70       	CMP       R6, R5
    234c:	0b f0       	JZ        $+11                  ;->0x2362
    234e:	14 45       	LD        R5, [PC + #20]        ;->0x239c  :=0x40000b80
    2350:	65 70       	CMP       R6, R5
    2352:	08 f0       	JZ        $+8                   ;->0x2362
    2354:	13 45       	LD        R5, [PC + #19]        ;->0x23a0  :=0x40001e80
    2356:	65 70       	CMP       R6, R5
    2358:	05 f0       	JZ        $+5                   ;->0x2362
    235a:	13 45       	LD        R5, [PC + #19]        ;->0x23a4  :=0x40001f80
    235c:	65 70       	CMP       R6, R5
    235e:	02 f0       	JZ        $+2                   ;->0x2362
    2360:	00 10       	MOV       R0, #0
    2362:	12 45       	LD        R5, [PC + #18]        ;->0x23a8  :=0x371a
    2364:	05 59       	MOV       R8, R5
    2366:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:333
    CHECK_RESTRICTION(CHECK_USART_CLK(CLK));
    2368:	01 10       	MOV       R0, #1
    236a:	70 38       	CMP       R7, #0
    236c:	08 f0       	JZ        $+8                   ;->0x237c
    236e:	72 38       	CMP       R7, #2
    2370:	06 f0       	JZ        $+6                   ;->0x237c
    2372:	74 38       	CMP       R7, #4
    2374:	04 f0       	JZ        $+4                   ;->0x237c
    2376:	76 38       	CMP       R7, #6
    2378:	02 f0       	JZ        $+2                   ;->0x237c
    237a:	00 10       	MOV       R0, #0
    237c:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_usart.c:336

    /*---------------- 设置USART_CTLR寄存器BRCKS位 ----------------*/
    USARTx->CTLR = SFR_Config (USARTx->CTLR, ~USART_CTLR_BRCKS, CLK);
    237e:	56 82       	LD.W      R5, [R6]
KF32A9K1XXX.h:13917
    2380:	29 4a       	CLR       R5, #1
    2382:	2a 4a       	CLR       R5, #2
    2384:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_usart.c:336
    2386:	67 85       	ST.W      [R6], R7
..\src\kf32a9k1xxx_usart.c:337
}
    2388:	07 5e       	POP       {R6-R8}
    238a:	0d 5d       	POP       LR
    238c:	1d 5c       	JMP       LR
    238e:	00 00       	NOP      NOP      
    2390:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2390  :=0x40000980
    2394:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x2394  :=0x40000a00
    2398:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2398  :=0x40000a80
    239c:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x239c  :=0x40000b80
    23a0:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x23a0  :=0x40001e80
    23a4:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x23a4  :=0x40001f80
    23a8:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      

000023ac <USART_Transmit_Order_Config>:
USART_Transmit_Order_Config():
..\src\kf32a9k1xxx_usart.c:377
  *                   USART_TRANSMIT_LSB:先发送LSB。
  * 返回  无。
  */
void
USART_Transmit_Order_Config (USART_SFRmap* USARTx, uint32_t NewState)
{
    23ac:	87 5f       	PUSH      {R6-R8,LR}
    23ae:	c0 58       	MOV       R6, R0
    23b0:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_usart.c:379
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    23b2:	01 10       	MOV       R0, #1
    23b4:	10 45       	LD        R5, [PC + #16]        ;->0x23f4  :=0x40000980
    23b6:	65 70       	CMP       R6, R5
    23b8:	11 f0       	JZ        $+17                  ;->0x23da
    23ba:	10 45       	LD        R5, [PC + #16]        ;->0x23f8  :=0x40000a00
    23bc:	65 70       	CMP       R6, R5
    23be:	0e f0       	JZ        $+14                  ;->0x23da
    23c0:	0f 45       	LD        R5, [PC + #15]        ;->0x23fc  :=0x40000a80
    23c2:	65 70       	CMP       R6, R5
    23c4:	0b f0       	JZ        $+11                  ;->0x23da
    23c6:	0f 45       	LD        R5, [PC + #15]        ;->0x2400  :=0x40000b80
    23c8:	65 70       	CMP       R6, R5
    23ca:	08 f0       	JZ        $+8                   ;->0x23da
    23cc:	0e 45       	LD        R5, [PC + #14]        ;->0x2404  :=0x40001e80
    23ce:	65 70       	CMP       R6, R5
    23d0:	05 f0       	JZ        $+5                   ;->0x23da
    23d2:	0e 45       	LD        R5, [PC + #14]        ;->0x2408  :=0x40001f80
    23d4:	65 70       	CMP       R6, R5
    23d6:	02 f0       	JZ        $+2                   ;->0x23da
    23d8:	00 10       	MOV       R0, #0
    23da:	0d 47       	LD        R7, [PC + #13]        ;->0x240c  :=0x371a
    23dc:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:380
    CHECK_RESTRICTION(CHECK_USART_TRANSMIT_DIR(NewState));
    23de:	01 10       	MOV       R0, #1
    23e0:	80 38       	CMP       R8, #0
    23e2:	17 f0       	JZ        $+23                  ;->0x2410
    23e4:	80 39       	CMP       R8, #16
    23e6:	02 f0       	JZ        $+2                   ;->0x23ea
    23e8:	00 10       	MOV       R0, #0
    23ea:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:386

    /*---------------- 设置USART_CTLR寄存器TCONV位 ----------------*/
    if (NewState != USART_TRANSMIT_LSB)
    {
        /* 先发送MSB */
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_TCONV_POS);
    23ec:	34 4c       	SET       [R6], #4
..\src\kf32a9k1xxx_usart.c:393
    else
    {
        /* 先发送LSB */
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_TCONV_POS);
    }
}
    23ee:	07 5e       	POP       {R6-R8}
    23f0:	0d 5d       	POP       LR
    23f2:	1d 5c       	JMP       LR
    23f4:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x23f4  :=0x40000980
    23f8:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x23f8  :=0x40000a00
    23fc:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x23fc  :=0x40000a80
    2400:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2400  :=0x40000b80
    2404:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x2404  :=0x40001e80
    2408:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x2408  :=0x40001f80
    240c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:380
void
USART_Transmit_Order_Config (USART_SFRmap* USARTx, uint32_t NewState)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    CHECK_RESTRICTION(CHECK_USART_TRANSMIT_DIR(NewState));
    2410:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:391
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_TCONV_POS);
    }
    else
    {
        /* 先发送LSB */
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_TCONV_POS);
    2412:	34 4e       	CLR       [R6], #4
..\src\kf32a9k1xxx_usart.c:393
    }
}
    2414:	07 5e       	POP       {R6-R8}
    2416:	0d 5d       	POP       LR
    2418:	1d 5c       	JMP       LR
	...

0000241c <USART_Receive_Order_Config>:
USART_Receive_Order_Config():
..\src\kf32a9k1xxx_usart.c:405
  *                   USART_RECEIVE_LSB:先接收LSB。
  * 返回  无。
  */
void
USART_Receive_Order_Config (USART_SFRmap* USARTx, uint32_t NewState)
{
    241c:	87 5f       	PUSH      {R6-R8,LR}
    241e:	c0 58       	MOV       R6, R0
    2420:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_usart.c:407
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    2422:	01 10       	MOV       R0, #1
    2424:	10 45       	LD        R5, [PC + #16]        ;->0x2464  :=0x40000980
    2426:	65 70       	CMP       R6, R5
    2428:	11 f0       	JZ        $+17                  ;->0x244a
    242a:	10 45       	LD        R5, [PC + #16]        ;->0x2468  :=0x40000a00
    242c:	65 70       	CMP       R6, R5
    242e:	0e f0       	JZ        $+14                  ;->0x244a
    2430:	0f 45       	LD        R5, [PC + #15]        ;->0x246c  :=0x40000a80
    2432:	65 70       	CMP       R6, R5
    2434:	0b f0       	JZ        $+11                  ;->0x244a
    2436:	0f 45       	LD        R5, [PC + #15]        ;->0x2470  :=0x40000b80
    2438:	65 70       	CMP       R6, R5
    243a:	08 f0       	JZ        $+8                   ;->0x244a
    243c:	0e 45       	LD        R5, [PC + #14]        ;->0x2474  :=0x40001e80
    243e:	65 70       	CMP       R6, R5
    2440:	05 f0       	JZ        $+5                   ;->0x244a
    2442:	0e 45       	LD        R5, [PC + #14]        ;->0x2478  :=0x40001f80
    2444:	65 70       	CMP       R6, R5
    2446:	02 f0       	JZ        $+2                   ;->0x244a
    2448:	00 10       	MOV       R0, #0
    244a:	0d 47       	LD        R7, [PC + #13]        ;->0x247c  :=0x371a
    244c:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:408
    CHECK_RESTRICTION(CHECK_USART_RECEIVE_DIR(NewState));
    244e:	01 10       	MOV       R0, #1
    2450:	80 38       	CMP       R8, #0
    2452:	17 f0       	JZ        $+23                  ;->0x2480
    2454:	80 3a       	CMP       R8, #32
    2456:	02 f0       	JZ        $+2                   ;->0x245a
    2458:	00 10       	MOV       R0, #0
    245a:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:414

    /*---------------- 设置USART_CTLR寄存器RCONV位 ----------------*/
    if (NewState != USART_RECEIVE_LSB)
    {
        /* 先接收MSB */
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_RCONV_POS);
    245c:	35 4c       	SET       [R6], #5
..\src\kf32a9k1xxx_usart.c:421
    else
    {
        /* 先接收LSB */
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_RCONV_POS);
    }
}
    245e:	07 5e       	POP       {R6-R8}
    2460:	0d 5d       	POP       LR
    2462:	1d 5c       	JMP       LR
    2464:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2464  :=0x40000980
    2468:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x2468  :=0x40000a00
    246c:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x246c  :=0x40000a80
    2470:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2470  :=0x40000b80
    2474:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x2474  :=0x40001e80
    2478:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x2478  :=0x40001f80
    247c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:408
void
USART_Receive_Order_Config (USART_SFRmap* USARTx, uint32_t NewState)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    CHECK_RESTRICTION(CHECK_USART_RECEIVE_DIR(NewState));
    2480:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:419
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_RCONV_POS);
    }
    else
    {
        /* 先接收LSB */
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_RCONV_POS);
    2482:	35 4e       	CLR       [R6], #5
..\src\kf32a9k1xxx_usart.c:421
    }
}
    2484:	07 5e       	POP       {R6-R8}
    2486:	0d 5d       	POP       LR
    2488:	1d 5c       	JMP       LR
	...

0000248c <USART_Clock_Source_Config>:
USART_Clock_Source_Config():
..\src\kf32a9k1xxx_usart.c:488
  *                      USART_SLAVE_CLOCKSOURCE_EXTER: 从模式(时钟源来自外部)。
  * 返回  无。
  */
void
USART_Clock_Source_Config(USART_SFRmap* USARTx, uint32_t ClockSource)
{
    248c:	87 5f       	PUSH      {R6-R8,LR}
    248e:	c0 58       	MOV       R6, R0
    2490:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_usart.c:490
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    2492:	01 10       	MOV       R0, #1
    2494:	11 45       	LD        R5, [PC + #17]        ;->0x24d8  :=0x40000980
    2496:	65 70       	CMP       R6, R5
    2498:	11 f0       	JZ        $+17                  ;->0x24ba
    249a:	11 45       	LD        R5, [PC + #17]        ;->0x24dc  :=0x40000a00
    249c:	65 70       	CMP       R6, R5
    249e:	0e f0       	JZ        $+14                  ;->0x24ba
    24a0:	10 45       	LD        R5, [PC + #16]        ;->0x24e0  :=0x40000a80
    24a2:	65 70       	CMP       R6, R5
    24a4:	0b f0       	JZ        $+11                  ;->0x24ba
    24a6:	10 45       	LD        R5, [PC + #16]        ;->0x24e4  :=0x40000b80
    24a8:	65 70       	CMP       R6, R5
    24aa:	08 f0       	JZ        $+8                   ;->0x24ba
    24ac:	0f 45       	LD        R5, [PC + #15]        ;->0x24e8  :=0x40001e80
    24ae:	65 70       	CMP       R6, R5
    24b0:	05 f0       	JZ        $+5                   ;->0x24ba
    24b2:	0f 45       	LD        R5, [PC + #15]        ;->0x24ec  :=0x40001f80
    24b4:	65 70       	CMP       R6, R5
    24b6:	02 f0       	JZ        $+2                   ;->0x24ba
    24b8:	00 10       	MOV       R0, #0
    24ba:	0e 47       	LD        R7, [PC + #14]        ;->0x24f0  :=0x371a
    24bc:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:491
    CHECK_RESTRICTION(CHECK_USART_CLOCKSOURCE(ClockSource));
    24be:	01 10       	MOV       R0, #1
    24c0:	80 38       	CMP       R8, #0
    24c2:	19 f0       	JZ        $+25                  ;->0x24f4
    24c4:	5f 1f       	MOV       R5, #255
    24c6:	6d c0       	ADD       R5, R5, #1
    24c8:	85 70       	CMP       R8, R5
    24ca:	02 f0       	JZ        $+2                   ;->0x24ce
    24cc:	00 10       	MOV       R0, #0
    24ce:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:497

    /*---------------- 设置USART_CTLR寄存器CSRS位 ----------------*/
    if (ClockSource != USART_SLAVE_CLOCKSOURCE_EXTER)
    {
        /* 主模式(由BRG内部产生时钟*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_CSRS_POS);
    24d0:	b0 4c       	SET       [R6], #8
..\src\kf32a9k1xxx_usart.c:504
    else
    {
        /* 从模式(时钟源来自外部*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_CSRS_POS);
    }
}
    24d2:	07 5e       	POP       {R6-R8}
    24d4:	0d 5d       	POP       LR
    24d6:	1d 5c       	JMP       LR
    24d8:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x24d8  :=0x40000980
    24dc:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x24dc  :=0x40000a00
    24e0:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x24e0  :=0x40000a80
    24e4:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x24e4  :=0x40000b80
    24e8:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x24e8  :=0x40001e80
    24ec:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x24ec  :=0x40001f80
    24f0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:491
void
USART_Clock_Source_Config(USART_SFRmap* USARTx, uint32_t ClockSource)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    CHECK_RESTRICTION(CHECK_USART_CLOCKSOURCE(ClockSource));
    24f4:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:502
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_CSRS_POS);
    }
    else
    {
        /* 从模式(时钟源来自外部*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_CSRS_POS);
    24f6:	b0 4e       	CLR       [R6], #8
..\src\kf32a9k1xxx_usart.c:504
    }
}
    24f8:	07 5e       	POP       {R6-R8}
    24fa:	0d 5d       	POP       LR
    24fc:	1d 5c       	JMP       LR
	...

00002500 <USART_SYNC_Choice_Config>:
USART_SYNC_Choice_Config():
..\src\kf32a9k1xxx_usart.c:618
  *                  USART_MODE_FULLDUPLEXASY:全双工异步模式。
  * 返回  无。
  */
void
USART_SYNC_Choice_Config(USART_SFRmap* USARTx, uint32_t NewMode)
{
    2500:	87 5f       	PUSH      {R6-R8,LR}
    2502:	c0 58       	MOV       R6, R0
    2504:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_usart.c:620
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    2506:	01 10       	MOV       R0, #1
    2508:	11 45       	LD        R5, [PC + #17]        ;->0x254c  :=0x40000980
    250a:	65 70       	CMP       R6, R5
    250c:	11 f0       	JZ        $+17                  ;->0x252e
    250e:	11 45       	LD        R5, [PC + #17]        ;->0x2550  :=0x40000a00
    2510:	65 70       	CMP       R6, R5
    2512:	0e f0       	JZ        $+14                  ;->0x252e
    2514:	10 45       	LD        R5, [PC + #16]        ;->0x2554  :=0x40000a80
    2516:	65 70       	CMP       R6, R5
    2518:	0b f0       	JZ        $+11                  ;->0x252e
    251a:	10 45       	LD        R5, [PC + #16]        ;->0x2558  :=0x40000b80
    251c:	65 70       	CMP       R6, R5
    251e:	08 f0       	JZ        $+8                   ;->0x252e
    2520:	0f 45       	LD        R5, [PC + #15]        ;->0x255c  :=0x40001e80
    2522:	65 70       	CMP       R6, R5
    2524:	05 f0       	JZ        $+5                   ;->0x252e
    2526:	0f 45       	LD        R5, [PC + #15]        ;->0x2560  :=0x40001f80
    2528:	65 70       	CMP       R6, R5
    252a:	02 f0       	JZ        $+2                   ;->0x252e
    252c:	00 10       	MOV       R0, #0
    252e:	0e 47       	LD        R7, [PC + #14]        ;->0x2564  :=0x371a
    2530:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:621
    CHECK_RESTRICTION(CHECK_USART_MODE(NewMode));
    2532:	01 10       	MOV       R0, #1
    2534:	80 38       	CMP       R8, #0
    2536:	1b f0       	JZ        $+27                  ;->0x256c
    2538:	0c 45       	LD        R5, [PC + #12]        ;->0x2568  :=0x40004000
    253a:	85 70       	CMP       R8, R5
    253c:	02 f0       	JZ        $+2                   ;->0x2540
    253e:	00 10       	MOV       R0, #0
    2540:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:627

    /*---------------- 设置USART_CTLR寄存器SYNC位 ----------------*/
    if (NewMode != USART_MODE_FULLDUPLEXASY)
    {
        /* 半双工同步模式*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_SYNC_POS);
    2542:	b6 4c       	SET       [R6], #14
..\src\kf32a9k1xxx_usart.c:634
    else
    {
        /*全双工异步模式*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_SYNC_POS);
    }
}
    2544:	07 5e       	POP       {R6-R8}
    2546:	0d 5d       	POP       LR
    2548:	1d 5c       	JMP       LR
    254a:	00 00       	NOP      NOP      
    254c:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x254c  :=0x40000980
    2550:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x2550  :=0x40000a00
    2554:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2554  :=0x40000a80
    2558:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2558  :=0x40000b80
    255c:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x255c  :=0x40001e80
    2560:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x2560  :=0x40001f80
    2564:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    2568:	00 40 00 40 	.long     0x40004000 ->1073758208  [!!!@2@:LD        R0, [PC + #0]         ;->0x2568  :=0x40004000	@@: LD        R0, [PC + #0]         ;->0x2568  :=0x40004000
..\src\kf32a9k1xxx_usart.c:621
void
USART_SYNC_Choice_Config(USART_SFRmap* USARTx, uint32_t NewMode)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    CHECK_RESTRICTION(CHECK_USART_MODE(NewMode));
    256c:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:632
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_SYNC_POS);
    }
    else
    {
        /*全双工异步模式*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_SYNC_POS);
    256e:	b6 4e       	CLR       [R6], #14
..\src\kf32a9k1xxx_usart.c:634
    }
}
    2570:	07 5e       	POP       {R6-R8}
    2572:	0d 5d       	POP       LR
    2574:	1d 5c       	JMP       LR
	...

00002578 <USART_Transmit_Data_Enable>:
USART_Transmit_Data_Enable():
..\src\kf32a9k1xxx_usart.c:644
  *       NewState: USART发送使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_Transmit_Data_Enable (USART_SFRmap* USARTx, FunctionalState NewState)
{
    2578:	87 5f       	PUSH      {R6-R8,LR}
    257a:	c0 58       	MOV       R6, R0
    257c:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_usart.c:646
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    257e:	01 10       	MOV       R0, #1
    2580:	11 45       	LD        R5, [PC + #17]        ;->0x25c4  :=0x40000980
    2582:	65 70       	CMP       R6, R5
    2584:	11 f0       	JZ        $+17                  ;->0x25a6
    2586:	11 45       	LD        R5, [PC + #17]        ;->0x25c8  :=0x40000a00
    2588:	65 70       	CMP       R6, R5
    258a:	0e f0       	JZ        $+14                  ;->0x25a6
    258c:	10 45       	LD        R5, [PC + #16]        ;->0x25cc  :=0x40000a80
    258e:	65 70       	CMP       R6, R5
    2590:	0b f0       	JZ        $+11                  ;->0x25a6
    2592:	10 45       	LD        R5, [PC + #16]        ;->0x25d0  :=0x40000b80
    2594:	65 70       	CMP       R6, R5
    2596:	08 f0       	JZ        $+8                   ;->0x25a6
    2598:	0f 45       	LD        R5, [PC + #15]        ;->0x25d4  :=0x40001e80
    259a:	65 70       	CMP       R6, R5
    259c:	05 f0       	JZ        $+5                   ;->0x25a6
    259e:	0f 45       	LD        R5, [PC + #15]        ;->0x25d8  :=0x40001f80
    25a0:	65 70       	CMP       R6, R5
    25a2:	02 f0       	JZ        $+2                   ;->0x25a6
    25a4:	00 10       	MOV       R0, #0
    25a6:	0e 45       	LD        R5, [PC + #14]        ;->0x25dc  :=0x371a
    25a8:	05 59       	MOV       R8, R5
    25aa:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:647
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    25ac:	01 10       	MOV       R0, #1
    25ae:	70 70       	CMP       R7, R0
    25b0:	02 f9       	JLS       $+2                   ;->0x25b4
    25b2:	00 10       	MOV       R0, #0
    25b4:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_usart.c:650

    /*---------------- 设置USART_CTLR寄存器TXEN位 ----------------*/
    if (NewState != FALSE)
    25b6:	70 38       	CMP       R7, #0
    25b8:	14 f1       	JNZ       $+20                  ;->0x25e0
..\src\kf32a9k1xxx_usart.c:658
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_TXEN_POS);
    }
    else
    {
        /* 禁止发送*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_TXEN_POS);
    25ba:	b7 4e       	CLR       [R6], #15
..\src\kf32a9k1xxx_usart.c:660
    }
}
    25bc:	07 5e       	POP       {R6-R8}
    25be:	0d 5d       	POP       LR
    25c0:	1d 5c       	JMP       LR
    25c2:	00 00       	NOP      NOP      
    25c4:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x25c4  :=0x40000980
    25c8:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x25c8  :=0x40000a00
    25cc:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x25cc  :=0x40000a80
    25d0:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x25d0  :=0x40000b80
    25d4:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x25d4  :=0x40001e80
    25d8:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x25d8  :=0x40001f80
    25dc:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:653

    /*---------------- 设置USART_CTLR寄存器TXEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能发送*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_TXEN_POS);
    25e0:	b7 4c       	SET       [R6], #15
..\src\kf32a9k1xxx_usart.c:660
    else
    {
        /* 禁止发送*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_TXEN_POS);
    }
}
    25e2:	07 5e       	POP       {R6-R8}
    25e4:	0d 5d       	POP       LR
    25e6:	1d 5c       	JMP       LR

000025e8 <USART_Receive_Data_Enable>:
USART_Receive_Data_Enable():
..\src\kf32a9k1xxx_usart.c:670
  *       NewState: USART接收使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_Receive_Data_Enable (USART_SFRmap* USARTx, FunctionalState NewState)
{
    25e8:	87 5f       	PUSH      {R6-R8,LR}
    25ea:	c0 58       	MOV       R6, R0
    25ec:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_usart.c:672
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    25ee:	01 10       	MOV       R0, #1
    25f0:	11 45       	LD        R5, [PC + #17]        ;->0x2634  :=0x40000980
    25f2:	65 70       	CMP       R6, R5
    25f4:	11 f0       	JZ        $+17                  ;->0x2616
    25f6:	11 45       	LD        R5, [PC + #17]        ;->0x2638  :=0x40000a00
    25f8:	65 70       	CMP       R6, R5
    25fa:	0e f0       	JZ        $+14                  ;->0x2616
    25fc:	10 45       	LD        R5, [PC + #16]        ;->0x263c  :=0x40000a80
    25fe:	65 70       	CMP       R6, R5
    2600:	0b f0       	JZ        $+11                  ;->0x2616
    2602:	10 45       	LD        R5, [PC + #16]        ;->0x2640  :=0x40000b80
    2604:	65 70       	CMP       R6, R5
    2606:	08 f0       	JZ        $+8                   ;->0x2616
    2608:	0f 45       	LD        R5, [PC + #15]        ;->0x2644  :=0x40001e80
    260a:	65 70       	CMP       R6, R5
    260c:	05 f0       	JZ        $+5                   ;->0x2616
    260e:	0f 45       	LD        R5, [PC + #15]        ;->0x2648  :=0x40001f80
    2610:	65 70       	CMP       R6, R5
    2612:	02 f0       	JZ        $+2                   ;->0x2616
    2614:	00 10       	MOV       R0, #0
    2616:	0e 45       	LD        R5, [PC + #14]        ;->0x264c  :=0x371a
    2618:	05 59       	MOV       R8, R5
    261a:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:673
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    261c:	01 10       	MOV       R0, #1
    261e:	70 70       	CMP       R7, R0
    2620:	02 f9       	JLS       $+2                   ;->0x2624
    2622:	00 10       	MOV       R0, #0
    2624:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_usart.c:676

    /*---------------- 设置USART_CTLR寄存器RXEN位 ----------------*/
    if (NewState != FALSE)
    2626:	70 38       	CMP       R7, #0
    2628:	14 f1       	JNZ       $+20                  ;->0x2650
..\src\kf32a9k1xxx_usart.c:684
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_RXEN_POS);
    }
    else
    {
        /* 禁止接收*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_RXEN_POS);
    262a:	30 4f       	CLR       [R6], #16
..\src\kf32a9k1xxx_usart.c:686
    }
}
    262c:	07 5e       	POP       {R6-R8}
    262e:	0d 5d       	POP       LR
    2630:	1d 5c       	JMP       LR
    2632:	00 00       	NOP      NOP      
    2634:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2634  :=0x40000980
    2638:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x2638  :=0x40000a00
    263c:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x263c  :=0x40000a80
    2640:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2640  :=0x40000b80
    2644:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x2644  :=0x40001e80
    2648:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x2648  :=0x40001f80
    264c:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:679

    /*---------------- 设置USART_CTLR寄存器RXEN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能接收*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_RXEN_POS);
    2650:	30 4d       	SET       [R6], #16
..\src\kf32a9k1xxx_usart.c:686
    else
    {
        /* 禁止接收*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_RXEN_POS);
    }
}
    2652:	07 5e       	POP       {R6-R8}
    2654:	0d 5d       	POP       LR
    2656:	1d 5c       	JMP       LR

00002658 <USART_STOP_Word_Config>:
USART_STOP_Word_Config():
..\src\kf32a9k1xxx_usart.c:698
  *                    USART_STOPBITS_1 :停止位长度为1bit。
  * 返回  无。
  */
void
USART_STOP_Word_Config(USART_SFRmap* USARTx, uint32_t NewLength)
{
    2658:	87 5f       	PUSH      {R6-R8,LR}
    265a:	c0 58       	MOV       R6, R0
    265c:	01 59       	MOV       R8, R1
..\src\kf32a9k1xxx_usart.c:700
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    265e:	01 10       	MOV       R0, #1
    2660:	11 45       	LD        R5, [PC + #17]        ;->0x26a4  :=0x40000980
    2662:	65 70       	CMP       R6, R5
    2664:	11 f0       	JZ        $+17                  ;->0x2686
    2666:	11 45       	LD        R5, [PC + #17]        ;->0x26a8  :=0x40000a00
    2668:	65 70       	CMP       R6, R5
    266a:	0e f0       	JZ        $+14                  ;->0x2686
    266c:	10 45       	LD        R5, [PC + #16]        ;->0x26ac  :=0x40000a80
    266e:	65 70       	CMP       R6, R5
    2670:	0b f0       	JZ        $+11                  ;->0x2686
    2672:	10 45       	LD        R5, [PC + #16]        ;->0x26b0  :=0x40000b80
    2674:	65 70       	CMP       R6, R5
    2676:	08 f0       	JZ        $+8                   ;->0x2686
    2678:	0f 45       	LD        R5, [PC + #15]        ;->0x26b4  :=0x40001e80
    267a:	65 70       	CMP       R6, R5
    267c:	05 f0       	JZ        $+5                   ;->0x2686
    267e:	0f 45       	LD        R5, [PC + #15]        ;->0x26b8  :=0x40001f80
    2680:	65 70       	CMP       R6, R5
    2682:	02 f0       	JZ        $+2                   ;->0x2686
    2684:	00 10       	MOV       R0, #0
    2686:	0e 47       	LD        R7, [PC + #14]        ;->0x26bc  :=0x371a
    2688:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:701
    CHECK_RESTRICTION(CHECK_USART_STOPBITS(NewLength));
    268a:	01 10       	MOV       R0, #1
    268c:	80 38       	CMP       R8, #0
    268e:	19 f0       	JZ        $+25                  ;->0x26c0
    2690:	51 10       	MOV       R5, #1
    2692:	2a 7b       	LSL       R5, #18
    2694:	85 70       	CMP       R8, R5
    2696:	02 f0       	JZ        $+2                   ;->0x269a
    2698:	00 10       	MOV       R0, #0
    269a:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:707

    /*---------------- 设置USART_CTLR寄存器STPW位 ----------------*/
    if (NewLength != USART_STOPBITS_1)
    {
        /* 停止位长度为2bits*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_STPW_POS);
    269c:	32 4d       	SET       [R6], #18
..\src\kf32a9k1xxx_usart.c:714
    else
    {
        /* 停止位长度为1bit*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_STPW_POS);
    }
}
    269e:	07 5e       	POP       {R6-R8}
    26a0:	0d 5d       	POP       LR
    26a2:	1d 5c       	JMP       LR
    26a4:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x26a4  :=0x40000980
    26a8:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x26a8  :=0x40000a00
    26ac:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x26ac  :=0x40000a80
    26b0:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x26b0  :=0x40000b80
    26b4:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x26b4  :=0x40001e80
    26b8:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x26b8  :=0x40001f80
    26bc:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:701
void
USART_STOP_Word_Config(USART_SFRmap* USARTx, uint32_t NewLength)
{
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    CHECK_RESTRICTION(CHECK_USART_STOPBITS(NewLength));
    26c0:	07 5c       	LJMP      R7
..\src\kf32a9k1xxx_usart.c:712
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_STPW_POS);
    }
    else
    {
        /* 停止位长度为1bit*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_STPW_POS);
    26c2:	32 4f       	CLR       [R6], #18
..\src\kf32a9k1xxx_usart.c:714
    }
}
    26c4:	07 5e       	POP       {R6-R8}
    26c6:	0d 5d       	POP       LR
    26c8:	1d 5c       	JMP       LR
	...

000026cc <USART_9Data_Enable>:
USART_9Data_Enable():
..\src\kf32a9k1xxx_usart.c:780
  *       NewState: USART第9位数据使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_9Data_Enable (USART_SFRmap* USARTx, FunctionalState NewState)
{
    26cc:	87 5f       	PUSH      {R6-R8,LR}
    26ce:	c0 58       	MOV       R6, R0
    26d0:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_usart.c:782
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    26d2:	01 10       	MOV       R0, #1
    26d4:	11 45       	LD        R5, [PC + #17]        ;->0x2718  :=0x40000980
    26d6:	65 70       	CMP       R6, R5
    26d8:	11 f0       	JZ        $+17                  ;->0x26fa
    26da:	11 45       	LD        R5, [PC + #17]        ;->0x271c  :=0x40000a00
    26dc:	65 70       	CMP       R6, R5
    26de:	0e f0       	JZ        $+14                  ;->0x26fa
    26e0:	10 45       	LD        R5, [PC + #16]        ;->0x2720  :=0x40000a80
    26e2:	65 70       	CMP       R6, R5
    26e4:	0b f0       	JZ        $+11                  ;->0x26fa
    26e6:	10 45       	LD        R5, [PC + #16]        ;->0x2724  :=0x40000b80
    26e8:	65 70       	CMP       R6, R5
    26ea:	08 f0       	JZ        $+8                   ;->0x26fa
    26ec:	0f 45       	LD        R5, [PC + #15]        ;->0x2728  :=0x40001e80
    26ee:	65 70       	CMP       R6, R5
    26f0:	05 f0       	JZ        $+5                   ;->0x26fa
    26f2:	0f 45       	LD        R5, [PC + #15]        ;->0x272c  :=0x40001f80
    26f4:	65 70       	CMP       R6, R5
    26f6:	02 f0       	JZ        $+2                   ;->0x26fa
    26f8:	00 10       	MOV       R0, #0
    26fa:	0e 45       	LD        R5, [PC + #14]        ;->0x2730  :=0x371a
    26fc:	05 59       	MOV       R8, R5
    26fe:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:783
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2700:	01 10       	MOV       R0, #1
    2702:	70 70       	CMP       R7, R0
    2704:	02 f9       	JLS       $+2                   ;->0x2708
    2706:	00 10       	MOV       R0, #0
    2708:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_usart.c:786

    /*---------------- 设置USART_CTLR寄存器DT9EN位 ----------------*/
    if (NewState != FALSE)
    270a:	70 38       	CMP       R7, #0
    270c:	14 f1       	JNZ       $+20                  ;->0x2734
..\src\kf32a9k1xxx_usart.c:794
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_DT9EN_POS);
    }
    else
    {
        /* 未使能第9位数据发送和接收*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_DT9EN_POS);
    270e:	35 4f       	CLR       [R6], #21
..\src\kf32a9k1xxx_usart.c:796
    }
}
    2710:	07 5e       	POP       {R6-R8}
    2712:	0d 5d       	POP       LR
    2714:	1d 5c       	JMP       LR
    2716:	00 00       	NOP      NOP      
    2718:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2718  :=0x40000980
    271c:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x271c  :=0x40000a00
    2720:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2720  :=0x40000a80
    2724:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2724  :=0x40000b80
    2728:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x2728  :=0x40001e80
    272c:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x272c  :=0x40001f80
    2730:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:789

    /*---------------- 设置USART_CTLR寄存器DT9EN位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能第9位数据发送和接收*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_DT9EN_POS);
    2734:	35 4d       	SET       [R6], #21
..\src\kf32a9k1xxx_usart.c:796
    else
    {
        /* 未使能第9位数据发送和接收*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_DT9EN_POS);
    }
}
    2736:	07 5e       	POP       {R6-R8}
    2738:	0d 5d       	POP       LR
    273a:	1d 5c       	JMP       LR

0000273c <USART_RESHD_Enable>:
USART_RESHD_Enable():
..\src\kf32a9k1xxx_usart.c:884
  *       NewState: USART 单线模式使能状态，取值为TRUE 或 FALSE。
  * 返回  无。
  */
void
USART_RESHD_Enable (USART_SFRmap* USARTx, FunctionalState NewState)
{
    273c:	87 5f       	PUSH      {R6-R8,LR}
    273e:	c0 58       	MOV       R6, R0
    2740:	e1 58       	MOV       R7, R1
..\src\kf32a9k1xxx_usart.c:886
    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    2742:	01 10       	MOV       R0, #1
    2744:	11 45       	LD        R5, [PC + #17]        ;->0x2788  :=0x40000980
    2746:	65 70       	CMP       R6, R5
    2748:	11 f0       	JZ        $+17                  ;->0x276a
    274a:	11 45       	LD        R5, [PC + #17]        ;->0x278c  :=0x40000a00
    274c:	65 70       	CMP       R6, R5
    274e:	0e f0       	JZ        $+14                  ;->0x276a
    2750:	10 45       	LD        R5, [PC + #16]        ;->0x2790  :=0x40000a80
    2752:	65 70       	CMP       R6, R5
    2754:	0b f0       	JZ        $+11                  ;->0x276a
    2756:	10 45       	LD        R5, [PC + #16]        ;->0x2794  :=0x40000b80
    2758:	65 70       	CMP       R6, R5
    275a:	08 f0       	JZ        $+8                   ;->0x276a
    275c:	0f 45       	LD        R5, [PC + #15]        ;->0x2798  :=0x40001e80
    275e:	65 70       	CMP       R6, R5
    2760:	05 f0       	JZ        $+5                   ;->0x276a
    2762:	0f 45       	LD        R5, [PC + #15]        ;->0x279c  :=0x40001f80
    2764:	65 70       	CMP       R6, R5
    2766:	02 f0       	JZ        $+2                   ;->0x276a
    2768:	00 10       	MOV       R0, #0
    276a:	0e 45       	LD        R5, [PC + #14]        ;->0x27a0  :=0x371a
    276c:	05 59       	MOV       R8, R5
    276e:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:887
    CHECK_RESTRICTION(CHECK_FUNCTIONAL_STATE(NewState));
    2770:	01 10       	MOV       R0, #1
    2772:	70 70       	CMP       R7, R0
    2774:	02 f9       	JLS       $+2                   ;->0x2778
    2776:	00 10       	MOV       R0, #0
    2778:	08 5c       	LJMP      R8
..\src\kf32a9k1xxx_usart.c:890

    /*---------------- 设置USART_CTLR寄存器RESHD位 ----------------*/
    if (NewState != FALSE)
    277a:	70 38       	CMP       R7, #0
    277c:	14 f1       	JNZ       $+20                  ;->0x27a4
..\src\kf32a9k1xxx_usart.c:898
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_RESHD_POS);
    }
    else
    {
        /* 禁止单线模式*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_RESHD_POS);
    277e:	b6 4f       	CLR       [R6], #30
..\src\kf32a9k1xxx_usart.c:900
    }
}
    2780:	07 5e       	POP       {R6-R8}
    2782:	0d 5d       	POP       LR
    2784:	1d 5c       	JMP       LR
    2786:	00 00       	NOP      NOP      
    2788:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2788  :=0x40000980
    278c:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x278c  :=0x40000a00
    2790:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2790  :=0x40000a80
    2794:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x2794  :=0x40000b80
    2798:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x2798  :=0x40001e80
    279c:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x279c  :=0x40001f80
    27a0:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
..\src\kf32a9k1xxx_usart.c:893

    /*---------------- 设置USART_CTLR寄存器RESHD位 ----------------*/
    if (NewState != FALSE)
    {
        /* 使能单线模式*/
        SFR_SET_BIT_ASM(USARTx->CTLR, USART_CTLR_RESHD_POS);
    27a4:	b6 4d       	SET       [R6], #30
..\src\kf32a9k1xxx_usart.c:900
    else
    {
        /* 禁止单线模式*/
        SFR_CLR_BIT_ASM(USARTx->CTLR, USART_CTLR_RESHD_POS);
    }
}
    27a6:	07 5e       	POP       {R6-R8}
    27a8:	0d 5d       	POP       LR
    27aa:	1d 5c       	JMP       LR

000027ac <USART_BaudRate_Integer_Config>:
USART_BaudRate_Integer_Config():
..\src\kf32a9k1xxx_usart.c:936
  *       DIV: 取值范围为0~65535。
  * 返回  无。
  */
void
USART_BaudRate_Integer_Config(USART_SFRmap* USARTx, uint16_t DIV)
{
    27ac:	83 5f       	PUSH      {R6-R7,LR}
    27ae:	c0 58       	MOV       R6, R0
    27b0:	71 d0       	ZXT.H     R7, R1
..\src\kf32a9k1xxx_usart.c:940
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    27b2:	10 45       	LD        R5, [PC + #16]        ;->0x27f0  :=0x40000980
    27b4:	05 70       	CMP       R0, R5
    27b6:	2d f0       	JZ        $+45                  ;->0x2810
    27b8:	0f 45       	LD        R5, [PC + #15]        ;->0x27f4  :=0x40000a00
    27ba:	05 70       	CMP       R0, R5
    27bc:	2a f0       	JZ        $+42                  ;->0x2810
    27be:	0f 45       	LD        R5, [PC + #15]        ;->0x27f8  :=0x40000a80
    27c0:	05 70       	CMP       R0, R5
    27c2:	27 f0       	JZ        $+39                  ;->0x2810
    27c4:	0e 45       	LD        R5, [PC + #14]        ;->0x27fc  :=0x40000b80
    27c6:	05 70       	CMP       R0, R5
    27c8:	24 f0       	JZ        $+36                  ;->0x2810
    27ca:	0e 45       	LD        R5, [PC + #14]        ;->0x2800  :=0x40001e80
    27cc:	01 10       	MOV       R0, #1
    27ce:	65 70       	CMP       R6, R5
    27d0:	05 f0       	JZ        $+5                   ;->0x27da
    27d2:	0d 45       	LD        R5, [PC + #13]        ;->0x2804  :=0x40001f80
    27d4:	65 70       	CMP       R6, R5
    27d6:	02 f0       	JZ        $+2                   ;->0x27da
    27d8:	00 10       	MOV       R0, #0
    27da:	0c 45       	LD        R5, [PC + #12]        ;->0x2808  :=0x371a
    27dc:	05 5c       	LJMP      R5
..\src\kf32a9k1xxx_usart.c:944

    /*---------------- 设置USART_BRGR寄存器BRGM位 ----------------*/
    tmpreg = DIV << USART_BRGR_BRGM0_POS;
    USARTx->BRGR = SFR_Config (USARTx->BRGR, ~USART_BRGR_BRGM, tmpreg);
    27de:	66 98       	LD.W      R4, [R6 + #1]
KF32A9K1XXX.h:13917
    27e0:	0b 45       	LD        R5, [PC + #11]        ;->0x280c  :=0xffff0000
    27e2:	6c d5       	ANL       R5, R4, R5
    27e4:	7f d7       	ORL       R7, R7, R5
..\src\kf32a9k1xxx_usart.c:944
    27e6:	77 a0       	ST.W      [R6 + #1], R7
..\src\kf32a9k1xxx_usart.c:945
}
    27e8:	03 5e       	POP       {R6-R7}
    27ea:	0d 5d       	POP       LR
    27ec:	1d 5c       	JMP       LR
    27ee:	00 00       	NOP      NOP      
    27f0:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x27f0  :=0x40000980
    27f4:	00 0a 00 40 	.long     0x40000a00 ->1073744384  [!!!@2@:LD.W      R2, [SP + #0]	@@: LD        R0, [PC + #0]         ;->0x27f4  :=0x40000a00
    27f8:	80 0a 00 40 	.long     0x40000a80 ->1073744512  [!!!@2@:LD.W      R2, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x27f8  :=0x40000a80
    27fc:	80 0b 00 40 	.long     0x40000b80 ->1073744768  [!!!@2@:LD.W      R3, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x27fc  :=0x40000b80
    2800:	80 1e 00 40 	.long     0x40001e80 ->1073749632  [!!!@2@:MOV       R8, #224	@@: LD        R0, [PC + #0]         ;->0x2800  :=0x40001e80
    2804:	80 1f 00 40 	.long     0x40001f80 ->1073749888  [!!!@2@:MOV       R8, #240	@@: LD        R0, [PC + #0]         ;->0x2804  :=0x40001f80
    2808:	1a 37 00 00 	.long     0x0000371a ->000014106  [!!!@2@:SUB       R1, #122	@@: NOP      
    280c:	00 00 ff ff 	.long     0xffff0000 ->-00065536 
..\src\kf32a9k1xxx_usart.c:940
USART_BaudRate_Integer_Config(USART_SFRmap* USARTx, uint16_t DIV)
{
    uint32_t tmpreg = 0;

    /* 参数校验 */
    CHECK_RESTRICTION(CHECK_USART_ALL_PERIPH(USARTx));
    2810:	01 10       	MOV       R0, #1
    2812:	e4 07       	SJMP      $-28                  ;->0x27da

00002814 <cfg_ADC_GPIO>:
cfg_ADC_GPIO():
..\driver\driver_adc.c:36
    while(i--);
}


void cfg_ADC_GPIO(void)
{
    2814:	8f 5f       	PUSH      {R6-R9,LR}
..\driver\driver_adc.c:37
	GPIO_Write_Mode_Bits(GPIOG_SFR,GPIO_PIN_MASK_2,GPIO_MODE_AN); //PG2-ADC_CH25-Iu
    2816:	1b 45       	LD        R5, [PC + #27]        ;->0x2880  :=0x50000180
    2818:	05 59       	MOV       R8, R5
    281a:	05 58       	MOV       R0, R5
    281c:	14 10       	MOV       R1, #4
    281e:	23 10       	MOV       R2, #3
    2820:	19 46       	LD        R6, [PC + #25]        ;->0x2884  :=0x169c
    2822:	06 5c       	LJMP      R6
..\driver\driver_adc.c:38
	GPIO_Write_Mode_Bits(GPIOG_SFR,GPIO_PIN_MASK_0,GPIO_MODE_AN); //PG0-ADC_CH23-Iv
    2824:	08 58       	MOV       R0, R8
    2826:	11 10       	MOV       R1, #1
    2828:	23 10       	MOV       R2, #3
    282a:	06 5c       	LJMP      R6
..\driver\driver_adc.c:39
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_6,GPIO_MODE_AN); //PC6-ADC_CH35-Vbus
    282c:	17 47       	LD        R7, [PC + #23]        ;->0x2888  :=0x50000080
    282e:	07 58       	MOV       R0, R7
    2830:	10 14       	MOV       R1, #64
    2832:	23 10       	MOV       R2, #3
    2834:	06 5c       	LJMP      R6
..\driver\driver_adc.c:40
	GPIO_Write_Mode_Bits(GPIOG_SFR,GPIO_PIN_MASK_13,GPIO_MODE_AN); //PG13-ADC_CH91-Vpot
    2836:	91 10       	MOV       R9, #1
    2838:	cd 7a       	LSL       R9, #13
    283a:	08 58       	MOV       R0, R8
    283c:	29 58       	MOV       R1, R9
    283e:	23 10       	MOV       R2, #3
    2840:	06 5c       	LJMP      R6
..\driver\driver_adc.c:41
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_0,GPIO_MODE_AN); //PC0-ADC_CH29-Ibus
    2842:	07 58       	MOV       R0, R7
    2844:	11 10       	MOV       R1, #1
    2846:	23 10       	MOV       R2, #3
    2848:	06 5c       	LJMP      R6
..\driver\driver_adc.c:42
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_14,GPIO_MODE_AN); //PC14-ADC_CH0-Vu
    284a:	07 58       	MOV       R0, R7
    284c:	11 10       	MOV       R1, #1
    284e:	8e 7a       	LSL       R1, #14
    2850:	23 10       	MOV       R2, #3
    2852:	06 5c       	LJMP      R6
..\driver\driver_adc.c:43
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_13,GPIO_MODE_AN); //PC13-ADC_CH43-Vv
    2854:	07 58       	MOV       R0, R7
    2856:	29 58       	MOV       R1, R9
    2858:	23 10       	MOV       R2, #3
    285a:	06 5c       	LJMP      R6
..\driver\driver_adc.c:44
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_12,GPIO_MODE_AN); //PC12-ADC_CH42-Vw
    285c:	07 58       	MOV       R0, R7
    285e:	11 10       	MOV       R1, #1
    2860:	8c 7a       	LSL       R1, #12
    2862:	23 10       	MOV       R2, #3
    2864:	06 5c       	LJMP      R6
..\driver\driver_adc.c:45
	GPIO_Write_Mode_Bits(GPIOC_SFR,GPIO_PIN_MASK_11,GPIO_MODE_AN); //PC11-ADC_CH41-Vm
    2866:	07 58       	MOV       R0, R7
    2868:	11 10       	MOV       R1, #1
    286a:	8b 7a       	LSL       R1, #11
    286c:	23 10       	MOV       R2, #3
    286e:	06 5c       	LJMP      R6
..\driver\driver_adc.c:47
	//CMP
	GPIO_Write_Mode_Bits(GPIOG_SFR,GPIO_PIN_MASK_4,GPIO_MODE_AN); //PG4
    2870:	08 58       	MOV       R0, R8
    2872:	10 11       	MOV       R1, #16
    2874:	23 10       	MOV       R2, #3
    2876:	06 5c       	LJMP      R6
..\driver\driver_adc.c:48
}
    2878:	0f 5e       	POP       {R6-R9}
    287a:	0d 5d       	POP       LR
    287c:	1d 5c       	JMP       LR
    287e:	00 00       	NOP      NOP      
    2880:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    2884:	9c 16 00 00 	.long     0x0000169c ->000005788  [!!!@2@:MOV       R9, #108	@@: NOP      
    2888:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xc888

0000288c <cfg_ADC0>:
cfg_ADC0():
..\driver\driver_adc.c:52


void cfg_ADC0(void)
{
    288c:	9f 5f       	PUSH      {R6-R10,LR}
    288e:	e0 33       	SUB       SP, #48
..\driver\driver_adc.c:55
	ADC_InitTypeDef adcStruct;

	ADC_Reset (ADC0_SFR);
    2890:	1f 46       	LD        R6, [PC + #31]        ;->0x290c  :=0x40000580
    2892:	06 58       	MOV       R0, R6
    2894:	1f 45       	LD        R5, [PC + #31]        ;->0x2910  :=0x200
    2896:	05 5c       	LJMP      R5
..\driver\driver_adc.c:56
	ADC_Struct_Init(&adcStruct);
    2898:	0e 58       	MOV       R0, SP
    289a:	1f 45       	LD        R5, [PC + #31]        ;->0x2914  :=0x480
    289c:	05 5c       	LJMP      R5
..\driver\driver_adc.c:59

	/* 初始化 ADC时钟源选择 */
	adcStruct.m_Clock = ADC_SCLK;
    289e:	70 10       	MOV       R7, #0
    28a0:	e7 85       	ST.W      [SP], R7
..\driver\driver_adc.c:61
	/* 初始化 ADC时钟分频 */
	adcStruct.m_ClockDiv = ADC_CLK_DIV_8;//15M
    28a2:	51 10       	MOV       R5, #1
    28a4:	a9 7a       	LSL       R5, #9
    28a6:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_adc.c:63
	/* 初始化 ADC扫描模式使能 */
	adcStruct.m_ScanMode = TRUE;
    28a8:	81 10       	MOV       R8, #1
    28aa:	a8 58       	MOV       R5, R8
    28ac:	02 25       	ST.W      [SP + #2], R5
..\driver\driver_adc.c:65
	/* 初始化 ADC连续转换模式 */
	adcStruct.m_ContinuousMode = ADC_SINGLE_MODE;
    28ae:	03 27       	ST.W      [SP + #3], R7
..\driver\driver_adc.c:67
	/* 初始化 ADC转换结果输出格式 */
	adcStruct.m_DataAlign = ADC_DATAALIGN_RIGHT;
    28b0:	58 10       	MOV       R5, #8
    28b2:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_adc.c:69
	/* 初始化 ADC常规通道外部触发转换模式使能 */
	adcStruct.m_ExternalTrig_EN = FALSE;//TRUE;
    28b4:	05 27       	ST.W      [SP + #5], R7
..\driver\driver_adc.c:71
	/* 初始化 ADC常规通道外部触发事件 */
	adcStruct.m_ExternalTrig = ADC_EXTERNALTRIG_T5_OVERFLOW;
    28b6:	19 45       	LD        R5, [PC + #25]        ;->0x2918  :=0x340
    28b8:	06 25       	ST.W      [SP + #6], R5
..\driver\driver_adc.c:73
	/* 初始化 ADC高优先级通道外部触发转换模式使能 */
	adcStruct.m_HPExternalTrig_EN = TRUE;
    28ba:	a8 58       	MOV       R5, R8
    28bc:	07 25       	ST.W      [SP + #7], R5
..\driver\driver_adc.c:75
	/* 初始化 高优先级通道外部触发事件 */
	adcStruct.m_HPExternalTrig = ADC_HPEXTERNALTRIG_EPWM11_AD0;
    28be:	18 45       	LD        R5, [PC + #24]        ;->0x291c  :=0x3600000
    28c0:	08 25       	ST.W      [SP + #8], R5
..\driver\driver_adc.c:77
	/* 参考电压选择，取值为宏“ADC参考电压选择”中的一个。 */
	adcStruct.m_VoltageRef=ADC_REF_AVDD;
    28c2:	51 10       	MOV       R5, #1
    28c4:	29 7b       	LSL       R5, #17
    28c6:	09 25       	ST.W      [SP + #9], R5
..\driver\driver_adc.c:79
	/* 初始化 ADC常规通道扫描长度 */
	adcStruct.m_NumOfConv = 4;
    28c8:	a4 10       	MOV       R10, #4
    28ca:	aa 58       	MOV       R5, R10
    28cc:	0a 25       	ST.W      [SP + #10], R5
..\driver\driver_adc.c:81
	/* 初始化 ADC高优先级通道扫描长度 */
	adcStruct.m_NumOfHPConv = 4;
    28ce:	0b 25       	ST.W      [SP + #11], R5
..\driver\driver_adc.c:82
	ADC_Configuration (ADC0_SFR, &adcStruct);
    28d0:	06 58       	MOV       R0, R6
    28d2:	2e 58       	MOV       R1, SP
    28d4:	13 45       	LD        R5, [PC + #19]        ;->0x2920  :=0x2cc
    28d6:	05 5c       	LJMP      R5
..\driver\driver_adc.c:84

	ADC_High_Priority_Channel_Config(ADC0_SFR, ADC_CHANNEL_25, 0x01);  //Ia
    28d8:	06 58       	MOV       R0, R6
    28da:	19 11       	MOV       R1, #25
    28dc:	48 58       	MOV       R2, R8
    28de:	12 45       	LD        R5, [PC + #18]        ;->0x2924  :=0x4f4
    28e0:	25 59       	MOV       R9, R5
    28e2:	05 5c       	LJMP      R5
..\driver\driver_adc.c:85
	ADC_High_Priority_Channel_Config(ADC0_SFR, ADC_CHANNEL_0, 0x02);  //Vu
    28e4:	06 58       	MOV       R0, R6
    28e6:	27 58       	MOV       R1, R7
    28e8:	22 10       	MOV       R2, #2
    28ea:	09 5c       	LJMP      R9
..\driver\driver_adc.c:86
	ADC_High_Priority_Channel_Config(ADC0_SFR, ADC_CHANNEL_0, 0x03);  //Vm
    28ec:	06 58       	MOV       R0, R6
    28ee:	27 58       	MOV       R1, R7
    28f0:	23 10       	MOV       R2, #3
    28f2:	09 5c       	LJMP      R9
..\driver\driver_adc.c:87
	ADC_High_Priority_Channel_Config(ADC0_SFR, ADC_CHANNEL_29, 0x04);  //Ibus
    28f4:	06 58       	MOV       R0, R6
    28f6:	1d 11       	MOV       R1, #29
    28f8:	4a 58       	MOV       R2, R10
    28fa:	09 5c       	LJMP      R9
..\driver\driver_adc.c:89

	ADC_Cmd (ADC0_SFR, TRUE); //ADC使能
    28fc:	06 58       	MOV       R0, R6
    28fe:	28 58       	MOV       R1, R8
    2900:	0a 45       	LD        R5, [PC + #10]        ;->0x2928  :=0x4a4
    2902:	05 5c       	LJMP      R5
..\driver\driver_adc.c:91

}
    2904:	e0 2b       	ADD       SP, #48
    2906:	1f 5e       	POP       {R6-R10}
    2908:	0d 5d       	POP       LR
    290a:	1d 5c       	JMP       LR
    290c:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x2c0c	@@: LD        R0, [PC + #0]         ;->0x290c  :=0x40000580
    2910:	00 02 00 00 	.long     0x00000200 ->000000512  [!!!@2@:SVC      	@@: NOP      
    2914:	80 04 00 00 	.long     0x00000480 ->000001152  [!!!@2@:SJMP      $+128                 ;->0x2a14	@@: NOP      
    2918:	40 03 00 00 	.long     0x00000340 ->000000832  [!!!@4@:JMP       $+4194304             ;->0x802918
    291c:	00 00 60 03 	.long     0x03600000 ->056623104  [!!!@2@:NOP      	@@: JMP       $+6292320             ;->0xc02fdc
    2920:	cc 02 00 00 	.long     0x000002cc ->000000716  [!!!@2@:SVC      	@@: NOP      
    2924:	f4 04 00 00 	.long     0x000004f4 ->000001268  [!!!@2@:SJMP      $+244                 ;->0x2b0c	@@: NOP      
    2928:	a4 04 00 00 	.long     0x000004a4 ->000001188  [!!!@2@:SJMP      $+164                 ;->0x2a70	@@: NOP      

0000292c <cfg_ADC0_IT>:
cfg_ADC0_IT():
..\driver\driver_adc.c:94

void cfg_ADC0_IT(void)
{
    292c:	2d 5d       	PUSH      LR
..\driver\driver_adc.c:95
	ADC_Set_INT_Enable (ADC0_SFR,ADC_INT_HPEND, TRUE);
    292e:	0a 40       	LD        R0, [PC + #10]        ;->0x2954  :=0x40000580
    2930:	0a 41       	LD        R1, [PC + #10]        ;->0x2958  :=0x60309
    2932:	21 10       	MOV       R2, #1
    2934:	0a 45       	LD        R5, [PC + #10]        ;->0x295c  :=0x55c
    2936:	05 5c       	LJMP      R5
..\driver\driver_adc.c:96
	INT_Interrupt_Priority_Config(INT_ADC0,1,0);//抢占优先级1,子优先级0
    2938:	05 12       	MOV       R0, #37
    293a:	11 10       	MOV       R1, #1
    293c:	20 10       	MOV       R2, #0
    293e:	09 45       	LD        R5, [PC + #9]         ;->0x2960  :=0x1a58
    2940:	05 5c       	LJMP      R5
..\driver\driver_adc.c:97
	INT_Clear_Interrupt_Flag(INT_ADC0);//清中断标志
    2942:	05 12       	MOV       R0, #37
    2944:	08 45       	LD        R5, [PC + #8]         ;->0x2964  :=0x19e4
    2946:	05 5c       	LJMP      R5
..\driver\driver_adc.c:98
	INT_Interrupt_Enable(INT_ADC0,TRUE);//外设中断使能
    2948:	05 12       	MOV       R0, #37
    294a:	11 10       	MOV       R1, #1
    294c:	07 45       	LD        R5, [PC + #7]         ;->0x2968  :=0x1954
    294e:	05 5c       	LJMP      R5
..\driver\driver_adc.c:99
}
    2950:	0d 5d       	POP       LR
    2952:	1d 5c       	JMP       LR
    2954:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x2c54	@@: LD        R0, [PC + #0]         ;->0x2954  :=0x40000580
    2958:	09 03 06 00 	.long     0x00060309 ->000393993  [!!!@4@:JMP       $+589830              ;->0x122964
    295c:	5c 05 00 00 	.long     0x0000055c ->000001372  [!!!@2@:SJMP      $+348                 ;->0x2c14	@@: NOP      
    2960:	58 1a 00 00 	.long     0x00001a58 ->000006744  [!!!@2@:MOV       R5, #168	@@: NOP      
    2964:	e4 19 00 00 	.long     0x000019e4 ->000006628  [!!!@2@:MOV       SP, #148	@@: NOP      
    2968:	54 19 00 00 	.long     0x00001954 ->000006484  [!!!@2@:MOV       R5, #148	@@: NOP      

0000296c <cfg_ADC1>:
cfg_ADC1():
..\driver\driver_adc.c:102

void cfg_ADC1(void)
{
    296c:	8f 5f       	PUSH      {R6-R9,LR}
    296e:	e0 33       	SUB       SP, #48
..\driver\driver_adc.c:105
	ADC_InitTypeDef adcStruct;

	ADC_Reset (ADC1_SFR);
    2970:	1e 46       	LD        R6, [PC + #30]        ;->0x29e8  :=0x40000600
    2972:	06 58       	MOV       R0, R6
    2974:	1e 45       	LD        R5, [PC + #30]        ;->0x29ec  :=0x200
    2976:	05 5c       	LJMP      R5
..\driver\driver_adc.c:106
	ADC_Struct_Init(&adcStruct);
    2978:	0e 58       	MOV       R0, SP
    297a:	1e 45       	LD        R5, [PC + #30]        ;->0x29f0  :=0x480
    297c:	05 5c       	LJMP      R5
..\driver\driver_adc.c:109

	/* 初始化 ADC时钟源选择 */
	adcStruct.m_Clock = ADC_SCLK;
    297e:	50 10       	MOV       R5, #0
    2980:	e5 85       	ST.W      [SP], R5
..\driver\driver_adc.c:111
	/* 初始化 ADC时钟分频 */
	adcStruct.m_ClockDiv = ADC_CLK_DIV_8;//15M
    2982:	41 10       	MOV       R4, #1
    2984:	a1 7a       	LSL       R4, #9
    2986:	01 24       	ST.W      [SP + #1], R4
..\driver\driver_adc.c:113
	/* 初始化 ADC扫描模式使能 */
	adcStruct.m_ScanMode = TRUE;
    2988:	71 10       	MOV       R7, #1
    298a:	02 27       	ST.W      [SP + #2], R7
..\driver\driver_adc.c:115
	/* 初始化 ADC连续转换模式 */
	adcStruct.m_ContinuousMode = ADC_SINGLE_MODE;
    298c:	03 25       	ST.W      [SP + #3], R5
..\driver\driver_adc.c:117
	/* 初始化 ADC转换结果输出格式 */
	adcStruct.m_DataAlign = ADC_DATAALIGN_RIGHT;
    298e:	48 10       	MOV       R4, #8
    2990:	04 24       	ST.W      [SP + #4], R4
..\driver\driver_adc.c:119
	/* 初始化 ADC常规通道外部触发转换模式使能 */
	adcStruct.m_ExternalTrig_EN = FALSE;//TRUE;
    2992:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_adc.c:121
	/* 初始化 ADC常规通道外部触发事件 */
	adcStruct.m_ExternalTrig = ADC_EXTERNALTRIG_T5_OVERFLOW;
    2994:	18 45       	LD        R5, [PC + #24]        ;->0x29f4  :=0x340
    2996:	06 25       	ST.W      [SP + #6], R5
..\driver\driver_adc.c:123
	/* 初始化 ADC高优先级通道外部触发转换模式使能 */
	adcStruct.m_HPExternalTrig_EN = TRUE;
    2998:	07 27       	ST.W      [SP + #7], R7
..\driver\driver_adc.c:125
	/* 初始化 高优先级通道外部触发事件 */
	adcStruct.m_HPExternalTrig = ADC_HPEXTERNALTRIG_EPWM11_AD0;
    299a:	18 45       	LD        R5, [PC + #24]        ;->0x29f8  :=0x3600000
    299c:	08 25       	ST.W      [SP + #8], R5
..\driver\driver_adc.c:127
	/* 参考电压选择，取值为宏“ADC参考电压选择”中的一个。 */
	adcStruct.m_VoltageRef=ADC_REF_AVDD;
    299e:	51 10       	MOV       R5, #1
    29a0:	29 7b       	LSL       R5, #17
    29a2:	09 25       	ST.W      [SP + #9], R5
..\driver\driver_adc.c:129
	/* 初始化 ADC常规通道扫描长度 */
	adcStruct.m_NumOfConv = 4;
    29a4:	94 10       	MOV       R9, #4
    29a6:	a9 58       	MOV       R5, R9
    29a8:	0a 25       	ST.W      [SP + #10], R5
..\driver\driver_adc.c:131
	/* 初始化 ADC高优先级通道扫描长度 */
	adcStruct.m_NumOfHPConv = 4;
    29aa:	0b 25       	ST.W      [SP + #11], R5
..\driver\driver_adc.c:132
	ADC_Configuration (ADC1_SFR, &adcStruct);
    29ac:	06 58       	MOV       R0, R6
    29ae:	2e 58       	MOV       R1, SP
    29b0:	13 45       	LD        R5, [PC + #19]        ;->0x29fc  :=0x2cc
    29b2:	05 5c       	LJMP      R5
..\driver\driver_adc.c:134

	ADC_High_Priority_Channel_Config(ADC1_SFR, ADC_CHANNEL_23, 0x01);  //Ib
    29b4:	06 58       	MOV       R0, R6
    29b6:	17 11       	MOV       R1, #23
    29b8:	47 58       	MOV       R2, R7
    29ba:	12 45       	LD        R5, [PC + #18]        ;->0x2a00  :=0x4f4
    29bc:	05 59       	MOV       R8, R5
    29be:	05 5c       	LJMP      R5
..\driver\driver_adc.c:135
	ADC_High_Priority_Channel_Config(ADC1_SFR, ADC_CHANNEL_43, 0x02);  //Vv
    29c0:	06 58       	MOV       R0, R6
    29c2:	1b 12       	MOV       R1, #43
    29c4:	22 10       	MOV       R2, #2
    29c6:	08 5c       	LJMP      R8
..\driver\driver_adc.c:136
	ADC_High_Priority_Channel_Config(ADC1_SFR, ADC_CHANNEL_35, 0x03);  //Vbus
    29c8:	06 58       	MOV       R0, R6
    29ca:	13 12       	MOV       R1, #35
    29cc:	23 10       	MOV       R2, #3
    29ce:	08 5c       	LJMP      R8
..\driver\driver_adc.c:137
	ADC_High_Priority_Channel_Config(ADC1_SFR, ADC_CHANNEL_23, 0x04);  //Ibus_avg
    29d0:	06 58       	MOV       R0, R6
    29d2:	17 11       	MOV       R1, #23
    29d4:	49 58       	MOV       R2, R9
    29d6:	08 5c       	LJMP      R8
..\driver\driver_adc.c:139

	ADC_Cmd (ADC1_SFR, TRUE); //ADC使能
    29d8:	06 58       	MOV       R0, R6
    29da:	27 58       	MOV       R1, R7
    29dc:	0a 45       	LD        R5, [PC + #10]        ;->0x2a04  :=0x4a4
    29de:	05 5c       	LJMP      R5
..\driver\driver_adc.c:140
}
    29e0:	e0 2b       	ADD       SP, #48
    29e2:	0f 5e       	POP       {R6-R9}
    29e4:	0d 5d       	POP       LR
    29e6:	1d 5c       	JMP       LR
    29e8:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x25e8	@@: LD        R0, [PC + #0]         ;->0x29e8  :=0x40000600
    29ec:	00 02 00 00 	.long     0x00000200 ->000000512  [!!!@2@:SVC      	@@: NOP      
    29f0:	80 04 00 00 	.long     0x00000480 ->000001152  [!!!@2@:SJMP      $+128                 ;->0x2af0	@@: NOP      
    29f4:	40 03 00 00 	.long     0x00000340 ->000000832  [!!!@4@:JMP       $+4194304             ;->0x8029f4
    29f8:	00 00 60 03 	.long     0x03600000 ->056623104  [!!!@2@:NOP      	@@: JMP       $+6292320             ;->0xc030b8
    29fc:	cc 02 00 00 	.long     0x000002cc ->000000716  [!!!@2@:SVC      	@@: NOP      
    2a00:	f4 04 00 00 	.long     0x000004f4 ->000001268  [!!!@2@:SJMP      $+244                 ;->0x2be8	@@: NOP      
    2a04:	a4 04 00 00 	.long     0x000004a4 ->000001188  [!!!@2@:SJMP      $+164                 ;->0x2b4c	@@: NOP      

00002a08 <cfg_ADC2>:
cfg_ADC2():
..\driver\driver_adc.c:143

void cfg_ADC2(void)
{
    2a08:	8f 5f       	PUSH      {R6-R9,LR}
    2a0a:	e0 33       	SUB       SP, #48
..\driver\driver_adc.c:146
	ADC_InitTypeDef adcStruct;

	ADC_Reset (ADC2_SFR);
    2a0c:	1e 46       	LD        R6, [PC + #30]        ;->0x2a84  :=0x40000680
    2a0e:	06 58       	MOV       R0, R6
    2a10:	1e 45       	LD        R5, [PC + #30]        ;->0x2a88  :=0x200
    2a12:	05 5c       	LJMP      R5
..\driver\driver_adc.c:147
	ADC_Struct_Init(&adcStruct);
    2a14:	0e 58       	MOV       R0, SP
    2a16:	1e 45       	LD        R5, [PC + #30]        ;->0x2a8c  :=0x480
    2a18:	05 5c       	LJMP      R5
..\driver\driver_adc.c:150

	/* 初始化 ADC时钟源选择 */
	adcStruct.m_Clock = ADC_SCLK;
    2a1a:	50 10       	MOV       R5, #0
    2a1c:	e5 85       	ST.W      [SP], R5
..\driver\driver_adc.c:152
	/* 初始化 ADC时钟分频 */
	adcStruct.m_ClockDiv = ADC_CLK_DIV_8;//15M
    2a1e:	41 10       	MOV       R4, #1
    2a20:	a1 7a       	LSL       R4, #9
    2a22:	01 24       	ST.W      [SP + #1], R4
..\driver\driver_adc.c:154
	/* 初始化 ADC扫描模式使能 */
	adcStruct.m_ScanMode = TRUE;
    2a24:	71 10       	MOV       R7, #1
    2a26:	02 27       	ST.W      [SP + #2], R7
..\driver\driver_adc.c:156
	/* 初始化 ADC连续转换模式 */
	adcStruct.m_ContinuousMode = ADC_SINGLE_MODE;
    2a28:	03 25       	ST.W      [SP + #3], R5
..\driver\driver_adc.c:158
	/* 初始化 ADC转换结果输出格式 */
	adcStruct.m_DataAlign = ADC_DATAALIGN_RIGHT;
    2a2a:	48 10       	MOV       R4, #8
    2a2c:	04 24       	ST.W      [SP + #4], R4
..\driver\driver_adc.c:160
	/* 初始化 ADC常规通道外部触发转换模式使能 */
	adcStruct.m_ExternalTrig_EN = FALSE;//TRUE;
    2a2e:	05 25       	ST.W      [SP + #5], R5
..\driver\driver_adc.c:162
	/* 初始化 ADC常规通道外部触发事件 */
	adcStruct.m_ExternalTrig = ADC_EXTERNALTRIG_T5_OVERFLOW;
    2a30:	18 45       	LD        R5, [PC + #24]        ;->0x2a90  :=0x340
    2a32:	06 25       	ST.W      [SP + #6], R5
..\driver\driver_adc.c:164
	/* 初始化 ADC高优先级通道外部触发转换模式使能 */
	adcStruct.m_HPExternalTrig_EN = TRUE;
    2a34:	07 27       	ST.W      [SP + #7], R7
..\driver\driver_adc.c:166
	/* 初始化 高优先级通道外部触发事件 */
	adcStruct.m_HPExternalTrig = ADC_HPEXTERNALTRIG_EPWM11_AD0;
    2a36:	18 45       	LD        R5, [PC + #24]        ;->0x2a94  :=0x3600000
    2a38:	08 25       	ST.W      [SP + #8], R5
..\driver\driver_adc.c:168
	/* 参考电压选择，取值为宏“ADC参考电压选择”中的一个。 */
	adcStruct.m_VoltageRef=ADC_REF_AVDD;
    2a3a:	51 10       	MOV       R5, #1
    2a3c:	29 7b       	LSL       R5, #17
    2a3e:	09 25       	ST.W      [SP + #9], R5
..\driver\driver_adc.c:170
	/* 初始化 ADC常规通道扫描长度 */
	adcStruct.m_NumOfConv = 4;
    2a40:	94 10       	MOV       R9, #4
    2a42:	a9 58       	MOV       R5, R9
    2a44:	0a 25       	ST.W      [SP + #10], R5
..\driver\driver_adc.c:172
	/* 初始化 ADC高优先级通道扫描长度 */
	adcStruct.m_NumOfHPConv = 4;
    2a46:	0b 25       	ST.W      [SP + #11], R5
..\driver\driver_adc.c:173
	ADC_Configuration (ADC2_SFR, &adcStruct);
    2a48:	06 58       	MOV       R0, R6
    2a4a:	2e 58       	MOV       R1, SP
    2a4c:	13 45       	LD        R5, [PC + #19]        ;->0x2a98  :=0x2cc
    2a4e:	05 5c       	LJMP      R5
..\driver\driver_adc.c:175

	ADC_High_Priority_Channel_Config(ADC2_SFR, ADC_CHANNEL_41, 0x01);  //Vm
    2a50:	06 58       	MOV       R0, R6
    2a52:	19 12       	MOV       R1, #41
    2a54:	47 58       	MOV       R2, R7
    2a56:	12 45       	LD        R5, [PC + #18]        ;->0x2a9c  :=0x4f4
    2a58:	05 59       	MOV       R8, R5
    2a5a:	05 5c       	LJMP      R5
..\driver\driver_adc.c:176
	ADC_High_Priority_Channel_Config(ADC2_SFR, ADC_CHANNEL_42, 0x02);  //Vw
    2a5c:	06 58       	MOV       R0, R6
    2a5e:	1a 12       	MOV       R1, #42
    2a60:	22 10       	MOV       R2, #2
    2a62:	08 5c       	LJMP      R8
..\driver\driver_adc.c:177
	ADC_High_Priority_Channel_Config(ADC2_SFR, ADC_CHANNEL_91, 0x03);  //POT
    2a64:	06 58       	MOV       R0, R6
    2a66:	1b 15       	MOV       R1, #91
    2a68:	23 10       	MOV       R2, #3
    2a6a:	08 5c       	LJMP      R8
..\driver\driver_adc.c:178
	ADC_High_Priority_Channel_Config(ADC2_SFR, ADC_CHANNEL_9, 0x04);  //TEMP
    2a6c:	06 58       	MOV       R0, R6
    2a6e:	19 10       	MOV       R1, #9
    2a70:	49 58       	MOV       R2, R9
    2a72:	08 5c       	LJMP      R8
..\driver\driver_adc.c:180

	ADC_Cmd (ADC2_SFR, TRUE); //ADC使能
    2a74:	06 58       	MOV       R0, R6
    2a76:	27 58       	MOV       R1, R7
    2a78:	0a 45       	LD        R5, [PC + #10]        ;->0x2aa0  :=0x4a4
    2a7a:	05 5c       	LJMP      R5
..\driver\driver_adc.c:181
}
    2a7c:	e0 2b       	ADD       SP, #48
    2a7e:	0f 5e       	POP       {R6-R9}
    2a80:	0d 5d       	POP       LR
    2a82:	1d 5c       	JMP       LR
    2a84:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x2784	@@: LD        R0, [PC + #0]         ;->0x2a84  :=0x40000680
    2a88:	00 02 00 00 	.long     0x00000200 ->000000512  [!!!@2@:SVC      	@@: NOP      
    2a8c:	80 04 00 00 	.long     0x00000480 ->000001152  [!!!@2@:SJMP      $+128                 ;->0x2b8c	@@: NOP      
    2a90:	40 03 00 00 	.long     0x00000340 ->000000832  [!!!@4@:JMP       $+4194304             ;->0x802a90
    2a94:	00 00 60 03 	.long     0x03600000 ->056623104  [!!!@2@:NOP      	@@: JMP       $+6292320             ;->0xc03154
    2a98:	cc 02 00 00 	.long     0x000002cc ->000000716  [!!!@2@:SVC      	@@: NOP      
    2a9c:	f4 04 00 00 	.long     0x000004f4 ->000001268  [!!!@2@:SJMP      $+244                 ;->0x2c84	@@: NOP      
    2aa0:	a4 04 00 00 	.long     0x000004a4 ->000001188  [!!!@2@:SJMP      $+164                 ;->0x2be8	@@: NOP      

00002aa4 <cfg_ADC>:
cfg_ADC():
..\driver\driver_adc.c:24
volatile ADC_DATA_TYPE adc_data;



void cfg_ADC(void)
{
    2aa4:	2d 5d       	PUSH      LR
    2aa6:	e4 30       	SUB       SP, #4
..\driver\driver_adc.c:25
	volatile uint16_t i = 50000;
    2aa8:	0b 45       	LD        R5, [PC + #11]        ;->0x2ad4  :=0xffffc350
    2aaa:	e5 84       	ST.H      [SP], R5
..\driver\driver_adc.c:26
	cfg_ADC_GPIO();
    2aac:	0b 45       	LD        R5, [PC + #11]        ;->0x2ad8  :=0x2814
    2aae:	05 5c       	LJMP      R5
..\driver\driver_adc.c:27
    cfg_ADC0();
    2ab0:	0b 45       	LD        R5, [PC + #11]        ;->0x2adc  :=0x288c
    2ab2:	05 5c       	LJMP      R5
..\driver\driver_adc.c:28
    cfg_ADC1();
    2ab4:	0b 45       	LD        R5, [PC + #11]        ;->0x2ae0  :=0x296c
    2ab6:	05 5c       	LJMP      R5
..\driver\driver_adc.c:29
    cfg_ADC2();
    2ab8:	0b 45       	LD        R5, [PC + #11]        ;->0x2ae4  :=0x2a08
    2aba:	05 5c       	LJMP      R5
..\driver\driver_adc.c:30
    cfg_ADC0_IT();
    2abc:	0b 45       	LD        R5, [PC + #11]        ;->0x2ae8  :=0x292c
    2abe:	05 5c       	LJMP      R5
..\driver\driver_adc.c:31
    while(i--);
    2ac0:	5e 81       	LD.H      R5, [SP]
    2ac2:	55 d0       	ZXT.H     R5, R5
    2ac4:	65 cc       	SUB       R4, R5, #1
    2ac6:	44 d0       	ZXT.H     R4, R4
    2ac8:	e4 84       	ST.H      [SP], R4
    2aca:	50 38       	CMP       R5, #0
    2acc:	fa f1       	JNZ       $-6                   ;->0x2ac0
..\driver\driver_adc.c:32
}
    2ace:	e4 28       	ADD       SP, #4
    2ad0:	0d 5d       	POP       LR
    2ad2:	1d 5c       	JMP       LR
    2ad4:	50 c3 ff ff 	.long     0xffffc350 ->-00015536 
    2ad8:	14 28 00 00 	.long     0x00002814 ->000010260  [!!!@2@:ADD       R1, #4	@@: NOP      
    2adc:	8c 28 00 00 	.long     0x0000288c ->000010380  [!!!@2@:ADD       R8, #12	@@: NOP      
    2ae0:	6c 29 00 00 	.long     0x0000296c ->000010604  [!!!@2@:ADD       R6, #28	@@: NOP      
    2ae4:	08 2a 00 00 	.long     0x00002a08 ->000010760  [!!!@2@:ADD       R0, #40	@@: NOP      
    2ae8:	2c 29 00 00 	.long     0x0000292c ->000010540  [!!!@2@:ADD       R2, #28	@@: NOP      

00002aec <adc_offset_calc>:
adc_offset_calc():
..\driver\driver_adc.c:215
   // adc_data.Ibus_avg_pu = adc_buf[7];
}


void adc_offset_calc(void)
{
    2aec:	ff 5f       	PUSH      {R6-R12,LR}
    2aee:	e4 30       	SUB       SP, #4
..\driver\driver_adc.c:218
	uint16_t i,j;

	adc_data.Ia_offset = 0;
    2af0:	50 10       	MOV       R5, #0
    2af2:	30 42       	LD        R2, [PC + #48]        ;->0x2bb0  :=0x10003e18
    2af4:	25 85       	ST.W      [R2], R5
..\driver\driver_adc.c:219
	adc_data.Ib_offset = 0;
    2af6:	55 a0       	ST.W      [R2 + #1], R5
..\driver\driver_adc.c:220
	adc_data.Ic_offset = 0;
    2af8:	95 a0       	ST.W      [R2 + #2], R5
    2afa:	d1 10       	MOV       LR, #1
    2afc:	2e 42       	LD        R2, [PC + #46]        ;->0x2bb4  :=0x10003e00
    2afe:	02 59       	MOV       R8, R2
..\driver\driver_adc.c:223
	for(i=0;i<1025;i++)
	{
		ADC0_HPSTART;
    2b00:	2e 42       	LD        R2, [PC + #46]        ;->0x2bb8  :=0x40000580
..\driver\driver_adc.c:224
		ADC1_HPSTART;
    2b02:	2f 41       	LD        R1, [PC + #47]        ;->0x2bbc  :=0x40000600
..\driver\driver_adc.c:225
		ADC2_HPSTART;
    2b04:	2f 40       	LD        R0, [PC + #47]        ;->0x2bc0  :=0x40000680
..\driver\driver_adc.c:226
		while(!(ADC0_HPENDIF_CHECK&&ADC1_HPENDIF_CHECK&&ADC2_HPENDIF_CHECK));
    2b06:	48 10       	MOV       R4, #8
..\driver\driver_adc.c:233
		ADC1_HPENDIF_CLEAR;
		ADC2_HPENDIF_CLEAR;
		ADC0_HPENDIC_CLEAR;
		ADC1_HPENDIC_CLEAR;
		ADC2_HPENDIC_CLEAR;
		adc_buf[0] = ADC0_SFR->HPDATA0;
    2b08:	28 59       	MOV       R9, R8
..\driver\driver_adc.c:221
	uint16_t i,j;

	adc_data.Ia_offset = 0;
	adc_data.Ib_offset = 0;
	adc_data.Ic_offset = 0;
	for(i=0;i<1025;i++)
    2b0a:	2f 43       	LD        R3, [PC + #47]        ;->0x2bc4  :=0x401
    2b0c:	83 59       	MOV       R12, R3
..\driver\driver_adc.c:223
	{
		ADC0_HPSTART;
    2b0e:	6a 98       	LD.W      R5, [R2 + #1]
    2b10:	2b 48       	SET       R5, #3
    2b12:	55 a0       	ST.W      [R2 + #1], R5
..\driver\driver_adc.c:224
		ADC1_HPSTART;
    2b14:	69 98       	LD.W      R5, [R1 + #1]
    2b16:	2b 48       	SET       R5, #3
    2b18:	4d a0       	ST.W      [R1 + #1], R5
..\driver\driver_adc.c:225
		ADC2_HPSTART;
    2b1a:	68 98       	LD.W      R5, [R0 + #1]
    2b1c:	2b 48       	SET       R5, #3
    2b1e:	45 a0       	ST.W      [R0 + #1], R5
..\driver\driver_adc.c:226
		while(!(ADC0_HPENDIF_CHECK&&ADC1_HPENDIF_CHECK&&ADC2_HPENDIF_CHECK));
    2b20:	26 43       	LD        R3, [PC + #38]        ;->0x2bb8  :=0x40000580
    2b22:	2a 9d       	LD.W      R5, [R2 + #20]
    2b24:	2d d5       	ANL       R5, R5, R4
    2b26:	fd f0       	JZ        $-3                   ;->0x2b20
    2b28:	25 47       	LD        R7, [PC + #37]        ;->0x2bbc  :=0x40000600
    2b2a:	29 9d       	LD.W      R5, [R1 + #20]
    2b2c:	2d d5       	ANL       R5, R5, R4
    2b2e:	f9 f0       	JZ        $-7                   ;->0x2b20
    2b30:	24 46       	LD        R6, [PC + #36]        ;->0x2bc0  :=0x40000680
    2b32:	66 59       	MOV       R11, R6
    2b34:	28 9d       	LD.W      R5, [R0 + #20]
    2b36:	2d d5       	ANL       R5, R5, R4
    2b38:	f4 f0       	JZ        $-12                  ;->0x2b20
..\driver\driver_adc.c:227
		ADC0_HPENDIF_CLEAR;
    2b3a:	2b 9d       	LD.W      R5, [R3 + #20]
    2b3c:	2e 48       	SET       R5, #6
    2b3e:	1d a5       	ST.W      [R3 + #20], R5
..\driver\driver_adc.c:228
		ADC1_HPENDIF_CLEAR;
    2b40:	2f 9d       	LD.W      R5, [R7 + #20]
    2b42:	2e 48       	SET       R5, #6
    2b44:	3d a5       	ST.W      [R7 + #20], R5
..\driver\driver_adc.c:229
		ADC2_HPENDIF_CLEAR;
    2b46:	36 9d       	LD.W      R6, [R6 + #20]
    2b48:	50 14       	MOV       R5, #64
    2b4a:	6e d7       	ORL       R5, R6, R5
    2b4c:	cb 58       	MOV       R6, R11
    2b4e:	35 a5       	ST.W      [R6 + #20], R5
..\driver\driver_adc.c:230
		ADC0_HPENDIC_CLEAR;
    2b50:	2b 9d       	LD.W      R5, [R3 + #20]
    2b52:	2e 4a       	CLR       R5, #6
    2b54:	1d a5       	ST.W      [R3 + #20], R5
..\driver\driver_adc.c:231
		ADC1_HPENDIC_CLEAR;
    2b56:	2f 9d       	LD.W      R5, [R7 + #20]
    2b58:	2e 4a       	CLR       R5, #6
    2b5a:	3d a5       	ST.W      [R7 + #20], R5
..\driver\driver_adc.c:232
		ADC2_HPENDIC_CLEAR;
    2b5c:	2e 9d       	LD.W      R5, [R6 + #20]
    2b5e:	2e 4a       	CLR       R5, #6
    2b60:	35 a5       	ST.W      [R6 + #20], R5
..\driver\driver_adc.c:233
		adc_buf[0] = ADC0_SFR->HPDATA0;
    2b62:	6b 9a       	LD.W      R5, [R3 + #9]
    2b64:	55 d0       	ZXT.H     R5, R5
    2b66:	85 84       	ST.H      [R8], R5
..\driver\driver_adc.c:234
	    adc_buf[4] = ADC1_SFR->HPDATA0;
    2b68:	6f 9a       	LD.W      R5, [R7 + #9]
    2b6a:	55 d0       	ZXT.H     R5, R5
    2b6c:	c8 58       	MOV       R6, R8
    2b6e:	35 b1       	ST.H      [R6 + #4], R5
..\driver\driver_adc.c:236
	    //adc_buf[8] = ADC2_SFR->HPDATA0;
	    if(i!=0)
    2b70:	d1 38       	CMP       LR, #1
    2b72:	10 f0       	JZ        $+16                  ;->0x2b92
..\driver\driver_adc.c:238
	    {
	      adc_data.Ia_offset += adc_buf[0];
    2b74:	0f 45       	LD        R5, [PC + #15]        ;->0x2bb0  :=0x10003e18
    2b76:	a5 82       	LD.W      R10, [R5]
    2b78:	39 81       	LD.H      R3, [R9]
    2b7a:	33 61       	SXT.H     R3, R3
    2b7c:	3a 64       	ADD       R3, R10
    2b7e:	53 85       	ST.W      [R5], R3
..\driver\driver_adc.c:239
	      adc_data.Ib_offset += adc_buf[4];
    2b80:	5d 98       	LD.W      R3, [R5 + #1]
    2b82:	43 59       	MOV       R10, R3
    2b84:	c9 58       	MOV       R6, R9
    2b86:	1e a9       	LD.H      R3, [R6 + #4]
    2b88:	33 61       	SXT.H     R3, R3
    2b8a:	3a 64       	ADD       R3, R10
    2b8c:	6b a0       	ST.W      [R5 + #1], R3
..\driver\driver_adc.c:221
	uint16_t i,j;

	adc_data.Ia_offset = 0;
	adc_data.Ib_offset = 0;
	adc_data.Ic_offset = 0;
	for(i=0;i<1025;i++)
    2b8e:	dc 70       	CMP       LR, R12
    2b90:	05 f0       	JZ        $+5                   ;->0x2b9a
    2b92:	ad 58       	MOV       R5, LR
    2b94:	7d c0       	ADD       R7, R5, #1
    2b96:	d7 d0       	ZXT.H     LR, R7
    2b98:	bb 07       	SJMP      $-69                  ;->0x2b0e
..\driver\driver_adc.c:243
	      adc_data.Ia_offset += adc_buf[0];
	      adc_data.Ib_offset += adc_buf[4];
	      //adc_data.Ic_offset += adc_buf[8];
	    }
	}
	adc_data.Ia_offset = adc_data.Ia_offset>>10;
    2b9a:	45 82       	LD.W      R4, [R5]
    2b9c:	a2 78       	ASR       R4, #10
    2b9e:	54 85       	ST.W      [R5], R4
..\driver\driver_adc.c:244
	adc_data.Ib_offset = adc_data.Ib_offset>>10;
    2ba0:	65 98       	LD.W      R4, [R5 + #1]
    2ba2:	a2 78       	ASR       R4, #10
    2ba4:	6c a0       	ST.W      [R5 + #1], R4
..\driver\driver_adc.c:246
	//adc_data.Ic_offset = adc_data.Ic_offset>>10;
}
    2ba6:	e4 28       	ADD       SP, #4
    2ba8:	7f 5e       	POP       {R6-R12}
    2baa:	0d 5d       	POP       LR
    2bac:	1d 5c       	JMP       LR
    2bae:	00 00       	NOP      NOP      
    2bb0:	18 3e 00 10 	.long     0x10003e18 ->268451352  [!!!@2@:CMP       R1, #104	@@: MOV       R0, #0
    2bb4:	00 3e 00 10 	.long     0x10003e00 ->268451328  [!!!@2@:CMP       R0, #96	@@: MOV       R0, #0
    2bb8:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x2eb8	@@: LD        R0, [PC + #0]         ;->0x2bb8  :=0x40000580
    2bbc:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x27bc	@@: LD        R0, [PC + #0]         ;->0x2bbc  :=0x40000600
    2bc0:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x28c0	@@: LD        R0, [PC + #0]         ;->0x2bc0  :=0x40000680
    2bc4:	01 04 00 00 	.long     0x00000401 ->000001025  [!!!@2@:SJMP      $+1                   ;->0x2bc6	@@: NOP      

00002bc8 <cfg_DMA>:
cfg_DMA():
..\driver\driver_dma.c:29

void cfg_DMA(void)
{
	//cfg_DMA0();
	//cfg_dma_intrupt();
}
    2bc8:	1d 5c       	JMP       LR
	...

00002bcc <cfg_GPIO>:
cfg_GPIO():
..\driver\driver_gpio.c:13
#include "system_init.h"
#include "driver_gpio.h"


void cfg_GPIO(void)
{
    2bcc:	ff 5f       	PUSH      {R6-R12,LR}
    2bce:	e8 31       	SUB       SP, #24
..\driver\driver_gpio.c:15
	GPIO_InitTypeDef  GPIO_InitStructure;
	GPIO_Struct_Init(&GPIO_InitStructure);
    2bd0:	0e 58       	MOV       R0, SP
    2bd2:	2e 45       	LD        R5, [PC + #46]        ;->0x2c88  :=0x1684
    2bd4:	05 5c       	LJMP      R5
..\driver\driver_gpio.c:16
	GPIO_Reset(GPIOA_SFR);
    2bd6:	2e 40       	LD        R0, [PC + #46]        ;->0x2c8c  :=0x50000000
    2bd8:	2e 46       	LD        R6, [PC + #46]        ;->0x2c90  :=0x14ac
    2bda:	06 5c       	LJMP      R6
..\driver\driver_gpio.c:17
	GPIO_Reset(GPIOB_SFR);
    2bdc:	2e 45       	LD        R5, [PC + #46]        ;->0x2c94  :=0x50000040
    2bde:	25 59       	MOV       R9, R5
    2be0:	05 58       	MOV       R0, R5
    2be2:	06 5c       	LJMP      R6
..\driver\driver_gpio.c:18
	GPIO_Reset(GPIOC_SFR);
    2be4:	2d 40       	LD        R0, [PC + #45]        ;->0x2c98  :=0x50000080
    2be6:	06 5c       	LJMP      R6
..\driver\driver_gpio.c:19
	GPIO_Reset(GPIOD_SFR);
    2be8:	2d 40       	LD        R0, [PC + #45]        ;->0x2c9c  :=0x500000c0
    2bea:	06 5c       	LJMP      R6
..\driver\driver_gpio.c:20
	GPIO_Reset(GPIOF_SFR);
    2bec:	2d 45       	LD        R5, [PC + #45]        ;->0x2ca0  :=0x50000140
    2bee:	45 59       	MOV       R10, R5
    2bf0:	05 58       	MOV       R0, R5
    2bf2:	06 5c       	LJMP      R6
..\driver\driver_gpio.c:21
	GPIO_Reset(GPIOE_SFR);
    2bf4:	2c 40       	LD        R0, [PC + #44]        ;->0x2ca4  :=0x50000100
    2bf6:	06 5c       	LJMP      R6
..\driver\driver_gpio.c:22
	GPIO_Reset(GPIOG_SFR);
    2bf8:	2c 45       	LD        R5, [PC + #44]        ;->0x2ca8  :=0x50000180
    2bfa:	65 59       	MOV       R11, R5
    2bfc:	05 58       	MOV       R0, R5
    2bfe:	06 5c       	LJMP      R6
..\driver\driver_gpio.c:24
	//LED1
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_15;
    2c00:	c1 10       	MOV       R12, #1
    2c02:	e7 7a       	LSL       R12, #15
    2c04:	ec 85       	ST.W      [SP], R12
..\driver\driver_gpio.c:25
    GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    2c06:	60 10       	MOV       R6, #0
    2c08:	02 26       	ST.W      [SP + #2], R6
..\driver\driver_gpio.c:26
	GPIO_InitStructure.m_Mode = GPIO_MODE_OUT;            //初始化 GPIO方向为输出
    2c0a:	81 10       	MOV       R8, #1
    2c0c:	a8 58       	MOV       R5, R8
    2c0e:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_gpio.c:27
	GPIO_InitStructure.m_PullUp = GPIO_NOPULL;            //初始化 GPIO是否上拉
    2c10:	04 26       	ST.W      [SP + #4], R6
..\driver\driver_gpio.c:28
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    2c12:	05 26       	ST.W      [SP + #5], R6
..\driver\driver_gpio.c:29
	GPIO_Configuration(GPIOB_SFR, &GPIO_InitStructure);
    2c14:	09 58       	MOV       R0, R9
    2c16:	2e 58       	MOV       R1, SP
    2c18:	25 47       	LD        R7, [PC + #37]        ;->0x2cac  :=0x1544
    2c1a:	07 5c       	LJMP      R7
..\driver\driver_gpio.c:31
	//LED2
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_14;
    2c1c:	51 10       	MOV       R5, #1
    2c1e:	ae 7a       	LSL       R5, #14
    2c20:	e5 85       	ST.W      [SP], R5
..\driver\driver_gpio.c:32
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    2c22:	02 26       	ST.W      [SP + #2], R6
..\driver\driver_gpio.c:33
	GPIO_InitStructure.m_Mode = GPIO_MODE_OUT;            //初始化 GPIO方向为输出
    2c24:	a8 58       	MOV       R5, R8
    2c26:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_gpio.c:34
	GPIO_InitStructure.m_PullUp = GPIO_NOPULL;            //初始化 GPIO是否上拉
    2c28:	04 26       	ST.W      [SP + #4], R6
..\driver\driver_gpio.c:35
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    2c2a:	05 26       	ST.W      [SP + #5], R6
..\driver\driver_gpio.c:36
	GPIO_Configuration(GPIOB_SFR, &GPIO_InitStructure);
    2c2c:	09 58       	MOV       R0, R9
    2c2e:	2e 58       	MOV       R1, SP
    2c30:	07 5c       	LJMP      R7
..\driver\driver_gpio.c:38
	//LED3
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_13;
    2c32:	51 10       	MOV       R5, #1
    2c34:	ad 7a       	LSL       R5, #13
    2c36:	e5 85       	ST.W      [SP], R5
..\driver\driver_gpio.c:39
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    2c38:	02 26       	ST.W      [SP + #2], R6
..\driver\driver_gpio.c:40
	GPIO_InitStructure.m_Mode = GPIO_MODE_OUT;            //初始化 GPIO方向为输出
    2c3a:	a8 58       	MOV       R5, R8
    2c3c:	01 25       	ST.W      [SP + #1], R5
..\driver\driver_gpio.c:41
	GPIO_InitStructure.m_PullUp = GPIO_NOPULL;            //初始化 GPIO是否上拉
    2c3e:	04 26       	ST.W      [SP + #4], R6
..\driver\driver_gpio.c:42
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    2c40:	05 26       	ST.W      [SP + #5], R6
..\driver\driver_gpio.c:43
	GPIO_Configuration(GPIOB_SFR, &GPIO_InitStructure);
    2c42:	09 58       	MOV       R0, R9
    2c44:	2e 58       	MOV       R1, SP
    2c46:	07 5c       	LJMP      R7
..\driver\driver_gpio.c:45
	//KEY
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_15;
    2c48:	ec 85       	ST.W      [SP], R12
..\driver\driver_gpio.c:46
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    2c4a:	02 26       	ST.W      [SP + #2], R6
..\driver\driver_gpio.c:47
	GPIO_InitStructure.m_Mode = GPIO_MODE_IN;             //初始化 GPIO方向为输出
    2c4c:	01 26       	ST.W      [SP + #1], R6
..\driver\driver_gpio.c:48
	GPIO_InitStructure.m_PullUp = GPIO_NOPULL;            //初始化 GPIO是否上拉
    2c4e:	04 26       	ST.W      [SP + #4], R6
..\driver\driver_gpio.c:49
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    2c50:	05 26       	ST.W      [SP + #5], R6
..\driver\driver_gpio.c:50
	GPIO_Configuration(GPIOG_SFR, &GPIO_InitStructure);
    2c52:	0b 58       	MOV       R0, R11
    2c54:	2e 58       	MOV       R1, SP
    2c56:	07 5c       	LJMP      R7
..\driver\driver_gpio.c:52
	//PB0
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_0;
    2c58:	e8 85       	ST.W      [SP], R8
..\driver\driver_gpio.c:53
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    2c5a:	02 26       	ST.W      [SP + #2], R6
..\driver\driver_gpio.c:54
	GPIO_InitStructure.m_Mode = GPIO_MODE_IN;             //初始化 GPIO方向为输出
    2c5c:	01 26       	ST.W      [SP + #1], R6
..\driver\driver_gpio.c:55
	GPIO_InitStructure.m_PullUp = GPIO_PULLUP;            //初始化 GPIO是否上拉
    2c5e:	a8 58       	MOV       R5, R8
    2c60:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_gpio.c:56
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    2c62:	05 26       	ST.W      [SP + #5], R6
..\driver\driver_gpio.c:57
	GPIO_Configuration(GPIOB_SFR, &GPIO_InitStructure);
    2c64:	09 58       	MOV       R0, R9
    2c66:	2e 58       	MOV       R1, SP
    2c68:	07 5c       	LJMP      R7
..\driver\driver_gpio.c:59
	//PF8
	GPIO_InitStructure.m_Pin = GPIO_PIN_MASK_8;
    2c6a:	5f 1f       	MOV       R5, #255
    2c6c:	6d c0       	ADD       R5, R5, #1
    2c6e:	e5 85       	ST.W      [SP], R5
..\driver\driver_gpio.c:60
	GPIO_InitStructure.m_Speed = GPIO_LOW_SPEED;          //初始化 GPIO输出速度
    2c70:	02 26       	ST.W      [SP + #2], R6
..\driver\driver_gpio.c:61
	GPIO_InitStructure.m_Mode = GPIO_MODE_IN;             //初始化 GPIO方向为输出
    2c72:	01 26       	ST.W      [SP + #1], R6
..\driver\driver_gpio.c:62
	GPIO_InitStructure.m_PullUp = GPIO_PULLUP;            //初始化 GPIO是否上拉
    2c74:	a8 58       	MOV       R5, R8
    2c76:	04 25       	ST.W      [SP + #4], R5
..\driver\driver_gpio.c:63
	GPIO_InitStructure.m_PullDown = GPIO_NOPULL;          //初始化 GPIO是否下拉
    2c78:	05 26       	ST.W      [SP + #5], R6
..\driver\driver_gpio.c:64
	GPIO_Configuration(GPIOF_SFR, &GPIO_InitStructure);
    2c7a:	0a 58       	MOV       R0, R10
    2c7c:	2e 58       	MOV       R1, SP
    2c7e:	07 5c       	LJMP      R7
..\driver\driver_gpio.c:66

}
    2c80:	e8 29       	ADD       SP, #24
    2c82:	7f 5e       	POP       {R6-R12}
    2c84:	0d 5d       	POP       LR
    2c86:	1d 5c       	JMP       LR
    2c88:	84 16 00 00 	.long     0x00001684 ->000005764  [!!!@2@:MOV       R8, #100	@@: NOP      
    2c8c:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    2c90:	ac 14 00 00 	.long     0x000014ac ->000005292  [!!!@2@:MOV       R10, #76	@@: NOP      
    2c94:	40 00 00 50 	.long     0x50000040 ->1342177344 
    2c98:	80 00 00 50 	.long     0x50000080 ->1342177408  [!!!@4@:LJMP      $+20480               ;->0xcc98
    2c9c:	c0 00 00 50 	.long     0x500000c0 ->1342177472 
    2ca0:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    2ca4:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    2ca8:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    2cac:	44 15 00 00 	.long     0x00001544 ->000005444  [!!!@2@:MOV       R4, #84	@@: NOP      

00002cb0 <cfg_EPWM_GPIO>:
cfg_EPWM_GPIO():
..\driver\driver_pwm.c:35
	//cfg_EPWM16();
	pwm_disable();
}

void cfg_EPWM_GPIO(void)
{
    2cb0:	8f 5f       	PUSH      {R6-R9,LR}
..\driver\driver_pwm.c:36
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_3,GPIO_MODE_RMP);  //PWM11A-PF3
    2cb2:	22 46       	LD        R6, [PC + #34]        ;->0x2d38  :=0x50000140
    2cb4:	06 58       	MOV       R0, R6
    2cb6:	18 10       	MOV       R1, #8
    2cb8:	22 10       	MOV       R2, #2
    2cba:	21 47       	LD        R7, [PC + #33]        ;->0x2d3c  :=0x169c
    2cbc:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:37
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_1,GPIO_MODE_RMP);  //PWM11B-PF1
    2cbe:	06 58       	MOV       R0, R6
    2cc0:	12 10       	MOV       R1, #2
    2cc2:	41 58       	MOV       R2, R1
    2cc4:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:38
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_2,GPIO_MODE_RMP);  //PWM12A-PF2
    2cc6:	06 58       	MOV       R0, R6
    2cc8:	14 10       	MOV       R1, #4
    2cca:	22 10       	MOV       R2, #2
    2ccc:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:39
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_0,GPIO_MODE_RMP);  //PWM12B-PF0
    2cce:	06 58       	MOV       R0, R6
    2cd0:	11 10       	MOV       R1, #1
    2cd2:	22 10       	MOV       R2, #2
    2cd4:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:40
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_5,GPIO_MODE_RMP);  //PWM13A-PF5
    2cd6:	06 58       	MOV       R0, R6
    2cd8:	10 12       	MOV       R1, #32
    2cda:	22 10       	MOV       R2, #2
    2cdc:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:41
	GPIO_Write_Mode_Bits(GPIOB_SFR,GPIO_PIN_MASK_6,GPIO_MODE_RMP);  //PWM13B-PB6
    2cde:	19 45       	LD        R5, [PC + #25]        ;->0x2d40  :=0x50000040
    2ce0:	25 59       	MOV       R9, R5
    2ce2:	05 58       	MOV       R0, R5
    2ce4:	10 14       	MOV       R1, #64
    2ce6:	22 10       	MOV       R2, #2
    2ce8:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:42
	GPIO_Write_Mode_Bits(GPIOF_SFR,GPIO_PIN_MASK_7,GPIO_MODE_RMP);  //PWM16A-PF7
    2cea:	06 58       	MOV       R0, R6
    2cec:	10 18       	MOV       R1, #128
    2cee:	22 10       	MOV       R2, #2
    2cf0:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:44

	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_3,GPIO_RMP_PAGE3_AF1);  //EPWM11A-PF3
    2cf2:	15 45       	LD        R5, [PC + #21]        ;->0x2d44  :=0x301
    2cf4:	05 59       	MOV       R8, R5
    2cf6:	06 58       	MOV       R0, R6
    2cf8:	13 10       	MOV       R1, #3
    2cfa:	45 58       	MOV       R2, R5
    2cfc:	13 47       	LD        R7, [PC + #19]        ;->0x2d48  :=0x17b4
    2cfe:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:45
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_1,GPIO_RMP_PAGE3_AF1);  //EPWM11B-PF1
    2d00:	06 58       	MOV       R0, R6
    2d02:	11 10       	MOV       R1, #1
    2d04:	48 58       	MOV       R2, R8
    2d06:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:46
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_2,GPIO_RMP_PAGE3_AF1);  //EPWM12A-PF2
    2d08:	06 58       	MOV       R0, R6
    2d0a:	12 10       	MOV       R1, #2
    2d0c:	48 58       	MOV       R2, R8
    2d0e:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:47
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_0,GPIO_RMP_PAGE3_AF1);  //EPWM12B-PF0
    2d10:	06 58       	MOV       R0, R6
    2d12:	10 10       	MOV       R1, #0
    2d14:	48 58       	MOV       R2, R8
    2d16:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:48
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_5,GPIO_RMP_PAGE3_AF1);  //EPWM13A-PF5
    2d18:	06 58       	MOV       R0, R6
    2d1a:	15 10       	MOV       R1, #5
    2d1c:	48 58       	MOV       R2, R8
    2d1e:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:49
	GPIO_Pin_RMP_Config(GPIOB_SFR,GPIO_Pin_Num_6,GPIO_RMP_PAGE3_AF5);  //EPWM13B-PB6
    2d20:	09 58       	MOV       R0, R9
    2d22:	16 10       	MOV       R1, #6
    2d24:	0a 42       	LD        R2, [PC + #10]        ;->0x2d4c  :=0x305
    2d26:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:50
	GPIO_Pin_RMP_Config(GPIOF_SFR,GPIO_Pin_Num_7,GPIO_RMP_PAGE3_AF1);  //EPWM16A-PF7
    2d28:	06 58       	MOV       R0, R6
    2d2a:	17 10       	MOV       R1, #7
    2d2c:	48 58       	MOV       R2, R8
    2d2e:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:51
}
    2d30:	0f 5e       	POP       {R6-R9}
    2d32:	0d 5d       	POP       LR
    2d34:	1d 5c       	JMP       LR
    2d36:	00 00       	NOP      NOP      
    2d38:	40 01 00 50 	.long     0x50000140 ->1342177600  [!!!@2@:CMN       R4, R0	@@: JB        [R0], #0
    2d3c:	9c 16 00 00 	.long     0x0000169c ->000005788  [!!!@2@:MOV       R9, #108	@@: NOP      
    2d40:	40 00 00 50 	.long     0x50000040 ->1342177344 
    2d44:	01 03 00 00 	.long     0x00000301 ->000000769  [!!!@4@:JMP       $+65536               ;->0x22d44
    2d48:	b4 17 00 00 	.long     0x000017b4 ->000006068  [!!!@2@:MOV       R11, #116	@@: NOP      
    2d4c:	05 03 00 00 	.long     0x00000305 ->000000773  [!!!@4@:JMP       $+327680              ;->0xa2d4c

00002d50 <cfg_EPWM11>:
cfg_EPWM11():
..\driver\driver_pwm.c:54

void cfg_EPWM11(void)
{
    2d50:	83 5f       	PUSH      {R6-R7,LR}
..\driver\driver_pwm.c:55
	EPWM_Work_Mode_Config(EPWM11_SFR,EPWM_TIMER_MODE);
    2d52:	44 46       	LD        R6, [PC + #68]        ;->0x2e60  :=0x40001a00
    2d54:	06 58       	MOV       R0, R6
    2d56:	10 10       	MOV       R1, #0
    2d58:	43 45       	LD        R5, [PC + #67]        ;->0x2e64  :=0xe90
    2d5a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:56
	EPWM_Work_Clock_Select(EPWM11_SFR,EPWM_CLK_SCLK);  //EPWM_CLK=SCLK
    2d5c:	06 58       	MOV       R0, R6
    2d5e:	10 10       	MOV       R1, #0
    2d60:	42 45       	LD        R5, [PC + #66]        ;->0x2e68  :=0xe34
    2d62:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:57
	EPWM_TxPRSC_Value_Config(EPWM11_SFR,0);  //1:1
    2d64:	06 58       	MOV       R0, R6
    2d66:	10 10       	MOV       R1, #0
    2d68:	41 45       	LD        R5, [PC + #65]        ;->0x2e6c  :=0xbb0
    2d6a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:58
	EPWM_TxPHS_Value_Config(EPWM11_SFR,0);
    2d6c:	06 58       	MOV       R0, R6
    2d6e:	10 10       	MOV       R1, #0
    2d70:	40 45       	LD        R5, [PC + #64]        ;->0x2e70  :=0xb64
    2d72:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:60

	EPWM_Counter_Mode_Select(EPWM11_SFR,EPWM_COUNT_UP_DOWM_OF);  //UP DOWN MODE
    2d74:	06 58       	MOV       R0, R6
    2d76:	15 10       	MOV       R1, #5
    2d78:	3f 45       	LD        R5, [PC + #63]        ;->0x2e74  :=0xdc8
    2d7a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:62

	EPWM_Phase_Register_Loading_Enable(EPWM11_SFR,TRUE);
    2d7c:	06 58       	MOV       R0, R6
    2d7e:	11 10       	MOV       R1, #1
    2d80:	3e 45       	LD        R5, [PC + #62]        ;->0x2e78  :=0xcb4
    2d82:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:63
	EPWM_Phase_Direction_Config(EPWM11_SFR,EPWM_SYNC_TRIGGER_UP);
    2d84:	06 58       	MOV       R0, R6
    2d86:	11 10       	MOV       R1, #1
    2d88:	3d 45       	LD        R5, [PC + #61]        ;->0x2e7c  :=0xbfc
    2d8a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:64
	EPWM_SYNC_Event_Out_Select(EPWM11_SFR,EPWM_SYNC_EVENT_OUT_COUNT0);  //CNT=0
    2d8c:	06 58       	MOV       R0, R6
    2d8e:	11 10       	MOV       R1, #1
    2d90:	3c 45       	LD        R5, [PC + #60]        ;->0x2e80  :=0xc58
    2d92:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:66

	EPWM11_SFR->PPX = EPWM_PERIOD;
    2d94:	3c 45       	LD        R5, [PC + #60]        ;->0x2e84  :=0xbb8
    2d96:	b5 a0       	ST.W      [R6 + #2], R5
..\driver\driver_pwm.c:67
	EPWM11_SFR->RA = EPWM_HALF_PERIOD;
    2d98:	3c 45       	LD        R5, [PC + #60]        ;->0x2e88  :=0x5dc
    2d9a:	75 a1       	ST.W      [R6 + #5], R5
..\driver\driver_pwm.c:68
	EPWM11_SFR->RB = EPWM_HALF_PERIOD;
    2d9c:	b5 a1       	ST.W      [R6 + #6], R5
..\driver\driver_pwm.c:70

	EPWM_EPWMxAB_OUTPUT_Select(EPWM11_SFR,EPWM_REGISTER_A,EPWM_CERA_DU_EPWMAB_OUT,EPWM_OUT_HIGH);    //RA-UP HIGH
    2d9e:	06 58       	MOV       R0, R6
    2da0:	10 10       	MOV       R1, #0
    2da2:	22 10       	MOV       R2, #2
    2da4:	62 58       	MOV       R3, R2
    2da6:	3a 47       	LD        R7, [PC + #58]        ;->0x2e8c  :=0xfc8
    2da8:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:71
	EPWM_EPWMxAB_OUTPUT_Select(EPWM11_SFR,EPWM_REGISTER_A,EPWM_CERA_DD_EPWMAB_OUT,EPWM_OUT_LOW);   //RA-DOWN LOW
    2daa:	06 58       	MOV       R0, R6
    2dac:	10 10       	MOV       R1, #0
    2dae:	23 10       	MOV       R2, #3
    2db0:	31 10       	MOV       R3, #1
    2db2:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:72
	EPWM_Continuous_Mandatory_Output_Config(EPWM11_SFR,EPWM_REGISTER_A,EPWM_OUT_PROHIBIT);
    2db4:	06 58       	MOV       R0, R6
    2db6:	10 10       	MOV       R1, #0
    2db8:	23 10       	MOV       R2, #3
    2dba:	36 45       	LD        R5, [PC + #54]        ;->0x2e90  :=0xf44
    2dbc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:75

	//DB
	EPWM_Dead_Zone_Input_Select(EPWM11_SFR,EPWM_EPWMA_UP_EPWMA_DOWM);
    2dbe:	06 58       	MOV       R0, R6
    2dc0:	10 10       	MOV       R1, #0
    2dc2:	35 45       	LD        R5, [PC + #53]        ;->0x2e94  :=0x105c
    2dc4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:76
	EPWM_Dead_Zone_Output_Polarity_Select(EPWM11_SFR,EPWM_EPWMA_NTOGGLE_EPWMB_TOGGLE);
    2dc6:	06 58       	MOV       R0, R6
    2dc8:	12 10       	MOV       R1, #2
    2dca:	34 45       	LD        R5, [PC + #52]        ;->0x2e98  :=0x10b8
    2dcc:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:77
	EPWM_Dead_Zone_Output_Select(EPWM11_SFR,EPWM_UP_ENABLE_DOWN_ENABLE);
    2dce:	06 58       	MOV       R0, R6
    2dd0:	13 10       	MOV       R1, #3
    2dd2:	33 45       	LD        R5, [PC + #51]        ;->0x2e9c  :=0x1114
    2dd4:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:78
	EPWM_Dead_Zone_Time_Config(EPWM11_SFR,EPWM_UP_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    2dd6:	06 58       	MOV       R0, R6
    2dd8:	11 10       	MOV       R1, #1
    2dda:	28 17       	MOV       R2, #120
    2ddc:	31 47       	LD        R7, [PC + #49]        ;->0x2ea0  :=0x1170
    2dde:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:79
	EPWM_Dead_Zone_Time_Config(EPWM11_SFR,EPWM_DOWM_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    2de0:	06 58       	MOV       R0, R6
    2de2:	10 10       	MOV       R1, #0
    2de4:	28 17       	MOV       R2, #120
    2de6:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:82

	//TZ
	EPWM_Auto_ShowDown_Source_Select(EPWM11_SFR,EPWM_AUTO_SHOWDOWN_SOURCE_TZ4_HIGH);  //TZ4
    2de8:	06 58       	MOV       R0, R6
    2dea:	14 10       	MOV       R1, #4
    2dec:	2e 45       	LD        R5, [PC + #46]        ;->0x2ea4  :=0x11f8
    2dee:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:85

    //trigger AD
	EPWM_Trigger_AD_Event_Mode_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT0,EPWM_TRIGGER_AD_UP);
    2df0:	06 58       	MOV       R0, R6
    2df2:	10 10       	MOV       R1, #0
    2df4:	41 58       	MOV       R2, R1
    2df6:	2d 47       	LD        R7, [PC + #45]        ;->0x2ea8  :=0x1254
    2df8:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:86
	EPWM_Trigger_AD_Event_Mode_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT1,EPWM_TRIGGER_AD_UP);
    2dfa:	06 58       	MOV       R0, R6
    2dfc:	11 10       	MOV       R1, #1
    2dfe:	20 10       	MOV       R2, #0
    2e00:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:87
	EPWM_Trigger_Event_Cycle_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT0,EPWM_1_TRIGGER_EVENT_TRIGGER_AD);
    2e02:	06 58       	MOV       R0, R6
    2e04:	10 10       	MOV       R1, #0
    2e06:	41 58       	MOV       R2, R1
    2e08:	29 47       	LD        R7, [PC + #41]        ;->0x2eac  :=0x12d4
    2e0a:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:88
	EPWM_Trigger_Event_Cycle_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT1,EPWM_1_TRIGGER_EVENT_TRIGGER_AD);
    2e0c:	06 58       	MOV       R0, R6
    2e0e:	11 10       	MOV       R1, #1
    2e10:	20 10       	MOV       R2, #0
    2e12:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:89
	EPWM_Trigger_AD_Event_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT0,EPWM_TIMER_EQUAL_0PULSE);
    2e14:	06 58       	MOV       R0, R6
    2e16:	10 10       	MOV       R1, #0
    2e18:	41 58       	MOV       R2, R1
    2e1a:	26 47       	LD        R7, [PC + #38]        ;->0x2eb0  :=0x1354
    2e1c:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:90
	EPWM_Trigger_AD_Event_Select(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT1,EPWM_TIMER_EQUAL_PPPULSE);
    2e1e:	06 58       	MOV       R0, R6
    2e20:	11 10       	MOV       R1, #1
    2e22:	41 58       	MOV       R2, R1
    2e24:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:91
	EPWM_Trigger_AD_Event_Enable(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT0,TRUE);
    2e26:	06 58       	MOV       R0, R6
    2e28:	10 10       	MOV       R1, #0
    2e2a:	21 10       	MOV       R2, #1
    2e2c:	22 47       	LD        R7, [PC + #34]        ;->0x2eb4  :=0x13d4
    2e2e:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:92
	EPWM_Trigger_AD_Event_Enable(EPWM11_SFR,EPWM_TRIGGER_AD_EVENT1,TRUE);
    2e30:	06 58       	MOV       R0, R6
    2e32:	11 10       	MOV       R1, #1
    2e34:	41 58       	MOV       R2, R1
    2e36:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:98

	//interrupt
	//EPWM_INT_Enable(EPWM11_SFR,EPWM_COUNT_EQUAL_EPWMRA,FALSE);

	//update
	EPWM_Global_Loading_Enable(EPWM11_SFR,FALSE);
    2e38:	06 58       	MOV       R0, R6
    2e3a:	10 10       	MOV       R1, #0
    2e3c:	1f 45       	LD        R5, [PC + #31]        ;->0x2eb8  :=0x1450
    2e3e:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:99
	EPWM_Updata_Event_Enable(EPWM11_SFR,TRUE);
    2e40:	06 58       	MOV       R0, R6
    2e42:	11 10       	MOV       R1, #1
    2e44:	1e 45       	LD        R5, [PC + #30]        ;->0x2ebc  :=0xd6c
    2e46:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:100
	EPWM_Updata_Event_Generate_Enable(EPWM11_SFR,TRUE);
    2e48:	06 58       	MOV       R0, R6
    2e4a:	11 10       	MOV       R1, #1
    2e4c:	1d 45       	LD        R5, [PC + #29]        ;->0x2ec0  :=0xd10
    2e4e:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:103


	EPWM_Enable(EPWM11_SFR,FALSE);
    2e50:	06 58       	MOV       R0, R6
    2e52:	10 10       	MOV       R1, #0
    2e54:	1c 45       	LD        R5, [PC + #28]        ;->0x2ec4  :=0xeec
    2e56:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:104
}
    2e58:	03 5e       	POP       {R6-R7}
    2e5a:	0d 5d       	POP       LR
    2e5c:	1d 5c       	JMP       LR
    2e5e:	00 00       	NOP      NOP      
    2e60:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x2e60  :=0x40001a00
    2e64:	90 0e 00 00 	.long     0x00000e90 ->000003728  [!!!@2@:LD.W      R6, [SP + #144]	@@: NOP      
    2e68:	34 0e 00 00 	.long     0x00000e34 ->000003636  [!!!@2@:LD.W      R6, [SP + #52]	@@: NOP      
    2e6c:	b0 0b 00 00 	.long     0x00000bb0 ->000002992  [!!!@2@:LD.W      R3, [SP + #176]	@@: NOP      
    2e70:	64 0b 00 00 	.long     0x00000b64 ->000002916  [!!!@2@:LD.W      R3, [SP + #100]	@@: NOP      
    2e74:	c8 0d 00 00 	.long     0x00000dc8 ->000003528  [!!!@2@:LD.W      R5, [SP + #200]	@@: NOP      
    2e78:	b4 0c 00 00 	.long     0x00000cb4 ->000003252  [!!!@2@:LD.W      R4, [SP + #180]	@@: NOP      
    2e7c:	fc 0b 00 00 	.long     0x00000bfc ->000003068  [!!!@2@:LD.W      R3, [SP + #252]	@@: NOP      
    2e80:	58 0c 00 00 	.long     0x00000c58 ->000003160  [!!!@2@:LD.W      R4, [SP + #88]	@@: NOP      
    2e84:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    2e88:	dc 05 00 00 	.long     0x000005dc ->000001500  [!!!@2@:SJMP      $+476                 ;->0x3240	@@: NOP      
    2e8c:	c8 0f 00 00 	.long     0x00000fc8 ->000004040  [!!!@2@:LD.W      R7, [SP + #200]	@@: NOP      
    2e90:	44 0f 00 00 	.long     0x00000f44 ->000003908  [!!!@2@:LD.W      R7, [SP + #68]	@@: NOP      
    2e94:	5c 10 00 00 	.long     0x0000105c ->000004188  [!!!@2@:MOV       R5, #12	@@: NOP      
    2e98:	b8 10 00 00 	.long     0x000010b8 ->000004280  [!!!@2@:MOV       R11, #8	@@: NOP      
    2e9c:	14 11 00 00 	.long     0x00001114 ->000004372  [!!!@2@:MOV       R1, #20	@@: NOP      
    2ea0:	70 11 00 00 	.long     0x00001170 ->000004464  [!!!@2@:MOV       R7, #16	@@: NOP      
    2ea4:	f8 11 00 00 	.long     0x000011f8 ->000004600  [!!!@2@:MOV       PC, #24	@@: NOP      
    2ea8:	54 12 00 00 	.long     0x00001254 ->000004692  [!!!@2@:MOV       R5, #36	@@: NOP      
    2eac:	d4 12 00 00 	.long     0x000012d4 ->000004820  [!!!@2@:MOV       LR, #36	@@: NOP      
    2eb0:	54 13 00 00 	.long     0x00001354 ->000004948  [!!!@2@:MOV       R5, #52	@@: NOP      
    2eb4:	d4 13 00 00 	.long     0x000013d4 ->000005076  [!!!@2@:MOV       LR, #52	@@: NOP      
    2eb8:	50 14 00 00 	.long     0x00001450 ->000005200  [!!!@2@:MOV       R5, #64	@@: NOP      
    2ebc:	6c 0d 00 00 	.long     0x00000d6c ->000003436  [!!!@2@:LD.W      R5, [SP + #108]	@@: NOP      
    2ec0:	10 0d 00 00 	.long     0x00000d10 ->000003344  [!!!@2@:LD.W      R5, [SP + #16]	@@: NOP      
    2ec4:	ec 0e 00 00 	.long     0x00000eec ->000003820  [!!!@2@:LD.W      R6, [SP + #236]	@@: NOP      

00002ec8 <cfg_EPWM12>:
cfg_EPWM12():
..\driver\driver_pwm.c:107

void cfg_EPWM12(void)
{
    2ec8:	83 5f       	PUSH      {R6-R7,LR}
..\driver\driver_pwm.c:108
	EPWM_Work_Mode_Config(EPWM12_SFR,EPWM_TIMER_MODE);
    2eca:	32 46       	LD        R6, [PC + #50]        ;->0x2f90  :=0x40001300
    2ecc:	06 58       	MOV       R0, R6
    2ece:	10 10       	MOV       R1, #0
    2ed0:	31 45       	LD        R5, [PC + #49]        ;->0x2f94  :=0xe90
    2ed2:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:109
	EPWM_Work_Clock_Select(EPWM12_SFR,EPWM_CLK_SCLK);  //EPWM_CLK=SCLK
    2ed4:	06 58       	MOV       R0, R6
    2ed6:	10 10       	MOV       R1, #0
    2ed8:	30 45       	LD        R5, [PC + #48]        ;->0x2f98  :=0xe34
    2eda:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:110
	EPWM_TxPRSC_Value_Config(EPWM12_SFR,0);  //1:1
    2edc:	06 58       	MOV       R0, R6
    2ede:	10 10       	MOV       R1, #0
    2ee0:	2f 45       	LD        R5, [PC + #47]        ;->0x2f9c  :=0xbb0
    2ee2:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:111
	EPWM_TxPHS_Value_Config(EPWM12_SFR,2);
    2ee4:	06 58       	MOV       R0, R6
    2ee6:	12 10       	MOV       R1, #2
    2ee8:	2e 45       	LD        R5, [PC + #46]        ;->0x2fa0  :=0xb64
    2eea:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:113

	EPWM_Counter_Mode_Select(EPWM12_SFR,EPWM_COUNT_UP_DOWM_OF);  //UP DOWN MODE
    2eec:	06 58       	MOV       R0, R6
    2eee:	15 10       	MOV       R1, #5
    2ef0:	2d 45       	LD        R5, [PC + #45]        ;->0x2fa4  :=0xdc8
    2ef2:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:115

	EPWM_Phase_Register_Loading_Enable(EPWM12_SFR,TRUE);
    2ef4:	06 58       	MOV       R0, R6
    2ef6:	11 10       	MOV       R1, #1
    2ef8:	2c 45       	LD        R5, [PC + #44]        ;->0x2fa8  :=0xcb4
    2efa:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:116
	EPWM_Phase_Direction_Config(EPWM12_SFR,EPWM_SYNC_TRIGGER_UP);
    2efc:	06 58       	MOV       R0, R6
    2efe:	11 10       	MOV       R1, #1
    2f00:	2b 45       	LD        R5, [PC + #43]        ;->0x2fac  :=0xbfc
    2f02:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:117
	EPWM_SYNC_Event_Out_Select(EPWM12_SFR,EPWM_SYNC_EVENT_OUT_EPWM_SWF);  //SYNCI/SWFSYNC
    2f04:	06 58       	MOV       R0, R6
    2f06:	10 10       	MOV       R1, #0
    2f08:	2a 45       	LD        R5, [PC + #42]        ;->0x2fb0  :=0xc58
    2f0a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:119

	EPWM12_SFR->PPX = EPWM_PERIOD;
    2f0c:	2a 45       	LD        R5, [PC + #42]        ;->0x2fb4  :=0xbb8
    2f0e:	b5 a0       	ST.W      [R6 + #2], R5
..\driver\driver_pwm.c:120
	EPWM12_SFR->RA = EPWM_HALF_PERIOD;
    2f10:	2a 45       	LD        R5, [PC + #42]        ;->0x2fb8  :=0x5dc
    2f12:	75 a1       	ST.W      [R6 + #5], R5
..\driver\driver_pwm.c:121
	EPWM12_SFR->RB = EPWM_HALF_PERIOD;
    2f14:	b5 a1       	ST.W      [R6 + #6], R5
..\driver\driver_pwm.c:123

	EPWM_EPWMxAB_OUTPUT_Select(EPWM12_SFR,EPWM_REGISTER_A,EPWM_CERA_DU_EPWMAB_OUT,EPWM_OUT_HIGH);    //RA-UP HIGH
    2f16:	06 58       	MOV       R0, R6
    2f18:	10 10       	MOV       R1, #0
    2f1a:	22 10       	MOV       R2, #2
    2f1c:	62 58       	MOV       R3, R2
    2f1e:	28 47       	LD        R7, [PC + #40]        ;->0x2fbc  :=0xfc8
    2f20:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:124
	EPWM_EPWMxAB_OUTPUT_Select(EPWM12_SFR,EPWM_REGISTER_A,EPWM_CERA_DD_EPWMAB_OUT,EPWM_OUT_LOW);   //RA-DOWN LOW
    2f22:	06 58       	MOV       R0, R6
    2f24:	10 10       	MOV       R1, #0
    2f26:	23 10       	MOV       R2, #3
    2f28:	31 10       	MOV       R3, #1
    2f2a:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:125
	EPWM_Continuous_Mandatory_Output_Config(EPWM12_SFR,EPWM_REGISTER_A,EPWM_OUT_PROHIBIT);
    2f2c:	06 58       	MOV       R0, R6
    2f2e:	10 10       	MOV       R1, #0
    2f30:	23 10       	MOV       R2, #3
    2f32:	24 45       	LD        R5, [PC + #36]        ;->0x2fc0  :=0xf44
    2f34:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:128

	//DB
	EPWM_Dead_Zone_Input_Select(EPWM12_SFR,EPWM_EPWMA_UP_EPWMA_DOWM);
    2f36:	06 58       	MOV       R0, R6
    2f38:	10 10       	MOV       R1, #0
    2f3a:	23 45       	LD        R5, [PC + #35]        ;->0x2fc4  :=0x105c
    2f3c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:129
	EPWM_Dead_Zone_Output_Polarity_Select(EPWM12_SFR,EPWM_EPWMA_NTOGGLE_EPWMB_TOGGLE);
    2f3e:	06 58       	MOV       R0, R6
    2f40:	12 10       	MOV       R1, #2
    2f42:	22 45       	LD        R5, [PC + #34]        ;->0x2fc8  :=0x10b8
    2f44:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:130
	EPWM_Dead_Zone_Output_Select(EPWM12_SFR,EPWM_UP_ENABLE_DOWN_ENABLE);
    2f46:	06 58       	MOV       R0, R6
    2f48:	13 10       	MOV       R1, #3
    2f4a:	21 45       	LD        R5, [PC + #33]        ;->0x2fcc  :=0x1114
    2f4c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:131
	EPWM_Dead_Zone_Time_Config(EPWM12_SFR,EPWM_UP_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    2f4e:	06 58       	MOV       R0, R6
    2f50:	11 10       	MOV       R1, #1
    2f52:	28 17       	MOV       R2, #120
    2f54:	1f 47       	LD        R7, [PC + #31]        ;->0x2fd0  :=0x1170
    2f56:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:132
	EPWM_Dead_Zone_Time_Config(EPWM12_SFR,EPWM_DOWM_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    2f58:	06 58       	MOV       R0, R6
    2f5a:	10 10       	MOV       R1, #0
    2f5c:	28 17       	MOV       R2, #120
    2f5e:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:135

	//TZ
	EPWM_Auto_ShowDown_Source_Select(EPWM12_SFR,EPWM_AUTO_SHOWDOWN_SOURCE_TZ4_HIGH);  //TZ4
    2f60:	06 58       	MOV       R0, R6
    2f62:	14 10       	MOV       R1, #4
    2f64:	1c 45       	LD        R5, [PC + #28]        ;->0x2fd4  :=0x11f8
    2f66:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:141

	//interrupt
	//EPWM_INT_Enable(EPWM12_SFR,EPWM_COUNT_EQUAL_EPWMRA,FALSE);

	//update
	EPWM_Global_Loading_Enable(EPWM12_SFR,FALSE);
    2f68:	06 58       	MOV       R0, R6
    2f6a:	10 10       	MOV       R1, #0
    2f6c:	1b 45       	LD        R5, [PC + #27]        ;->0x2fd8  :=0x1450
    2f6e:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:142
	EPWM_Updata_Event_Enable(EPWM12_SFR,TRUE);
    2f70:	06 58       	MOV       R0, R6
    2f72:	11 10       	MOV       R1, #1
    2f74:	1a 45       	LD        R5, [PC + #26]        ;->0x2fdc  :=0xd6c
    2f76:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:143
	EPWM_Updata_Event_Generate_Enable(EPWM12_SFR,TRUE);
    2f78:	06 58       	MOV       R0, R6
    2f7a:	11 10       	MOV       R1, #1
    2f7c:	19 45       	LD        R5, [PC + #25]        ;->0x2fe0  :=0xd10
    2f7e:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:146


	EPWM_Enable(EPWM12_SFR,FALSE);
    2f80:	06 58       	MOV       R0, R6
    2f82:	10 10       	MOV       R1, #0
    2f84:	18 45       	LD        R5, [PC + #24]        ;->0x2fe4  :=0xeec
    2f86:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:147
}
    2f88:	03 5e       	POP       {R6-R7}
    2f8a:	0d 5d       	POP       LR
    2f8c:	1d 5c       	JMP       LR
    2f8e:	00 00       	NOP      NOP      
    2f90:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x2f90  :=0x40001300
    2f94:	90 0e 00 00 	.long     0x00000e90 ->000003728  [!!!@2@:LD.W      R6, [SP + #144]	@@: NOP      
    2f98:	34 0e 00 00 	.long     0x00000e34 ->000003636  [!!!@2@:LD.W      R6, [SP + #52]	@@: NOP      
    2f9c:	b0 0b 00 00 	.long     0x00000bb0 ->000002992  [!!!@2@:LD.W      R3, [SP + #176]	@@: NOP      
    2fa0:	64 0b 00 00 	.long     0x00000b64 ->000002916  [!!!@2@:LD.W      R3, [SP + #100]	@@: NOP      
    2fa4:	c8 0d 00 00 	.long     0x00000dc8 ->000003528  [!!!@2@:LD.W      R5, [SP + #200]	@@: NOP      
    2fa8:	b4 0c 00 00 	.long     0x00000cb4 ->000003252  [!!!@2@:LD.W      R4, [SP + #180]	@@: NOP      
    2fac:	fc 0b 00 00 	.long     0x00000bfc ->000003068  [!!!@2@:LD.W      R3, [SP + #252]	@@: NOP      
    2fb0:	58 0c 00 00 	.long     0x00000c58 ->000003160  [!!!@2@:LD.W      R4, [SP + #88]	@@: NOP      
    2fb4:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    2fb8:	dc 05 00 00 	.long     0x000005dc ->000001500  [!!!@2@:SJMP      $+476                 ;->0x3370	@@: NOP      
    2fbc:	c8 0f 00 00 	.long     0x00000fc8 ->000004040  [!!!@2@:LD.W      R7, [SP + #200]	@@: NOP      
    2fc0:	44 0f 00 00 	.long     0x00000f44 ->000003908  [!!!@2@:LD.W      R7, [SP + #68]	@@: NOP      
    2fc4:	5c 10 00 00 	.long     0x0000105c ->000004188  [!!!@2@:MOV       R5, #12	@@: NOP      
    2fc8:	b8 10 00 00 	.long     0x000010b8 ->000004280  [!!!@2@:MOV       R11, #8	@@: NOP      
    2fcc:	14 11 00 00 	.long     0x00001114 ->000004372  [!!!@2@:MOV       R1, #20	@@: NOP      
    2fd0:	70 11 00 00 	.long     0x00001170 ->000004464  [!!!@2@:MOV       R7, #16	@@: NOP      
    2fd4:	f8 11 00 00 	.long     0x000011f8 ->000004600  [!!!@2@:MOV       PC, #24	@@: NOP      
    2fd8:	50 14 00 00 	.long     0x00001450 ->000005200  [!!!@2@:MOV       R5, #64	@@: NOP      
    2fdc:	6c 0d 00 00 	.long     0x00000d6c ->000003436  [!!!@2@:LD.W      R5, [SP + #108]	@@: NOP      
    2fe0:	10 0d 00 00 	.long     0x00000d10 ->000003344  [!!!@2@:LD.W      R5, [SP + #16]	@@: NOP      
    2fe4:	ec 0e 00 00 	.long     0x00000eec ->000003820  [!!!@2@:LD.W      R6, [SP + #236]	@@: NOP      

00002fe8 <cfg_EPWM13>:
cfg_EPWM13():
..\driver\driver_pwm.c:150

void cfg_EPWM13(void)
{
    2fe8:	83 5f       	PUSH      {R6-R7,LR}
..\driver\driver_pwm.c:151
	EPWM_Work_Mode_Config(EPWM13_SFR,EPWM_TIMER_MODE);
    2fea:	32 46       	LD        R6, [PC + #50]        ;->0x30b0  :=0x40001380
    2fec:	06 58       	MOV       R0, R6
    2fee:	10 10       	MOV       R1, #0
    2ff0:	31 45       	LD        R5, [PC + #49]        ;->0x30b4  :=0xe90
    2ff2:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:152
	EPWM_Work_Clock_Select(EPWM13_SFR,EPWM_CLK_SCLK);  //EPWM_CLK=SCLK
    2ff4:	06 58       	MOV       R0, R6
    2ff6:	10 10       	MOV       R1, #0
    2ff8:	30 45       	LD        R5, [PC + #48]        ;->0x30b8  :=0xe34
    2ffa:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:153
	EPWM_TxPRSC_Value_Config(EPWM13_SFR,0);  //1:1
    2ffc:	06 58       	MOV       R0, R6
    2ffe:	10 10       	MOV       R1, #0
    3000:	2f 45       	LD        R5, [PC + #47]        ;->0x30bc  :=0xbb0
    3002:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:154
	EPWM_TxPHS_Value_Config(EPWM13_SFR,3);
    3004:	06 58       	MOV       R0, R6
    3006:	13 10       	MOV       R1, #3
    3008:	2e 45       	LD        R5, [PC + #46]        ;->0x30c0  :=0xb64
    300a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:156

	EPWM_Counter_Mode_Select(EPWM13_SFR,EPWM_COUNT_UP_DOWM_OF);  //UP DOWN MODE
    300c:	06 58       	MOV       R0, R6
    300e:	15 10       	MOV       R1, #5
    3010:	2d 45       	LD        R5, [PC + #45]        ;->0x30c4  :=0xdc8
    3012:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:158

	EPWM_Phase_Register_Loading_Enable(EPWM13_SFR,TRUE);
    3014:	06 58       	MOV       R0, R6
    3016:	11 10       	MOV       R1, #1
    3018:	2c 45       	LD        R5, [PC + #44]        ;->0x30c8  :=0xcb4
    301a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:159
	EPWM_Phase_Direction_Config(EPWM13_SFR,EPWM_SYNC_TRIGGER_UP);
    301c:	06 58       	MOV       R0, R6
    301e:	11 10       	MOV       R1, #1
    3020:	2b 45       	LD        R5, [PC + #43]        ;->0x30cc  :=0xbfc
    3022:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:160
	EPWM_SYNC_Event_Out_Select(EPWM13_SFR,EPWM_SYNC_EVENT_OUT_EPWM_SWF);  //SYNCI/SWFSYNC
    3024:	06 58       	MOV       R0, R6
    3026:	10 10       	MOV       R1, #0
    3028:	2a 45       	LD        R5, [PC + #42]        ;->0x30d0  :=0xc58
    302a:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:162

	EPWM13_SFR->PPX = EPWM_PERIOD;
    302c:	2a 45       	LD        R5, [PC + #42]        ;->0x30d4  :=0xbb8
    302e:	b5 a0       	ST.W      [R6 + #2], R5
..\driver\driver_pwm.c:163
	EPWM13_SFR->RA = EPWM_HALF_PERIOD;
    3030:	2a 45       	LD        R5, [PC + #42]        ;->0x30d8  :=0x5dc
    3032:	75 a1       	ST.W      [R6 + #5], R5
..\driver\driver_pwm.c:164
	EPWM13_SFR->RB = EPWM_HALF_PERIOD;
    3034:	b5 a1       	ST.W      [R6 + #6], R5
..\driver\driver_pwm.c:166

	EPWM_EPWMxAB_OUTPUT_Select(EPWM13_SFR,EPWM_REGISTER_A,EPWM_CERA_DU_EPWMAB_OUT,EPWM_OUT_HIGH);    //RA-UP HIGH
    3036:	06 58       	MOV       R0, R6
    3038:	10 10       	MOV       R1, #0
    303a:	22 10       	MOV       R2, #2
    303c:	62 58       	MOV       R3, R2
    303e:	28 47       	LD        R7, [PC + #40]        ;->0x30dc  :=0xfc8
    3040:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:167
	EPWM_EPWMxAB_OUTPUT_Select(EPWM13_SFR,EPWM_REGISTER_A,EPWM_CERA_DD_EPWMAB_OUT,EPWM_OUT_LOW);   //RA-DOWN LOW
    3042:	06 58       	MOV       R0, R6
    3044:	10 10       	MOV       R1, #0
    3046:	23 10       	MOV       R2, #3
    3048:	31 10       	MOV       R3, #1
    304a:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:168
	EPWM_Continuous_Mandatory_Output_Config(EPWM13_SFR,EPWM_REGISTER_A,EPWM_OUT_PROHIBIT);
    304c:	06 58       	MOV       R0, R6
    304e:	10 10       	MOV       R1, #0
    3050:	23 10       	MOV       R2, #3
    3052:	24 45       	LD        R5, [PC + #36]        ;->0x30e0  :=0xf44
    3054:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:171

	//DB
	EPWM_Dead_Zone_Input_Select(EPWM13_SFR,EPWM_EPWMA_UP_EPWMA_DOWM);
    3056:	06 58       	MOV       R0, R6
    3058:	10 10       	MOV       R1, #0
    305a:	23 45       	LD        R5, [PC + #35]        ;->0x30e4  :=0x105c
    305c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:172
	EPWM_Dead_Zone_Output_Polarity_Select(EPWM13_SFR,EPWM_EPWMA_NTOGGLE_EPWMB_TOGGLE);
    305e:	06 58       	MOV       R0, R6
    3060:	12 10       	MOV       R1, #2
    3062:	22 45       	LD        R5, [PC + #34]        ;->0x30e8  :=0x10b8
    3064:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:173
	EPWM_Dead_Zone_Output_Select(EPWM13_SFR,EPWM_UP_ENABLE_DOWN_ENABLE);
    3066:	06 58       	MOV       R0, R6
    3068:	13 10       	MOV       R1, #3
    306a:	21 45       	LD        R5, [PC + #33]        ;->0x30ec  :=0x1114
    306c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:174
	EPWM_Dead_Zone_Time_Config(EPWM13_SFR,EPWM_UP_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    306e:	06 58       	MOV       R0, R6
    3070:	11 10       	MOV       R1, #1
    3072:	28 17       	MOV       R2, #120
    3074:	1f 47       	LD        R7, [PC + #31]        ;->0x30f0  :=0x1170
    3076:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:175
	EPWM_Dead_Zone_Time_Config(EPWM13_SFR,EPWM_DOWM_EDGE_DEAD_ZONE,EPWM_DEAD_TIME);
    3078:	06 58       	MOV       R0, R6
    307a:	10 10       	MOV       R1, #0
    307c:	28 17       	MOV       R2, #120
    307e:	07 5c       	LJMP      R7
..\driver\driver_pwm.c:178

	//TZ
	EPWM_Auto_ShowDown_Source_Select(EPWM13_SFR,EPWM_AUTO_SHOWDOWN_SOURCE_TZ4_HIGH);  //TZ4
    3080:	06 58       	MOV       R0, R6
    3082:	14 10       	MOV       R1, #4
    3084:	1c 45       	LD        R5, [PC + #28]        ;->0x30f4  :=0x11f8
    3086:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:184

	//interrupt
	//EPWM_INT_Enable(EPWM13_SFR,EPWM_COUNT_EQUAL_EPWMRA,FALSE);

	//update
	EPWM_Global_Loading_Enable(EPWM13_SFR,FALSE);
    3088:	06 58       	MOV       R0, R6
    308a:	10 10       	MOV       R1, #0
    308c:	1b 45       	LD        R5, [PC + #27]        ;->0x30f8  :=0x1450
    308e:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:185
	EPWM_Updata_Event_Enable(EPWM13_SFR,TRUE);
    3090:	06 58       	MOV       R0, R6
    3092:	11 10       	MOV       R1, #1
    3094:	1a 45       	LD        R5, [PC + #26]        ;->0x30fc  :=0xd6c
    3096:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:186
	EPWM_Updata_Event_Generate_Enable(EPWM13_SFR,TRUE);
    3098:	06 58       	MOV       R0, R6
    309a:	11 10       	MOV       R1, #1
    309c:	19 45       	LD        R5, [PC + #25]        ;->0x3100  :=0xd10
    309e:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:188

	EPWM_Enable(EPWM13_SFR,FALSE);
    30a0:	06 58       	MOV       R0, R6
    30a2:	10 10       	MOV       R1, #0
    30a4:	18 45       	LD        R5, [PC + #24]        ;->0x3104  :=0xeec
    30a6:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:189
}
    30a8:	03 5e       	POP       {R6-R7}
    30aa:	0d 5d       	POP       LR
    30ac:	1d 5c       	JMP       LR
    30ae:	00 00       	NOP      NOP      
    30b0:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x30b0  :=0x40001380
    30b4:	90 0e 00 00 	.long     0x00000e90 ->000003728  [!!!@2@:LD.W      R6, [SP + #144]	@@: NOP      
    30b8:	34 0e 00 00 	.long     0x00000e34 ->000003636  [!!!@2@:LD.W      R6, [SP + #52]	@@: NOP      
    30bc:	b0 0b 00 00 	.long     0x00000bb0 ->000002992  [!!!@2@:LD.W      R3, [SP + #176]	@@: NOP      
    30c0:	64 0b 00 00 	.long     0x00000b64 ->000002916  [!!!@2@:LD.W      R3, [SP + #100]	@@: NOP      
    30c4:	c8 0d 00 00 	.long     0x00000dc8 ->000003528  [!!!@2@:LD.W      R5, [SP + #200]	@@: NOP      
    30c8:	b4 0c 00 00 	.long     0x00000cb4 ->000003252  [!!!@2@:LD.W      R4, [SP + #180]	@@: NOP      
    30cc:	fc 0b 00 00 	.long     0x00000bfc ->000003068  [!!!@2@:LD.W      R3, [SP + #252]	@@: NOP      
    30d0:	58 0c 00 00 	.long     0x00000c58 ->000003160  [!!!@2@:LD.W      R4, [SP + #88]	@@: NOP      
    30d4:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    30d8:	dc 05 00 00 	.long     0x000005dc ->000001500  [!!!@2@:SJMP      $+476                 ;->0x3490	@@: NOP      
    30dc:	c8 0f 00 00 	.long     0x00000fc8 ->000004040  [!!!@2@:LD.W      R7, [SP + #200]	@@: NOP      
    30e0:	44 0f 00 00 	.long     0x00000f44 ->000003908  [!!!@2@:LD.W      R7, [SP + #68]	@@: NOP      
    30e4:	5c 10 00 00 	.long     0x0000105c ->000004188  [!!!@2@:MOV       R5, #12	@@: NOP      
    30e8:	b8 10 00 00 	.long     0x000010b8 ->000004280  [!!!@2@:MOV       R11, #8	@@: NOP      
    30ec:	14 11 00 00 	.long     0x00001114 ->000004372  [!!!@2@:MOV       R1, #20	@@: NOP      
    30f0:	70 11 00 00 	.long     0x00001170 ->000004464  [!!!@2@:MOV       R7, #16	@@: NOP      
    30f4:	f8 11 00 00 	.long     0x000011f8 ->000004600  [!!!@2@:MOV       PC, #24	@@: NOP      
    30f8:	50 14 00 00 	.long     0x00001450 ->000005200  [!!!@2@:MOV       R5, #64	@@: NOP      
    30fc:	6c 0d 00 00 	.long     0x00000d6c ->000003436  [!!!@2@:LD.W      R5, [SP + #108]	@@: NOP      
    3100:	10 0d 00 00 	.long     0x00000d10 ->000003344  [!!!@2@:LD.W      R5, [SP + #16]	@@: NOP      
    3104:	ec 0e 00 00 	.long     0x00000eec ->000003820  [!!!@2@:LD.W      R6, [SP + #236]	@@: NOP      

00003108 <cfg_PWM>:
cfg_PWM():
..\driver\driver_pwm.c:21




void cfg_PWM(void)
{
    3108:	8f 5f       	PUSH      {R6-R9,LR}
..\driver\driver_pwm.c:22
    EPWM_Reset(EPWM11_SFR);
    310a:	10 42       	LD        R2, [PC + #16]        ;->0x3148  :=0x40001a00
    310c:	22 59       	MOV       R9, R2
    310e:	02 58       	MOV       R0, R2
    3110:	0f 46       	LD        R6, [PC + #15]        ;->0x314c  :=0xa5c
    3112:	06 5c       	LJMP      R6
..\driver\driver_pwm.c:23
    EPWM_Reset(EPWM12_SFR);
    3114:	0f 43       	LD        R3, [PC + #15]        ;->0x3150  :=0x40001300
    3116:	03 59       	MOV       R8, R3
    3118:	03 58       	MOV       R0, R3
    311a:	06 5c       	LJMP      R6
..\driver\driver_pwm.c:24
    EPWM_Reset(EPWM13_SFR);
    311c:	0e 47       	LD        R7, [PC + #14]        ;->0x3154  :=0x40001380
    311e:	07 58       	MOV       R0, R7
    3120:	06 5c       	LJMP      R6
..\driver\driver_pwm.c:25
    EPWM_Reset(EPWM16_SFR);
    3122:	0e 40       	LD        R0, [PC + #14]        ;->0x3158  :=0x40002e00
    3124:	06 5c       	LJMP      R6
..\driver\driver_pwm.c:26
	cfg_EPWM_GPIO();
    3126:	0e 45       	LD        R5, [PC + #14]        ;->0x315c  :=0x2cb0
    3128:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:27
	cfg_EPWM11();
    312a:	0e 45       	LD        R5, [PC + #14]        ;->0x3160  :=0x2d50
    312c:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:28
	cfg_EPWM12();
    312e:	0e 45       	LD        R5, [PC + #14]        ;->0x3164  :=0x2ec8
    3130:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:29
	cfg_EPWM13();
    3132:	0e 45       	LD        R5, [PC + #14]        ;->0x3168  :=0x2fe8
    3134:	05 5c       	LJMP      R5
..\driver\driver_pwm.c:259
	EPWM13_SFR->PXASCTL = 0x0001;
}

void pwm_disable(void)
{
	EPWM11_SFR->PXASCTL = 0x0009;
    3136:	59 10       	MOV       R5, #9
    3138:	89 58       	MOV       R4, R9
    313a:	25 a3       	ST.W      [R4 + #12], R5
..\driver\driver_pwm.c:260
	EPWM12_SFR->PXASCTL = 0x0009;
    313c:	88 58       	MOV       R4, R8
    313e:	25 a3       	ST.W      [R4 + #12], R5
..\driver\driver_pwm.c:261
	EPWM13_SFR->PXASCTL = 0x0009;
    3140:	3d a3       	ST.W      [R7 + #12], R5
..\driver\driver_pwm.c:32
	cfg_EPWM11();
	cfg_EPWM12();
	cfg_EPWM13();
	//cfg_EPWM16();
	pwm_disable();
}
    3142:	0f 5e       	POP       {R6-R9}
    3144:	0d 5d       	POP       LR
    3146:	1d 5c       	JMP       LR
    3148:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x3148  :=0x40001a00
    314c:	5c 0a 00 00 	.long     0x00000a5c ->000002652  [!!!@2@:LD.W      R2, [SP + #92]	@@: NOP      
    3150:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x3150  :=0x40001300
    3154:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x3154  :=0x40001380
    3158:	00 2e 00 40 	.long     0x40002e00 ->1073753600  [!!!@2@:ADD       R0, #96	@@: LD        R0, [PC + #0]         ;->0x3158  :=0x40002e00
    315c:	b0 2c 00 00 	.long     0x00002cb0 ->000011440  [!!!@2@:ADD       R11, #64	@@: NOP      
    3160:	50 2d 00 00 	.long     0x00002d50 ->000011600  [!!!@2@:ADD       R5, #80	@@: NOP      
    3164:	c8 2e 00 00 	.long     0x00002ec8 ->000011976  [!!!@2@:ADD       R12, #104	@@: NOP      
    3168:	e8 2f 00 00 	.long     0x00002fe8 ->000012264  [!!!@2@:ADD       SP, #120	@@: NOP      

0000316c <pwm_enable>:
pwm_enable():
..\driver\driver_pwm.c:249



void pwm_enable(void)
{
	EPWM11_SFR->RA = EPWM_HALF_PERIOD;
    316c:	06 42       	LD        R2, [PC + #6]         ;->0x3184  :=0x40001a00
    316e:	07 45       	LD        R5, [PC + #7]         ;->0x3188  :=0x5dc
    3170:	55 a1       	ST.W      [R2 + #5], R5
..\driver\driver_pwm.c:250
	EPWM12_SFR->RA = EPWM_HALF_PERIOD;
    3172:	07 43       	LD        R3, [PC + #7]         ;->0x318c  :=0x40001300
    3174:	5d a1       	ST.W      [R3 + #5], R5
..\driver\driver_pwm.c:251
	EPWM13_SFR->RA = EPWM_HALF_PERIOD;
    3176:	07 44       	LD        R4, [PC + #7]         ;->0x3190  :=0x40001380
    3178:	65 a1       	ST.W      [R4 + #5], R5
..\driver\driver_pwm.c:252
	EPWM11_SFR->PXASCTL = 0x0001;
    317a:	51 10       	MOV       R5, #1
    317c:	15 a3       	ST.W      [R2 + #12], R5
..\driver\driver_pwm.c:253
	EPWM12_SFR->PXASCTL = 0x0001;
    317e:	1d a3       	ST.W      [R3 + #12], R5
..\driver\driver_pwm.c:254
	EPWM13_SFR->PXASCTL = 0x0001;
    3180:	25 a3       	ST.W      [R4 + #12], R5
..\driver\driver_pwm.c:255
}
    3182:	1d 5c       	JMP       LR
    3184:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x3184  :=0x40001a00
    3188:	dc 05 00 00 	.long     0x000005dc ->000001500  [!!!@2@:SJMP      $+476                 ;->0x3540	@@: NOP      
    318c:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x318c  :=0x40001300
    3190:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x3190  :=0x40001380

00003194 <pwm_disable>:
pwm_disable():
..\driver\driver_pwm.c:259

void pwm_disable(void)
{
	EPWM11_SFR->PXASCTL = 0x0009;
    3194:	59 10       	MOV       R5, #9
    3196:	04 44       	LD        R4, [PC + #4]         ;->0x31a4  :=0x40001a00
    3198:	25 a3       	ST.W      [R4 + #12], R5
..\driver\driver_pwm.c:260
	EPWM12_SFR->PXASCTL = 0x0009;
    319a:	04 44       	LD        R4, [PC + #4]         ;->0x31a8  :=0x40001300
    319c:	25 a3       	ST.W      [R4 + #12], R5
..\driver\driver_pwm.c:261
	EPWM13_SFR->PXASCTL = 0x0009;
    319e:	04 44       	LD        R4, [PC + #4]         ;->0x31ac  :=0x40001380
    31a0:	25 a3       	ST.W      [R4 + #12], R5
..\driver\driver_pwm.c:262
}
    31a2:	1d 5c       	JMP       LR
    31a4:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x31a4  :=0x40001a00
    31a8:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x31a8  :=0x40001300
    31ac:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x31ac  :=0x40001380

000031b0 <set_pwm_duty>:
set_pwm_duty():
..\driver\driver_pwm.c:265

void set_pwm_duty(uint16_t duty)
{
    31b0:	e4 30       	SUB       SP, #4
..\driver\driver_pwm.c:271
	volatile uint16_t compare_value;
	if(duty>100)
	{
		duty = 100;
	}
	compare_value = (uint32_t)(duty*EPWM_PERIOD)/100;
    31b2:	00 d0       	ZXT.H     R0, R0
    31b4:	04 3e       	CMP       R0, #100
    31b6:	02 f9       	JLS       $+2                   ;->0x31ba
    31b8:	04 16       	MOV       R0, #100
    31ba:	0d 45       	LD        R5, [PC + #13]        ;->0x31ec  :=0xbb8
    31bc:	40 cb       	MULS      R0, R0, R5
    31be:	00 00       	NOP      NOP      
    31c0:	44 16       	MOV       R4, #100
    31c2:	00 d3       	DIVU      R0, R0, R4
    31c4:	00 d0       	ZXT.H     R0, R0
    31c6:	e0 84       	ST.H      [SP], R0
..\driver\driver_pwm.c:272
	EPWM11_SFR->RA = EPWM_PERIOD - compare_value;
    31c8:	3e 81       	LD.H      R3, [SP]
    31ca:	33 d0       	ZXT.H     R3, R3
    31cc:	dd c6       	SUB       R3, R5, R3
    31ce:	09 44       	LD        R4, [PC + #9]         ;->0x31f0  :=0x40001a00
    31d0:	63 a1       	ST.W      [R4 + #5], R3
..\driver\driver_pwm.c:273
	EPWM12_SFR->RA = EPWM_PERIOD - compare_value;
    31d2:	3e 81       	LD.H      R3, [SP]
    31d4:	33 d0       	ZXT.H     R3, R3
    31d6:	dd c6       	SUB       R3, R5, R3
    31d8:	07 44       	LD        R4, [PC + #7]         ;->0x31f4  :=0x40001300
    31da:	63 a1       	ST.W      [R4 + #5], R3
..\driver\driver_pwm.c:274
	EPWM13_SFR->RA = EPWM_PERIOD - compare_value;
    31dc:	4e 81       	LD.H      R4, [SP]
    31de:	44 d0       	ZXT.H     R4, R4
    31e0:	2d c7       	SUB       R5, R5, R4
    31e2:	06 44       	LD        R4, [PC + #6]         ;->0x31f8  :=0x40001380
    31e4:	65 a1       	ST.W      [R4 + #5], R5
..\driver\driver_pwm.c:275
}
    31e6:	e4 28       	ADD       SP, #4
    31e8:	1d 5c       	JMP       LR
    31ea:	00 00       	NOP      NOP      
    31ec:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    31f0:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x31f0  :=0x40001a00
    31f4:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x31f4  :=0x40001300
    31f8:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x31f8  :=0x40001380

000031fc <epwm_module_enable>:
epwm_module_enable():
..\driver\driver_pwm.c:279


void epwm_module_enable(void)
{
    31fc:	81 5f       	PUSH      {R6,LR}
..\driver\driver_pwm.c:280
	EPWM_Enable(EPWM11_SFR,TRUE);
    31fe:	07 40       	LD        R0, [PC + #7]         ;->0x3218  :=0x40001a00
    3200:	11 10       	MOV       R1, #1
    3202:	07 46       	LD        R6, [PC + #7]         ;->0x321c  :=0xeec
    3204:	06 5c       	LJMP      R6
..\driver\driver_pwm.c:281
	EPWM_Enable(EPWM12_SFR,TRUE);
    3206:	07 40       	LD        R0, [PC + #7]         ;->0x3220  :=0x40001300
    3208:	11 10       	MOV       R1, #1
    320a:	06 5c       	LJMP      R6
..\driver\driver_pwm.c:282
	EPWM_Enable(EPWM13_SFR,TRUE);
    320c:	06 40       	LD        R0, [PC + #6]         ;->0x3224  :=0x40001380
    320e:	11 10       	MOV       R1, #1
    3210:	06 5c       	LJMP      R6
..\driver\driver_pwm.c:283
}
    3212:	06 5d       	POP       R6
    3214:	0d 5d       	POP       LR
    3216:	1d 5c       	JMP       LR
    3218:	00 1a 00 40 	.long     0x40001a00 ->1073748480  [!!!@2@:MOV       R0, #160	@@: LD        R0, [PC + #0]         ;->0x3218  :=0x40001a00
    321c:	ec 0e 00 00 	.long     0x00000eec ->000003820  [!!!@2@:LD.W      R6, [SP + #236]	@@: NOP      
    3220:	00 13 00 40 	.long     0x40001300 ->1073746688  [!!!@2@:MOV       R0, #48	@@: LD        R0, [PC + #0]         ;->0x3220  :=0x40001300
    3224:	80 13 00 40 	.long     0x40001380 ->1073746816  [!!!@2@:MOV       R8, #48	@@: LD        R0, [PC + #0]         ;->0x3224  :=0x40001380

00003228 <cfg_T14>:
cfg_T14():
..\driver\driver_timer.c:24

}


void cfg_T14(void)
{
    3228:	81 5f       	PUSH      {R6,LR}
..\driver\driver_timer.c:25
	TIM_Reset(T14_SFR);												//定时器外设复位，使能外设时钟
    322a:	20 46       	LD        R6, [PC + #32]        ;->0x32a8  :=0x40001800
    322c:	06 58       	MOV       R0, R6
    322e:	20 45       	LD        R5, [PC + #32]        ;->0x32ac  :=0x5f0
    3230:	05 5c       	LJMP      R5
..\driver\driver_timer.c:26
	BTIM_Updata_Immediately_Config(T14_SFR,TRUE);						//立即更新控制
    3232:	06 58       	MOV       R0, R6
    3234:	11 10       	MOV       R1, #1
    3236:	1f 45       	LD        R5, [PC + #31]        ;->0x32b0  :=0x99c
    3238:	05 5c       	LJMP      R5
..\driver\driver_timer.c:27
	BTIM_Updata_Enable(T14_SFR,TRUE);									//配置更新使能
    323a:	06 58       	MOV       R0, R6
    323c:	11 10       	MOV       R1, #1
    323e:	1e 45       	LD        R5, [PC + #30]        ;->0x32b4  :=0x9dc
    3240:	05 5c       	LJMP      R5
..\driver\driver_timer.c:28
	BTIM_Work_Mode_Config(T14_SFR,BTIM_TIMER_MODE);					//定时模式选择
    3242:	06 58       	MOV       R0, R6
    3244:	10 10       	MOV       R1, #0
    3246:	1d 45       	LD        R5, [PC + #29]        ;->0x32b8  :=0x95c
    3248:	05 5c       	LJMP      R5
..\driver\driver_timer.c:29
	BTIM_Set_Counter(T14_SFR,0);										//定时器计数值
    324a:	06 58       	MOV       R0, R6
    324c:	10 10       	MOV       R1, #0
    324e:	1c 45       	LD        R5, [PC + #28]        ;->0x32bc  :=0x84c
    3250:	05 5c       	LJMP      R5
..\driver\driver_timer.c:30
	BTIM_Set_Period(T14_SFR,999);									//定时器周期值999(1ms)
    3252:	06 58       	MOV       R0, R6
    3254:	1b 41       	LD        R1, [PC + #27]        ;->0x32c0  :=0x3e7
    3256:	1c 45       	LD        R5, [PC + #28]        ;->0x32c4  :=0x870
    3258:	05 5c       	LJMP      R5
..\driver\driver_timer.c:31
	BTIM_Set_Prescaler(T14_SFR,15);								    //定时器预分频值15+1=16(timer_clk=1M)
    325a:	06 58       	MOV       R0, R6
    325c:	1f 10       	MOV       R1, #15
    325e:	1b 45       	LD        R5, [PC + #27]        ;->0x32c8  :=0x894
    3260:	05 5c       	LJMP      R5
..\driver\driver_timer.c:32
	BTIM_Counter_Mode_Config(T14_SFR,BTIM_COUNT_UP_OF);				//向上计数,上溢产生中断标志
    3262:	06 58       	MOV       R0, R6
    3264:	1f 1f       	MOV       R1, #255
    3266:	49 c0       	ADD       R1, R1, #1
    3268:	19 45       	LD        R5, [PC + #25]        ;->0x32cc  :=0x8b8
    326a:	05 5c       	LJMP      R5
..\driver\driver_timer.c:33
	BTIM_Clock_Config(T14_SFR,BTIM_HFCLK);								//选用HFCLK时钟(16M)
    326c:	06 58       	MOV       R0, R6
    326e:	18 10       	MOV       R1, #8
    3270:	18 45       	LD        R5, [PC + #24]        ;->0x32d0  :=0x904
    3272:	05 5c       	LJMP      R5
..\driver\driver_timer.c:34
	INT_Interrupt_Priority_Config(INT_T14,4,0);					//抢占优先级4,子优先级0
    3274:	01 12       	MOV       R0, #33
    3276:	14 10       	MOV       R1, #4
    3278:	20 10       	MOV       R2, #0
    327a:	17 45       	LD        R5, [PC + #23]        ;->0x32d4  :=0x1a58
    327c:	05 5c       	LJMP      R5
..\driver\driver_timer.c:35
	BTIM_Overflow_INT_Enable(T14_SFR,TRUE);							//计数溢出中断使能
    327e:	06 58       	MOV       R0, R6
    3280:	11 10       	MOV       R1, #1
    3282:	16 45       	LD        R5, [PC + #22]        ;->0x32d8  :=0xa1c
    3284:	05 5c       	LJMP      R5
..\driver\driver_timer.c:36
	INT_Interrupt_Enable(INT_T14,TRUE);						    //外设中断使能
    3286:	01 12       	MOV       R0, #33
    3288:	11 10       	MOV       R1, #1
    328a:	15 45       	LD        R5, [PC + #21]        ;->0x32dc  :=0x1954
    328c:	05 5c       	LJMP      R5
..\driver\driver_timer.c:37
	INT_Clear_Interrupt_Flag(INT_T14);							//清中断标志
    328e:	01 12       	MOV       R0, #33
    3290:	14 45       	LD        R5, [PC + #20]        ;->0x32e0  :=0x19e4
    3292:	05 5c       	LJMP      R5
..\driver\driver_timer.c:38
	BTIM_Cmd(T14_SFR,TRUE);											//定时器启动控制使能
    3294:	06 58       	MOV       R0, R6
    3296:	11 10       	MOV       R1, #1
    3298:	13 45       	LD        R5, [PC + #19]        ;->0x32e4  :=0x80c
    329a:	05 5c       	LJMP      R5
..\driver\driver_timer.c:39
	INT_Stack_Align_Config(INT_STACK_SINGLE_ALIGN);					//中断自动堆栈使用单字对齐
    329c:	00 18       	MOV       R0, #128
    329e:	13 45       	LD        R5, [PC + #19]        ;->0x32e8  :=0x18e4
    32a0:	05 5c       	LJMP      R5
..\driver\driver_timer.c:40
}
    32a2:	06 5d       	POP       R6
    32a4:	0d 5d       	POP       LR
    32a6:	1d 5c       	JMP       LR
    32a8:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x32a8  :=0x40001800
    32ac:	f0 05 00 00 	.long     0x000005f0 ->000001520  [!!!@2@:SJMP      $+496                 ;->0x368c	@@: NOP      
    32b0:	9c 09 00 00 	.long     0x0000099c ->000002460  [!!!@2@:LD.W      R1, [SP + #156]	@@: NOP      
    32b4:	dc 09 00 00 	.long     0x000009dc ->000002524  [!!!@2@:LD.W      R1, [SP + #220]	@@: NOP      
    32b8:	5c 09 00 00 	.long     0x0000095c ->000002396  [!!!@2@:LD.W      R1, [SP + #92]	@@: NOP      
    32bc:	4c 08 00 00 	.long     0x0000084c ->000002124  [!!!@2@:LD.W      R0, [SP + #76]	@@: NOP      
    32c0:	e7 03 00 00 	.long     0x000003e7 ->000000999  [!!!@4@:JMP       $-1638400             ;->0xffce32c0
    32c4:	70 08 00 00 	.long     0x00000870 ->000002160  [!!!@2@:LD.W      R0, [SP + #112]	@@: NOP      
    32c8:	94 08 00 00 	.long     0x00000894 ->000002196  [!!!@2@:LD.W      R0, [SP + #148]	@@: NOP      
    32cc:	b8 08 00 00 	.long     0x000008b8 ->000002232  [!!!@2@:LD.W      R0, [SP + #184]	@@: NOP      
    32d0:	04 09 00 00 	.long     0x00000904 ->000002308  [!!!@2@:LD.W      R1, [SP + #4]	@@: NOP      
    32d4:	58 1a 00 00 	.long     0x00001a58 ->000006744  [!!!@2@:MOV       R5, #168	@@: NOP      
    32d8:	1c 0a 00 00 	.long     0x00000a1c ->000002588  [!!!@2@:LD.W      R2, [SP + #28]	@@: NOP      
    32dc:	54 19 00 00 	.long     0x00001954 ->000006484  [!!!@2@:MOV       R5, #148	@@: NOP      
    32e0:	e4 19 00 00 	.long     0x000019e4 ->000006628  [!!!@2@:MOV       SP, #148	@@: NOP      
    32e4:	0c 08 00 00 	.long     0x0000080c ->000002060  [!!!@2@:LD.W      R0, [SP + #12]	@@: NOP      
    32e8:	e4 18 00 00 	.long     0x000018e4 ->000006372  [!!!@2@:MOV       SP, #132	@@: NOP      

000032ec <cfg_BASIC_TIMER>:
cfg_BASIC_TIMER():
..\driver\driver_timer.c:17

volatile TIME_COUNT_TYPE time_count = {0};


void cfg_BASIC_TIMER(void)
{
    32ec:	2d 5d       	PUSH      LR
..\driver\driver_timer.c:18
    cfg_T14();
    32ee:	03 45       	LD        R5, [PC + #3]         ;->0x32f8  :=0x3228
    32f0:	05 5c       	LJMP      R5
..\driver\driver_timer.c:20

}
    32f2:	0d 5d       	POP       LR
    32f4:	1d 5c       	JMP       LR
    32f6:	00 00       	NOP      NOP      
    32f8:	28 32 00 00 	.long     0x00003228 ->000012840  [!!!@2@:SUB       R2, #40	@@: NOP      

000032fc <cfg_GPIO_for_USART0>:
cfg_GPIO_for_USART0():
..\driver\driver_usart.c:23
    cfg_USART0();
}


void cfg_GPIO_for_USART0(void)
{
    32fc:	87 5f       	PUSH      {R6-R8,LR}
..\driver\driver_usart.c:24
	GPIO_Write_Mode_Bits(GPIOA_SFR,GPIO_PIN_MASK_3,GPIO_MODE_RMP);  //TX-PA3
    32fe:	0d 46       	LD        R6, [PC + #13]        ;->0x3330  :=0x50000000
    3300:	06 58       	MOV       R0, R6
    3302:	18 10       	MOV       R1, #8
    3304:	22 10       	MOV       R2, #2
    3306:	0c 47       	LD        R7, [PC + #12]        ;->0x3334  :=0x169c
    3308:	07 5c       	LJMP      R7
..\driver\driver_usart.c:25
	GPIO_Write_Mode_Bits(GPIOE_SFR,GPIO_PIN_MASK_7,GPIO_MODE_RMP);  //RX-PE7
    330a:	0c 45       	LD        R5, [PC + #12]        ;->0x3338  :=0x50000100
    330c:	05 59       	MOV       R8, R5
    330e:	05 58       	MOV       R0, R5
    3310:	10 18       	MOV       R1, #128
    3312:	22 10       	MOV       R2, #2
    3314:	07 5c       	LJMP      R7
..\driver\driver_usart.c:27

	GPIO_Pin_RMP_Config(GPIOA_SFR,GPIO_Pin_Num_3,GPIO_RMP_PAGE3_AF3);  //TX-PA3
    3316:	0a 47       	LD        R7, [PC + #10]        ;->0x333c  :=0x303
    3318:	06 58       	MOV       R0, R6
    331a:	13 10       	MOV       R1, #3
    331c:	47 58       	MOV       R2, R7
    331e:	09 46       	LD        R6, [PC + #9]         ;->0x3340  :=0x17b4
    3320:	06 5c       	LJMP      R6
..\driver\driver_usart.c:28
	GPIO_Pin_RMP_Config(GPIOE_SFR,GPIO_Pin_Num_7,GPIO_RMP_PAGE3_AF3);  //RX-PE7
    3322:	08 58       	MOV       R0, R8
    3324:	17 10       	MOV       R1, #7
    3326:	47 58       	MOV       R2, R7
    3328:	06 5c       	LJMP      R6
..\driver\driver_usart.c:29
}
    332a:	07 5e       	POP       {R6-R8}
    332c:	0d 5d       	POP       LR
    332e:	1d 5c       	JMP       LR
    3330:	00 00 00 50 	.long     0x50000000 ->1342177280  [!!!@2@:NOP      	@@: JB        [R0], #0
    3334:	9c 16 00 00 	.long     0x0000169c ->000005788  [!!!@2@:MOV       R9, #108	@@: NOP      
    3338:	00 01 00 50 	.long     0x50000100 ->1342177536  [!!!@2@:CMN       R0, R0	@@: JB        [R0], #0
    333c:	03 03 00 00 	.long     0x00000303 ->000000771  [!!!@4@:JMP       $+196608              ;->0x6333c
    3340:	b4 17 00 00 	.long     0x000017b4 ->000006068  [!!!@2@:MOV       R11, #116	@@: NOP      

00003344 <cfg_USART0>:
cfg_USART0():
..\driver\driver_usart.c:32

void cfg_USART0(void)
{
    3344:	81 5f       	PUSH      {R6,LR}
..\driver\driver_usart.c:33
	USART_Reset(USART0_SFR);
    3346:	1d 46       	LD        R6, [PC + #29]        ;->0x33b8  :=0x40000980
    3348:	06 58       	MOV       R0, R6
    334a:	1d 45       	LD        R5, [PC + #29]        ;->0x33bc  :=0x2148
    334c:	05 5c       	LJMP      R5
..\driver\driver_usart.c:34
    USART_Receive_Order_Config(USART0_SFR, USART_RECEIVE_LSB);
    334e:	06 58       	MOV       R0, R6
    3350:	10 10       	MOV       R1, #0
    3352:	1c 45       	LD        R5, [PC + #28]        ;->0x33c0  :=0x241c
    3354:	05 5c       	LJMP      R5
..\driver\driver_usart.c:35
    USART_Transmit_Order_Config(USART0_SFR, USART_TRANSMIT_LSB);
    3356:	06 58       	MOV       R0, R6
    3358:	10 10       	MOV       R1, #0
    335a:	1b 45       	LD        R5, [PC + #27]        ;->0x33c4  :=0x23ac
    335c:	05 5c       	LJMP      R5
..\driver\driver_usart.c:36
    USART_BaudRate_Clock_Config(USART0_SFR, USART_CLK_SCLK);  //SCLK
    335e:	06 58       	MOV       R0, R6
    3360:	10 10       	MOV       R1, #0
    3362:	1a 45       	LD        R5, [PC + #26]        ;->0x33c8  :=0x2334
    3364:	05 5c       	LJMP      R5
..\driver\driver_usart.c:37
    USART_Clock_Source_Config(USART0_SFR, USART_MASTER_CLOCKSOURCE_INTER);  //INTERNAL CLK
    3366:	06 58       	MOV       R0, R6
    3368:	1f 1f       	MOV       R1, #255
    336a:	49 c0       	ADD       R1, R1, #1
    336c:	18 45       	LD        R5, [PC + #24]        ;->0x33cc  :=0x248c
    336e:	05 5c       	LJMP      R5
..\driver\driver_usart.c:38
    USART_SYNC_Choice_Config(USART0_SFR, USART_MODE_FULLDUPLEXASY);
    3370:	06 58       	MOV       R0, R6
    3372:	10 10       	MOV       R1, #0
    3374:	17 45       	LD        R5, [PC + #23]        ;->0x33d0  :=0x2500
    3376:	05 5c       	LJMP      R5
..\driver\driver_usart.c:39
    USART_Transmit_Data_Enable(USART0_SFR, TRUE);
    3378:	06 58       	MOV       R0, R6
    337a:	11 10       	MOV       R1, #1
    337c:	16 45       	LD        R5, [PC + #22]        ;->0x33d4  :=0x2578
    337e:	05 5c       	LJMP      R5
..\driver\driver_usart.c:40
    USART_Receive_Data_Enable(USART0_SFR, TRUE);
    3380:	06 58       	MOV       R0, R6
    3382:	11 10       	MOV       R1, #1
    3384:	15 45       	LD        R5, [PC + #21]        ;->0x33d8  :=0x25e8
    3386:	05 5c       	LJMP      R5
..\driver\driver_usart.c:41
    USART_STOP_Word_Config(USART0_SFR, USART_STOPBITS_1);  //1bit stop
    3388:	06 58       	MOV       R0, R6
    338a:	10 10       	MOV       R1, #0
    338c:	14 45       	LD        R5, [PC + #20]        ;->0x33dc  :=0x2658
    338e:	05 5c       	LJMP      R5
..\driver\driver_usart.c:42
    USART_9Data_Enable(USART0_SFR, FALSE);  //8bit data
    3390:	06 58       	MOV       R0, R6
    3392:	10 10       	MOV       R1, #0
    3394:	13 45       	LD        R5, [PC + #19]        ;->0x33e0  :=0x26cc
    3396:	05 5c       	LJMP      R5
..\driver\driver_usart.c:43
    USART_RESHD_Enable(USART0_SFR, TRUE);
    3398:	06 58       	MOV       R0, R6
    339a:	11 10       	MOV       R1, #1
    339c:	12 45       	LD        R5, [PC + #18]        ;->0x33e4  :=0x273c
    339e:	05 5c       	LJMP      R5
..\driver\driver_usart.c:44
    USART_BaudRate_Integer_Config(USART0_SFR, USART0_BAUD_VALUE);  //65
    33a0:	06 58       	MOV       R0, R6
    33a2:	11 14       	MOV       R1, #65
    33a4:	11 45       	LD        R5, [PC + #17]        ;->0x33e8  :=0x27ac
    33a6:	05 5c       	LJMP      R5
..\driver\driver_usart.c:45
    USART_Cmd(USART0_SFR, TRUE);
    33a8:	06 58       	MOV       R0, R6
    33aa:	11 10       	MOV       R1, #1
    33ac:	10 45       	LD        R5, [PC + #16]        ;->0x33ec  :=0x22c4
    33ae:	05 5c       	LJMP      R5
..\driver\driver_usart.c:46
}
    33b0:	06 5d       	POP       R6
    33b2:	0d 5d       	POP       LR
    33b4:	1d 5c       	JMP       LR
    33b6:	00 00       	NOP      NOP      
    33b8:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x33b8  :=0x40000980
    33bc:	48 21 00 00 	.long     0x00002148 ->000008520  [!!!@2@:ST.W      [SP + #72], R1	@@: NOP      
    33c0:	1c 24 00 00 	.long     0x0000241c ->000009244  [!!!@2@:ST.W      [SP + #28], R4	@@: NOP      
    33c4:	ac 23 00 00 	.long     0x000023ac ->000009132  [!!!@2@:ST.W      [SP + #172], R3	@@: NOP      
    33c8:	34 23 00 00 	.long     0x00002334 ->000009012  [!!!@2@:ST.W      [SP + #52], R3	@@: NOP      
    33cc:	8c 24 00 00 	.long     0x0000248c ->000009356  [!!!@2@:ST.W      [SP + #140], R4	@@: NOP      
    33d0:	00 25 00 00 	.long     0x00002500 ->000009472  [!!!@2@:ST.W      [SP + #0], R5	@@: NOP      
    33d4:	78 25 00 00 	.long     0x00002578 ->000009592  [!!!@2@:ST.W      [SP + #120], R5	@@: NOP      
    33d8:	e8 25 00 00 	.long     0x000025e8 ->000009704  [!!!@2@:ST.W      [SP + #232], R5	@@: NOP      
    33dc:	58 26 00 00 	.long     0x00002658 ->000009816  [!!!@2@:ST.W      [SP + #88], R6	@@: NOP      
    33e0:	cc 26 00 00 	.long     0x000026cc ->000009932  [!!!@2@:ST.W      [SP + #204], R6	@@: NOP      
    33e4:	3c 27 00 00 	.long     0x0000273c ->000010044  [!!!@2@:ST.W      [SP + #60], R7	@@: NOP      
    33e8:	ac 27 00 00 	.long     0x000027ac ->000010156  [!!!@2@:ST.W      [SP + #172], R7	@@: NOP      
    33ec:	c4 22 00 00 	.long     0x000022c4 ->000008900  [!!!@2@:ST.W      [SP + #196], R2	@@: NOP      

000033f0 <cfg_USART>:
cfg_USART():
..\driver\driver_usart.c:16
void cfg_GPIO_for_USART0(void);
void cfg_USART0(void);


void cfg_USART(void)
{
    33f0:	2d 5d       	PUSH      LR
..\driver\driver_usart.c:17
    cfg_GPIO_for_USART0();
    33f2:	04 45       	LD        R5, [PC + #4]         ;->0x3400  :=0x32fc
    33f4:	05 5c       	LJMP      R5
..\driver\driver_usart.c:18
    cfg_USART0();
    33f6:	04 45       	LD        R5, [PC + #4]         ;->0x3404  :=0x3344
    33f8:	05 5c       	LJMP      R5
..\driver\driver_usart.c:19
}
    33fa:	0d 5d       	POP       LR
    33fc:	1d 5c       	JMP       LR
    33fe:	00 00       	NOP      NOP      
    3400:	fc 32 00 00 	.long     0x000032fc ->000013052  [!!!@2@:SUB       PC, #44	@@: NOP      
    3404:	44 33 00 00 	.long     0x00003344 ->000013124  [!!!@2@:SUB       R4, #52	@@: NOP      

00003408 <cfg_HARDWARE>:
cfg_HARDWARE():
..\driver\hardware_init.c:13
#include "system_init.h"
#include "hardware_init.h"


void cfg_HARDWARE(void)
{
    3408:	2d 5d       	PUSH      LR
    340a:	e4 30       	SUB       SP, #4
..\driver\hardware_init.c:14
	volatile uint16_t i = 50000;
    340c:	0f 45       	LD        R5, [PC + #15]        ;->0x3448  :=0xffffc350
    340e:	e5 84       	ST.H      [SP], R5
..\driver\hardware_init.c:15
	cfg_CLK();
    3410:	0f 45       	LD        R5, [PC + #15]        ;->0x344c  :=0x36cc
    3412:	05 5c       	LJMP      R5
..\driver\hardware_init.c:16
	cfg_GPIO();
    3414:	0f 45       	LD        R5, [PC + #15]        ;->0x3450  :=0x2bcc
    3416:	05 5c       	LJMP      R5
..\driver\hardware_init.c:17
	cfg_BASIC_TIMER();
    3418:	0f 45       	LD        R5, [PC + #15]        ;->0x3454  :=0x32ec
    341a:	05 5c       	LJMP      R5
..\driver\hardware_init.c:18
	cfg_ADC();
    341c:	0f 45       	LD        R5, [PC + #15]        ;->0x3458  :=0x2aa4
    341e:	05 5c       	LJMP      R5
..\driver\hardware_init.c:20
	//cfg_FLEXMUX();
	cfg_PWM();
    3420:	0f 45       	LD        R5, [PC + #15]        ;->0x345c  :=0x3108
    3422:	05 5c       	LJMP      R5
..\driver\hardware_init.c:21
	cfg_DMA();
    3424:	0f 45       	LD        R5, [PC + #15]        ;->0x3460  :=0x2bc8
    3426:	05 5c       	LJMP      R5
..\driver\hardware_init.c:22
	cfg_USART();
    3428:	0f 45       	LD        R5, [PC + #15]        ;->0x3464  :=0x33f0
    342a:	05 5c       	LJMP      R5
..\driver\hardware_init.c:23
	while(i--);
    342c:	5e 81       	LD.H      R5, [SP]
    342e:	55 d0       	ZXT.H     R5, R5
    3430:	65 cc       	SUB       R4, R5, #1
    3432:	44 d0       	ZXT.H     R4, R4
    3434:	e4 84       	ST.H      [SP], R4
    3436:	50 38       	CMP       R5, #0
    3438:	fa f1       	JNZ       $-6                   ;->0x342c
..\driver\hardware_init.c:24
	adc_offset_calc();
    343a:	0c 45       	LD        R5, [PC + #12]        ;->0x3468  :=0x2aec
    343c:	05 5c       	LJMP      R5
..\driver\hardware_init.c:25
	epwm_module_enable();
    343e:	0c 45       	LD        R5, [PC + #12]        ;->0x346c  :=0x31fc
    3440:	05 5c       	LJMP      R5
..\driver\hardware_init.c:26
}
    3442:	e4 28       	ADD       SP, #4
    3444:	0d 5d       	POP       LR
    3446:	1d 5c       	JMP       LR
    3448:	50 c3 ff ff 	.long     0xffffc350 ->-00015536 
    344c:	cc 36 00 00 	.long     0x000036cc ->000014028  [!!!@2@:SUB       R12, #108	@@: NOP      
    3450:	cc 2b 00 00 	.long     0x00002bcc ->000011212  [!!!@2@:ADD       R12, #60	@@: NOP      
    3454:	ec 32 00 00 	.long     0x000032ec ->000013036  [!!!@2@:SUB       SP, #44	@@: NOP      
    3458:	a4 2a 00 00 	.long     0x00002aa4 ->000010916  [!!!@2@:ADD       R10, #36	@@: NOP      
    345c:	08 31 00 00 	.long     0x00003108 ->000012552  [!!!@2@:SUB       R0, #24	@@: NOP      
    3460:	c8 2b 00 00 	.long     0x00002bc8 ->000011208  [!!!@2@:ADD       R12, #56	@@: NOP      
    3464:	f0 33 00 00 	.long     0x000033f0 ->000013296  [!!!@2@:SUB       PC, #48	@@: NOP      
    3468:	ec 2a 00 00 	.long     0x00002aec ->000010988  [!!!@2@:ADD       SP, #44	@@: NOP      
    346c:	fc 31 00 00 	.long     0x000031fc ->000012796  [!!!@2@:SUB       PC, #28	@@: NOP      

00003470 <_NMI_exception>:
_NMI_exception():
//                                 NMI中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _NMI_exception (void)
{	

}
    3470:	7d 5d       	CLR       PSW, #29
    3472:	1d 5c       	JMP       LR

00003474 <_HardFault_exception>:
_HardFault_exception():
..\driver\kf_it.c:34
//                               硬件错误中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _HardFault_exception (void)
{

}
    3474:	7d 5d       	CLR       PSW, #29
    3476:	1d 5c       	JMP       LR

00003478 <_StackFault_exception>:
_StackFault_exception():
..\driver\kf_it.c:42
//                                堆栈错误中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _StackFault_exception (void)
{

}
    3478:	7d 5d       	CLR       PSW, #29
    347a:	1d 5c       	JMP       LR

0000347c <_SVC_exception>:
_SVC_exception():
..\driver\kf_it.c:50
//                               SVC中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _SVC_exception (void)
{

}
    347c:	7d 5d       	CLR       PSW, #29
    347e:	1d 5c       	JMP       LR

00003480 <_SoftSV_exception>:
_SoftSV_exception():
..\driver\kf_it.c:58
//                              SoftSV中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _SoftSV_exception (void)
{

}
    3480:	7d 5d       	CLR       PSW, #29
    3482:	1d 5c       	JMP       LR

00003484 <_SysTick_exception>:
_SysTick_exception():
..\driver\kf_it.c:66
//                              SysTick中断函数
//*****************************************************************************************	
void __attribute__((interrupt)) _SysTick_exception (void)
{
	
}
    3484:	7d 5d       	CLR       PSW, #29
    3486:	1d 5c       	JMP       LR

00003488 <_T5_exception>:
_T5_exception():
..\driver\kf_it.c:75
//                              T5中断函数
//*****************************************************************************************	//
void __attribute__((interrupt))_T5_exception (void)
{

}
    3488:	7d 5d       	CLR       PSW, #29
    348a:	1d 5c       	JMP       LR

0000348c <_T14_exception>:
_T14_exception():
..\driver\kf_it.c:82
//*****************************************************************************************
//                              T14中断函数
//*****************************************************************************************	//
//1ms for task
void __attribute__((interrupt))_T14_exception (void)
{
    348c:	25 5d       	PUSH      R5
..\driver\kf_it.c:83
	T14_TXIF_CLEAR;  //清T14溢出中断标志位
    348e:	0e 45       	LD        R5, [PC + #14]        ;->0x34c4  :=0x40001800
    3490:	e5 99       	LD.W      R4, [R5 + #7]
    3492:	22 48       	SET       R4, #2
    3494:	ec a1       	ST.W      [R5 + #7], R4
..\driver\kf_it.c:84
	T14_TXIC_CLEAR; //复位清T14溢出中断标志位
    3496:	e5 99       	LD.W      R4, [R5 + #7]
    3498:	22 4a       	CLR       R4, #2
    349a:	ec a1       	ST.W      [R5 + #7], R4
..\driver\kf_it.c:85
	time_count.time_1ms_count++;
    349c:	0b 45       	LD        R5, [PC + #11]        ;->0x34c8  :=0x10001b28
    349e:	45 81       	LD.H      R4, [R5]
    34a0:	64 c0       	ADD       R4, R4, #1
    34a2:	44 d0       	ZXT.H     R4, R4
    34a4:	54 84       	ST.H      [R5], R4
..\driver\kf_it.c:86
	time_count.time_10ms_count++;
    34a6:	65 a8       	LD.H      R4, [R5 + #1]
    34a8:	64 c0       	ADD       R4, R4, #1
    34aa:	44 d0       	ZXT.H     R4, R4
    34ac:	6c b0       	ST.H      [R5 + #1], R4
..\driver\kf_it.c:87
	time_count.time_100ms_count++;
    34ae:	a5 a8       	LD.H      R4, [R5 + #2]
    34b0:	64 c0       	ADD       R4, R4, #1
    34b2:	44 d0       	ZXT.H     R4, R4
    34b4:	ac b0       	ST.H      [R5 + #2], R4
..\driver\kf_it.c:88
	time_count.time_1s_count++;
    34b6:	e5 a8       	LD.H      R4, [R5 + #3]
    34b8:	64 c0       	ADD       R4, R4, #1
    34ba:	44 d0       	ZXT.H     R4, R4
    34bc:	ec b0       	ST.H      [R5 + #3], R4
..\driver\kf_it.c:91


}
    34be:	7d 5d       	CLR       PSW, #29
    34c0:	05 5d       	POP       R5
    34c2:	1d 5c       	JMP       LR
    34c4:	00 18 00 40 	.long     0x40001800 ->1073747968  [!!!@2@:MOV       R0, #128	@@: LD        R0, [PC + #0]         ;->0x34c4  :=0x40001800
    34c8:	28 1b 00 10 	.long     0x10001b28 ->268442408  [!!!@2@:MOV       R2, #184	@@: MOV       R0, #0

000034cc <_T15_exception>:
_T15_exception():
..\driver\kf_it.c:99
//                              T15中断函数
//*****************************************************************************************	//
void __attribute__((interrupt))_T15_exception (void)
{

}
    34cc:	7d 5d       	CLR       PSW, #29
    34ce:	1d 5c       	JMP       LR

000034d0 <_ADC0_exception>:
_ADC0_exception():
..\driver\kf_it.c:105

int32_t adc0_isr_count = 0;
int32_t adc1_isr_count = 0;
int32_t adc2_isr_count = 0;
void __attribute__((interrupt))_ADC0_exception(void)
{
    34d0:	2d 5d       	PUSH      LR
    34d2:	25 5d       	PUSH      R5
    34d4:	e4 30       	SUB       SP, #4
..\driver\kf_it.c:106
	volatile uint8_t sample_error_flag = 0;  //for debug
    34d6:	50 10       	MOV       R5, #0
    34d8:	e5 83       	ST.B      [SP], R5
..\driver\kf_it.c:107
	LED1_ON;
    34da:	21 45       	LD        R5, [PC + #33]        ;->0x355c  :=0x50000040
    34dc:	65 98       	LD.W      R4, [R5 + #1]
    34de:	a7 4a       	CLR       R4, #15
    34e0:	6c a0       	ST.W      [R5 + #1], R4
..\driver\kf_it.c:109
	//ADC0
	if(ADC0_HPENDIF_CHECK)
    34e2:	20 45       	LD        R5, [PC + #32]        ;->0x3560  :=0x40000580
    34e4:	1d 9d       	LD.W      R3, [R5 + #20]
    34e6:	48 10       	MOV       R4, #8
    34e8:	23 d5       	ANL       R4, R3, R4
    34ea:	4b f0       	JZ        $+75                  ;->0x3580
..\driver\kf_it.c:111
	{
		ADC0_HPENDIF_CLEAR;
    34ec:	25 9d       	LD.W      R4, [R5 + #20]
    34ee:	26 48       	SET       R4, #6
    34f0:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:112
		ADC0_HPENDIC_CLEAR;
    34f2:	25 9d       	LD.W      R4, [R5 + #20]
    34f4:	26 4a       	CLR       R4, #6
    34f6:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:113
		adc0_isr_count++;
    34f8:	1b 45       	LD        R5, [PC + #27]        ;->0x3564  :=0x10001b38
    34fa:	35 82       	LD.W      R3, [R5]
    34fc:	63 c0       	ADD       R4, R3, #1
    34fe:	54 85       	ST.W      [R5], R4
..\driver\kf_it.c:120
	else
	{
		sample_error_flag = 1;
	}
	//ADC1
	if(ADC1_HPENDIF_CHECK)
    3500:	1a 45       	LD        R5, [PC + #26]        ;->0x3568  :=0x40000600
    3502:	1d 9d       	LD.W      R3, [R5 + #20]
    3504:	48 10       	MOV       R4, #8
    3506:	23 d5       	ANL       R4, R3, R4
    3508:	43 f0       	JZ        $+67                  ;->0x358e
..\driver\kf_it.c:122
	{
		ADC1_HPENDIF_CLEAR;
    350a:	25 9d       	LD.W      R4, [R5 + #20]
    350c:	26 48       	SET       R4, #6
    350e:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:123
		ADC1_HPENDIC_CLEAR;
    3510:	25 9d       	LD.W      R4, [R5 + #20]
    3512:	26 4a       	CLR       R4, #6
    3514:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:124
		adc1_isr_count++;
    3516:	16 45       	LD        R5, [PC + #22]        ;->0x356c  :=0x10001b34
    3518:	35 82       	LD.W      R3, [R5]
    351a:	63 c0       	ADD       R4, R3, #1
    351c:	54 85       	ST.W      [R5], R4
..\driver\kf_it.c:131
	else
	{
		sample_error_flag = 2;
	}
	//ADC2
	if(ADC2_HPENDIF_CHECK)
    351e:	15 45       	LD        R5, [PC + #21]        ;->0x3570  :=0x40000680
    3520:	1d 9d       	LD.W      R3, [R5 + #20]
    3522:	48 10       	MOV       R4, #8
    3524:	23 d5       	ANL       R4, R3, R4
    3526:	3b f0       	JZ        $+59                  ;->0x359c
..\driver\kf_it.c:133
	{
		ADC2_HPENDIF_CLEAR;
    3528:	25 9d       	LD.W      R4, [R5 + #20]
    352a:	26 48       	SET       R4, #6
    352c:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:134
		ADC2_HPENDIC_CLEAR;
    352e:	25 9d       	LD.W      R4, [R5 + #20]
    3530:	26 4a       	CLR       R4, #6
    3532:	2c a5       	ST.W      [R5 + #20], R4
..\driver\kf_it.c:135
		adc2_isr_count++;
    3534:	10 45       	LD        R5, [PC + #16]        ;->0x3574  :=0x10001b30
    3536:	35 82       	LD.W      R3, [R5]
    3538:	63 c0       	ADD       R4, R3, #1
    353a:	54 85       	ST.W      [R5], R4
..\driver\kf_it.c:141
	}
	else
	{
		sample_error_flag = 3;
	}
	if(sample_error_flag==0)
    353c:	5e 80       	LD.B      R5, [SP]
    353e:	50 38       	CMP       R5, #0
    3540:	03 f1       	JNZ       $+3                   ;->0x3546
..\driver\kf_it.c:143
	{
        motor_control_isr();
    3542:	0e 45       	LD        R5, [PC + #14]        ;->0x3578  :=0x10000110
    3544:	05 5c       	LJMP      R5
..\driver\kf_it.c:146
	}
#if(USER_DEBUG_TOOL_SELECT==USER_DEBUG_TOOL_ON)
	commu_update();
    3546:	0e 45       	LD        R5, [PC + #14]        ;->0x357c  :=0x3958
    3548:	05 5c       	LJMP      R5
..\driver\kf_it.c:148
#endif
	LED1_OFF;
    354a:	05 45       	LD        R5, [PC + #5]         ;->0x355c  :=0x50000040
    354c:	65 98       	LD.W      R4, [R5 + #1]
    354e:	a7 48       	SET       R4, #15
    3550:	6c a0       	ST.W      [R5 + #1], R4
..\driver\kf_it.c:149
}
    3552:	e4 28       	ADD       SP, #4
    3554:	7d 5d       	CLR       PSW, #29
    3556:	05 5d       	POP       R5
    3558:	0d 5d       	POP       LR
    355a:	1d 5c       	JMP       LR
    355c:	40 00 00 50 	.long     0x50000040 ->1342177344 
    3560:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x3860	@@: LD        R0, [PC + #0]         ;->0x3560  :=0x40000580
    3564:	38 1b 00 10 	.long     0x10001b38 ->268442424  [!!!@2@:MOV       R3, #184	@@: MOV       R0, #0
    3568:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x3168	@@: LD        R0, [PC + #0]         ;->0x3568  :=0x40000600
    356c:	34 1b 00 10 	.long     0x10001b34 ->268442420  [!!!@2@:MOV       R3, #180	@@: MOV       R0, #0
    3570:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x3270	@@: LD        R0, [PC + #0]         ;->0x3570  :=0x40000680
    3574:	30 1b 00 10 	.long     0x10001b30 ->268442416  [!!!@2@:MOV       R3, #176	@@: MOV       R0, #0
    3578:	10 01 00 10 	.long     0x10000110 ->268435728  [!!!@2@:CMN       R1, R0	@@: MOV       R0, #0
    357c:	58 39 00 00 	.long     0x00003958 ->000014680  [!!!@2@:CMP       R5, #24	@@: NOP      
..\driver\kf_it.c:117
		ADC0_HPENDIC_CLEAR;
		adc0_isr_count++;
	}
	else
	{
		sample_error_flag = 1;
    3580:	51 10       	MOV       R5, #1
    3582:	e5 83       	ST.B      [SP], R5
..\driver\kf_it.c:120
	}
	//ADC1
	if(ADC1_HPENDIF_CHECK)
    3584:	08 45       	LD        R5, [PC + #8]         ;->0x35a4  :=0x40000600
    3586:	1d 9d       	LD.W      R3, [R5 + #20]
    3588:	48 10       	MOV       R4, #8
    358a:	23 d5       	ANL       R4, R3, R4
    358c:	bf f1       	JNZ       $-65                  ;->0x350a
..\driver\kf_it.c:128
		ADC1_HPENDIC_CLEAR;
		adc1_isr_count++;
	}
	else
	{
		sample_error_flag = 2;
    358e:	52 10       	MOV       R5, #2
    3590:	e5 83       	ST.B      [SP], R5
..\driver\kf_it.c:131
	}
	//ADC2
	if(ADC2_HPENDIF_CHECK)
    3592:	06 45       	LD        R5, [PC + #6]         ;->0x35a8  :=0x40000680
    3594:	1d 9d       	LD.W      R3, [R5 + #20]
    3596:	48 10       	MOV       R4, #8
    3598:	23 d5       	ANL       R4, R3, R4
    359a:	c7 f1       	JNZ       $-57                  ;->0x3528
..\driver\kf_it.c:139
		ADC2_HPENDIC_CLEAR;
		adc2_isr_count++;
	}
	else
	{
		sample_error_flag = 3;
    359c:	53 10       	MOV       R5, #3
    359e:	e5 83       	ST.B      [SP], R5
    35a0:	ce 07       	SJMP      $-50                  ;->0x353c
    35a2:	00 00       	NOP      NOP      
    35a4:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0x31a4	@@: LD        R0, [PC + #0]         ;->0x35a4  :=0x40000600
    35a8:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0x32a8	@@: LD        R0, [PC + #0]         ;->0x35a8  :=0x40000680

000035ac <Delay_ms_ST>:
Delay_ms_ST():
..\driver\system_init.c:66
}



void Delay_ms_ST(uint32_t delay_temp)
{
    35ac:	87 5f       	PUSH      {R6-R8,LR}
    35ae:	c0 58       	MOV       R6, R0
..\driver\system_init.c:67
	SYSTICK_Configuration(SYSTICK_SYS_CLOCK_DIV_1,FALSE,ST_Delay_num*1000);
    35b0:	0d 45       	LD        R5, [PC + #13]        ;->0x35e4  :=0x10001b3c
    35b2:	25 82       	LD.W      R2, [R5]
    35b4:	04 10       	MOV       R0, #4
    35b6:	10 10       	MOV       R1, #0
    35b8:	0c 45       	LD        R5, [PC + #12]        ;->0x35e8  :=0x3e8
    35ba:	52 cb       	MULS      R2, R2, R5
    35bc:	00 00       	NOP      NOP      
    35be:	0c 45       	LD        R5, [PC + #12]        ;->0x35ec  :=0x20ac
    35c0:	05 5c       	LJMP      R5
..\driver\system_init.c:68
	SYSTICK_Cmd(TRUE);
    35c2:	01 10       	MOV       R0, #1
    35c4:	0b 45       	LD        R5, [PC + #11]        ;->0x35f0  :=0x2108
    35c6:	05 59       	MOV       R8, R5
    35c8:	05 5c       	LJMP      R5
..\driver\system_init.c:69
	while(delay_temp)
    35ca:	60 38       	CMP       R6, #0
    35cc:	07 f0       	JZ        $+7                   ;->0x35da
    35ce:	0a 47       	LD        R7, [PC + #10]        ;->0x35f4  :=0x2138
..\driver\system_init.c:71
	{
		if(SYSTICK_Get_Count_Zero_Flag() == SET)
    35d0:	07 5c       	LJMP      R7
    35d2:	01 38       	CMP       R0, #1
    35d4:	12 f0       	JZ        $+18                  ;->0x35f8
..\driver\system_init.c:69

void Delay_ms_ST(uint32_t delay_temp)
{
	SYSTICK_Configuration(SYSTICK_SYS_CLOCK_DIV_1,FALSE,ST_Delay_num*1000);
	SYSTICK_Cmd(TRUE);
	while(delay_temp)
    35d6:	60 38       	CMP       R6, #0
    35d8:	fc f1       	JNZ       $-4                   ;->0x35d0
..\driver\system_init.c:76
		if(SYSTICK_Get_Count_Zero_Flag() == SET)
		{
			delay_temp--;
		}
	}
	SYSTICK_Cmd(FALSE);
    35da:	00 10       	MOV       R0, #0
    35dc:	08 5c       	LJMP      R8
..\driver\system_init.c:77
}
    35de:	07 5e       	POP       {R6-R8}
    35e0:	0d 5d       	POP       LR
    35e2:	1d 5c       	JMP       LR
    35e4:	3c 1b 00 10 	.long     0x10001b3c ->268442428  [!!!@2@:MOV       R3, #188	@@: MOV       R0, #0
    35e8:	e8 03 00 00 	.long     0x000003e8 ->000001000  [!!!@4@:JMP       $-1572864             ;->0xffd035e8
    35ec:	ac 20 00 00 	.long     0x000020ac ->000008364  [!!!@2@:ST.W      [SP + #172], R0	@@: NOP      
    35f0:	08 21 00 00 	.long     0x00002108 ->000008456  [!!!@2@:ST.W      [SP + #8], R1	@@: NOP      
    35f4:	38 21 00 00 	.long     0x00002138 ->000008504  [!!!@2@:ST.W      [SP + #56], R1	@@: NOP      
..\driver\system_init.c:73
	SYSTICK_Cmd(TRUE);
	while(delay_temp)
	{
		if(SYSTICK_Get_Count_Zero_Flag() == SET)
		{
			delay_temp--;
    35f8:	76 cc       	SUB       R6, R6, #1
..\driver\system_init.c:69

void Delay_ms_ST(uint32_t delay_temp)
{
	SYSTICK_Configuration(SYSTICK_SYS_CLOCK_DIV_1,FALSE,ST_Delay_num*1000);
	SYSTICK_Cmd(TRUE);
	while(delay_temp)
    35fa:	60 38       	CMP       R6, #0
    35fc:	ea f1       	JNZ       $-22                  ;->0x35d0
    35fe:	ee 07       	SJMP      $-18                  ;->0x35da

00003600 <SCLK_Config>:
SCLK_Config():
..\driver\system_init.c:19


#define EXTRENAL_CRYSTAL_H

void SCLK_Config(void)
{
    3600:	81 5f       	PUSH      {R6,LR}
..\driver\system_init.c:21
#ifdef EXTRENAL_CRYSTAL_H
	OSC_CTL0 |= 0x01;         //允许备份域可读写
    3602:	51 10       	MOV       R5, #1
    3604:	ae 7b       	LSL       R5, #30
    3606:	45 82       	LD.W      R4, [R5]
    3608:	20 48       	SET       R4, #0
    360a:	54 85       	ST.W      [R5], R4
..\driver\system_init.c:22
	PM_EXTHF_PIN_Selection_Config(PM_EXTHF_PIN1_IO_PORT);
    360c:	00 10       	MOV       R0, #0
    360e:	13 45       	LD        R5, [PC + #19]        ;->0x3658  :=0x1f74
    3610:	05 5c       	LJMP      R5
..\driver\system_init.c:23
	OSC_EXTHF_Start_Delay_Config(EXT_START_DELAY_65535);
    3612:	09 10       	MOV       R0, #9
    3614:	12 45       	LD        R5, [PC + #18]        ;->0x365c  :=0x1dd8
    3616:	05 5c       	LJMP      R5
..\driver\system_init.c:24
	OSC_EXTHF_Software_Enable(TRUE);
    3618:	01 10       	MOV       R0, #1
    361a:	12 45       	LD        R5, [PC + #18]        ;->0x3660  :=0x1e3c
    361c:	05 5c       	LJMP      R5
    361e:	12 46       	LD        R6, [PC + #18]        ;->0x3664  :=0x1e6c
..\driver\system_init.c:25
	while(!OSC_Get_EXTHF_INT_Flag());
    3620:	06 5c       	LJMP      R6
    3622:	00 38       	CMP       R0, #0
    3624:	fe f0       	JZ        $-2                   ;->0x3620
..\driver\system_init.c:26
	OSC_PLL_Input_Source_Config(PLL_INPUT_EXTHF);
    3626:	01 10       	MOV       R0, #1
    3628:	10 45       	LD        R5, [PC + #16]        ;->0x3668  :=0x1be4
    362a:	05 5c       	LJMP      R5
..\driver\system_init.c:32
#else
	OSC_INTHF_Software_Enable(TRUE);
	while(!OSC_Get_INTHF_INT_Flag());
	OSC_PLL_Input_Source_Config(PLL_INPUT_INTHF);
#endif
	OSC_PLL_Multiple_Value_Select(30,2,2);  //120M
    362c:	0e 11       	MOV       R0, #30
    362e:	12 10       	MOV       R1, #2
    3630:	41 58       	MOV       R2, R1
    3632:	0f 45       	LD        R5, [PC + #15]        ;->0x366c  :=0x1cfc
    3634:	05 5c       	LJMP      R5
..\driver\system_init.c:33
	OSC_PLL_Start_Delay_Config(PLL_START_DELAY_32768);
    3636:	09 10       	MOV       R0, #9
    3638:	0e 45       	LD        R5, [PC + #14]        ;->0x3670  :=0x1da4
    363a:	05 5c       	LJMP      R5
..\driver\system_init.c:34
	OSC_PLL_Software_Enable(TRUE);//PLL软件使能
    363c:	01 10       	MOV       R0, #1
    363e:	0e 45       	LD        R5, [PC + #14]        ;->0x3674  :=0x1e0c
    3640:	05 5c       	LJMP      R5
..\driver\system_init.c:35
	OSC_PLL_RST();//复位控制
    3642:	0e 45       	LD        R5, [PC + #14]        ;->0x3678  :=0x1d98
    3644:	05 5c       	LJMP      R5
..\driver\system_init.c:36
	Delay_ms_ST(1);
    3646:	01 10       	MOV       R0, #1
    3648:	0d 45       	LD        R5, [PC + #13]        ;->0x367c  :=0x35ac
    364a:	05 5c       	LJMP      R5
..\driver\system_init.c:37
	OSC_SCK_Source_Config(SCLK_SOURCE_PLL);//选择PLL倍频作为系统时钟
    364c:	04 10       	MOV       R0, #4
    364e:	0d 45       	LD        R5, [PC + #13]        ;->0x3680  :=0x1ccc
    3650:	05 5c       	LJMP      R5
..\driver\system_init.c:38
}
    3652:	06 5d       	POP       R6
    3654:	0d 5d       	POP       LR
    3656:	1d 5c       	JMP       LR
    3658:	74 1f 00 00 	.long     0x00001f74 ->000008052  [!!!@2@:MOV       R7, #244	@@: NOP      
    365c:	d8 1d 00 00 	.long     0x00001dd8 ->000007640  [!!!@2@:MOV       LR, #216	@@: NOP      
    3660:	3c 1e 00 00 	.long     0x00001e3c ->000007740  [!!!@2@:MOV       R3, #236	@@: NOP      
    3664:	6c 1e 00 00 	.long     0x00001e6c ->000007788  [!!!@2@:MOV       R6, #236	@@: NOP      
    3668:	e4 1b 00 00 	.long     0x00001be4 ->000007140  [!!!@2@:MOV       SP, #180	@@: NOP      
    366c:	fc 1c 00 00 	.long     0x00001cfc ->000007420  [!!!@2@:MOV       PC, #204	@@: NOP      
    3670:	a4 1d 00 00 	.long     0x00001da4 ->000007588  [!!!@2@:MOV       R10, #212	@@: NOP      
    3674:	0c 1e 00 00 	.long     0x00001e0c ->000007692  [!!!@2@:MOV       R0, #236	@@: NOP      
    3678:	98 1d 00 00 	.long     0x00001d98 ->000007576  [!!!@2@:MOV       R9, #216	@@: NOP      
    367c:	ac 35 00 00 	.long     0x000035ac ->000013740  [!!!@2@:SUB       R10, #92	@@: NOP      
    3680:	cc 1c 00 00 	.long     0x00001ccc ->000007372  [!!!@2@:MOV       R12, #204	@@: NOP      

00003684 <HFCK_Config>:
HFCK_Config():
..\driver\system_init.c:92
		}
	}
	SYSTICK_Cmd(FALSE);
}
void HFCK_Config(void)
{
    3684:	2d 5d       	PUSH      LR
..\driver\system_init.c:94
#ifdef EXTRENAL_CRYSTAL_H
	OSC_HFCK_Source_Config(HFCK_SOURCE_EXTHF); //外部晶振
    3686:	02 10       	MOV       R0, #2
    3688:	05 45       	LD        R5, [PC + #5]         ;->0x369c  :=0x1c14
    368a:	05 5c       	LJMP      R5
..\driver\system_init.c:98
#else
	OSC_HFCK_Source_Config(HFCK_SOURCE_INTHF); //内部高频
#endif
	OSC_HFCK_Division_Config (HFCK_DIVISION_1);
    368c:	00 10       	MOV       R0, #0
    368e:	05 45       	LD        R5, [PC + #5]         ;->0x36a0  :=0x1bb4
    3690:	05 5c       	LJMP      R5
..\driver\system_init.c:99
	OSC_HFCK_Enable(TRUE);
    3692:	01 10       	MOV       R0, #1
    3694:	04 45       	LD        R5, [PC + #4]         ;->0x36a4  :=0x1c48
    3696:	05 5c       	LJMP      R5
..\driver\system_init.c:100
}
    3698:	0d 5d       	POP       LR
    369a:	1d 5c       	JMP       LR
    369c:	14 1c 00 00 	.long     0x00001c14 ->000007188  [!!!@2@:MOV       R1, #196	@@: NOP      
    36a0:	b4 1b 00 00 	.long     0x00001bb4 ->000007092  [!!!@2@:MOV       R11, #180	@@: NOP      
    36a4:	48 1c 00 00 	.long     0x00001c48 ->000007240  [!!!@2@:MOV       R4, #200	@@: NOP      

000036a8 <LFCK_Config>:
LFCK_Config():
..\driver\system_init.c:102
void LFCK_Config(void)
{
    36a8:	2d 5d       	PUSH      LR
..\driver\system_init.c:103
	OSC_LFCK_Source_Config(LFCK_INPUT_INTLF); //32K内部低频
    36aa:	00 10       	MOV       R0, #0
    36ac:	05 45       	LD        R5, [PC + #5]         ;->0x36c0  :=0x1c74
    36ae:	05 5c       	LJMP      R5
..\driver\system_init.c:104
	OSC_LFCK_Division_Config (LFCK_DIVISION_1);
    36b0:	00 10       	MOV       R0, #0
    36b2:	05 45       	LD        R5, [PC + #5]         ;->0x36c4  :=0x1b84
    36b4:	05 5c       	LJMP      R5
..\driver\system_init.c:105
	OSC_LFCK_Enable(TRUE);
    36b6:	01 10       	MOV       R0, #1
    36b8:	04 45       	LD        R5, [PC + #4]         ;->0x36c8  :=0x1ca0
    36ba:	05 5c       	LJMP      R5
..\driver\system_init.c:106
}
    36bc:	0d 5d       	POP       LR
    36be:	1d 5c       	JMP       LR
    36c0:	74 1c 00 00 	.long     0x00001c74 ->000007284  [!!!@2@:MOV       R7, #196	@@: NOP      
    36c4:	84 1b 00 00 	.long     0x00001b84 ->000007044  [!!!@2@:MOV       R8, #180	@@: NOP      
    36c8:	a0 1c 00 00 	.long     0x00001ca0 ->000007328  [!!!@2@:MOV       R10, #192	@@: NOP      

000036cc <cfg_CLK>:
cfg_CLK():
..\driver\system_init.c:7
#include "system_init.h"

uint32_t ST_Delay_num = 120; //节拍定时器延时

void cfg_CLK(void)
{
    36cc:	2d 5d       	PUSH      LR
..\driver\system_init.c:8
	SCLK_Config();  //系统时钟配置
    36ce:	08 45       	LD        R5, [PC + #8]         ;->0x36ec  :=0x3600
    36d0:	05 5c       	LJMP      R5
..\driver\system_init.c:9
	HFCK_Config();  //高频外设配置
    36d2:	08 45       	LD        R5, [PC + #8]         ;->0x36f0  :=0x3684
    36d4:	05 5c       	LJMP      R5
..\driver\system_init.c:10
	LFCK_Config();	//低频外设配置
    36d6:	08 45       	LD        R5, [PC + #8]         ;->0x36f4  :=0x36a8
    36d8:	05 5c       	LJMP      R5
..\driver\system_init.c:11
	FLASH_CFG = 0x000000C4;
    36da:	44 1c       	MOV       R4, #196
    36dc:	07 45       	LD        R5, [PC + #7]         ;->0x36f8  :=0x40200100
    36de:	6c a1       	ST.W      [R5 + #5], R4
..\driver\system_init.c:12
	CACHE_CTLR |= 0x0001;
    36e0:	07 45       	LD        R5, [PC + #7]         ;->0x36fc  :=0x402000c0
    36e2:	45 82       	LD.W      R4, [R5]
    36e4:	20 48       	SET       R4, #0
    36e6:	54 85       	ST.W      [R5], R4
..\driver\system_init.c:13
}
    36e8:	0d 5d       	POP       LR
    36ea:	1d 5c       	JMP       LR
    36ec:	00 36 00 00 	.long     0x00003600 ->000013824  [!!!@2@:SUB       R0, #96	@@: NOP      
    36f0:	84 36 00 00 	.long     0x00003684 ->000013956  [!!!@2@:SUB       R8, #100	@@: NOP      
    36f4:	a8 36 00 00 	.long     0x000036a8 ->000013992  [!!!@2@:SUB       R10, #104	@@: NOP      
    36f8:	00 01 20 40 	.long     0x40200100 ->1075839232  [!!!@2@:CMN       R0, R0	@@: LD        R0, [PC + #32]        ;->0x3778  :=0xa994fb07
    36fc:	c0 00 20 40 	.long     0x402000c0 ->1075839168 

00003700 <.text$CHECK_RESTRICTION$sdata_local_1>:
    3700:	0d 0a 0d 0a b2 ce ca fd d0 a3 d1 e9 45 52 52 4f     ............ERRO
    3710:	52 21 21 21 21 0d 0a 0d 0a 00                       R!!!!.....

0000371a <CHECK_RESTRICTION>:
CHECK_RESTRICTION():
..\driver\system_init.c:109
	OSC_LFCK_Division_Config (LFCK_DIVISION_1);
	OSC_LFCK_Enable(TRUE);
}

void CHECK_RESTRICTION(int expr)  //参数校验
{
    371a:	2d 5d       	PUSH      LR
..\driver\system_init.c:110
	while(!expr)
    371c:	00 38       	CMP       R0, #0
    371e:	03 f0       	JZ        $+3                   ;->0x3724
..\driver\system_init.c:115
	{
		printf("\r\n\r\n参数校验ERROR!!!!\r\n\r\n");
		while(1);
	}
}
    3720:	0d 5d       	POP       LR
    3722:	1d 5c       	JMP       LR
..\driver\system_init.c:112

void CHECK_RESTRICTION(int expr)  //参数校验
{
	while(!expr)
	{
		printf("\r\n\r\n参数校验ERROR!!!!\r\n\r\n");
    3724:	02 40       	LD        R0, [PC + #2]         ;->0x372c  :=0x3700
    3726:	03 45       	LD        R5, [PC + #3]         ;->0x3730  :=0x5e90
    3728:	05 5c       	LJMP      R5
    372a:	00 04       	SJMP      $+0                   ;->0x372a
    372c:	00 37 00 00 	.long     0x00003700 ->000014080  [!!!@2@:SUB       R0, #112	@@: NOP      
    3730:	90 5e 00 00 	.long     0x00005e90 ->000024208  [!!!@2@:POP       {R10,PC}	@@: NOP      

00003734 <alarm_process>:
alarm_process():
..\application\alarm.c:18
    error_state.error_code = 0;
}

void alarm_process(void)
{
	if(sys_control.sys_enable_flag==1)
    3734:	06 45       	LD        R5, [PC + #6]         ;->0x374c  :=0x10003eb8
    3736:	55 80       	LD.B      R5, [R5]
..\application\alarm.c:25
	 /*   start_error_check();
	    stall_error_check();
	    phase_lost_check();
	    over_voltage_check();  */
	}
	if(error_state.error_code!=0)
    3738:	06 45       	LD        R5, [PC + #6]         ;->0x3750  :=0x10001b40
    373a:	55 81       	LD.H      R5, [R5]
    373c:	55 d0       	ZXT.H     R5, R5
    373e:	50 38       	CMP       R5, #0
    3740:	0c f1       	JNZ       $+12                  ;->0x3758
..\application\alarm.c:31
	{
		LED2_ON;
	}
	else
	{
		LED2_OFF;
    3742:	05 45       	LD        R5, [PC + #5]         ;->0x3754  :=0x50000040
    3744:	65 98       	LD.W      R4, [R5 + #1]
    3746:	a6 48       	SET       R4, #14
    3748:	6c a0       	ST.W      [R5 + #1], R4
..\application\alarm.c:33
	}
}
    374a:	1d 5c       	JMP       LR
    374c:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
    3750:	40 1b 00 10 	.long     0x10001b40 ->268442432  [!!!@2@:MOV       R4, #176	@@: MOV       R0, #0
    3754:	40 00 00 50 	.long     0x50000040 ->1342177344 
..\application\alarm.c:27
	    phase_lost_check();
	    over_voltage_check();  */
	}
	if(error_state.error_code!=0)
	{
		LED2_ON;
    3758:	03 45       	LD        R5, [PC + #3]         ;->0x3764  :=0x50000040
    375a:	65 98       	LD.W      R4, [R5 + #1]
    375c:	a6 4a       	CLR       R4, #14
    375e:	6c a0       	ST.W      [R5 + #1], R4
..\application\alarm.c:33
	}
	else
	{
		LED2_OFF;
	}
}
    3760:	1d 5c       	JMP       LR
    3762:	00 00       	NOP      NOP      
    3764:	40 00 00 50 	.long     0x50000040 ->1342177344 

00003768 <over_current_check>:
over_current_check():
..\application\alarm.c:36

void over_current_check(void)
{
    3768:	2d 5d       	PUSH      LR
..\application\alarm.c:37
    if(adc_data.Ia_pu<error_param.over_current_min||adc_data.Ia_pu>error_param.over_current_max||adc_data.Ib_pu<error_param.over_current_min||adc_data.Ib_pu>error_param.over_current_max)
    376a:	0d 44       	LD        R4, [PC + #13]        ;->0x379c  :=0x10003e18
    376c:	94 a9       	LD.H      R2, [R4 + #6]
    376e:	0d 45       	LD        R5, [PC + #13]        ;->0x37a0  :=0x10003e3c
    3770:	5d a8       	LD.H      R3, [R5 + #1]
    3772:	22 61       	SXT.H     R2, R2
    3774:	33 61       	SXT.H     R3, R3
    3776:	23 70       	CMP       R2, R3
    3778:	07 fb       	JLT       $+7                   ;->0x3786
    377a:	94 a9       	LD.H      R2, [R4 + #6]
    377c:	35 81       	LD.H      R3, [R5]
    377e:	22 61       	SXT.H     R2, R2
    3780:	33 61       	SXT.H     R3, R3
    3782:	23 70       	CMP       R2, R3
    3784:	10 fd       	JLE       $+16                  ;->0x37a4
..\application\alarm.c:39
    {
    	error_param.over_current_count++;
    3786:	e5 a8       	LD.H      R4, [R5 + #3]
    3788:	64 c0       	ADD       R4, R4, #1
    378a:	44 d0       	ZXT.H     R4, R4
    378c:	ec b0       	ST.H      [R5 + #3], R4
..\application\alarm.c:40
    	if(error_param.over_current_count>USER_OVER_CURRENT_TIME)  //
    378e:	ed a8       	LD.H      R5, [R5 + #3]
    3790:	55 d0       	ZXT.H     R5, R5
    3792:	5a 38       	CMP       R5, #10
    3794:	17 f8       	JHI       $+23                  ;->0x37c2
..\application\alarm.c:51
    }
    else
    {
    	error_param.over_current_count = 0;
    }
}
    3796:	0d 5d       	POP       LR
    3798:	1d 5c       	JMP       LR
    379a:	00 00       	NOP      NOP      
    379c:	18 3e 00 10 	.long     0x10003e18 ->268451352  [!!!@2@:CMP       R1, #104	@@: MOV       R0, #0
    37a0:	3c 3e 00 10 	.long     0x10003e3c ->268451388  [!!!@2@:CMP       R3, #108	@@: MOV       R0, #0
..\application\alarm.c:37
	}
}

void over_current_check(void)
{
    if(adc_data.Ia_pu<error_param.over_current_min||adc_data.Ia_pu>error_param.over_current_max||adc_data.Ib_pu<error_param.over_current_min||adc_data.Ib_pu>error_param.over_current_max)
    37a4:	d4 a9       	LD.H      R2, [R4 + #7]
    37a6:	5d a8       	LD.H      R3, [R5 + #1]
    37a8:	22 61       	SXT.H     R2, R2
    37aa:	33 61       	SXT.H     R3, R3
    37ac:	23 70       	CMP       R2, R3
    37ae:	ec fb       	JLT       $-20                  ;->0x3786
    37b0:	dc a9       	LD.H      R3, [R4 + #7]
    37b2:	45 81       	LD.H      R4, [R5]
    37b4:	33 61       	SXT.H     R3, R3
    37b6:	44 61       	SXT.H     R4, R4
    37b8:	34 70       	CMP       R3, R4
    37ba:	e6 fc       	JGT       $-26                  ;->0x3786
..\application\alarm.c:49
    	    error_param.over_current_count = 0;
    	}
    }
    else
    {
    	error_param.over_current_count = 0;
    37bc:	40 10       	MOV       R4, #0
    37be:	ec b0       	ST.H      [R5 + #3], R4
    37c0:	eb 07       	SJMP      $-21                  ;->0x3796
..\application\alarm.c:42
    if(adc_data.Ia_pu<error_param.over_current_min||adc_data.Ia_pu>error_param.over_current_max||adc_data.Ib_pu<error_param.over_current_min||adc_data.Ib_pu>error_param.over_current_max)
    {
    	error_param.over_current_count++;
    	if(error_param.over_current_count>USER_OVER_CURRENT_TIME)  //
    	{
    	    pwm_disable();
    37c2:	06 45       	LD        R5, [PC + #6]         ;->0x37d8  :=0x3194
    37c4:	05 5c       	LJMP      R5
..\application\alarm.c:43
    	    error_state.bit.over_current_error = 1;
    37c6:	06 45       	LD        R5, [PC + #6]         ;->0x37dc  :=0x10001b40
    37c8:	45 81       	LD.H      R4, [R5]
    37ca:	20 48       	SET       R4, #0
    37cc:	54 84       	ST.H      [R5], R4
..\application\alarm.c:44
    	    error_param.over_current_count = 0;
    37ce:	40 10       	MOV       R4, #0
    37d0:	04 45       	LD        R5, [PC + #4]         ;->0x37e0  :=0x10003e3c
    37d2:	ec b0       	ST.H      [R5 + #3], R4
..\application\alarm.c:51
    }
    else
    {
    	error_param.over_current_count = 0;
    }
}
    37d4:	0d 5d       	POP       LR
    37d6:	1d 5c       	JMP       LR
    37d8:	94 31 00 00 	.long     0x00003194 ->000012692  [!!!@2@:SUB       R9, #20	@@: NOP      
    37dc:	40 1b 00 10 	.long     0x10001b40 ->268442432  [!!!@2@:MOV       R4, #176	@@: MOV       R0, #0
    37e0:	3c 3e 00 10 	.long     0x10003e3c ->268451388  [!!!@2@:CMP       R3, #108	@@: MOV       R0, #0

000037e4 <current_offset_check>:
current_offset_check():
..\application\alarm.c:71
		error_param.over_voltage_count = 0;
	}
}

void current_offset_check(void)
{
    37e4:	8f 5f       	PUSH      {R6-R9,LR}
..\application\alarm.c:72
	if(Q15abs(2048-adc_data.Ia_offset)>USER_CURRENT_OFFSET_MAX||Q15abs(2048-adc_data.Ib_offset)>USER_CURRENT_OFFSET_MAX)
    37e6:	0b 44       	LD        R4, [PC + #11]        ;->0x3810  :=0x10003e18
    37e8:	24 59       	MOV       R9, R4
    37ea:	04 82       	LD.W      R0, [R4]
    37ec:	81 10       	MOV       R8, #1
    37ee:	c3 7a       	LSL       R8, #11
    37f0:	a8 58       	MOV       R5, R8
    37f2:	05 c6       	SUB       R0, R5, R0
    37f4:	00 61       	SXT.H     R0, R0
    37f6:	08 47       	LD        R7, [PC + #8]         ;->0x3814  :=0x100004e4
    37f8:	07 5c       	LJMP      R7
    37fa:	6c 1c       	MOV       R6, #204
    37fc:	06 70       	CMP       R0, R6
    37fe:	0f f9       	JLS       $+15                  ;->0x381c
..\application\alarm.c:74
	{
		error_state.bit.offset_error = 1;
    3800:	06 45       	LD        R5, [PC + #6]         ;->0x3818  :=0x10001b40
    3802:	45 81       	LD.H      R4, [R5]
    3804:	a0 48       	SET       R4, #8
    3806:	54 84       	ST.H      [R5], R4
..\application\alarm.c:76
	}
}
    3808:	0f 5e       	POP       {R6-R9}
    380a:	0d 5d       	POP       LR
    380c:	1d 5c       	JMP       LR
    380e:	00 00       	NOP      NOP      
    3810:	18 3e 00 10 	.long     0x10003e18 ->268451352  [!!!@2@:CMP       R1, #104	@@: MOV       R0, #0
    3814:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x39dc	@@: MOV       R0, #0
    3818:	40 1b 00 10 	.long     0x10001b40 ->268442432  [!!!@2@:MOV       R4, #176	@@: MOV       R0, #0
..\application\alarm.c:72
	}
}

void current_offset_check(void)
{
	if(Q15abs(2048-adc_data.Ia_offset)>USER_CURRENT_OFFSET_MAX||Q15abs(2048-adc_data.Ib_offset)>USER_CURRENT_OFFSET_MAX)
    381c:	89 58       	MOV       R4, R9
    381e:	6c 98       	LD.W      R5, [R4 + #1]
    3820:	88 58       	MOV       R4, R8
    3822:	44 c7       	SUB       R0, R4, R5
    3824:	00 61       	SXT.H     R0, R0
    3826:	07 5c       	LJMP      R7
    3828:	06 70       	CMP       R0, R6
    382a:	eb f8       	JHI       $-21                  ;->0x3800
..\application\alarm.c:76
	{
		error_state.bit.offset_error = 1;
	}
}
    382c:	0f 5e       	POP       {R6-R9}
    382e:	0d 5d       	POP       LR
    3830:	1d 5c       	JMP       LR
	...

00003834 <application_init>:
application_init():
..\application\application_init.c:13
#include "application_init.h"



void application_init(void)
{
    3834:	2d 5d       	PUSH      LR
..\application\application_init.c:14
    param_init();
    3836:	06 45       	LD        R5, [PC + #6]         ;->0x384c  :=0x398c
    3838:	05 5c       	LJMP      R5
..\application\application_init.c:15
    SMCInit(&smc1);
    383a:	06 40       	LD        R0, [PC + #6]         ;->0x3850  :=0x10003ec4
    383c:	06 45       	LD        R5, [PC + #6]         ;->0x3854  :=0x3acc
    383e:	05 5c       	LJMP      R5
..\application\application_init.c:16
    commu_init();
    3840:	06 45       	LD        R5, [PC + #6]         ;->0x3858  :=0x3898
    3842:	05 5c       	LJMP      R5
..\application\application_init.c:17
	speed_param_init();
    3844:	06 45       	LD        R5, [PC + #6]         ;->0x385c  :=0x3b18
    3846:	05 5c       	LJMP      R5
..\application\application_init.c:18
}
    3848:	0d 5d       	POP       LR
    384a:	1d 5c       	JMP       LR
    384c:	8c 39 00 00 	.long     0x0000398c ->000014732  [!!!@2@:CMP       R8, #28	@@: NOP      
    3850:	c4 3e 00 10 	.long     0x10003ec4 ->268451524  [!!!@2@:CMP       R12, #100	@@: MOV       R0, #0
    3854:	cc 3a 00 00 	.long     0x00003acc ->000015052  [!!!@2@:CMP       R12, #44	@@: NOP      
    3858:	98 38 00 00 	.long     0x00003898 ->000014488  [!!!@2@:CMP       R9, #8	@@: NOP      
    385c:	18 3b 00 00 	.long     0x00003b18 ->000015128  [!!!@2@:CMP       R1, #56	@@: NOP      

00003860 <sendSerialFcn>:
sendSerialFcn():
..\application\commu.c:14

void sin_gen(void);

//send
static void(sendSerialFcn)(uint8_t data)
{
    3860:	00 d1       	ZXT.B     R0, R0
..\application\commu.c:15
	X2C_Usart_SEL->TBUFR = data;
    3862:	02 45       	LD        R5, [PC + #2]         ;->0x3868  :=0x40000980
    3864:	e8 a0       	ST.W      [R5 + #3], R0
..\application\commu.c:16
}
    3866:	1d 5c       	JMP       LR
    3868:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3868  :=0x40000980

0000386c <receiveSerialFcn>:
receiveSerialFcn():
..\application\commu.c:21

//receive
static uint8_t (receiveSerialFcn)()
{
	return X2C_Usart_SEL->RBUFR;
    386c:	02 45       	LD        R5, [PC + #2]         ;->0x3874  :=0x40000980
    386e:	c5 98       	LD.W      R0, [R5 + #3]
..\application\commu.c:22
}
    3870:	00 d1       	ZXT.B     R0, R0
    3872:	1d 5c       	JMP       LR
    3874:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3874  :=0x40000980

00003878 <isReceiveDataAvailableFcn>:
isReceiveDataAvailableFcn():
..\application\commu.c:26
//check receive state
static uint8_t (isReceiveDataAvailableFcn)()
{
	if(X2C_Usart_SEL->STR & USART_STR_RDRIF)
    3878:	03 45       	LD        R5, [PC + #3]         ;->0x3884  :=0x40000980
    387a:	85 98       	LD.W      R0, [R5 + #2]
    387c:	83 7c       	LSR       R0, #11
..\application\commu.c:34
	}
	else
	{
		return RESET;
	}
}
    387e:	51 10       	MOV       R5, #1
    3880:	40 d5       	ANL       R0, R0, R5
    3882:	1d 5c       	JMP       LR
    3884:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3884  :=0x40000980

00003888 <isSendReadyFcn>:
isSendReadyFcn():
..\application\commu.c:38
//check send state
static uint8_t (isSendReadyFcn)()
{
	if(X2C_Usart_SEL->STR & USART_STR_TXEIF)
    3888:	03 45       	LD        R5, [PC + #3]         ;->0x3894  :=0x40000980
    388a:	85 98       	LD.W      R0, [R5 + #2]
    388c:	85 7c       	LSR       R0, #13
..\application\commu.c:46
	}
	else
	{
		return RESET;
	}
}
    388e:	51 10       	MOV       R5, #1
    3890:	40 d5       	ANL       R0, R0, R5
    3892:	1d 5c       	JMP       LR
    3894:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x3894  :=0x40000980

00003898 <commu_init>:
commu_init():
..\application\commu.c:49

void commu_init(void)
{
    3898:	2d 5d       	PUSH      LR
..\application\commu.c:50
	X2CScope_HookUARTFunctions(sendSerialFcn,receiveSerialFcn,isReceiveDataAvailableFcn,isSendReadyFcn);
    389a:	06 40       	LD        R0, [PC + #6]         ;->0x38b0  :=0x3860
    389c:	06 41       	LD        R1, [PC + #6]         ;->0x38b4  :=0x386c
    389e:	07 42       	LD        R2, [PC + #7]         ;->0x38b8  :=0x3878
    38a0:	07 43       	LD        R3, [PC + #7]         ;->0x38bc  :=0x3888
    38a2:	08 45       	LD        R5, [PC + #8]         ;->0x38c0  :=0x4344
    38a4:	05 5c       	LJMP      R5
..\application\commu.c:51
    X2CScope_Initialise();
    38a6:	08 45       	LD        R5, [PC + #8]         ;->0x38c4  :=0x425c
    38a8:	05 5c       	LJMP      R5
..\application\commu.c:52
}
    38aa:	0d 5d       	POP       LR
    38ac:	1d 5c       	JMP       LR
    38ae:	00 00       	NOP      NOP      
    38b0:	60 38 00 00 	.long     0x00003860 ->000014432  [!!!@2@:CMP       R6, #0	@@: NOP      
    38b4:	6c 38 00 00 	.long     0x0000386c ->000014444  [!!!@2@:CMP       R6, #12	@@: NOP      
    38b8:	78 38 00 00 	.long     0x00003878 ->000014456  [!!!@2@:CMP       R7, #8	@@: NOP      
    38bc:	88 38 00 00 	.long     0x00003888 ->000014472  [!!!@2@:CMP       R8, #8	@@: NOP      
    38c0:	44 43 00 00 	.long     0x00004344 ->000017220  [!!!@2@:LD        R3, [PC + #68]        ;->0x39d0  :=0xa865fc73	@@: NOP      
    38c4:	5c 42 00 00 	.long     0x0000425c ->000016988  [!!!@2@:LD        R2, [PC + #92]        ;->0x3a34  :=0x1231a063	@@: NOP      

000038c8 <commu_task>:
commu_task():
..\application\commu.c:55

void commu_task(void)
{
    38c8:	2d 5d       	PUSH      LR
..\application\commu.c:56
	X2CScope_Communicate();
    38ca:	03 45       	LD        R5, [PC + #3]         ;->0x38d4  :=0x4324
    38cc:	05 5c       	LJMP      R5
..\application\commu.c:57
}
    38ce:	0d 5d       	POP       LR
    38d0:	1d 5c       	JMP       LR
    38d2:	00 00       	NOP      NOP      
    38d4:	24 43 00 00 	.long     0x00004324 ->000017188  [!!!@2@:LD        R3, [PC + #36]        ;->0x3964  :=0xa8658135	@@: NOP      

000038d8 <sin_gen>:
sin_gen():
..\application\commu.c:93

volatile SIN_DATA_TYPE sin_data;

void sin_gen(void)
{
    sin_data.sin_count1++;
    38d8:	1c 45       	LD        R5, [PC + #28]        ;->0x3948  :=0x10003e74
    38da:	45 80       	LD.B      R4, [R5]
    38dc:	64 c0       	ADD       R4, R4, #1
    38de:	44 d1       	ZXT.B     R4, R4
    38e0:	54 83       	ST.B      [R5], R4
..\application\commu.c:94
	if(sin_data.sin_count1>=sin_data.sin_time1)
    38e2:	45 80       	LD.B      R4, [R5]
    38e4:	9d 88       	LD.B      R3, [R5 + #2]
    38e6:	34 70       	CMP       R3, R4
    38e8:	13 f8       	JHI       $+19                  ;->0x390e
..\application\commu.c:96
	{
		sin_data.sin_count1 = 0;
    38ea:	40 10       	MOV       R4, #0
    38ec:	54 83       	ST.B      [R5], R4
..\application\commu.c:97
		sin_data.sin_index1++;
    38ee:	9d a8       	LD.H      R3, [R5 + #2]
    38f0:	5b c0       	ADD       R3, R3, #1
    38f2:	33 d0       	ZXT.H     R3, R3
    38f4:	ab b0       	ST.H      [R5 + #2], R3
..\application\commu.c:98
		if(sin_data.sin_index1>=2048)
    38f6:	95 a8       	LD.H      R2, [R5 + #2]
    38f8:	22 61       	SXT.H     R2, R2
    38fa:	15 43       	LD        R3, [PC + #21]        ;->0x394c  :=0x7ff
    38fc:	23 70       	CMP       R2, R3
    38fe:	2b fc       	JGT       $+43                  ;->0x3954
..\application\commu.c:102
		{
			sin_data.sin_index1 = 0;
		}
	    sin_data.sin_value1 = SinTable[sin_data.sin_index1];
    3900:	a5 a8       	LD.H      R4, [R5 + #2]
    3902:	44 61       	SXT.H     R4, R4
    3904:	24 c3       	ADD       R4, R4, R4
    3906:	13 43       	LD        R3, [PC + #19]        ;->0x3950  :=0x10000b28
    3908:	23 e7       	LD.H      R4, [R3 + R4]
    390a:	44 d0       	ZXT.H     R4, R4
    390c:	2c b1       	ST.H      [R5 + #4], R4
..\application\commu.c:104
	}
	sin_data.sin_count2++;
    390e:	0f 44       	LD        R4, [PC + #15]        ;->0x3948  :=0x10003e74
    3910:	5d 88       	LD.B      R3, [R5 + #1]
    3912:	5b c0       	ADD       R3, R3, #1
    3914:	33 d1       	ZXT.B     R3, R3
    3916:	6b 90       	ST.B      [R5 + #1], R3
..\application\commu.c:105
	if(sin_data.sin_count2>=sin_data.sin_time2)
    3918:	5d 88       	LD.B      R3, [R5 + #1]
    391a:	d5 88       	LD.B      R2, [R5 + #3]
    391c:	23 70       	CMP       R2, R3
    391e:	14 f8       	JHI       $+20                  ;->0x3946
..\application\commu.c:107
	{
		sin_data.sin_count2 = 0;
    3920:	30 10       	MOV       R3, #0
    3922:	63 90       	ST.B      [R4 + #1], R3
..\application\commu.c:108
		sin_data.sin_index2++;
    3924:	d4 a8       	LD.H      R2, [R4 + #3]
    3926:	52 c0       	ADD       R2, R2, #1
    3928:	22 d0       	ZXT.H     R2, R2
    392a:	e2 b0       	ST.H      [R4 + #3], R2
..\application\commu.c:109
		if(sin_data.sin_index2>=2048)
    392c:	cc a8       	LD.H      R1, [R4 + #3]
    392e:	11 61       	SXT.H     R1, R1
    3930:	07 42       	LD        R2, [PC + #7]         ;->0x394c  :=0x7ff
    3932:	12 70       	CMP       R1, R2
    3934:	02 fd       	JLE       $+2                   ;->0x3938
..\application\commu.c:111
		{
			sin_data.sin_index2 = 0;
    3936:	e3 b0       	ST.H      [R4 + #3], R3
..\application\commu.c:113
		}
	    sin_data.sin_value2 = SinTable[sin_data.sin_index2];
    3938:	e5 a8       	LD.H      R4, [R5 + #3]
    393a:	44 61       	SXT.H     R4, R4
    393c:	24 c3       	ADD       R4, R4, R4
    393e:	05 43       	LD        R3, [PC + #5]         ;->0x3950  :=0x10000b28
    3940:	23 e7       	LD.H      R4, [R3 + R4]
    3942:	44 d0       	ZXT.H     R4, R4
    3944:	6c b1       	ST.H      [R5 + #5], R4
..\application\commu.c:115
	}
}
    3946:	1d 5c       	JMP       LR
    3948:	74 3e 00 10 	.long     0x10003e74 ->268451444  [!!!@2@:CMP       R7, #100	@@: MOV       R0, #0
    394c:	ff 07 00 00 	.long     0x000007ff ->000002047  [!!!@2@:SJMP      $-1                   ;->0x394a	@@: NOP      
    3950:	28 0b 00 10 	.long     0x10000b28 ->268438312  [!!!@2@:LD.W      R3, [SP + #40]	@@: MOV       R0, #0
..\application\commu.c:100
	{
		sin_data.sin_count1 = 0;
		sin_data.sin_index1++;
		if(sin_data.sin_index1>=2048)
		{
			sin_data.sin_index1 = 0;
    3954:	ac b0       	ST.H      [R5 + #2], R4
    3956:	d5 07       	SJMP      $-43                  ;->0x3900

00003958 <commu_update>:
commu_update():
..\application\commu.c:60
{
	X2CScope_Communicate();
}

void commu_update(void)
{
    3958:	2d 5d       	PUSH      LR
..\application\commu.c:61
	commu_data.update_count++;
    395a:	0a 45       	LD        R5, [PC + #10]        ;->0x3980  :=0x10003e80
    395c:	45 81       	LD.H      R4, [R5]
    395e:	64 c0       	ADD       R4, R4, #1
    3960:	44 d0       	ZXT.H     R4, R4
    3962:	54 84       	ST.H      [R5], R4
..\application\commu.c:62
	if(commu_data.update_count>=commu_data.update_time)
    3964:	35 81       	LD.H      R3, [R5]
    3966:	65 a8       	LD.H      R4, [R5 + #1]
    3968:	33 61       	SXT.H     R3, R3
    396a:	44 61       	SXT.H     R4, R4
    396c:	34 70       	CMP       R3, R4
    396e:	05 fb       	JLT       $+5                   ;->0x3978
..\application\commu.c:64
	{
		commu_data.update_count = 0;
    3970:	40 10       	MOV       R4, #0
    3972:	54 84       	ST.H      [R5], R4
..\application\commu.c:65
		X2CScope_Update();
    3974:	04 45       	LD        R5, [PC + #4]         ;->0x3984  :=0x4334
    3976:	05 5c       	LJMP      R5
..\application\commu.c:68
	}
#if(USER_DEBUG_SIN_SELECT==USER_DEBUG_SIN_ON)
	sin_gen();
    3978:	04 45       	LD        R5, [PC + #4]         ;->0x3988  :=0x38d8
    397a:	05 5c       	LJMP      R5
..\application\commu.c:70
#endif
}
    397c:	0d 5d       	POP       LR
    397e:	1d 5c       	JMP       LR
    3980:	80 3e 00 10 	.long     0x10003e80 ->268451456  [!!!@2@:CMP       R8, #96	@@: MOV       R0, #0
    3984:	34 43 00 00 	.long     0x00004334 ->000017204  [!!!@2@:LD        R3, [PC + #52]        ;->0x3a54  :=0x2bb0cf	@@: NOP      
    3988:	d8 38 00 00 	.long     0x000038d8 ->000014552  [!!!@2@:CMP       LR, #8	@@: NOP      

0000398c <param_init>:
param_init():
..\application\param.c:18
volatile tPIParm     PIParmQ;	// 提供转矩的电流分量Iq
volatile tPIParm     PIParmW;	// 转速、角速度
volatile SMC smc1;

void param_init(void)
{
    398c:	2d 5d       	PUSH      LR
..\application\param.c:19
	control_param.debug_start_speed = (uint32_t)(USER_DEBUG_SPEED*POLEPAIRS*LOOPTIMEINSEC*65536*65536/60.0);
    398e:	30 45       	LD        R5, [PC + #48]        ;->0x3a4c  :=0x10003e84
    3990:	30 44       	LD        R4, [PC + #48]        ;->0x3a50  :=0x15d867
    3992:	6c a0       	ST.W      [R5 + #1], R4
..\application\param.c:20
	control_param.start_speed = (uint32_t)(USER_OPEN_RUN_SPEED*POLEPAIRS*LOOPTIMEINSEC*65536*65536/60.0);
    3994:	30 44       	LD        R4, [PC + #48]        ;->0x3a54  :=0x2bb0cf
    3996:	ac a0       	ST.W      [R5 + #2], R4
..\application\param.c:21
	control_param.startup_lock_time = LOCKTIME;
    3998:	30 44       	LD        R4, [PC + #48]        ;->0x3a58  :=0x4e20
    399a:	ec b2       	ST.H      [R5 + #11], R4
..\application\param.c:22
	control_param.IRP_per_calc = IRP_PERCALC;
    399c:	3a 10       	MOV       R3, #10
    399e:	30 44       	LD        R4, [PC + #48]        ;->0x3a5c  :=0x10003ea7
    39a0:	43 83       	ST.B      [R4], R3
..\application\param.c:23
	control_param._pi_calc = Q15(_PI/IRP_PERCALC);
    39a2:	30 44       	LD        R4, [PC + #48]        ;->0x3a60  :=0x2836
    39a4:	ec b4       	ST.H      [R5 + #19], R4
..\application\param.c:24
	control_param.omega0_rad_calc = Q15(OMEGA0*_PI/IRP_PERCALC);
    39a6:	49 18       	MOV       R4, #137
    39a8:	ac b4       	ST.H      [R5 + #18], R4
..\application\param.c:26

    ParkParm.qIaOffset = adc_data.Ia_offset;
    39aa:	2f 44       	LD        R4, [PC + #47]        ;->0x3a64  :=0x10003e18
    39ac:	34 82       	LD.W      R3, [R4]
    39ae:	33 d0       	ZXT.H     R3, R3
    39b0:	2e 45       	LD        R5, [PC + #46]        ;->0x3a68  :=0x10003f4c
    39b2:	6b b3       	ST.H      [R5 + #13], R3
..\application\param.c:27
    ParkParm.qIbOffset = adc_data.Ib_offset;
    39b4:	64 98       	LD.W      R4, [R4 + #1]
    39b6:	44 d0       	ZXT.H     R4, R4
    39b8:	ac b3       	ST.H      [R5 + #14], R4
..\application\param.c:28
    current_offset_check();
    39ba:	2d 45       	LD        R5, [PC + #45]        ;->0x3a6c  :=0x37e4
    39bc:	05 5c       	LJMP      R5
..\application\param.c:30

    error_param.over_current_max = (float)(USER_OVER_CURRENT/USER_ADC_SCALE_CURRENT)*2048.0 + 2048.0;
    39be:	2d 45       	LD        R5, [PC + #45]        ;->0x3a70  :=0x10003e3c
    39c0:	2d 44       	LD        R4, [PC + #45]        ;->0x3a74  :=0xd52
    39c2:	54 84       	ST.H      [R5], R4
..\application\param.c:31
    error_param.over_current_min = 2048.0 - (float)(USER_OVER_CURRENT/USER_ADC_SCALE_CURRENT)*2048.0;
    39c4:	2d 44       	LD        R4, [PC + #45]        ;->0x3a78  :=0x2ad
    39c6:	6c b0       	ST.H      [R5 + #1], R4
..\application\param.c:32
    if(error_param.over_current_max>4095||error_param.over_current_min<0)
    39c8:	35 81       	LD.H      R3, [R5]
    39ca:	33 61       	SXT.H     R3, R3
    39cc:	2c 44       	LD        R4, [PC + #44]        ;->0x3a7c  :=0xfff
    39ce:	34 70       	CMP       R3, R4
    39d0:	73 fc       	JGT       $+115                 ;->0x3ab6
    39d2:	65 a8       	LD.H      R4, [R5 + #1]
    39d4:	44 61       	SXT.H     R4, R4
    39d6:	40 38       	CMP       R4, #0
    39d8:	6f f4       	JMI       $+111                 ;->0x3ab6
..\application\param.c:37
    {
    	error_state.bit.param_init_error = 1;
    }

    error_param.over_voltage_max = (float)(USER_OVER_VOLTAGE/USER_ADC_SCALE_VOLTAGE)*4096.0;
    39da:	2a 44       	LD        R4, [PC + #42]        ;->0x3a80  :=0xc28
    39dc:	ac b0       	ST.H      [R5 + #2], R4
..\application\param.c:38
    if(error_param.over_voltage_max>4095||error_param.over_voltage_max<0)
    39de:	9d a8       	LD.H      R3, [R5 + #2]
    39e0:	33 61       	SXT.H     R3, R3
    39e2:	27 44       	LD        R4, [PC + #39]        ;->0x3a7c  :=0xfff
    39e4:	34 70       	CMP       R3, R4
    39e6:	63 fc       	JGT       $+99                  ;->0x3aac
    39e8:	22 44       	LD        R4, [PC + #34]        ;->0x3a70  :=0x10003e3c
    39ea:	a4 a8       	LD.H      R4, [R4 + #2]
    39ec:	44 61       	SXT.H     R4, R4
    39ee:	40 38       	CMP       R4, #0
    39f0:	5e f4       	JMI       $+94                  ;->0x3aac
..\application\param.c:43
    {
    	error_state.bit.param_init_error = 1;
    }

    error_param.start_omega_acc_max = USER_OVER_SPEED_MAX*4.0/60.0*USER_MOTOR_POLE_PAIRS*0.001*0.001*65536.0;
    39f2:	48 16       	MOV       R4, #104
    39f4:	6c b4       	ST.H      [R5 + #17], R4
..\application\param.c:45

    error_param.stall_omega_max = USER_OVER_SPEED_MAX/60.0*USER_MOTOR_POLE_PAIRS*SPEEDLOOPTIME*65536;
    39f6:	24 44       	LD        R4, [PC + #36]        ;->0x3a84  :=0x3333
    39f8:	ec b1       	ST.H      [R5 + #7], R4
..\application\param.c:47

	SVGenParm.iPWMPeriod = USER_PWM_PERIOD;
    39fa:	24 44       	LD        R4, [PC + #36]        ;->0x3a88  :=0xbb8
    39fc:	24 45       	LD        R5, [PC + #36]        ;->0x3a8c  :=0x10003f70
    39fe:	54 84       	ST.H      [R5], R4
..\application\param.c:49

    control_param.motor_direction = USER_RUN_DIRECTION;
    3a00:	50 10       	MOV       R5, #0
    3a02:	24 44       	LD        R4, [PC + #36]        ;->0x3a90  :=0x10003ea4
    3a04:	45 83       	ST.B      [R4], R5
..\application\param.c:52

    // ============= PI D Term ===============
    PIParmD.qKp = Q15(USER_ID_KP); //DKP;
    3a06:	24 44       	LD        R4, [PC + #36]        ;->0x3a94  :=0x10003f30
    3a08:	31 10       	MOV       R3, #1
    3a0a:	9e 7a       	LSL       R3, #14
    3a0c:	63 a0       	ST.W      [R4 + #1], R3
..\application\param.c:53
    PIParmD.qKi = Q15(USER_ID_KI); //DKI;
    3a0e:	23 42       	LD        R2, [PC + #35]        ;->0x3a98  :=0x28f
    3a10:	a2 a0       	ST.W      [R4 + #2], R2
..\application\param.c:54
    PIParmD.qOutMax = Q15(USER_ID_OUTMAX); //DOUTMAX;
    3a12:	e3 a0       	ST.W      [R4 + #3], R3
..\application\param.c:55
    PIParmD.qOutMin = -PIParmD.qOutMax;
    3a14:	cc 98       	LD.W      R1, [R4 + #3]
    3a16:	4d c6       	SUB       R1, R5, R1
    3a18:	21 a1       	ST.W      [R4 + #4], R1
..\application\param.c:79
}


void InitPI( tPIParm *pParm)
{
	pParm->qdSum = 0;
    3a1a:	65 a1       	ST.W      [R4 + #5], R5
..\application\param.c:80
	pParm->qOut  = 0;
    3a1c:	a5 a1       	ST.W      [R4 + #6], R5
..\application\param.c:60
    PIParmD.qOutMin = -PIParmD.qOutMax;

    InitPI(&PIParmD);

    // ============= PI Q Term ===============
    PIParmQ.qKp = Q15(USER_IQ_KP); //QKP;
    3a1e:	20 44       	LD        R4, [PC + #32]        ;->0x3a9c  :=0x10003f14
    3a20:	63 a0       	ST.W      [R4 + #1], R3
..\application\param.c:61
    PIParmQ.qKi = Q15(USER_IQ_KI); //QKI;
    3a22:	a2 a0       	ST.W      [R4 + #2], R2
..\application\param.c:62
    PIParmQ.qOutMax = Q15(USER_IQ_OUTMAX); //QOUTMAX;
    3a24:	e3 a0       	ST.W      [R4 + #3], R3
..\application\param.c:63
    PIParmQ.qOutMin = -PIParmQ.qOutMax;
    3a26:	dc 98       	LD.W      R3, [R4 + #3]
    3a28:	dd c6       	SUB       R3, R5, R3
    3a2a:	23 a1       	ST.W      [R4 + #4], R3
..\application\param.c:79
}


void InitPI( tPIParm *pParm)
{
	pParm->qdSum = 0;
    3a2c:	65 a1       	ST.W      [R4 + #5], R5
..\application\param.c:80
	pParm->qOut  = 0;
    3a2e:	a5 a1       	ST.W      [R4 + #6], R5
..\application\param.c:68
    PIParmQ.qOutMin = -PIParmQ.qOutMax;

    InitPI(&PIParmQ);

    // ============= PI W Term ===============
    PIParmW.qKp = Q15(USER_SPD_KP); //WKP;
    3a30:	1c 44       	LD        R4, [PC + #28]        ;->0x3aa0  :=0x10003ef8
    3a32:	1d 43       	LD        R3, [PC + #29]        ;->0x3aa4  :=0x6666
    3a34:	63 a0       	ST.W      [R4 + #1], R3
..\application\param.c:69
    PIParmW.qKi = Q15(USER_SPD_KI); //WKI;
    3a36:	31 12       	MOV       R3, #33
    3a38:	a3 a0       	ST.W      [R4 + #2], R3
..\application\param.c:70
    PIParmW.qOutMax = Q15(USER_SPD_OUTMAX); //WOUTMAX;
    3a3a:	1c 43       	LD        R3, [PC + #28]        ;->0x3aa8  :=0x7eb7
    3a3c:	e3 a0       	ST.W      [R4 + #3], R3
..\application\param.c:71
    PIParmW.qOutMin = -PIParmW.qOutMax;
    3a3e:	dc 98       	LD.W      R3, [R4 + #3]
    3a40:	dd c6       	SUB       R3, R5, R3
    3a42:	23 a1       	ST.W      [R4 + #4], R3
..\application\param.c:79
}


void InitPI( tPIParm *pParm)
{
	pParm->qdSum = 0;
    3a44:	65 a1       	ST.W      [R4 + #5], R5
..\application\param.c:80
	pParm->qOut  = 0;
    3a46:	a5 a1       	ST.W      [R4 + #6], R5
..\application\param.c:74
    PIParmW.qKi = Q15(USER_SPD_KI); //WKI;
    PIParmW.qOutMax = Q15(USER_SPD_OUTMAX); //WOUTMAX;
    PIParmW.qOutMin = -PIParmW.qOutMax;

    InitPI(&PIParmW);
}
    3a48:	0d 5d       	POP       LR
    3a4a:	1d 5c       	JMP       LR
    3a4c:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0
    3a50:	67 d8 15 00 	.long     0x0015d867 ->001431655 
    3a54:	cf b0 2b 00 	.long     0x002bb0cf ->002863311 
    3a58:	20 4e 00 00 	.long     0x00004e20 ->000020000  [!!!@2@:CLR       [R4], #0	@@: NOP      
    3a5c:	a7 3e 00 10 	.long     0x10003ea7 ->268451495  [!!!@2@:CMP       R10, #103	@@: MOV       R0, #0
    3a60:	36 28 00 00 	.long     0x00002836 ->000010294  [!!!@2@:ADD       R3, #6	@@: NOP      
    3a64:	18 3e 00 10 	.long     0x10003e18 ->268451352  [!!!@2@:CMP       R1, #104	@@: MOV       R0, #0
    3a68:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
    3a6c:	e4 37 00 00 	.long     0x000037e4 ->000014308  [!!!@2@:SUB       SP, #116	@@: NOP      
    3a70:	3c 3e 00 10 	.long     0x10003e3c ->268451388  [!!!@2@:CMP       R3, #108	@@: MOV       R0, #0
    3a74:	52 0d 00 00 	.long     0x00000d52 ->000003410  [!!!@2@:LD.W      R5, [SP + #82]	@@: NOP      
    3a78:	ad 02 00 00 	.long     0x000002ad ->000000685  [!!!@2@:SVC      	@@: NOP      
    3a7c:	ff 0f 00 00 	.long     0x00000fff ->000004095  [!!!@2@:LD.W      R7, [SP + #255]	@@: NOP      
    3a80:	28 0c 00 00 	.long     0x00000c28 ->000003112  [!!!@2@:LD.W      R4, [SP + #40]	@@: NOP      
    3a84:	33 33 00 00 	.long     0x00003333 ->000013107  [!!!@2@:SUB       R3, #51	@@: NOP      
    3a88:	b8 0b 00 00 	.long     0x00000bb8 ->000003000  [!!!@2@:LD.W      R3, [SP + #184]	@@: NOP      
    3a8c:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
    3a90:	a4 3e 00 10 	.long     0x10003ea4 ->268451492  [!!!@2@:CMP       R10, #100	@@: MOV       R0, #0
    3a94:	30 3f 00 10 	.long     0x10003f30 ->268451632  [!!!@2@:CMP       R3, #112	@@: MOV       R0, #0
    3a98:	8f 02 00 00 	.long     0x0000028f ->000000655  [!!!@2@:SVC      	@@: NOP      
    3a9c:	14 3f 00 10 	.long     0x10003f14 ->268451604  [!!!@2@:CMP       R1, #116	@@: MOV       R0, #0
    3aa0:	f8 3e 00 10 	.long     0x10003ef8 ->268451576  [!!!@2@:CMP       PC, #104	@@: MOV       R0, #0
    3aa4:	66 66 00 00 	.long     0x00006666 ->000026214  [!!!@2@:SUB       R6, R6	@@: NOP      
    3aa8:	b7 7e 00 00 	.long     0x00007eb7 ->000032439  [!!!@2@:ROR       R6, #15	@@: NOP      
..\application\param.c:40
    }

    error_param.over_voltage_max = (float)(USER_OVER_VOLTAGE/USER_ADC_SCALE_VOLTAGE)*4096.0;
    if(error_param.over_voltage_max>4095||error_param.over_voltage_max<0)
    {
    	error_state.bit.param_init_error = 1;
    3aac:	05 44       	LD        R4, [PC + #5]         ;->0x3ac0  :=0x10001b40
    3aae:	34 81       	LD.H      R3, [R4]
    3ab0:	99 48       	SET       R3, #9
    3ab2:	43 84       	ST.H      [R4], R3
    3ab4:	9f 07       	SJMP      $-97                  ;->0x39f2
..\application\param.c:34

    error_param.over_current_max = (float)(USER_OVER_CURRENT/USER_ADC_SCALE_CURRENT)*2048.0 + 2048.0;
    error_param.over_current_min = 2048.0 - (float)(USER_OVER_CURRENT/USER_ADC_SCALE_CURRENT)*2048.0;
    if(error_param.over_current_max>4095||error_param.over_current_min<0)
    {
    	error_state.bit.param_init_error = 1;
    3ab6:	03 44       	LD        R4, [PC + #3]         ;->0x3ac0  :=0x10001b40
    3ab8:	34 81       	LD.H      R3, [R4]
    3aba:	99 48       	SET       R3, #9
    3abc:	43 84       	ST.H      [R4], R3
    3abe:	8e 07       	SJMP      $-114                 ;->0x39da
    3ac0:	40 1b 00 10 	.long     0x10001b40 ->268442432  [!!!@2@:MOV       R4, #176	@@: MOV       R0, #0

00003ac4 <InitPI>:
InitPI():
..\application\param.c:79
}


void InitPI( tPIParm *pParm)
{
	pParm->qdSum = 0;
    3ac4:	50 10       	MOV       R5, #0
    3ac6:	45 a1       	ST.W      [R0 + #5], R5
..\application\param.c:80
	pParm->qOut  = 0;
    3ac8:	85 a1       	ST.W      [R0 + #6], R5
..\application\param.c:81
}
    3aca:	1d 5c       	JMP       LR

00003acc <SMCInit>:
SMCInit():
..\application\smc.c:12
void SMCInit(SMC *s)
{
	if (Q15(USER_MOTOR_RS*LOOPTIMEINSEC) > Q15(USER_MOTOR_LS))
		s->Fsmopos = Q15(0.0);
	else
		s->Fsmopos = Q15(1 - USER_MOTOR_RS*LOOPTIMEINSEC/USER_MOTOR_LS);
    3acc:	06 45       	LD        R5, [PC + #6]         ;->0x3ae4  :=0x7bbb
    3ace:	85 b1       	ST.H      [R0 + #6], R5
..\application\smc.c:17

	if (Q15(LOOPTIMEINSEC) > Q15(USER_MOTOR_LS))
		s->Gsmopos = Q15(0.99999);//0x7FFF
	else
		s->Gsmopos = Q15(LOOPTIMEINSEC/USER_MOTOR_LS*USER_FULL_SCALE_VOLTAGE/USER_ADC_SCALE_CURRENT);
    3ad0:	06 45       	LD        R5, [PC + #6]         ;->0x3ae8  :=0xda0
    3ad2:	05 b1       	ST.H      [R0 + #4], R5
..\application\smc.c:19

	s->Kslide = Q15(SMCGAIN);//0X6CCC
    3ad4:	51 10       	MOV       R5, #1
    3ad6:	ae 7a       	LSL       R5, #14
    3ad8:	85 b3       	ST.H      [R0 + #14], R5
..\application\smc.c:20
	s->MaxSMCError = Q15(MAXLINEARSMC);//0XA4
    3ada:	c5 b3       	ST.H      [R0 + #15], R5
..\application\smc.c:21
	s->FiltOmCoef = Q15(OMEGA0 * _PI / IRP_PERCALC);
    3adc:	49 18       	MOV       R4, #137
    3ade:	04 b5       	ST.H      [R0 + #20], R4
..\application\smc.c:22
	s->ThetaOffset = CONSTANT_PHASE_SHIFT;
    3ae0:	45 b5       	ST.H      [R0 + #21], R5
..\application\smc.c:23
}
    3ae2:	1d 5c       	JMP       LR
    3ae4:	bb 7b 00 00 	.long     0x00007bbb ->000031675  [!!!@2@:LSL       R7, #27	@@: NOP      
    3ae8:	a0 0d 00 00 	.long     0x00000da0 ->000003488  [!!!@2@:LD.W      R5, [SP + #160]	@@: NOP      

00003aec <smc_param_init>:
smc_param_init():
..\application\smc.c:29



void smc_param_init(void)
{
	smc1.Valpha = 0;
    3aec:	0a 45       	LD        R5, [PC + #10]        ;->0x3b14  :=0x10003ec4
    3aee:	40 10       	MOV       R4, #0
    3af0:	54 84       	ST.H      [R5], R4
..\application\smc.c:30
	smc1.Ealpha = 0;
    3af2:	6c b0       	ST.H      [R5 + #1], R4
..\application\smc.c:31
	smc1.EalphaFinal = 0;
    3af4:	ac b0       	ST.H      [R5 + #2], R4
..\application\smc.c:32
	smc1.Zalpha = 0;
    3af6:	ec b0       	ST.H      [R5 + #3], R4
..\application\smc.c:33
	smc1.EstIalpha = 0;
    3af8:	6c b1       	ST.H      [R5 + #5], R4
..\application\smc.c:34
	smc1.Vbeta = 0;
    3afa:	ec b1       	ST.H      [R5 + #7], R4
..\application\smc.c:35
	smc1.Ebeta = 0;
    3afc:	2c b2       	ST.H      [R5 + #8], R4
..\application\smc.c:36
	smc1.EbetaFinal = 0;
    3afe:	6c b2       	ST.H      [R5 + #9], R4
..\application\smc.c:37
	smc1.Zbeta = 0;
    3b00:	ac b2       	ST.H      [R5 + #10], R4
..\application\smc.c:38
	smc1.EstIbeta = 0;
    3b02:	ec b2       	ST.H      [R5 + #11], R4
..\application\smc.c:39
	smc1.Ialpha = 0;
    3b04:	2c b3       	ST.H      [R5 + #12], R4
..\application\smc.c:40
	smc1.IalphaError = 0;
    3b06:	6c b3       	ST.H      [R5 + #13], R4
..\application\smc.c:41
	smc1.Ibeta = 0;
    3b08:	2c b4       	ST.H      [R5 + #16], R4
..\application\smc.c:42
	smc1.IbetaError = 0;
    3b0a:	6c b4       	ST.H      [R5 + #17], R4
..\application\smc.c:43
	smc1.Theta = 0;
    3b0c:	ac b5       	ST.H      [R5 + #22], R4
..\application\smc.c:44
	smc1.Omega = 0;
    3b0e:	ec b5       	ST.H      [R5 + #23], R4
..\application\smc.c:45
}
    3b10:	1d 5c       	JMP       LR
    3b12:	00 00       	NOP      NOP      
    3b14:	c4 3e 00 10 	.long     0x10003ec4 ->268451524  [!!!@2@:CMP       R12, #100	@@: MOV       R0, #0

00003b18 <speed_param_init>:
speed_param_init():
..\application\speed.c:14
void run_speed_process(void);


void speed_param_init(void)
{
    speed_data.speed_give = 0;
    3b18:	0b 45       	LD        R5, [PC + #11]        ;->0x3b44  :=0x10003f80
    3b1a:	40 10       	MOV       R4, #0
    3b1c:	54 85       	ST.W      [R5], R4
..\application\speed.c:15
    speed_data.speed_base = USER_SPEED_BASE;
    3b1e:	0b 44       	LD        R4, [PC + #11]        ;->0x3b48  :=0x1770
    3b20:	ac a0       	ST.W      [R5 + #2], R4
..\application\speed.c:16
    speed_data.speed_acc_time = USER_SPEED_ACC_TIME;
    3b22:	49 10       	MOV       R4, #9
    3b24:	ec a2       	ST.W      [R5 + #11], R4
..\application\speed.c:17
    speed_data.speed_omega_coef = 1118481*USER_MOTOR_POLE_PAIRS/SPEEDLOOPFREQ;  //*1024
    3b26:	0a 44       	LD        R4, [PC + #10]        ;->0x3b4c  :=0x8bc
    3b28:	2c a3       	ST.W      [R5 + #12], R4
..\application\speed.c:18
    speed_data.omega_base = (speed_data.speed_base*speed_data.speed_omega_coef)>>10;
    3b2a:	0a 44       	LD        R4, [PC + #10]        ;->0x3b50  :=0x332d
    3b2c:	ac a1       	ST.W      [R5 + #6], R4
..\application\speed.c:19
    speed_data.omega_q15_coef = 33554432/speed_data.omega_base;  //*1024
    3b2e:	0a 44       	LD        R4, [PC + #10]        ;->0x3b54  :=0xa01
    3b30:	ec a1       	ST.W      [R5 + #7], R4
..\application\speed.c:20
    speed_data.speed_omega_q15_coef = (speed_data.speed_omega_coef*speed_data.omega_q15_coef)>>10;  //*1024
    3b32:	0a 44       	LD        R4, [PC + #10]        ;->0x3b58  :=0x15d8
    3b34:	6c a3       	ST.W      [R5 + #13], R4
..\application\speed.c:21
    speed_data.omega_min_pu = (USER_SPEED_MIN*speed_data.speed_omega_q15_coef)>>10;  //Q15
    3b36:	0a 44       	LD        R4, [PC + #10]        ;->0x3b5c  :=0x1554
    3b38:	6c a2       	ST.W      [R5 + #9], R4
..\application\speed.c:22
    speed_data.omega_max_pu = (USER_SPEED_MAX*speed_data.speed_omega_q15_coef)>>10;  //Q15
    3b3a:	0a 44       	LD        R4, [PC + #10]        ;->0x3b60  :=0x5553
    3b3c:	ac a2       	ST.W      [R5 + #10], R4
..\application\speed.c:23
    speed_data.omega_acc_pu = speed_data.omega_max_pu/USER_SPEED_ACC_TIME/1000; //Q15
    3b3e:	42 10       	MOV       R4, #2
    3b40:	2c a2       	ST.W      [R5 + #8], R4
..\application\speed.c:28
    if(speed_data.omega_acc_pu<1)
    {
    	speed_data.omega_acc_pu = 1;
    }
}
    3b42:	1d 5c       	JMP       LR
    3b44:	80 3f 00 10 	.long     0x10003f80 ->268451712  [!!!@2@:CMP       R8, #112	@@: MOV       R0, #0
    3b48:	70 17 00 00 	.long     0x00001770 ->000006000  [!!!@2@:MOV       R7, #112	@@: NOP      
    3b4c:	bc 08 00 00 	.long     0x000008bc ->000002236  [!!!@2@:LD.W      R0, [SP + #188]	@@: NOP      
    3b50:	2d 33 00 00 	.long     0x0000332d ->000013101  [!!!@2@:SUB       R2, #61	@@: NOP      
    3b54:	01 0a 00 00 	.long     0x00000a01 ->000002561  [!!!@2@:LD.W      R2, [SP + #1]	@@: NOP      
    3b58:	d8 15 00 00 	.long     0x000015d8 ->000005592  [!!!@2@:MOV       LR, #88	@@: NOP      
    3b5c:	54 15 00 00 	.long     0x00001554 ->000005460  [!!!@2@:MOV       R5, #84	@@: NOP      
    3b60:	53 55 00 00 	.long     0x00005553 ->000021843  [!!!@2@:JB        R10, #19	@@: NOP      

00003b64 <run_speed_init_process>:
run_speed_init_process():
..\application\speed.c:42
    default: break;
    }
}

void run_speed_init_process(void)
{
    3b64:	2d 5d       	PUSH      LR
..\application\speed.c:43
	if(control_param.motor_direction==USER_MOTOR_RUN_CW)
    3b66:	10 45       	LD        R5, [PC + #16]        ;->0x3ba4  :=0x10003ea4
    3b68:	55 80       	LD.B      R5, [R5]
..\application\speed.c:45
	{
	    speed_data.speed_give = Q15abs(USER_SET_SPEED);
    3b6a:	10 40       	LD        R0, [PC + #16]        ;->0x3ba8  :=0x7d0
..\application\speed.c:43
    }
}

void run_speed_init_process(void)
{
	if(control_param.motor_direction==USER_MOTOR_RUN_CW)
    3b6c:	50 38       	CMP       R5, #0
    3b6e:	2b f0       	JZ        $+43                  ;->0x3bc4
..\application\speed.c:49
	{
	    speed_data.speed_give = Q15abs(USER_SET_SPEED);
	}
	else
	{
		speed_data.speed_give = -Q15abs(USER_SET_SPEED);
    3b70:	0f 45       	LD        R5, [PC + #15]        ;->0x3bac  :=0x100004e4
    3b72:	05 5c       	LJMP      R5
    3b74:	0f 45       	LD        R5, [PC + #15]        ;->0x3bb0  :=0x10003f80
    3b76:	40 10       	MOV       R4, #0
    3b78:	04 c6       	SUB       R0, R4, R0
    3b7a:	50 85       	ST.W      [R5], R0
..\application\speed.c:51
	}
	speed_data.omega_give_pu = (smc1.Omega*speed_data.omega_q15_coef)>>10;
    3b7c:	0e 44       	LD        R4, [PC + #14]        ;->0x3bb4  :=0x10003ec4
    3b7e:	e4 ad       	LD.H      R4, [R4 + #23]
    3b80:	44 61       	SXT.H     R4, R4
    3b82:	dd 99       	LD.W      R3, [R5 + #7]
    3b84:	e4 ca       	MULS      R4, R4, R3
    3b86:	00 00       	NOP      NOP      
    3b88:	a2 78       	ASR       R4, #10
    3b8a:	2c a1       	ST.W      [R5 + #4], R4
..\application\speed.c:52
	PIParmW.qdSum = (int32_t)ParkParm.qVqRef<<15;
    3b8c:	0b 45       	LD        R5, [PC + #11]        ;->0x3bb8  :=0x10003f4c
    3b8e:	65 ac       	LD.H      R4, [R5 + #17]
    3b90:	44 61       	SXT.H     R4, R4
    3b92:	a7 7a       	LSL       R4, #15
    3b94:	0a 45       	LD        R5, [PC + #10]        ;->0x3bbc  :=0x10003ef8
    3b96:	6c a1       	ST.W      [R5 + #5], R4
..\application\speed.c:53
	sys_control.speed_mode = SPEED_STATE_RUN;
    3b98:	41 10       	MOV       R4, #1
    3b9a:	0a 45       	LD        R5, [PC + #10]        ;->0x3bc0  :=0x10003eb8
    3b9c:	ac a0       	ST.W      [R5 + #2], R4
..\application\speed.c:54
}
    3b9e:	0d 5d       	POP       LR
    3ba0:	1d 5c       	JMP       LR
    3ba2:	00 00       	NOP      NOP      
    3ba4:	a4 3e 00 10 	.long     0x10003ea4 ->268451492  [!!!@2@:CMP       R10, #100	@@: MOV       R0, #0
    3ba8:	d0 07 00 00 	.long     0x000007d0 ->000002000  [!!!@2@:SJMP      $-48                  ;->0x3b48	@@: NOP      
    3bac:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x3d74	@@: MOV       R0, #0
    3bb0:	80 3f 00 10 	.long     0x10003f80 ->268451712  [!!!@2@:CMP       R8, #112	@@: MOV       R0, #0
    3bb4:	c4 3e 00 10 	.long     0x10003ec4 ->268451524  [!!!@2@:CMP       R12, #100	@@: MOV       R0, #0
    3bb8:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
    3bbc:	f8 3e 00 10 	.long     0x10003ef8 ->268451576  [!!!@2@:CMP       PC, #104	@@: MOV       R0, #0
    3bc0:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
..\application\speed.c:45

void run_speed_init_process(void)
{
	if(control_param.motor_direction==USER_MOTOR_RUN_CW)
	{
	    speed_data.speed_give = Q15abs(USER_SET_SPEED);
    3bc4:	03 45       	LD        R5, [PC + #3]         ;->0x3bd0  :=0x100004e4
    3bc6:	05 5c       	LJMP      R5
    3bc8:	03 45       	LD        R5, [PC + #3]         ;->0x3bd4  :=0x10003f80
    3bca:	50 85       	ST.W      [R5], R0
    3bcc:	d8 07       	SJMP      $-40                  ;->0x3b7c
    3bce:	00 00       	NOP      NOP      
    3bd0:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x3d98	@@: MOV       R0, #0
    3bd4:	80 3f 00 10 	.long     0x10003f80 ->268451712  [!!!@2@:CMP       R8, #112	@@: MOV       R0, #0

00003bd8 <speed_state_machine>:
speed_state_machine():
..\application\speed.c:32
    }
}


void speed_state_machine(void)
{
    3bd8:	2d 5d       	PUSH      LR
..\application\speed.c:33
    switch(sys_control.speed_mode)
    3bda:	05 45       	LD        R5, [PC + #5]         ;->0x3bec  :=0x10003eb8
    3bdc:	ad 98       	LD.W      R5, [R5 + #2]
    3bde:	50 38       	CMP       R5, #0
    3be0:	0a f1       	JNZ       $+10                  ;->0x3bf4
..\application\speed.c:35
    {
    case SPEED_STATE_INIT:  run_speed_init_process();  break;
    3be2:	04 45       	LD        R5, [PC + #4]         ;->0x3bf0  :=0x3b64
    3be4:	05 5c       	LJMP      R5
..\application\speed.c:39
    case SPEED_STATE_RUN:   run_speed_process();       break;
    default: break;
    }
}
    3be6:	0d 5d       	POP       LR
    3be8:	1d 5c       	JMP       LR
    3bea:	00 00       	NOP      NOP      
    3bec:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
    3bf0:	64 3b 00 00 	.long     0x00003b64 ->000015204  [!!!@2@:CMP       R6, #52	@@: NOP      
..\application\speed.c:33
}


void speed_state_machine(void)
{
    switch(sys_control.speed_mode)
    3bf4:	51 38       	CMP       R5, #1
    3bf6:	f8 f1       	JNZ       $-8                   ;->0x3be6
..\application\speed.c:36
    {
    case SPEED_STATE_INIT:  run_speed_init_process();  break;
    case SPEED_STATE_RUN:   run_speed_process();       break;
    3bf8:	02 45       	LD        R5, [PC + #2]         ;->0x3c00  :=0x10000180
    3bfa:	05 5c       	LJMP      R5
..\application\speed.c:39
    default: break;
    }
}
    3bfc:	0d 5d       	POP       LR
    3bfe:	1d 5c       	JMP       LR
    3c00:	80 01 00 10 	.long     0x10000180 ->268435840  [!!!@2@:CMN       R8, R0	@@: MOV       R0, #0

00003c04 <state_machine_transition>:
state_machine_transition():
..\application\state_machine.c:38
	state_machine_transition();
	run_mode = (int16_t)sys_control.state_mode;
}

void state_machine_transition(void)
{
    3c04:	83 5f       	PUSH      {R6-R7,LR}
..\application\state_machine.c:40
	//error or system disable condition
    if(error_state.error_code!=0)
    3c06:	07 45       	LD        R5, [PC + #7]         ;->0x3c20  :=0x10001b40
    3c08:	55 81       	LD.H      R5, [R5]
    3c0a:	55 d0       	ZXT.H     R5, R5
    3c0c:	50 38       	CMP       R5, #0
    3c0e:	15 f1       	JNZ       $+21                  ;->0x3c38
..\application\state_machine.c:46
    {
    	pwm_disable();
    	sys_control.sys_enable_flag = FALSE;
    	sys_control.state_mode = STATE_FAULT;
    }
    else if(sys_control.sys_enable_flag==FALSE)
    3c10:	05 46       	LD        R6, [PC + #5]         ;->0x3c24  :=0x10003eb8
    3c12:	76 80       	LD.B      R7, [R6]
    3c14:	70 38       	CMP       R7, #0
    3c16:	09 f0       	JZ        $+9                   ;->0x3c28
..\application\state_machine.c:51
    {
    	pwm_disable();
    	sys_control.state_mode = STATE_IDLE;
    }
}
    3c18:	03 5e       	POP       {R6-R7}
    3c1a:	0d 5d       	POP       LR
    3c1c:	1d 5c       	JMP       LR
    3c1e:	00 00       	NOP      NOP      
    3c20:	40 1b 00 10 	.long     0x10001b40 ->268442432  [!!!@2@:MOV       R4, #176	@@: MOV       R0, #0
    3c24:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
..\application\state_machine.c:48
    	sys_control.sys_enable_flag = FALSE;
    	sys_control.state_mode = STATE_FAULT;
    }
    else if(sys_control.sys_enable_flag==FALSE)
    {
    	pwm_disable();
    3c28:	03 45       	LD        R5, [PC + #3]         ;->0x3c34  :=0x3194
    3c2a:	05 5c       	LJMP      R5
..\application\state_machine.c:49
    	sys_control.state_mode = STATE_IDLE;
    3c2c:	77 a0       	ST.W      [R6 + #1], R7
..\application\state_machine.c:51
    }
}
    3c2e:	03 5e       	POP       {R6-R7}
    3c30:	0d 5d       	POP       LR
    3c32:	1d 5c       	JMP       LR
    3c34:	94 31 00 00 	.long     0x00003194 ->000012692  [!!!@2@:SUB       R9, #20	@@: NOP      
..\application\state_machine.c:42
void state_machine_transition(void)
{
	//error or system disable condition
    if(error_state.error_code!=0)
    {
    	pwm_disable();
    3c38:	05 45       	LD        R5, [PC + #5]         ;->0x3c4c  :=0x3194
    3c3a:	05 5c       	LJMP      R5
..\application\state_machine.c:43
    	sys_control.sys_enable_flag = FALSE;
    3c3c:	05 45       	LD        R5, [PC + #5]         ;->0x3c50  :=0x10003eb8
    3c3e:	40 10       	MOV       R4, #0
    3c40:	54 83       	ST.B      [R5], R4
..\application\state_machine.c:44
    	sys_control.state_mode = STATE_FAULT;
    3c42:	48 10       	MOV       R4, #8
    3c44:	6c a0       	ST.W      [R5 + #1], R4
..\application\state_machine.c:51
    else if(sys_control.sys_enable_flag==FALSE)
    {
    	pwm_disable();
    	sys_control.state_mode = STATE_IDLE;
    }
}
    3c46:	03 5e       	POP       {R6-R7}
    3c48:	0d 5d       	POP       LR
    3c4a:	1d 5c       	JMP       LR
    3c4c:	94 31 00 00 	.long     0x00003194 ->000012692  [!!!@2@:SUB       R9, #20	@@: NOP      
    3c50:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0

00003c54 <run_param_set_process>:
run_param_set_process():
..\application\state_machine.c:71
		}
	}
}

void run_param_set_process(void)
{
    3c54:	81 5f       	PUSH      {R6,LR}
..\application\state_machine.c:72
	InitPI(&PIParmD);
    3c56:	15 40       	LD        R0, [PC + #21]        ;->0x3ca8  :=0x10003f30
    3c58:	15 46       	LD        R6, [PC + #21]        ;->0x3cac  :=0x3ac4
    3c5a:	06 5c       	LJMP      R6
..\application\state_machine.c:73
	InitPI(&PIParmQ);
    3c5c:	15 40       	LD        R0, [PC + #21]        ;->0x3cb0  :=0x10003f14
    3c5e:	06 5c       	LJMP      R6
..\application\state_machine.c:74
	smc_param_init();
    3c60:	15 45       	LD        R5, [PC + #21]        ;->0x3cb4  :=0x3aec
    3c62:	05 5c       	LJMP      R5
..\application\state_machine.c:75
	control_param.current_loop_count = 0;
    3c64:	15 45       	LD        R5, [PC + #21]        ;->0x3cb8  :=0x10003e84
    3c66:	40 10       	MOV       R4, #0
    3c68:	ec b5       	ST.H      [R5 + #23], R4
..\application\state_machine.c:76
	control_param.current_loop_time = 50;
    3c6a:	32 13       	MOV       R3, #50
    3c6c:	2b b6       	ST.H      [R5 + #24], R3
..\application\state_machine.c:77
	control_param.startup_lock = 0;
    3c6e:	ac b2       	ST.H      [R5 + #10], R4
..\application\state_machine.c:78
	control_param.startup_ramp = 0;
    3c70:	40 10       	MOV       R4, #0
    3c72:	ac a1       	ST.W      [R5 + #6], R4
..\application\state_machine.c:79
    control_param.current_step = 0;
    3c74:	2c b2       	ST.H      [R5 + #8], R4
..\application\state_machine.c:80
    ParkParm.qAngle = 0;
    3c76:	12 43       	LD        R3, [PC + #18]        ;->0x3cbc  :=0x10003f4c
    3c78:	34 84       	ST.H      [R3], R4
..\application\state_machine.c:81
	sys_control.state_change_flag = 1;
    3c7a:	12 46       	LD        R6, [PC + #18]        ;->0x3cc0  :=0x10003eb8
    3c7c:	21 10       	MOV       R2, #1
    3c7e:	72 90       	ST.B      [R6 + #1], R2
..\application\state_machine.c:99
		pwm_enable();
		sys_control.state_mode = STATE_RUN_OPEN_DEBUG;
	}
	else
	{
		ParkParm.qVdRef = 0;
    3c80:	1c b4       	ST.H      [R3 + #16], R4
..\application\state_machine.c:100
		ParkParm.qVqRef = 0;
    3c82:	5c b4       	ST.H      [R3 + #17], R4
..\application\state_machine.c:101
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
    3c84:	10 44       	LD        R4, [PC + #16]        ;->0x3cc4  :=0x10003ea4
    3c86:	44 80       	LD.B      R4, [R4]
    3c88:	40 38       	CMP       R4, #0
    3c8a:	25 f0       	JZ        $+37                  ;->0x3cd4
..\application\state_machine.c:108
		    control_param.start_current_ref = REFINAMPS(USER_INIT_TORQUE);
		    control_param.current_ref = REFINAMPS(USER_SET_TORQUE);
		}
		else
		{
			control_param.start_current_ref = -REFINAMPS(USER_INIT_TORQUE);
    3c8c:	0f 44       	LD        R4, [PC + #15]        ;->0x3cc8  :=0xffffddf0
    3c8e:	ac b1       	ST.H      [R5 + #6], R4
..\application\state_machine.c:109
			control_param.current_ref = -REFINAMPS(USER_SET_TORQUE);
    3c90:	0f 44       	LD        R4, [PC + #15]        ;->0x3ccc  :=0xffffeef8
    3c92:	ec b1       	ST.H      [R5 + #7], R4
..\application\state_machine.c:111
		}
		control_param.end_speed = control_param.start_speed;
    3c94:	a5 98       	LD.W      R4, [R5 + #2]
    3c96:	ec a1       	ST.W      [R5 + #7], R4
..\application\state_machine.c:112
		pwm_enable();
    3c98:	0e 45       	LD        R5, [PC + #14]        ;->0x3cd0  :=0x316c
    3c9a:	05 5c       	LJMP      R5
..\application\state_machine.c:113
	    sys_control.state_mode = STATE_RUN_OPEN_LOOP;
    3c9c:	55 10       	MOV       R5, #5
    3c9e:	75 a0       	ST.W      [R6 + #1], R5
..\application\state_machine.c:115
	}
}
    3ca0:	06 5d       	POP       R6
    3ca2:	0d 5d       	POP       LR
    3ca4:	1d 5c       	JMP       LR
    3ca6:	00 00       	NOP      NOP      
    3ca8:	30 3f 00 10 	.long     0x10003f30 ->268451632  [!!!@2@:CMP       R3, #112	@@: MOV       R0, #0
    3cac:	c4 3a 00 00 	.long     0x00003ac4 ->000015044  [!!!@2@:CMP       R12, #36	@@: NOP      
    3cb0:	14 3f 00 10 	.long     0x10003f14 ->268451604  [!!!@2@:CMP       R1, #116	@@: MOV       R0, #0
    3cb4:	ec 3a 00 00 	.long     0x00003aec ->000015084  [!!!@2@:CMP       SP, #44	@@: NOP      
    3cb8:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0
    3cbc:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
    3cc0:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
    3cc4:	a4 3e 00 10 	.long     0x10003ea4 ->268451492  [!!!@2@:CMP       R10, #100	@@: MOV       R0, #0
    3cc8:	f0 dd ff ff 	.long     0xffffddf0 ->-00008720 
    3ccc:	f8 ee ff ff 	.long     0xffffeef8 ->-00004360 
    3cd0:	6c 31 00 00 	.long     0x0000316c ->000012652  [!!!@2@:SUB       R6, #28	@@: NOP      
..\application\state_machine.c:103
	{
		ParkParm.qVdRef = 0;
		ParkParm.qVqRef = 0;
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
		{
		    control_param.start_current_ref = REFINAMPS(USER_INIT_TORQUE);
    3cd4:	03 44       	LD        R4, [PC + #3]         ;->0x3ce0  :=0x2210
    3cd6:	ac b1       	ST.H      [R5 + #6], R4
..\application\state_machine.c:104
		    control_param.current_ref = REFINAMPS(USER_SET_TORQUE);
    3cd8:	03 44       	LD        R4, [PC + #3]         ;->0x3ce4  :=0x1108
    3cda:	ec b1       	ST.H      [R5 + #7], R4
    3cdc:	dc 07       	SJMP      $-36                  ;->0x3c94
    3cde:	00 00       	NOP      NOP      
    3ce0:	10 22 00 00 	.long     0x00002210 ->000008720  [!!!@2@:ST.W      [SP + #16], R2	@@: NOP      
    3ce4:	08 11 00 00 	.long     0x00001108 ->000004360  [!!!@2@:MOV       R0, #24	@@: NOP      

00003ce8 <run_pwm_test_process>:
run_pwm_test_process():
..\application\state_machine.c:118
	    sys_control.state_mode = STATE_RUN_OPEN_LOOP;
	}
}

void run_pwm_test_process(void)
{
    3ce8:	2d 5d       	PUSH      LR
..\application\state_machine.c:119
    set_pwm_duty(USER_PWM_SET_DUTY);
    3cea:	0a 10       	MOV       R0, #10
    3cec:	02 45       	LD        R5, [PC + #2]         ;->0x3cf4  :=0x31b0
    3cee:	05 5c       	LJMP      R5
..\application\state_machine.c:120
}
    3cf0:	0d 5d       	POP       LR
    3cf2:	1d 5c       	JMP       LR
    3cf4:	b0 31 00 00 	.long     0x000031b0 ->000012720  [!!!@2@:SUB       R11, #16	@@: NOP      

00003cf8 <run_open_debug_process>:
run_open_debug_process():
..\application\state_machine.c:123

void run_open_debug_process(void)
{
    3cf8:	81 5f       	PUSH      {R6,LR}
..\application\state_machine.c:124
	if(ParkParm.qVq<ParkParm.qVqRef)
    3cfa:	0c 46       	LD        R6, [PC + #12]        ;->0x3d28  :=0x10003f4c
    3cfc:	a6 aa       	LD.H      R4, [R6 + #10]
    3cfe:	6e ac       	LD.H      R5, [R6 + #17]
    3d00:	44 61       	SXT.H     R4, R4
    3d02:	55 61       	SXT.H     R5, R5
..\application\state_machine.c:126
	{
	    if(Q15abs(ParkParm.qVqRef-ParkParm.qVq)>=USER_CURRENT_ACC)
    3d04:	46 ac       	LD.H      R0, [R6 + #17]
..\application\state_machine.c:124
    set_pwm_duty(USER_PWM_SET_DUTY);
}

void run_open_debug_process(void)
{
	if(ParkParm.qVq<ParkParm.qVqRef)
    3d06:	45 70       	CMP       R4, R5
    3d08:	14 fa       	JGE       $+20                  ;->0x3d30
..\application\state_machine.c:126
	{
	    if(Q15abs(ParkParm.qVqRef-ParkParm.qVq)>=USER_CURRENT_ACC)
    3d0a:	ae aa       	LD.H      R5, [R6 + #10]
    3d0c:	40 c7       	SUB       R0, R0, R5
    3d0e:	00 61       	SXT.H     R0, R0
    3d10:	07 45       	LD        R5, [PC + #7]         ;->0x3d2c  :=0x100004e4
    3d12:	05 5c       	LJMP      R5
    3d14:	09 38       	CMP       R0, #9
    3d16:	05 f9       	JLS       $+5                   ;->0x3d20
..\application\state_machine.c:128
		{
		    ParkParm.qVq += USER_CURRENT_ACC;
    3d18:	ae aa       	LD.H      R5, [R6 + #10]
    3d1a:	5a 28       	ADD       R5, #10
    3d1c:	55 d0       	ZXT.H     R5, R5
    3d1e:	b5 b2       	ST.H      [R6 + #10], R5
..\application\state_machine.c:138
		if(Q15abs(ParkParm.qVqRef-ParkParm.qVq)>=USER_CURRENT_ACC)
		{
		    ParkParm.qVq -= USER_CURRENT_ACC;
		}
	}
}
    3d20:	06 5d       	POP       R6
    3d22:	0d 5d       	POP       LR
    3d24:	1d 5c       	JMP       LR
    3d26:	00 00       	NOP      NOP      
    3d28:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
    3d2c:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x3ef4	@@: MOV       R0, #0
..\application\state_machine.c:133
		    ParkParm.qVq += USER_CURRENT_ACC;
		}
	}
	else
	{
		if(Q15abs(ParkParm.qVqRef-ParkParm.qVq)>=USER_CURRENT_ACC)
    3d30:	ae aa       	LD.H      R5, [R6 + #10]
    3d32:	40 c7       	SUB       R0, R0, R5
    3d34:	00 61       	SXT.H     R0, R0
    3d36:	07 45       	LD        R5, [PC + #7]         ;->0x3d50  :=0x100004e4
    3d38:	05 5c       	LJMP      R5
    3d3a:	09 38       	CMP       R0, #9
    3d3c:	f2 f9       	JLS       $-14                  ;->0x3d20
..\application\state_machine.c:135
		{
		    ParkParm.qVq -= USER_CURRENT_ACC;
    3d3e:	ae aa       	LD.H      R5, [R6 + #10]
    3d40:	55 d0       	ZXT.H     R5, R5
    3d42:	5a 30       	SUB       R5, #10
    3d44:	55 d0       	ZXT.H     R5, R5
    3d46:	b5 b2       	ST.H      [R6 + #10], R5
..\application\state_machine.c:138
		}
	}
}
    3d48:	06 5d       	POP       R6
    3d4a:	0d 5d       	POP       LR
    3d4c:	1d 5c       	JMP       LR
    3d4e:	00 00       	NOP      NOP      
    3d50:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x3f18	@@: MOV       R0, #0

00003d54 <run_open_loop_process>:
run_open_loop_process():
..\application\state_machine.c:141

void run_open_loop_process(void)
{
    3d54:	83 5f       	PUSH      {R6-R7,LR}
..\application\state_machine.c:142
	if(ParkParm.qVqRef<control_param.start_current_ref)
    3d56:	0e 47       	LD        R7, [PC + #14]        ;->0x3d8c  :=0x10003f4c
    3d58:	67 ac       	LD.H      R4, [R7 + #17]
    3d5a:	0e 46       	LD        R6, [PC + #14]        ;->0x3d90  :=0x10003e84
    3d5c:	ae a9       	LD.H      R5, [R6 + #6]
    3d5e:	44 61       	SXT.H     R4, R4
    3d60:	55 61       	SXT.H     R5, R5
..\application\state_machine.c:144
	{
		if(Q15abs(control_param.start_current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    3d62:	86 a9       	LD.H      R0, [R6 + #6]
..\application\state_machine.c:142
	}
}

void run_open_loop_process(void)
{
	if(ParkParm.qVqRef<control_param.start_current_ref)
    3d64:	45 70       	CMP       R4, R5
    3d66:	1b fa       	JGE       $+27                  ;->0x3d9c
..\application\state_machine.c:144
	{
		if(Q15abs(control_param.start_current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    3d68:	6f ac       	LD.H      R5, [R7 + #17]
    3d6a:	40 c7       	SUB       R0, R0, R5
    3d6c:	00 61       	SXT.H     R0, R0
    3d6e:	0a 45       	LD        R5, [PC + #10]        ;->0x3d94  :=0x100004e4
    3d70:	05 5c       	LJMP      R5
    3d72:	09 38       	CMP       R0, #9
    3d74:	21 f8       	JHI       $+33                  ;->0x3db6
..\application\state_machine.c:156
		if(Q15abs(control_param.start_current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
		{
		    ParkParm.qVqRef -= USER_CURRENT_ACC;
		}
	}
	if(control_param.current_step==2)
    3d76:	2e aa       	LD.H      R5, [R6 + #8]
    3d78:	55 61       	SXT.H     R5, R5
    3d7a:	52 38       	CMP       R5, #2
    3d7c:	04 f1       	JNZ       $+4                   ;->0x3d84
..\application\state_machine.c:160
	{
		if(USER_RUN_MODE!=USER_RUN_MODE_OPEN_LOOP)
		{
			sys_control.state_mode = STATE_RUN_CURRENT_LOOP;
    3d7e:	46 10       	MOV       R4, #6
    3d80:	06 45       	LD        R5, [PC + #6]         ;->0x3d98  :=0x10003eb8
    3d82:	6c a0       	ST.W      [R5 + #1], R4
..\application\state_machine.c:163
		}
	}
}
    3d84:	03 5e       	POP       {R6-R7}
    3d86:	0d 5d       	POP       LR
    3d88:	1d 5c       	JMP       LR
    3d8a:	00 00       	NOP      NOP      
    3d8c:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
    3d90:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0
    3d94:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x3f5c	@@: MOV       R0, #0
    3d98:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
..\application\state_machine.c:151
		    ParkParm.qVqRef += USER_CURRENT_ACC;
		}
	}
	else
	{
		if(Q15abs(control_param.start_current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    3d9c:	6f ac       	LD.H      R5, [R7 + #17]
    3d9e:	40 c7       	SUB       R0, R0, R5
    3da0:	00 61       	SXT.H     R0, R0
    3da2:	08 45       	LD        R5, [PC + #8]         ;->0x3dc0  :=0x100004e4
    3da4:	05 5c       	LJMP      R5
    3da6:	09 38       	CMP       R0, #9
    3da8:	e7 f9       	JLS       $-25                  ;->0x3d76
..\application\state_machine.c:153
		{
		    ParkParm.qVqRef -= USER_CURRENT_ACC;
    3daa:	6f ac       	LD.H      R5, [R7 + #17]
    3dac:	55 d0       	ZXT.H     R5, R5
    3dae:	5a 30       	SUB       R5, #10
    3db0:	55 d0       	ZXT.H     R5, R5
    3db2:	7d b4       	ST.H      [R7 + #17], R5
    3db4:	e1 07       	SJMP      $-31                  ;->0x3d76
..\application\state_machine.c:146
{
	if(ParkParm.qVqRef<control_param.start_current_ref)
	{
		if(Q15abs(control_param.start_current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
		{
		    ParkParm.qVqRef += USER_CURRENT_ACC;
    3db6:	6f ac       	LD.H      R5, [R7 + #17]
    3db8:	5a 28       	ADD       R5, #10
    3dba:	55 d0       	ZXT.H     R5, R5
    3dbc:	7d b4       	ST.H      [R7 + #17], R5
    3dbe:	dc 07       	SJMP      $-36                  ;->0x3d76
    3dc0:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x3f88	@@: MOV       R0, #0

00003dc4 <run_current_loop_process>:
run_current_loop_process():
..\application\state_machine.c:168
}



void run_current_loop_process(void)
{
    3dc4:	83 5f       	PUSH      {R6-R7,LR}
..\application\state_machine.c:169
	if(ParkParm.qVqRef<control_param.current_ref)
    3dc6:	13 47       	LD        R7, [PC + #19]        ;->0x3e10  :=0x10003f4c
    3dc8:	67 ac       	LD.H      R4, [R7 + #17]
    3dca:	13 46       	LD        R6, [PC + #19]        ;->0x3e14  :=0x10003e84
    3dcc:	ee a9       	LD.H      R5, [R6 + #7]
    3dce:	44 61       	SXT.H     R4, R4
    3dd0:	55 61       	SXT.H     R5, R5
..\application\state_machine.c:171
	{
		if(Q15abs(control_param.current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    3dd2:	c6 a9       	LD.H      R0, [R6 + #7]
..\application\state_machine.c:169



void run_current_loop_process(void)
{
	if(ParkParm.qVqRef<control_param.current_ref)
    3dd4:	45 70       	CMP       R4, R5
    3dd6:	25 fa       	JGE       $+37                  ;->0x3e20
..\application\state_machine.c:171
	{
		if(Q15abs(control_param.current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    3dd8:	6f ac       	LD.H      R5, [R7 + #17]
    3dda:	40 c7       	SUB       R0, R0, R5
    3ddc:	00 61       	SXT.H     R0, R0
    3dde:	0f 45       	LD        R5, [PC + #15]        ;->0x3e18  :=0x100004e4
    3de0:	05 5c       	LJMP      R5
    3de2:	09 38       	CMP       R0, #9
    3de4:	2b f8       	JHI       $+43                  ;->0x3e3a
..\application\state_machine.c:185
		    ParkParm.qVqRef -= USER_CURRENT_ACC;
		}
	}
	if(USER_RUN_MODE==USER_RUN_MODE_SPEED_LOOP)
	{
	    control_param.current_loop_count++;
    3de6:	ee ad       	LD.H      R5, [R6 + #23]
    3de8:	6d c0       	ADD       R5, R5, #1
    3dea:	55 d0       	ZXT.H     R5, R5
    3dec:	f5 b5       	ST.H      [R6 + #23], R5
..\application\state_machine.c:186
	    if(control_param.current_loop_count>control_param.current_loop_time)
    3dee:	e6 ad       	LD.H      R4, [R6 + #23]
    3df0:	2e ae       	LD.H      R5, [R6 + #24]
    3df2:	44 61       	SXT.H     R4, R4
    3df4:	55 61       	SXT.H     R5, R5
    3df6:	45 70       	CMP       R4, R5
    3df8:	09 fd       	JLE       $+9                   ;->0x3e0a
..\application\state_machine.c:188
	    {
		    control_param.current_loop_count = 0;
    3dfa:	40 10       	MOV       R4, #0
    3dfc:	06 45       	LD        R5, [PC + #6]         ;->0x3e14  :=0x10003e84
    3dfe:	ec b5       	ST.H      [R5 + #23], R4
..\application\state_machine.c:189
		    sys_control.speed_mode = SPEED_STATE_INIT;
    3e00:	07 45       	LD        R5, [PC + #7]         ;->0x3e1c  :=0x10003eb8
    3e02:	40 10       	MOV       R4, #0
    3e04:	ac a0       	ST.W      [R5 + #2], R4
..\application\state_machine.c:190
	        sys_control.state_mode = STATE_RUN_SPEED_LOOP;
    3e06:	47 10       	MOV       R4, #7
    3e08:	6c a0       	ST.W      [R5 + #1], R4
..\application\state_machine.c:193
	    }
	}
}
    3e0a:	03 5e       	POP       {R6-R7}
    3e0c:	0d 5d       	POP       LR
    3e0e:	1d 5c       	JMP       LR
    3e10:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
    3e14:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0
    3e18:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x3fe0	@@: MOV       R0, #0
    3e1c:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
..\application\state_machine.c:178
		    ParkParm.qVqRef += USER_CURRENT_ACC;
		}
	}
	else
	{
		if(Q15abs(control_param.current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
    3e20:	6f ac       	LD.H      R5, [R7 + #17]
    3e22:	40 c7       	SUB       R0, R0, R5
    3e24:	00 61       	SXT.H     R0, R0
    3e26:	08 45       	LD        R5, [PC + #8]         ;->0x3e44  :=0x100004e4
    3e28:	05 5c       	LJMP      R5
    3e2a:	09 38       	CMP       R0, #9
    3e2c:	dd f9       	JLS       $-35                  ;->0x3de6
..\application\state_machine.c:180
		{
		    ParkParm.qVqRef -= USER_CURRENT_ACC;
    3e2e:	6f ac       	LD.H      R5, [R7 + #17]
    3e30:	55 d0       	ZXT.H     R5, R5
    3e32:	5a 30       	SUB       R5, #10
    3e34:	55 d0       	ZXT.H     R5, R5
    3e36:	7d b4       	ST.H      [R7 + #17], R5
    3e38:	d7 07       	SJMP      $-41                  ;->0x3de6
..\application\state_machine.c:173
{
	if(ParkParm.qVqRef<control_param.current_ref)
	{
		if(Q15abs(control_param.current_ref-ParkParm.qVqRef)>=USER_CURRENT_ACC)
		{
		    ParkParm.qVqRef += USER_CURRENT_ACC;
    3e3a:	6f ac       	LD.H      R5, [R7 + #17]
    3e3c:	5a 28       	ADD       R5, #10
    3e3e:	55 d0       	ZXT.H     R5, R5
    3e40:	7d b4       	ST.H      [R7 + #17], R5
    3e42:	d2 07       	SJMP      $-46                  ;->0x3de6
    3e44:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x400c	@@: MOV       R0, #0

00003e48 <state_machine>:
state_machine():
..\application\state_machine.c:20

int16_t run_mode;

//execute in main loop 1ms task
void state_machine(void)
{
    3e48:	81 5f       	PUSH      {R6,LR}
..\application\state_machine.c:21
	switch(sys_control.state_mode)
    3e4a:	08 46       	LD        R6, [PC + #8]         ;->0x3e68  :=0x10003eb8
    3e4c:	6e 98       	LD.W      R5, [R6 + #1]
    3e4e:	58 38       	CMP       R5, #8
    3e50:	12 f9       	JLS       $+18                  ;->0x3e74
..\application\state_machine.c:31
	case STATE_RUN_OPEN_DEBUG:           run_open_debug_process();      break;
	case STATE_RUN_OPEN_LOOP:            run_open_loop_process();       break;
	case STATE_RUN_CURRENT_LOOP:         run_current_loop_process();    break;
	case STATE_RUN_SPEED_LOOP:           run_speed_loop_process();      break;
	case STATE_FAULT:                    run_fault_process();           break;
	default: sys_control.state_mode = STATE_IDLE;
    3e52:	50 10       	MOV       R5, #0
    3e54:	75 a0       	ST.W      [R6 + #1], R5
..\application\state_machine.c:33
	}
	state_machine_transition();
    3e56:	06 45       	LD        R5, [PC + #6]         ;->0x3e6c  :=0x3c04
    3e58:	05 5c       	LJMP      R5
..\application\state_machine.c:34
	run_mode = (int16_t)sys_control.state_mode;
    3e5a:	66 98       	LD.W      R4, [R6 + #1]
    3e5c:	05 45       	LD        R5, [PC + #5]         ;->0x3e70  :=0x10003fb8
    3e5e:	54 84       	ST.H      [R5], R4
..\application\state_machine.c:35
}
    3e60:	06 5d       	POP       R6
    3e62:	0d 5d       	POP       LR
    3e64:	1d 5c       	JMP       LR
    3e66:	00 00       	NOP      NOP      
    3e68:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
    3e6c:	04 3c 00 00 	.long     0x00003c04 ->000015364  [!!!@2@:CMP       R0, #68	@@: NOP      
    3e70:	b8 3f 00 10 	.long     0x10003fb8 ->268451768  [!!!@2@:CMP       R11, #120	@@: MOV       R0, #0
..\application\state_machine.c:21
int16_t run_mode;

//execute in main loop 1ms task
void state_machine(void)
{
	switch(sys_control.state_mode)
    3e74:	2a 7a       	LSL       R5, #2
    3e76:	02 44       	LD        R4, [PC + #2]         ;->0x3e7c  :=0x3e80
    3e78:	6c e9       	LD.W      R5, [R4 + R5]
    3e7a:	15 5c       	JMP       R5
    3e7c:	80 3e 00 00 	.long     0x00003e80 ->000016000  [!!!@2@:CMP       R8, #96	@@: NOP      

00003e80 <.text$state_machine$sdata_local_1>:
    3e80:	c4 3e 00 00 d2 3e 00 00 f8 3e 00 00 52 3e 00 00     .>...>...>..R>..
    3e90:	18 3f 00 00 38 3f 00 00 58 3f 00 00 a4 3e 00 00     .?..8?..X?...>..
    3ea0:	56 3e 00 00                                         V>..

00003ea4 <.text$state_machine$scode_loacal_9>:
..\application\state_machine.c:197
	}
}

void run_speed_loop_process(void)
{
    speed_state_machine();
    3ea4:	05 45       	LD        R5, [PC + #5]         ;->0x3eb8  :=0x3bd8
    3ea6:	05 5c       	LJMP      R5
..\application\state_machine.c:33
	case STATE_RUN_CURRENT_LOOP:         run_current_loop_process();    break;
	case STATE_RUN_SPEED_LOOP:           run_speed_loop_process();      break;
	case STATE_FAULT:                    run_fault_process();           break;
	default: sys_control.state_mode = STATE_IDLE;
	}
	state_machine_transition();
    3ea8:	05 45       	LD        R5, [PC + #5]         ;->0x3ebc  :=0x3c04
    3eaa:	05 5c       	LJMP      R5
..\application\state_machine.c:34
	run_mode = (int16_t)sys_control.state_mode;
    3eac:	66 98       	LD.W      R4, [R6 + #1]
    3eae:	05 45       	LD        R5, [PC + #5]         ;->0x3ec0  :=0x10003fb8
    3eb0:	54 84       	ST.H      [R5], R4
..\application\state_machine.c:35
}
    3eb2:	06 5d       	POP       R6
    3eb4:	0d 5d       	POP       LR
    3eb6:	1d 5c       	JMP       LR
    3eb8:	d8 3b 00 00 	.long     0x00003bd8 ->000015320  [!!!@2@:CMP       LR, #56	@@: NOP      
    3ebc:	04 3c 00 00 	.long     0x00003c04 ->000015364  [!!!@2@:CMP       R0, #68	@@: NOP      
    3ec0:	b8 3f 00 10 	.long     0x10003fb8 ->268451768  [!!!@2@:CMP       R11, #120	@@: MOV       R0, #0
..\application\state_machine.c:55
    }
}

void run_idle_process(void)
{
	if(sys_control.sys_enable_flag==TRUE)
    3ec4:	09 43       	LD        R3, [PC + #9]         ;->0x3ee8  :=0x10003eb8
    3ec6:	46 80       	LD.B      R4, [R6]
    3ec8:	41 38       	CMP       R4, #1
    3eca:	c6 f1       	JNZ       $-58                  ;->0x3e56
..\application\state_machine.c:57
	{
		sys_control.state_change_flag = 1;
    3ecc:	5c 90       	ST.B      [R3 + #1], R4
..\application\state_machine.c:65
			pwm_enable();
			sys_control.state_mode = STATE_RUN_PWM_TEST;
		}
		else
		{
			sys_control.state_mode = STATE_PARAM_SET;
    3ece:	5c a0       	ST.W      [R3 + #1], R4
    3ed0:	c3 07       	SJMP      $-61                  ;->0x3e56
..\application\state_machine.c:24
void state_machine(void)
{
	switch(sys_control.state_mode)
	{
	case STATE_IDLE:                     run_idle_process();            break;
	case STATE_PARAM_SET:                run_param_set_process();       break;
    3ed2:	07 45       	LD        R5, [PC + #7]         ;->0x3eec  :=0x3c54
    3ed4:	05 5c       	LJMP      R5
..\application\state_machine.c:33
	case STATE_RUN_CURRENT_LOOP:         run_current_loop_process();    break;
	case STATE_RUN_SPEED_LOOP:           run_speed_loop_process();      break;
	case STATE_FAULT:                    run_fault_process();           break;
	default: sys_control.state_mode = STATE_IDLE;
	}
	state_machine_transition();
    3ed6:	07 45       	LD        R5, [PC + #7]         ;->0x3ef0  :=0x3c04
    3ed8:	05 5c       	LJMP      R5
..\application\state_machine.c:34
	run_mode = (int16_t)sys_control.state_mode;
    3eda:	66 98       	LD.W      R4, [R6 + #1]
    3edc:	06 45       	LD        R5, [PC + #6]         ;->0x3ef4  :=0x10003fb8
    3ede:	54 84       	ST.H      [R5], R4
..\application\state_machine.c:35
}
    3ee0:	06 5d       	POP       R6
    3ee2:	0d 5d       	POP       LR
    3ee4:	1d 5c       	JMP       LR
    3ee6:	00 00       	NOP      NOP      
    3ee8:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
    3eec:	54 3c 00 00 	.long     0x00003c54 ->000015444  [!!!@2@:CMP       R5, #68	@@: NOP      
    3ef0:	04 3c 00 00 	.long     0x00003c04 ->000015364  [!!!@2@:CMP       R0, #68	@@: NOP      
    3ef4:	b8 3f 00 10 	.long     0x10003fb8 ->268451768  [!!!@2@:CMP       R11, #120	@@: MOV       R0, #0
..\application\state_machine.c:25
{
	switch(sys_control.state_mode)
	{
	case STATE_IDLE:                     run_idle_process();            break;
	case STATE_PARAM_SET:                run_param_set_process();       break;
	case STATE_RUN_PWM_TEST:             run_pwm_test_process();        break;
    3ef8:	05 45       	LD        R5, [PC + #5]         ;->0x3f0c  :=0x3ce8
    3efa:	05 5c       	LJMP      R5
..\application\state_machine.c:33
	case STATE_RUN_CURRENT_LOOP:         run_current_loop_process();    break;
	case STATE_RUN_SPEED_LOOP:           run_speed_loop_process();      break;
	case STATE_FAULT:                    run_fault_process();           break;
	default: sys_control.state_mode = STATE_IDLE;
	}
	state_machine_transition();
    3efc:	05 45       	LD        R5, [PC + #5]         ;->0x3f10  :=0x3c04
    3efe:	05 5c       	LJMP      R5
..\application\state_machine.c:34
	run_mode = (int16_t)sys_control.state_mode;
    3f00:	66 98       	LD.W      R4, [R6 + #1]
    3f02:	05 45       	LD        R5, [PC + #5]         ;->0x3f14  :=0x10003fb8
    3f04:	54 84       	ST.H      [R5], R4
..\application\state_machine.c:35
}
    3f06:	06 5d       	POP       R6
    3f08:	0d 5d       	POP       LR
    3f0a:	1d 5c       	JMP       LR
    3f0c:	e8 3c 00 00 	.long     0x00003ce8 ->000015592  [!!!@2@:CMP       SP, #72	@@: NOP      
    3f10:	04 3c 00 00 	.long     0x00003c04 ->000015364  [!!!@2@:CMP       R0, #68	@@: NOP      
    3f14:	b8 3f 00 10 	.long     0x10003fb8 ->268451768  [!!!@2@:CMP       R11, #120	@@: MOV       R0, #0
..\application\state_machine.c:26
	switch(sys_control.state_mode)
	{
	case STATE_IDLE:                     run_idle_process();            break;
	case STATE_PARAM_SET:                run_param_set_process();       break;
	case STATE_RUN_PWM_TEST:             run_pwm_test_process();        break;
	case STATE_RUN_OPEN_DEBUG:           run_open_debug_process();      break;
    3f18:	05 45       	LD        R5, [PC + #5]         ;->0x3f2c  :=0x3cf8
    3f1a:	05 5c       	LJMP      R5
..\application\state_machine.c:33
	case STATE_RUN_CURRENT_LOOP:         run_current_loop_process();    break;
	case STATE_RUN_SPEED_LOOP:           run_speed_loop_process();      break;
	case STATE_FAULT:                    run_fault_process();           break;
	default: sys_control.state_mode = STATE_IDLE;
	}
	state_machine_transition();
    3f1c:	05 45       	LD        R5, [PC + #5]         ;->0x3f30  :=0x3c04
    3f1e:	05 5c       	LJMP      R5
..\application\state_machine.c:34
	run_mode = (int16_t)sys_control.state_mode;
    3f20:	66 98       	LD.W      R4, [R6 + #1]
    3f22:	05 45       	LD        R5, [PC + #5]         ;->0x3f34  :=0x10003fb8
    3f24:	54 84       	ST.H      [R5], R4
..\application\state_machine.c:35
}
    3f26:	06 5d       	POP       R6
    3f28:	0d 5d       	POP       LR
    3f2a:	1d 5c       	JMP       LR
    3f2c:	f8 3c 00 00 	.long     0x00003cf8 ->000015608  [!!!@2@:CMP       PC, #72	@@: NOP      
    3f30:	04 3c 00 00 	.long     0x00003c04 ->000015364  [!!!@2@:CMP       R0, #68	@@: NOP      
    3f34:	b8 3f 00 10 	.long     0x10003fb8 ->268451768  [!!!@2@:CMP       R11, #120	@@: MOV       R0, #0
..\application\state_machine.c:27
	{
	case STATE_IDLE:                     run_idle_process();            break;
	case STATE_PARAM_SET:                run_param_set_process();       break;
	case STATE_RUN_PWM_TEST:             run_pwm_test_process();        break;
	case STATE_RUN_OPEN_DEBUG:           run_open_debug_process();      break;
	case STATE_RUN_OPEN_LOOP:            run_open_loop_process();       break;
    3f38:	05 45       	LD        R5, [PC + #5]         ;->0x3f4c  :=0x3d54
    3f3a:	05 5c       	LJMP      R5
..\application\state_machine.c:33
	case STATE_RUN_CURRENT_LOOP:         run_current_loop_process();    break;
	case STATE_RUN_SPEED_LOOP:           run_speed_loop_process();      break;
	case STATE_FAULT:                    run_fault_process();           break;
	default: sys_control.state_mode = STATE_IDLE;
	}
	state_machine_transition();
    3f3c:	05 45       	LD        R5, [PC + #5]         ;->0x3f50  :=0x3c04
    3f3e:	05 5c       	LJMP      R5
..\application\state_machine.c:34
	run_mode = (int16_t)sys_control.state_mode;
    3f40:	66 98       	LD.W      R4, [R6 + #1]
    3f42:	05 45       	LD        R5, [PC + #5]         ;->0x3f54  :=0x10003fb8
    3f44:	54 84       	ST.H      [R5], R4
..\application\state_machine.c:35
}
    3f46:	06 5d       	POP       R6
    3f48:	0d 5d       	POP       LR
    3f4a:	1d 5c       	JMP       LR
    3f4c:	54 3d 00 00 	.long     0x00003d54 ->000015700  [!!!@2@:CMP       R5, #84	@@: NOP      
    3f50:	04 3c 00 00 	.long     0x00003c04 ->000015364  [!!!@2@:CMP       R0, #68	@@: NOP      
    3f54:	b8 3f 00 10 	.long     0x10003fb8 ->268451768  [!!!@2@:CMP       R11, #120	@@: MOV       R0, #0
..\application\state_machine.c:28
	case STATE_IDLE:                     run_idle_process();            break;
	case STATE_PARAM_SET:                run_param_set_process();       break;
	case STATE_RUN_PWM_TEST:             run_pwm_test_process();        break;
	case STATE_RUN_OPEN_DEBUG:           run_open_debug_process();      break;
	case STATE_RUN_OPEN_LOOP:            run_open_loop_process();       break;
	case STATE_RUN_CURRENT_LOOP:         run_current_loop_process();    break;
    3f58:	05 45       	LD        R5, [PC + #5]         ;->0x3f6c  :=0x3dc4
    3f5a:	05 5c       	LJMP      R5
..\application\state_machine.c:33
	case STATE_RUN_SPEED_LOOP:           run_speed_loop_process();      break;
	case STATE_FAULT:                    run_fault_process();           break;
	default: sys_control.state_mode = STATE_IDLE;
	}
	state_machine_transition();
    3f5c:	05 45       	LD        R5, [PC + #5]         ;->0x3f70  :=0x3c04
    3f5e:	05 5c       	LJMP      R5
..\application\state_machine.c:34
	run_mode = (int16_t)sys_control.state_mode;
    3f60:	66 98       	LD.W      R4, [R6 + #1]
    3f62:	05 45       	LD        R5, [PC + #5]         ;->0x3f74  :=0x10003fb8
    3f64:	54 84       	ST.H      [R5], R4
..\application\state_machine.c:35
}
    3f66:	06 5d       	POP       R6
    3f68:	0d 5d       	POP       LR
    3f6a:	1d 5c       	JMP       LR
    3f6c:	c4 3d 00 00 	.long     0x00003dc4 ->000015812  [!!!@2@:CMP       R12, #84	@@: NOP      
    3f70:	04 3c 00 00 	.long     0x00003c04 ->000015364  [!!!@2@:CMP       R0, #68	@@: NOP      
    3f74:	b8 3f 00 10 	.long     0x10003fb8 ->268451768  [!!!@2@:CMP       R11, #120	@@: MOV       R0, #0

00003f78 <motor_start_process>:
motor_start_process():
..\application\task.c:47
		LED3_TOGGLE;
	}
}

void motor_start_process(void)
{
    3f78:	81 5f       	PUSH      {R6,LR}
..\application\task.c:48
	if(READ_KEY1==KEY_ON&&sys_control.sys_enable_flag==FALSE&&control_param.start_count>50)
    3f7a:	10 40       	LD        R0, [PC + #16]        ;->0x3fb8  :=0x50000180
    3f7c:	11 10       	MOV       R1, #1
    3f7e:	8f 7a       	LSL       R1, #15
    3f80:	0f 46       	LD        R6, [PC + #15]        ;->0x3fbc  :=0x173c
    3f82:	06 5c       	LJMP      R6
    3f84:	00 38       	CMP       R0, #0
    3f86:	05 f1       	JNZ       $+5                   ;->0x3f90
    3f88:	0e 45       	LD        R5, [PC + #14]        ;->0x3fc0  :=0x10003eb8
    3f8a:	45 80       	LD.B      R4, [R5]
    3f8c:	40 38       	CMP       R4, #0
    3f8e:	1b f0       	JZ        $+27                  ;->0x3fc4
..\application\task.c:53
	{
		control_param.start_count = 0;
		sys_control.sys_enable_flag = TRUE;
	}
	if(READ_KEY1==KEY_ON&&sys_control.sys_enable_flag==TRUE&&control_param.start_count>50)
    3f90:	0a 40       	LD        R0, [PC + #10]        ;->0x3fb8  :=0x50000180
    3f92:	11 10       	MOV       R1, #1
    3f94:	8f 7a       	LSL       R1, #15
    3f96:	06 5c       	LJMP      R6
    3f98:	00 38       	CMP       R0, #0
    3f9a:	05 f1       	JNZ       $+5                   ;->0x3fa4
    3f9c:	09 45       	LD        R5, [PC + #9]         ;->0x3fc0  :=0x10003eb8
    3f9e:	45 80       	LD.B      R4, [R5]
    3fa0:	41 38       	CMP       R4, #1
    3fa2:	29 f0       	JZ        $+41                  ;->0x3ff4
..\application\task.c:58
	{
		control_param.start_count = 0;
		sys_control.sys_enable_flag = FALSE;
	}
	else if(READ_KEY1==KEY_OFF&&control_param.start_count<100)
    3fa4:	05 40       	LD        R0, [PC + #5]         ;->0x3fb8  :=0x50000180
    3fa6:	11 10       	MOV       R1, #1
    3fa8:	8f 7a       	LSL       R1, #15
    3faa:	06 5c       	LJMP      R6
    3fac:	01 38       	CMP       R0, #1
    3fae:	14 f0       	JZ        $+20                  ;->0x3fd6
..\application\task.c:62
	{
		control_param.start_count++;
	}
}
    3fb0:	06 5d       	POP       R6
    3fb2:	0d 5d       	POP       LR
    3fb4:	1d 5c       	JMP       LR
    3fb6:	00 00       	NOP      NOP      
    3fb8:	80 01 00 50 	.long     0x50000180 ->1342177664  [!!!@2@:CMN       R8, R0	@@: JB        [R0], #0
    3fbc:	3c 17 00 00 	.long     0x0000173c ->000005948  [!!!@2@:MOV       R3, #124	@@: NOP      
    3fc0:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
..\application\task.c:48
	}
}

void motor_start_process(void)
{
	if(READ_KEY1==KEY_ON&&sys_control.sys_enable_flag==FALSE&&control_param.start_count>50)
    3fc4:	0b 43       	LD        R3, [PC + #11]        ;->0x3ff0  :=0x10003e84
    3fc6:	23 81       	LD.H      R2, [R3]
    3fc8:	22 61       	SXT.H     R2, R2
    3fca:	22 3b       	CMP       R2, #50
    3fcc:	e2 fd       	JLE       $-30                  ;->0x3f90
..\application\task.c:50
	{
		control_param.start_count = 0;
    3fce:	34 84       	ST.H      [R3], R4
..\application\task.c:51
		sys_control.sys_enable_flag = TRUE;
    3fd0:	41 10       	MOV       R4, #1
    3fd2:	54 83       	ST.B      [R5], R4
    3fd4:	de 07       	SJMP      $-34                  ;->0x3f90
..\application\task.c:58
	if(READ_KEY1==KEY_ON&&sys_control.sys_enable_flag==TRUE&&control_param.start_count>50)
	{
		control_param.start_count = 0;
		sys_control.sys_enable_flag = FALSE;
	}
	else if(READ_KEY1==KEY_OFF&&control_param.start_count<100)
    3fd6:	07 45       	LD        R5, [PC + #7]         ;->0x3ff0  :=0x10003e84
    3fd8:	45 81       	LD.H      R4, [R5]
    3fda:	44 61       	SXT.H     R4, R4
    3fdc:	43 3e       	CMP       R4, #99
    3fde:	e9 fc       	JGT       $-23                  ;->0x3fb0
..\application\task.c:60
	{
		control_param.start_count++;
    3fe0:	45 81       	LD.H      R4, [R5]
    3fe2:	64 c0       	ADD       R4, R4, #1
    3fe4:	44 d0       	ZXT.H     R4, R4
    3fe6:	54 84       	ST.H      [R5], R4
..\application\task.c:62
	}
}
    3fe8:	06 5d       	POP       R6
    3fea:	0d 5d       	POP       LR
    3fec:	1d 5c       	JMP       LR
    3fee:	00 00       	NOP      NOP      
    3ff0:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0
..\application\task.c:53
	if(READ_KEY1==KEY_ON&&sys_control.sys_enable_flag==FALSE&&control_param.start_count>50)
	{
		control_param.start_count = 0;
		sys_control.sys_enable_flag = TRUE;
	}
	if(READ_KEY1==KEY_ON&&sys_control.sys_enable_flag==TRUE&&control_param.start_count>50)
    3ff4:	04 44       	LD        R4, [PC + #4]         ;->0x4004  :=0x10003e84
    3ff6:	34 81       	LD.H      R3, [R4]
    3ff8:	33 61       	SXT.H     R3, R3
    3ffa:	32 3b       	CMP       R3, #50
    3ffc:	d4 fd       	JLE       $-44                  ;->0x3fa4
..\application\task.c:55
	{
		control_param.start_count = 0;
    3ffe:	40 84       	ST.H      [R4], R0
..\application\task.c:56
		sys_control.sys_enable_flag = FALSE;
    4000:	50 83       	ST.B      [R5], R0
    4002:	d7 07       	SJMP      $-41                  ;->0x3fb0
    4004:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0

00004008 <task_process>:
task_process():
..\application\task.c:10

void motor_start_process(void);
void pot_process(void);

void task_process(void)
{
    4008:	81 5f       	PUSH      {R6,LR}
..\application\task.c:13
	//communication
#if(USER_DEBUG_TOOL_SELECT==USER_DEBUG_TOOL_ON)
	commu_task();
    400a:	12 45       	LD        R5, [PC + #18]        ;->0x4050  :=0x38c8
    400c:	05 5c       	LJMP      R5
..\application\task.c:16
#endif
	//1ms task
	if(time_count.time_1ms_count>=TIME_1MS_COUNT)
    400e:	12 46       	LD        R6, [PC + #18]        ;->0x4054  :=0x10001b28
    4010:	56 81       	LD.H      R5, [R6]
    4012:	55 d0       	ZXT.H     R5, R5
    4014:	50 38       	CMP       R5, #0
    4016:	25 f1       	JNZ       $+37                  ;->0x4060
..\application\task.c:24
		//process
        state_machine();
        alarm_process();
	}
	//10ms task
	if(time_count.time_10ms_count>=TIME_10MS_COUNT)
    4018:	6e a8       	LD.H      R5, [R6 + #1]
    401a:	55 d0       	ZXT.H     R5, R5
    401c:	59 38       	CMP       R5, #9
    401e:	2b f8       	JHI       $+43                  ;->0x4074
..\application\task.c:32
		//process
		motor_start_process();

	}
	//100ms task
	if(time_count.time_100ms_count>=TIME_100MS_COUNT)
    4020:	ae a8       	LD.H      R5, [R6 + #2]
    4022:	55 d0       	ZXT.H     R5, R5
    4024:	53 3e       	CMP       R5, #99
    4026:	04 f9       	JLS       $+4                   ;->0x402e
..\application\task.c:34
	{
        time_count.time_100ms_count = 0;
    4028:	40 10       	MOV       R4, #0
    402a:	0b 45       	LD        R5, [PC + #11]        ;->0x4054  :=0x10001b28
    402c:	ac b0       	ST.H      [R5 + #2], R4
..\application\task.c:38
        //process
	}
	//1s task
	if(time_count.time_1s_count>=TIME_1S_COUNT)
    402e:	e6 a8       	LD.H      R4, [R6 + #3]
    4030:	44 d0       	ZXT.H     R4, R4
    4032:	0a 45       	LD        R5, [PC + #10]        ;->0x4058  :=0x3e7
    4034:	45 70       	CMP       R4, R5
    4036:	0a f9       	JLS       $+10                  ;->0x404a
..\application\task.c:40
	{
		time_count.time_1s_count = 0;
    4038:	40 10       	MOV       R4, #0
    403a:	07 45       	LD        R5, [PC + #7]         ;->0x4054  :=0x10001b28
    403c:	ec b0       	ST.H      [R5 + #3], R4
..\application\task.c:42
		//process
		LED3_TOGGLE;
    403e:	08 45       	LD        R5, [PC + #8]         ;->0x405c  :=0x50000040
    4040:	5d 98       	LD.W      R3, [R5 + #1]
    4042:	41 10       	MOV       R4, #1
    4044:	a5 7a       	LSL       R4, #13
    4046:	23 d9       	XRL       R4, R3, R4
    4048:	6c a0       	ST.W      [R5 + #1], R4
..\application\task.c:44
	}
}
    404a:	06 5d       	POP       R6
    404c:	0d 5d       	POP       LR
    404e:	1d 5c       	JMP       LR
    4050:	c8 38 00 00 	.long     0x000038c8 ->000014536  [!!!@2@:CMP       R12, #8	@@: NOP      
    4054:	28 1b 00 10 	.long     0x10001b28 ->268442408  [!!!@2@:MOV       R2, #184	@@: MOV       R0, #0
    4058:	e7 03 00 00 	.long     0x000003e7 ->000000999  [!!!@4@:JMP       $-1638400             ;->0xffce4058
    405c:	40 00 00 50 	.long     0x50000040 ->1342177344 
..\application\task.c:18
	commu_task();
#endif
	//1ms task
	if(time_count.time_1ms_count>=TIME_1MS_COUNT)
	{
		time_count.time_1ms_count = 0;
    4060:	50 10       	MOV       R5, #0
    4062:	65 84       	ST.H      [R6], R5
..\application\task.c:20
		//process
        state_machine();
    4064:	07 45       	LD        R5, [PC + #7]         ;->0x4080  :=0x3e48
    4066:	05 5c       	LJMP      R5
..\application\task.c:21
        alarm_process();
    4068:	07 45       	LD        R5, [PC + #7]         ;->0x4084  :=0x3734
    406a:	05 5c       	LJMP      R5
..\application\task.c:24
	}
	//10ms task
	if(time_count.time_10ms_count>=TIME_10MS_COUNT)
    406c:	6e a8       	LD.H      R5, [R6 + #1]
    406e:	55 d0       	ZXT.H     R5, R5
    4070:	59 38       	CMP       R5, #9
    4072:	d7 f9       	JLS       $-41                  ;->0x4020
..\application\task.c:26
	{
		time_count.time_10ms_count = 0;
    4074:	40 10       	MOV       R4, #0
    4076:	05 45       	LD        R5, [PC + #5]         ;->0x4088  :=0x10001b28
    4078:	6c b0       	ST.H      [R5 + #1], R4
..\application\task.c:28
		//process
		motor_start_process();
    407a:	05 45       	LD        R5, [PC + #5]         ;->0x408c  :=0x3f78
    407c:	05 5c       	LJMP      R5
    407e:	d1 07       	SJMP      $-47                  ;->0x4020
    4080:	48 3e 00 00 	.long     0x00003e48 ->000015944  [!!!@2@:CMP       R4, #104	@@: NOP      
    4084:	34 37 00 00 	.long     0x00003734 ->000014132  [!!!@2@:SUB       R3, #116	@@: NOP      
    4088:	28 1b 00 10 	.long     0x10001b28 ->268442408  [!!!@2@:MOV       R2, #184	@@: MOV       R0, #0
    408c:	78 3f 00 00 	.long     0x00003f78 ->000016248  [!!!@2@:CMP       R7, #120	@@: NOP      

00004090 <startup>:
startup():
..\_config\startup.c:20
#endif
//####################################################################//
extern int main();
//####################################################################//
void startup()
{
    4090:	2d 5d       	PUSH      LR
..\_config\startup.c:27
#ifdef  Project_Type__cplusplus
	void (*pf)(void);
#endif
//############# 		init work for the chip 		    #############//
//	HWREG(0x40000000)=1;
	HWREG(0x40000000)=0;
    4092:	40 10       	MOV       R4, #0
    4094:	51 10       	MOV       R5, #1
    4096:	ae 7b       	LSL       R5, #30
    4098:	54 85       	ST.W      [R5], R4
..\_config\startup.c:32
//############# init variable who have initialization	#############//
	s = (unsigned int*)&__text_end__;		
	begin = (unsigned int*)&__data_start__;
	end = (unsigned int*)&__bss_start__;
	while(begin < end)
    409a:	12 45       	LD        R5, [PC + #18]        ;->0x40e0  :=0x10000000
    409c:	12 41       	LD        R1, [PC + #18]        ;->0x40e4  :=0x10001d40
    409e:	15 70       	CMP       R1, R5
    40a0:	0d f9       	JLS       $+13                  ;->0x40ba
    40a2:	12 44       	LD        R4, [PC + #18]        ;->0x40e8  :=0x6a8c
..\_config\startup.c:19
extern unsigned int __init_class_end;
#endif
//####################################################################//
extern int main();
//####################################################################//
void startup()
    40a4:	12 43       	LD        R3, [PC + #18]        ;->0x40ec  :=0x10000004
    40a6:	13 42       	LD        R2, [PC + #19]        ;->0x40f0  :=0x10001d43
    40a8:	d2 c6       	SUB       R2, R2, R3
    40aa:	12 7c       	LSR       R2, #2
    40ac:	52 c0       	ADD       R2, R2, #1
    40ae:	12 7a       	LSL       R2, #2
    40b0:	52 c3       	ADD       R2, R2, R5
..\_config\startup.c:33
//############# init variable who have initialization	#############//
	s = (unsigned int*)&__text_end__;		
	begin = (unsigned int*)&__data_start__;
	end = (unsigned int*)&__bss_start__;
	while(begin < end)
		*begin++ = *s++;
    40b2:	34 72       	LD.W      R3, [R4++]
    40b4:	53 73       	ST.W      [R5++], R3
..\_config\startup.c:32
	HWREG(0x40000000)=0;
//############# init variable who have initialization	#############//
	s = (unsigned int*)&__text_end__;		
	begin = (unsigned int*)&__data_start__;
	end = (unsigned int*)&__bss_start__;
	while(begin < end)
    40b6:	52 70       	CMP       R5, R2
    40b8:	fd f1       	JNZ       $-3                   ;->0x40b2
..\_config\startup.c:48
#endif		
//############# init variable who have no initialization	#############//
#if 1	 //  0 not init this type variable
	begin = (unsigned int*)&__bss_start__;
	end = (unsigned int*)&__bss_end__;
	while(begin < end)
    40ba:	0b 45       	LD        R5, [PC + #11]        ;->0x40e4  :=0x10001d40
    40bc:	0e 44       	LD        R4, [PC + #14]        ;->0x40f4  :=0x10003fd0
    40be:	41 70       	CMP       R4, R1
    40c0:	0c f9       	JLS       $+12                  ;->0x40d8
..\_config\startup.c:19
extern unsigned int __init_class_end;
#endif
//####################################################################//
extern int main();
//####################################################################//
void startup()
    40c2:	0e 44       	LD        R4, [PC + #14]        ;->0x40f8  :=0x10001d44
    40c4:	0e 43       	LD        R3, [PC + #14]        ;->0x40fc  :=0x10003fd3
    40c6:	1b c7       	SUB       R3, R3, R4
    40c8:	1a 7c       	LSR       R3, #2
    40ca:	5b c0       	ADD       R3, R3, #1
    40cc:	1a 7a       	LSL       R3, #2
    40ce:	5b c3       	ADD       R3, R3, R5
..\_config\startup.c:49
//############# init variable who have no initialization	#############//
#if 1	 //  0 not init this type variable
	begin = (unsigned int*)&__bss_start__;
	end = (unsigned int*)&__bss_end__;
	while(begin < end)
		*begin++ = 0;
    40d0:	40 10       	MOV       R4, #0
    40d2:	54 73       	ST.W      [R5++], R4
..\_config\startup.c:48
#endif		
//############# init variable who have no initialization	#############//
#if 1	 //  0 not init this type variable
	begin = (unsigned int*)&__bss_start__;
	end = (unsigned int*)&__bss_end__;
	while(begin < end)
    40d4:	53 70       	CMP       R5, R3
    40d6:	fe f1       	JNZ       $-2                   ;->0x40d2
..\_config\startup.c:52
		*begin++ = 0;
#endif		
//############# begin to run main function	#############//		
	main();
    40d8:	0a 40       	LD        R0, [PC + #10]        ;->0x4100  :=0x4104
    40da:	00 5c       	LJMP      R0
..\_config\startup.c:53
}
    40dc:	0d 5d       	POP       LR
    40de:	1d 5c       	JMP       LR
    40e0:	00 00 00 10 	.long     0x10000000 ->268435456  [!!!@2@:NOP      	@@: MOV       R0, #0
    40e4:	40 1d 00 10 	.long     0x10001d40 ->268442944  [!!!@2@:MOV       R4, #208	@@: MOV       R0, #0
    40e8:	8c 6a 00 00 	.long     0x00006a8c ->000027276  [!!!@2@:ORL       R8, R12	@@: NOP      
    40ec:	04 00 00 10 	.long     0x10000004 ->268435460 
    40f0:	43 1d 00 10 	.long     0x10001d43 ->268442947  [!!!@2@:MOV       R4, #211	@@: MOV       R0, #0
    40f4:	d0 3f 00 10 	.long     0x10003fd0 ->268451792  [!!!@2@:CMP       LR, #112	@@: MOV       R0, #0
    40f8:	44 1d 00 10 	.long     0x10001d44 ->268442948  [!!!@2@:MOV       R4, #212	@@: MOV       R0, #0
    40fc:	d3 3f 00 10 	.long     0x10003fd3 ->268451795  [!!!@2@:CMP       LR, #115	@@: MOV       R0, #0
    4100:	04 41 00 00 	.long     0x00004104 ->000016644  [!!!@2@:LD        R1, [PC + #4]         ;->0x4110  :=0x5c054509	@@: NOP      

00004104 <main>:
main():
..\main.c:12
int32_t adc_current_scale = 0;
int32_t adc_voltage_scale = 0;


void main()
{
    4104:	81 5f       	PUSH      {R6,LR}
..\main.c:13
	INT_All_Enable(FALSE);
    4106:	00 10       	MOV       R0, #0
    4108:	09 46       	LD        R6, [PC + #9]         ;->0x412c  :=0x1924
    410a:	06 5c       	LJMP      R6
..\main.c:14
	cfg_HARDWARE();
    410c:	09 45       	LD        R5, [PC + #9]         ;->0x4130  :=0x3408
    410e:	05 5c       	LJMP      R5
..\main.c:15
	application_init();
    4110:	09 45       	LD        R5, [PC + #9]         ;->0x4134  :=0x3834
    4112:	05 5c       	LJMP      R5
..\main.c:16
	INT_All_Enable(TRUE);
    4114:	01 10       	MOV       R0, #1
    4116:	06 5c       	LJMP      R6
..\main.c:18

	adc_current_scale = USER_ADC_SCALE_CURRENT;
    4118:	4b 14       	MOV       R4, #75
    411a:	08 45       	LD        R5, [PC + #8]         ;->0x4138  :=0x10001b48
    411c:	54 85       	ST.W      [R5], R4
..\main.c:19
	adc_voltage_scale = USER_ADC_SCALE_VOLTAGE;
    411e:	4f 12       	MOV       R4, #47
    4120:	07 45       	LD        R5, [PC + #7]         ;->0x413c  :=0x10001b44
    4122:	54 85       	ST.W      [R5], R4
    4124:	07 46       	LD        R6, [PC + #7]         ;->0x4140  :=0x4008
..\main.c:23

	while(1)
	{
        task_process();
    4126:	06 5c       	LJMP      R6
    4128:	06 5c       	LJMP      R6
    412a:	fe 07       	SJMP      $-2                   ;->0x4126
    412c:	24 19 00 00 	.long     0x00001924 ->000006436  [!!!@2@:MOV       R2, #148	@@: NOP      
    4130:	08 34 00 00 	.long     0x00003408 ->000013320  [!!!@2@:SUB       R0, #72	@@: NOP      
    4134:	34 38 00 00 	.long     0x00003834 ->000014388  [!!!@2@:CMP       R3, #4	@@: NOP      
    4138:	48 1b 00 10 	.long     0x10001b48 ->268442440  [!!!@2@:MOV       R4, #184	@@: MOV       R0, #0
    413c:	44 1b 00 10 	.long     0x10001b44 ->268442436  [!!!@2@:MOV       R4, #180	@@: MOV       R0, #0
    4140:	08 40 00 00 	.long     0x00004008 ->000016392  [!!!@2@:LD        R0, [PC + #8]         ;->0x4160  :=0x7018044b	@@: NOP      

00004144 <atan2CORDIC>:
atan2CORDIC():
..\application\libkf32foc.c:195
	asm(".EQU 	NEG_PI_BY_2 ,	0xC000	""\n\t");
	asm(".EQU 	PI_BY_2 	,	0x3FFF	""\n\t");
	asm(".EQU 	PI 			,	0x7FFF	""\n\t");
	asm(".EQU 	NEG_PI 		,	0x8000	""\n\t");

	asm("		    PUSH	R6		""\n\t");
    4144:	26 5d       	PUSH      R6
..\application\libkf32foc.c:196
	asm("			PUSH	R7		""\n\t");
    4146:	27 5d       	PUSH      R7
..\application\libkf32foc.c:197
	asm("			PUSH	R8		""\n\t");
    4148:	28 5d       	PUSH      R8
..\application\libkf32foc.c:198
	asm("			PUSH	R9		""\n\t");
    414a:	29 5d       	PUSH      R9
..\application\libkf32foc.c:199
	asm("			PUSH	R10		""\n\t");
    414c:	2a 5d       	PUSH      R10
..\application\libkf32foc.c:200
	asm("			PUSH	R11		""\n\t");
    414e:	2b 5d       	PUSH      R11
..\application\libkf32foc.c:202

	asm("			MOVL	R8,#0x8000		""\n\t");
    4150:	28 5c 00 80 	MOVL      R8, #32768
..\application\libkf32foc.c:203
	asm("			SXT.H	R8,R8			""\n\t");
    4154:	88 61       	SXT.H     R8, R8
..\application\libkf32foc.c:204
	asm("			CMP		R0, R8			""\n\t");//判断EalphaFinal是否为负1
    4156:	08 70       	CMP       R0, R8
..\application\libkf32foc.c:205
	asm("			JNZ		checkI			""\n\t");
    4158:	05 f1       	JNZ       $+5                   ;->0x4162
..\application\libkf32foc.c:206
	asm("			MOVL	R0,#NEG_PI_BY_2	""\n\t");//EalphaFinal等于-1时
    415a:	20 5c 00 c0 	MOVL      R0, #49152
..\application\libkf32foc.c:207
	asm("			SXT.H	R0,R0			""\n\t");
    415e:	00 61       	SXT.H     R0, R0
..\application\libkf32foc.c:208
	asm("			JMP		exitCORDICRoutine   ""\n\t");
    4160:	4b 04       	SJMP      $+75                  ;->0x41f6

00004162 <checkI>:
..\application\libkf32foc.c:210
	asm("       checkI:					""\n\t");//EalphaFinal不等于-1时
	asm("			CMP		R1, R8				""\n\t");
    4162:	18 70       	CMP       R1, R8
..\application\libkf32foc.c:211
	asm("			JNZ		mainCORDICRoutine	""\n\t");
    4164:	05 f1       	JNZ       $+5                   ;->0x416e
..\application\libkf32foc.c:212
	asm("			MOVL	R0,#PI				""\n\t");
    4166:	20 5c ff 7f 	MOVL      R0, #32767
..\application\libkf32foc.c:213
	asm("			SXT.H	R0,R0			    ""\n\t");
    416a:	00 61       	SXT.H     R0, R0
..\application\libkf32foc.c:214
	asm("			JMP		exitCORDICRoutine	""\n\t");
    416c:	45 04       	SJMP      $+69                  ;->0x41f6

0000416e <mainCORDICRoutine>:
..\application\libkf32foc.c:216
	asm("		mainCORDICRoutine:				""\n\t");//EalphaFinal和EbetaFinal都不等于负1
	asm("			MOVL	R7,#0x0		""\n\t");//ACCUM_PHASE (R7)
    416e:	27 5c 00 00 	MOVL      R7, #0
..\application\libkf32foc.c:217
	asm("			CMP		R1,#0		""\n\t");//adjust q and i to be in quadrant I
    4172:	10 38       	CMP       R1, #0
..\application\libkf32foc.c:218
	asm("			JGE		setupIter	""\n\t");//如果非负则转移,即大于等于
    4174:	11 fa       	JGE       $+17                  ;->0x4196
..\application\libkf32foc.c:219
	asm("			MOV		R9,R1		""\n\t");
    4176:	21 59       	MOV       R9, R1
..\application\libkf32foc.c:220
	asm("			CMP		R0,#0		""\n\t");
    4178:	00 38       	CMP       R0, #0
..\application\libkf32foc.c:221
	asm("			JLE		quadIII		""\n\t");
    417a:	08 fd       	JLE       $+8                   ;->0x418a
..\application\libkf32foc.c:222
	asm("			MOV		R1, R0		""\n\t");
    417c:	20 58       	MOV       R1, R0
..\application\libkf32foc.c:223
	asm("			NOT		R0,R9		""\n\t");
    417e:	09 68       	NOT       R0, R9
..\application\libkf32foc.c:224
	asm("			ADD		R0,#1		""\n\t");
    4180:	01 28       	ADD       R0, #1
..\application\libkf32foc.c:225
	asm("			MOVL	R7,#NEG_PI_BY_2	""\n\t");//ACCUM_PHASE (R7)
    4182:	27 5c 00 c0 	MOVL      R7, #49152
..\application\libkf32foc.c:226
	asm("			SXT.H	R7,R7			""\n\t");//2018.09.19添加
    4186:	77 61       	SXT.H     R7, R7
..\application\libkf32foc.c:227
	asm("			JMP		setupIter	""\n\t");
    4188:	07 04       	SJMP      $+7                   ;->0x4196

0000418a <quadIII>:
..\application\libkf32foc.c:229
	asm("		quadIII:				""\n\t");
	asm("			NOT		R1,R0		""\n\t");
    418a:	10 68       	NOT       R1, R0
..\application\libkf32foc.c:230
	asm("			ADD		R1,#1		""\n\t");
    418c:	11 28       	ADD       R1, #1
..\application\libkf32foc.c:231
	asm("			MOV		R0,R9		""\n\t");
    418e:	09 58       	MOV       R0, R9
..\application\libkf32foc.c:232
	asm("			MOVL	R7,#PI_BY_2	""\n\t");//ACCUM_PHASE (R7)
    4190:	27 5c ff 3f 	MOVL      R7, #16383
..\application\libkf32foc.c:233
	asm("			SXT.H	R7,R7			""\n\t"    );
    4194:	77 61       	SXT.H     R7, R7

00004196 <setupIter>:
..\application\libkf32foc.c:235
	asm("		setupIter:						""\n\t");
	asm("			MOV		R3,R0			""\n\t");//ACC1
    4196:	60 58       	MOV       R3, R0
..\application\libkf32foc.c:236
	asm("			MOV		R2,R1			""\n\t");//ACC0
    4198:	41 58       	MOV       R2, R1
..\application\libkf32foc.c:237
	asm("			ASR		R3,#1			""\n\t");
    419a:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:238
	asm("			ASR		R2,#1			""\n\t");
    419c:	11 78       	ASR       R2, #1
..\application\libkf32foc.c:239
	asm("			LSL		R3,#16			""\n\t");
    419e:	18 7b       	LSL       R3, #16
..\application\libkf32foc.c:240
	asm("			LSL		R2,#16			""\n\t");
    41a0:	10 7b       	LSL       R2, #16
..\application\libkf32foc.c:241
	asm("			MOV		R8,#CORDIC_DATA		""\n\t");
    41a2:	28 5c 4c 1b 	MOVL      R8, #6988
    41a6:	48 5c 00 10 	MOVH      R8, #4096
..\application\libkf32foc.c:242
	asm("			MOVL	R5,#0x7FFF			""\n\t");//; w5 = K = 1.0
    41aa:	25 5c ff 7f 	MOVL      R5, #32767
..\application\libkf32foc.c:243
	asm("			SXT.H	R5,R5			""\n\t"    );
    41ae:	55 61       	SXT.H     R5, R5
..\application\libkf32foc.c:245
//	asm("			DO 		#9,endCORDICRoutine_do	""\n\t");
	asm("			MOV	R11,#9		""\n\t"    );
    41b0:	b9 10       	MOV       R11, #9

000041b2 <endCORDICRoutine_do>:
..\application\libkf32foc.c:247
	asm("endCORDICRoutine_do:	""\n\t");
	asm("			MOV	R9,R2		""\n\t"    );
    41b2:	22 59       	MOV       R9, R2
..\application\libkf32foc.c:248
	asm("			MOV	R6,R3			""\n\t");
    41b4:	c3 58       	MOV       R6, R3
..\application\libkf32foc.c:249
	asm("			ASR	R9,#16		""\n\t"    );
    41b6:	48 79       	ASR       R9, #16
..\application\libkf32foc.c:250
	asm("			ASR	R6,#16			""\n\t");
    41b8:	30 79       	ASR       R6, #16
..\application\libkf32foc.c:251
	asm("			CMP		R6,#0				""\n\t");
    41ba:	60 38       	CMP       R6, #0
..\application\libkf32foc.c:252
	asm("			JLT		rotate_pos			""\n\t");//if Q < 0 goto rotate positive
    41bc:	0c fb       	JLT       $+12                  ;->0x41d4

000041be <rotate_neg>:
..\application\libkf32foc.c:254
	asm("		rotate_neg:						""\n\t"    );
	asm("			MULS	R4,R5,R6			""\n\t"    );
    41be:	a5 cb       	MULS      R4, R5, R6
..\application\libkf32foc.c:255
	asm("			LSL	R4,#1			""\n\t"    );
    41c0:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:256
	asm("			ADD		R2,R4			""\n\t"    );
    41c2:	24 64       	ADD       R2, R4
..\application\libkf32foc.c:257
	asm("			MOV		R6,R9		""\n\t"            );
    41c4:	c9 58       	MOV       R6, R9
..\application\libkf32foc.c:258
	asm("			MULS	R4,R5,R6			""\n\t"    );
    41c6:	a5 cb       	MULS      R4, R5, R6
..\application\libkf32foc.c:259
	asm("			LSL	R4,#1			""\n\t"    );
    41c8:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:260
	asm("			SUB		R3,R4			""\n\t"    );
    41ca:	34 66       	SUB       R3, R4
..\application\libkf32foc.c:261
	asm("			LD.H	R4,[R8]			""\n\t"    );
    41cc:	48 81       	LD.H      R4, [R8]
..\application\libkf32foc.c:262
	asm("			ADD	R8,#2			""\n\t"    );
    41ce:	82 28       	ADD       R8, #2
..\application\libkf32foc.c:264
//	asm("  			SXT.H  	R4,R4               " "\n"     );
	asm("			SUBC	R7,R7,R4				""\n\t");//ACCUM_PHASE
    41d0:	3f c9       	SUBC      R7, R7, R4
..\application\libkf32foc.c:265
	asm("			JMP		endCORDICRoutine	""\n\t" );
    41d2:	0b 04       	SJMP      $+11                  ;->0x41e8

000041d4 <rotate_pos>:
..\application\libkf32foc.c:267
	asm("		rotate_pos:						""\n\t" );
	asm("			MULS	R4,R5,R6			""\n\t" );
    41d4:	a5 cb       	MULS      R4, R5, R6
..\application\libkf32foc.c:268
	asm("			LSL	R4,#1			""\n\t"    );
    41d6:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:269
	asm("			SUB		R2,R4			""\n\t"    );
    41d8:	24 66       	SUB       R2, R4
..\application\libkf32foc.c:270
	asm("			MOV		R6,R9		""\n\t"         );
    41da:	c9 58       	MOV       R6, R9
..\application\libkf32foc.c:271
	asm("			MULS	R4,R5,R6			""\n\t");
    41dc:	a5 cb       	MULS      R4, R5, R6
..\application\libkf32foc.c:272
	asm("			LSL	R4,#1			""\n\t"    );
    41de:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:273
	asm("			ADD		R3,R4			""\n\t"    );
    41e0:	34 64       	ADD       R3, R4
..\application\libkf32foc.c:274
	asm("			LD.H	R4,[R8]			""\n\t"    );
    41e2:	48 81       	LD.H      R4, [R8]
..\application\libkf32foc.c:275
	asm("			ADD	R8,#2			""\n\t"    );
    41e4:	82 28       	ADD       R8, #2
..\application\libkf32foc.c:277
//	asm("  			SXT.H   R4,R4               " "\n" );
	asm("			ADD 	R7,R4,R7			""\n\t");//ACCUM_PHASE (R7)
    41e6:	fc c3       	ADD       R7, R4, R7

000041e8 <endCORDICRoutine>:
..\application\libkf32foc.c:279
	asm("		endCORDICRoutine:			""\n\t");
	asm("			ASR		R5, #1			""\n\t");//; K = K / 2
    41e8:	29 78       	ASR       R5, #1
..\application\libkf32foc.c:281
//	asm("		endCORDICRoutine_do:			""\n\t");
	asm("			CMP		R11, #0			""\n\t");
    41ea:	b0 38       	CMP       R11, #0
..\application\libkf32foc.c:282
	asm("			JLE		endLOOP_do			""\n\t");
    41ec:	03 fd       	JLE       $+3                   ;->0x41f2
..\application\libkf32foc.c:283
	asm("			SUB		R11, #1			""\n\t");
    41ee:	b1 30       	SUB       R11, #1
..\application\libkf32foc.c:284
	asm("			JMP		endCORDICRoutine_do			""\n\t");
    41f0:	e1 07       	SJMP      $-31                  ;->0x41b2

000041f2 <endLOOP_do>:
..\application\libkf32foc.c:286
	asm("		endLOOP_do:					""\n\t");
	asm("			NOT		R0,R7			""\n\t");//ACCUM_PHASE (R7)
    41f2:	07 68       	NOT       R0, R7
..\application\libkf32foc.c:287
	asm("			ADD		R0,#1			""\n\t");//ACCUM_PHASE (R7)
    41f4:	01 28       	ADD       R0, #1

000041f6 <exitCORDICRoutine>:
..\application\libkf32foc.c:291
	asm("		exitCORDICRoutine:			""\n\t");


	asm("			MOV	    R10,#DATA_atan2CORDIC""\n\t" );
    41f6:	2a 5c ba 3f 	MOVL      R10, #16314
    41fa:	4a 5c 00 10 	MOVH      R10, #4096
..\application\libkf32foc.c:292
	asm("			ST.H	[R10] , R0 		""\n\t");
    41fe:	a0 84       	ST.H      [R10], R0
..\application\libkf32foc.c:294

	asm("			POP		R11				""\n\t");
    4200:	0b 5d       	POP       R11
..\application\libkf32foc.c:295
	asm("			POP		R10				""\n\t");
    4202:	0a 5d       	POP       R10
..\application\libkf32foc.c:296
	asm("			POP		R9				""\n\t");
    4204:	09 5d       	POP       R9
..\application\libkf32foc.c:297
	asm("			POP 	R8				""\n\t");
    4206:	08 5d       	POP       R8
..\application\libkf32foc.c:298
	asm("			POP 	R7				""\n\t");
    4208:	07 5d       	POP       R7
..\application\libkf32foc.c:299
	asm("			POP 	R6				""\n\t");
    420a:	06 5d       	POP       R6
..\application\libkf32foc.c:300
	return	DATA_atan2CORDIC;
    420c:	02 45       	LD        R5, [PC + #2]         ;->0x4214  :=0x10003fba
    420e:	05 81       	LD.H      R0, [R5]
..\application\libkf32foc.c:301
}
    4210:	00 d0       	ZXT.H     R0, R0
    4212:	1d 5c       	JMP       LR
    4214:	ba 3f 00 10 	.long     0x10003fba ->268451770  [!!!@2@:CMP       R11, #122	@@: MOV       R0, #0

00004218 <sendSerialWrapper>:
sendSerialWrapper():
..\X2Csrc\__X2CScopeWrapper.c:57
    4218:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:58
    421a:	04 45       	LD        R5, [PC + #4]         ;->0x4228  :=0x10001cb4
    421c:	55 82       	LD.W      R5, [R5]
    421e:	01 d1       	ZXT.B     R0, R1
    4220:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:59
    4222:	0d 5d       	POP       LR
    4224:	1d 5c       	JMP       LR
    4226:	00 00       	NOP      NOP      
    4228:	b4 1c 00 10 	.long     0x10001cb4 ->268442804  [!!!@2@:MOV       R11, #196	@@: MOV       R0, #0

0000422c <receiveSerialWrapper>:
receiveSerialWrapper():
..\X2Csrc\__X2CScopeWrapper.c:61
    422c:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:62
    422e:	03 45       	LD        R5, [PC + #3]         ;->0x4238  :=0x10001cb8
    4230:	05 82       	LD.W      R0, [R5]
    4232:	00 5c       	LJMP      R0
..\X2Csrc\__X2CScopeWrapper.c:63
    4234:	0d 5d       	POP       LR
    4236:	1d 5c       	JMP       LR
    4238:	b8 1c 00 10 	.long     0x10001cb8 ->268442808  [!!!@2@:MOV       R11, #200	@@: MOV       R0, #0

0000423c <isReceiveDataAvailableWrapper>:
isReceiveDataAvailableWrapper():
..\X2Csrc\__X2CScopeWrapper.c:65
    423c:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:66
    423e:	03 45       	LD        R5, [PC + #3]         ;->0x4248  :=0x10001cbc
    4240:	05 82       	LD.W      R0, [R5]
    4242:	00 5c       	LJMP      R0
..\X2Csrc\__X2CScopeWrapper.c:67
    4244:	0d 5d       	POP       LR
    4246:	1d 5c       	JMP       LR
    4248:	bc 1c 00 10 	.long     0x10001cbc ->268442812  [!!!@2@:MOV       R11, #204	@@: MOV       R0, #0

0000424c <isSendReadyWrapper>:
isSendReadyWrapper():
..\X2Csrc\__X2CScopeWrapper.c:69
    424c:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:70
    424e:	03 45       	LD        R5, [PC + #3]         ;->0x4258  :=0x10001cc0
    4250:	05 82       	LD.W      R0, [R5]
    4252:	00 5c       	LJMP      R0
..\X2Csrc\__X2CScopeWrapper.c:71
    4254:	0d 5d       	POP       LR
    4256:	1d 5c       	JMP       LR
    4258:	c0 1c 00 10 	.long     0x10001cc0 ->268442816  [!!!@2@:MOV       R12, #192	@@: MOV       R0, #0

0000425c <X2CScope_Initialise>:
X2CScope_Initialise():
..\X2Csrc\__X2CScopeWrapper.c:3
    425c:	83 5f       	PUSH      {R6-R7,LR}
..\X2Csrc\__X2CScopeWrapper.c:6
    425e:	1d 45       	LD        R5, [PC + #29]        ;->0x42d0  :=0x5164
    4260:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:8
    4262:	1d 47       	LD        R7, [PC + #29]        ;->0x42d4  :=0x10001b70
    4264:	07 58       	MOV       R0, R7
    4266:	1d 45       	LD        R5, [PC + #29]        ;->0x42d8  :=0x4bc8
    4268:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:10
    426a:	1d 46       	LD        R6, [PC + #29]        ;->0x42dc  :=0x10001b88
    426c:	06 58       	MOV       R0, R6
    426e:	1d 41       	LD        R1, [PC + #29]        ;->0x42e0  :=0x10001bb4
    4270:	2f 1f       	MOV       R2, #255
    4272:	31 10       	MOV       R3, #1
    4274:	1c 45       	LD        R5, [PC + #28]        ;->0x42e4  :=0x4b94
    4276:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:12
    4278:	06 58       	MOV       R0, R6
    427a:	1c 45       	LD        R5, [PC + #28]        ;->0x42e8  :=0x5118
    427c:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:15
    427e:	06 58       	MOV       R0, R6
    4280:	1b 45       	LD        R5, [PC + #27]        ;->0x42ec  :=0x5138
    4282:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:18
    4284:	06 58       	MOV       R0, R6
    4286:	1b 45       	LD        R5, [PC + #27]        ;->0x42f0  :=0x469c
    4288:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:19
    428a:	06 58       	MOV       R0, R6
    428c:	1a 45       	LD        R5, [PC + #26]        ;->0x42f4  :=0x46b8
    428e:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:22
    4290:	06 58       	MOV       R0, R6
    4292:	1a 45       	LD        R5, [PC + #26]        ;->0x42f8  :=0x518c
    4294:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:23
    4296:	06 58       	MOV       R0, R6
    4298:	27 58       	MOV       R1, R7
    429a:	19 45       	LD        R5, [PC + #25]        ;->0x42fc  :=0x4bfc
    429c:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:24
    429e:	19 46       	LD        R6, [PC + #25]        ;->0x4300  :=0x10001b6c
    42a0:	06 82       	LD.W      R0, [R6]
    42a2:	11 10       	MOV       R1, #1
    42a4:	c1 a0       	ST.W      [R0 + #3], R1
..\X2Csrc\__X2CScopeWrapper.c:26
    42a6:	18 45       	LD        R5, [PC + #24]        ;->0x4304  :=0x51b4
    42a8:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:28
    42aa:	56 82       	LD.W      R5, [R6]
    42ac:	17 44       	LD        R4, [PC + #23]        ;->0x4308  :=0x6958
    42ae:	6c a0       	ST.W      [R5 + #1], R4
..\X2Csrc\__X2CScopeWrapper.c:29
    42b0:	17 44       	LD        R4, [PC + #23]        ;->0x430c  :=0x6948
    42b2:	54 85       	ST.W      [R5], R4
..\X2Csrc\__X2CScopeWrapper.c:75
    42b4:	17 45       	LD        R5, [PC + #23]        ;->0x4310  :=0x4218
    42b6:	75 85       	ST.W      [R7], R5
..\X2Csrc\__X2CScopeWrapper.c:76
    42b8:	17 45       	LD        R5, [PC + #23]        ;->0x4314  :=0x422c
    42ba:	7d a0       	ST.W      [R7 + #1], R5
..\X2Csrc\__X2CScopeWrapper.c:77
    42bc:	17 45       	LD        R5, [PC + #23]        ;->0x4318  :=0x423c
    42be:	bd a0       	ST.W      [R7 + #2], R5
..\X2Csrc\__X2CScopeWrapper.c:78
    42c0:	17 45       	LD        R5, [PC + #23]        ;->0x431c  :=0x424c
    42c2:	fd a0       	ST.W      [R7 + #3], R5
..\X2Csrc\__X2CScopeWrapper.c:33
    42c4:	17 45       	LD        R5, [PC + #23]        ;->0x4320  :=0x51c4
    42c6:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:34
    42c8:	03 5e       	POP       {R6-R7}
    42ca:	0d 5d       	POP       LR
    42cc:	1d 5c       	JMP       LR
    42ce:	00 00       	NOP      NOP      
    42d0:	64 51 00 00 	.long     0x00005164 ->000020836  [!!!@2@:JB        [R12], #20	@@: NOP      
    42d4:	70 1b 00 10 	.long     0x10001b70 ->268442480  [!!!@2@:MOV       R7, #176	@@: MOV       R0, #0
    42d8:	c8 4b 00 00 	.long     0x00004bc8 ->000019400  [!!!@2@:CLR       R9, #24	@@: NOP      
    42dc:	88 1b 00 10 	.long     0x10001b88 ->268442504  [!!!@2@:MOV       R8, #184	@@: MOV       R0, #0
    42e0:	b4 1b 00 10 	.long     0x10001bb4 ->268442548  [!!!@2@:MOV       R11, #180	@@: MOV       R0, #0
    42e4:	94 4b 00 00 	.long     0x00004b94 ->000019348  [!!!@2@:CLR       R2, #28	@@: NOP      
    42e8:	18 51 00 00 	.long     0x00005118 ->000020760  [!!!@2@:JB        [R3], #16	@@: NOP      
    42ec:	38 51 00 00 	.long     0x00005138 ->000020792  [!!!@2@:JB        [R7], #16	@@: NOP      
    42f0:	9c 46 00 00 	.long     0x0000469c ->000018076  [!!!@2@:LD        R6, [PC + #156]       ;->0x4560  :=0xeaabc32d	@@: NOP      
    42f4:	b8 46 00 00 	.long     0x000046b8 ->000018104  [!!!@2@:LD        R6, [PC + #184]       ;->0x45d4  :=0x3870d177	@@: NOP      
    42f8:	8c 51 00 00 	.long     0x0000518c ->000020876  [!!!@2@:JB        [R1], #28	@@: NOP      
    42fc:	fc 4b 00 00 	.long     0x00004bfc ->000019452  [!!!@2@:CLR       PC, #28	@@: NOP      
    4300:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
    4304:	b4 51 00 00 	.long     0x000051b4 ->000020916  [!!!@2@:JB        [R6], #28	@@: NOP      
    4308:	58 69 00 00 	.long     0x00006958 ->000026968  [!!!@2@:ANL       R5, R8	@@: NOP      
    430c:	48 69 00 00 	.long     0x00006948 ->000026952  [!!!@2@:ANL       R4, R8	@@: NOP      
    4310:	18 42 00 00 	.long     0x00004218 ->000016920  [!!!@2@:LD        R2, [PC + #24]        ;->0x4370  :=0xd143889a	@@: NOP      
    4314:	2c 42 00 00 	.long     0x0000422c ->000016940  [!!!@2@:LD        R2, [PC + #44]        ;->0x43c4  :=0xe7649863	@@: NOP      
    4318:	3c 42 00 00 	.long     0x0000423c ->000016956  [!!!@2@:LD        R2, [PC + #60]        ;->0x4408  :=0x7dd1050	@@: NOP      
    431c:	4c 42 00 00 	.long     0x0000424c ->000016972  [!!!@2@:LD        R2, [PC + #76]        ;->0x444c  :=0x4051118	@@: NOP      
    4320:	c4 51 00 00 	.long     0x000051c4 ->000020932  [!!!@2@:JB        [R8], #28	@@: NOP      

00004324 <X2CScope_Communicate>:
X2CScope_Communicate():
..\X2Csrc\__X2CScopeWrapper.c:36
    4324:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:37
    4326:	03 40       	LD        R0, [PC + #3]         ;->0x4330  :=0x10001b88
    4328:	50 82       	LD.W      R5, [R0]
    432a:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:38
    432c:	0d 5d       	POP       LR
    432e:	1d 5c       	JMP       LR
    4330:	88 1b 00 10 	.long     0x10001b88 ->268442504  [!!!@2@:MOV       R8, #184	@@: MOV       R0, #0

00004334 <X2CScope_Update>:
X2CScope_Update():
..\X2Csrc\__X2CScopeWrapper.c:40
    4334:	2d 5d       	PUSH      LR
..\X2Csrc\__X2CScopeWrapper.c:41
    4336:	03 45       	LD        R5, [PC + #3]         ;->0x4340  :=0x51d8
    4338:	05 5c       	LJMP      R5
..\X2Csrc\__X2CScopeWrapper.c:42
    433a:	0d 5d       	POP       LR
    433c:	1d 5c       	JMP       LR
    433e:	00 00       	NOP      NOP      
    4340:	d8 51 00 00 	.long     0x000051d8 ->000020952  [!!!@2@:JB        [R11], #24	@@: NOP      

00004344 <X2CScope_HookUARTFunctions>:
X2CScope_HookUARTFunctions():
..\X2Csrc\__X2CScopeWrapper.c:51
    4344:	05 45       	LD        R5, [PC + #5]         ;->0x4358  :=0x10001cb4
    4346:	50 85       	ST.W      [R5], R0
..\X2Csrc\__X2CScopeWrapper.c:52
    4348:	05 45       	LD        R5, [PC + #5]         ;->0x435c  :=0x10001cb8
    434a:	51 85       	ST.W      [R5], R1
..\X2Csrc\__X2CScopeWrapper.c:53
    434c:	05 45       	LD        R5, [PC + #5]         ;->0x4360  :=0x10001cbc
    434e:	52 85       	ST.W      [R5], R2
..\X2Csrc\__X2CScopeWrapper.c:54
    4350:	05 45       	LD        R5, [PC + #5]         ;->0x4364  :=0x10001cc0
    4352:	53 85       	ST.W      [R5], R3
..\X2Csrc\__X2CScopeWrapper.c:55
    4354:	1d 5c       	JMP       LR
    4356:	00 00       	NOP      NOP      
    4358:	b4 1c 00 10 	.long     0x10001cb4 ->268442804  [!!!@2@:MOV       R11, #196	@@: MOV       R0, #0
    435c:	b8 1c 00 10 	.long     0x10001cb8 ->268442808  [!!!@2@:MOV       R11, #200	@@: MOV       R0, #0
    4360:	bc 1c 00 10 	.long     0x10001cbc ->268442812  [!!!@2@:MOV       R11, #204	@@: MOV       R0, #0
    4364:	c0 1c 00 10 	.long     0x10001cc0 ->268442816  [!!!@2@:MOV       R12, #192	@@: MOV       R0, #0

00004368 <getBlockData>:
getBlockData():
..\X2Csrc\__BlockServicesX2C.c:297
    4368:	87 5f       	PUSH      {R6-R8,LR}
    436a:	c0 58       	MOV       R6, R0
..\X2Csrc\__BlockServicesX2C.c:307
    436c:	d0 98       	LD.W      R2, [R0 + #3]
    436e:	02 59       	MOV       R8, R2
..\X2Csrc\__BlockServicesX2C.c:308
    4370:	9a 88       	LD.B      R3, [R2 + #2]
    4372:	43 d1       	ZXT.B     R4, R3
    4374:	a0 7a       	LSL       R4, #8
..\X2Csrc\__BlockServicesX2C.c:309
    4376:	d2 88       	LD.B      R2, [R2 + #3]
    4378:	52 d1       	ZXT.B     R5, R2
    437a:	28 7b       	LSL       R5, #16
..\X2Csrc\__BlockServicesX2C.c:307
    437c:	64 c3       	ADD       R4, R4, R5
    437e:	68 58       	MOV       R3, R8
    4380:	5b 88       	LD.B      R3, [R3 + #1]
    4382:	53 d1       	ZXT.B     R5, R3
..\X2Csrc\__BlockServicesX2C.c:308
    4384:	64 c3       	ADD       R4, R4, R5
..\X2Csrc\__BlockServicesX2C.c:310
    4386:	48 58       	MOV       R2, R8
    4388:	12 89       	LD.B      R2, [R2 + #4]
    438a:	52 d1       	ZXT.B     R5, R2
    438c:	a8 7b       	LSL       R5, #24
..\X2Csrc\__BlockServicesX2C.c:309
    438e:	44 c3       	ADD       R0, R4, R5
..\X2Csrc\__BlockServicesX2C.c:315
    4390:	7c e7       	LD.H      R7, [R4 + R5]
..\X2Csrc\__BlockServicesX2C.c:318
    4392:	18 45       	LD        R5, [PC + #24]        ;->0x43f0  :=0x10001b6c
    4394:	35 82       	LD.W      R3, [R5]
    4396:	6b 98       	LD.W      R5, [R3 + #1]
    4398:	55 81       	LD.H      R5, [R5]
    439a:	57 70       	CMP       R5, R7
    439c:	36 f0       	JZ        $+54                  ;->0x4408
    439e:	6b 98       	LD.W      R5, [R3 + #1]
    43a0:	55 81       	LD.H      R5, [R5]
    43a2:	50 38       	CMP       R5, #0
    43a4:	10 f0       	JZ        $+16                  ;->0x43c4
    43a6:	40 10       	MOV       R4, #0
    43a8:	18 11       	MOV       R1, #24
    43aa:	05 04       	SJMP      $+5                   ;->0x43b4
    43ac:	53 98       	LD.W      R2, [R3 + #1]
    43ae:	52 e7       	LD.H      R2, [R2 + R5]
    43b0:	20 38       	CMP       R2, #0
    43b2:	09 f0       	JZ        $+9                   ;->0x43c4
..\X2Csrc\__BlockServicesX2C.c:320
    43b4:	64 c0       	ADD       R4, R4, #1
    43b6:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__BlockServicesX2C.c:318
    43b8:	53 98       	LD.W      R2, [R3 + #1]
    43ba:	6c ca       	MULS      R5, R4, R1
    43bc:	00 00       	NOP      NOP      
    43be:	52 e7       	LD.H      R2, [R2 + R5]
    43c0:	27 70       	CMP       R2, R7
    43c2:	f5 f1       	JNZ       $-11                  ;->0x43ac
..\X2Csrc\__BlockServicesX2C.c:322
    43c4:	63 98       	LD.W      R4, [R3 + #1]
    43c6:	64 e7       	LD.H      R4, [R4 + R5]
    43c8:	40 38       	CMP       R4, #0
    43ca:	15 f0       	JZ        $+21                  ;->0x43f4
..\X2Csrc\__BlockServicesX2C.c:329
    43cc:	63 98       	LD.W      R4, [R3 + #1]
    43ce:	6c c3       	ADD       R5, R4, R5
    43d0:	ed 98       	LD.W      R5, [R5 + #3]
    43d2:	68 58       	MOV       R3, R8
    43d4:	8b c0       	ADD       R1, R3, #2
    43d6:	05 5c       	LJMP      R5
    43d8:	80 c0       	ADD       R0, R0, #2
    43da:	30 92       	ST.B      [R6 + #8], R0
..\X2Csrc\__BlockServicesX2C.c:330
    43dc:	50 10       	MOV       R5, #0
    43de:	e6 98       	LD.W      R4, [R6 + #3]
    43e0:	65 90       	ST.B      [R4 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:331
    43e2:	6e 98       	LD.W      R5, [R6 + #1]
    43e4:	06 58       	MOV       R0, R6
    43e6:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:333
    43e8:	07 5e       	POP       {R6-R8}
    43ea:	0d 5d       	POP       LR
    43ec:	1d 5c       	JMP       LR
    43ee:	00 00       	NOP      NOP      
    43f0:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__BlockServicesX2C.c:325
    43f4:	06 58       	MOV       R0, R6
    43f6:	11 14       	MOV       R1, #65
    43f8:	03 45       	LD        R5, [PC + #3]         ;->0x4404  :=0x5104
    43fa:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:333
    43fc:	07 5e       	POP       {R6-R8}
    43fe:	0d 5d       	POP       LR
    4400:	1d 5c       	JMP       LR
    4402:	00 00       	NOP      NOP      
    4404:	04 51 00 00 	.long     0x00005104 ->000020740  [!!!@2@:JB        [R0], #20	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:318
    4408:	50 10       	MOV       R5, #0
    440a:	dd 07       	SJMP      $-35                  ;->0x43c4

0000440c <putBlockData>:
putBlockData():
..\X2Csrc\__BlockServicesX2C.c:239
    440c:	87 5f       	PUSH      {R6-R8,LR}
    440e:	c0 58       	MOV       R6, R0
..\X2Csrc\__BlockServicesX2C.c:252
    4410:	d8 98       	LD.W      R3, [R0 + #3]
    4412:	03 59       	MOV       R8, R3
..\X2Csrc\__BlockServicesX2C.c:253
    4414:	ab 88       	LD.B      R5, [R3 + #2]
    4416:	45 d1       	ZXT.B     R4, R5
    4418:	a0 7a       	LSL       R4, #8
..\X2Csrc\__BlockServicesX2C.c:254
    441a:	db 88       	LD.B      R3, [R3 + #3]
    441c:	53 d1       	ZXT.B     R5, R3
    441e:	28 7b       	LSL       R5, #16
..\X2Csrc\__BlockServicesX2C.c:252
    4420:	64 c3       	ADD       R4, R4, R5
    4422:	68 58       	MOV       R3, R8
    4424:	5b 88       	LD.B      R3, [R3 + #1]
    4426:	53 d1       	ZXT.B     R5, R3
..\X2Csrc\__BlockServicesX2C.c:253
    4428:	64 c3       	ADD       R4, R4, R5
..\X2Csrc\__BlockServicesX2C.c:255
    442a:	68 58       	MOV       R3, R8
    442c:	1b 89       	LD.B      R3, [R3 + #4]
    442e:	53 d1       	ZXT.B     R5, R3
    4430:	a8 7b       	LSL       R5, #24
..\X2Csrc\__BlockServicesX2C.c:254
    4432:	44 c3       	ADD       R0, R4, R5
..\X2Csrc\__BlockServicesX2C.c:260
    4434:	7c e7       	LD.H      R7, [R4 + R5]
..\X2Csrc\__BlockServicesX2C.c:263
    4436:	1a 45       	LD        R5, [PC + #26]        ;->0x449c  :=0x10001b6c
    4438:	35 82       	LD.W      R3, [R5]
    443a:	6b 98       	LD.W      R5, [R3 + #1]
    443c:	55 81       	LD.H      R5, [R5]
    443e:	57 70       	CMP       R5, R7
    4440:	44 f0       	JZ        $+68                  ;->0x44c8
    4442:	6b 98       	LD.W      R5, [R3 + #1]
    4444:	55 81       	LD.H      R5, [R5]
    4446:	50 38       	CMP       R5, #0
    4448:	10 f0       	JZ        $+16                  ;->0x4468
    444a:	40 10       	MOV       R4, #0
    444c:	18 11       	MOV       R1, #24
    444e:	05 04       	SJMP      $+5                   ;->0x4458
    4450:	53 98       	LD.W      R2, [R3 + #1]
    4452:	52 e7       	LD.H      R2, [R2 + R5]
    4454:	20 38       	CMP       R2, #0
    4456:	09 f0       	JZ        $+9                   ;->0x4468
..\X2Csrc\__BlockServicesX2C.c:265
    4458:	64 c0       	ADD       R4, R4, #1
    445a:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__BlockServicesX2C.c:263
    445c:	53 98       	LD.W      R2, [R3 + #1]
    445e:	6c ca       	MULS      R5, R4, R1
    4460:	00 00       	NOP      NOP      
    4462:	52 e7       	LD.H      R2, [R2 + R5]
    4464:	27 70       	CMP       R2, R7
    4466:	f5 f1       	JNZ       $-11                  ;->0x4450
..\X2Csrc\__BlockServicesX2C.c:267
    4468:	63 98       	LD.W      R4, [R3 + #1]
    446a:	64 e7       	LD.H      R4, [R4 + R5]
    446c:	40 38       	CMP       R4, #0
    446e:	23 f0       	JZ        $+35                  ;->0x44b4
..\X2Csrc\__BlockServicesX2C.c:272
    4470:	63 98       	LD.W      R4, [R3 + #1]
    4472:	6c c3       	ADD       R5, R4, R5
    4474:	16 8a       	LD.B      R2, [R6 + #8]
    4476:	52 cd       	SUB       R2, R2, #5
    4478:	2d 99       	LD.W      R5, [R5 + #4]
    447a:	88 58       	MOV       R4, R8
    447c:	4c c1       	ADD       R1, R4, #5
    447e:	22 d1       	ZXT.B     R2, R2
    4480:	05 5c       	LJMP      R5
    4482:	00 38       	CMP       R0, #0
    4484:	0e f1       	JNZ       $+14                  ;->0x44a0
..\X2Csrc\__BlockServicesX2C.c:280
    4486:	52 10       	MOV       R5, #2
    4488:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__BlockServicesX2C.c:281
    448a:	ee 98       	LD.W      R5, [R6 + #3]
    448c:	68 90       	ST.B      [R5 + #1], R0
..\X2Csrc\__BlockServicesX2C.c:282
    448e:	6e 98       	LD.W      R5, [R6 + #1]
    4490:	06 58       	MOV       R0, R6
    4492:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:285
    4494:	07 5e       	POP       {R6-R8}
    4496:	0d 5d       	POP       LR
    4498:	1d 5c       	JMP       LR
    449a:	00 00       	NOP      NOP      
    449c:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__BlockServicesX2C.c:276
    44a0:	06 58       	MOV       R0, R6
    44a2:	14 11       	MOV       R1, #20
    44a4:	03 45       	LD        R5, [PC + #3]         ;->0x44b0  :=0x5104
    44a6:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:285
    44a8:	07 5e       	POP       {R6-R8}
    44aa:	0d 5d       	POP       LR
    44ac:	1d 5c       	JMP       LR
    44ae:	00 00       	NOP      NOP      
    44b0:	04 51 00 00 	.long     0x00005104 ->000020740  [!!!@2@:JB        [R0], #20	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:270
    44b4:	06 58       	MOV       R0, R6
    44b6:	11 14       	MOV       R1, #65
    44b8:	03 45       	LD        R5, [PC + #3]         ;->0x44c4  :=0x5104
    44ba:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:285
    44bc:	07 5e       	POP       {R6-R8}
    44be:	0d 5d       	POP       LR
    44c0:	1d 5c       	JMP       LR
    44c2:	00 00       	NOP      NOP      
    44c4:	04 51 00 00 	.long     0x00005104 ->000020740  [!!!@2@:JB        [R0], #20	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:263
    44c8:	50 10       	MOV       R5, #0
    44ca:	cf 07       	SJMP      $-49                  ;->0x4468

000044cc <getRAMBlock>:
getRAMBlock():
..\X2Csrc\__BlockServicesX2C.c:139
    44cc:	81 5f       	PUSH      {R6,LR}
..\X2Csrc\__BlockServicesX2C.c:155
    44ce:	e8 98       	LD.W      R5, [R0 + #3]
    44d0:	c5 58       	MOV       R6, R5
    44d2:	4d 89       	LD.B      R1, [R5 + #5]
..\X2Csrc\__BlockServicesX2C.c:156
    44d4:	95 89       	LD.B      R2, [R5 + #6]
..\X2Csrc\__BlockServicesX2C.c:158
    44d6:	59 c0       	ADD       R3, R1, #1
    44d8:	60 8a       	LD.B      R4, [R0 + #9]
    44da:	34 70       	CMP       R3, R4
    44dc:	13 fa       	JGE       $+19                  ;->0x4502
..\X2Csrc\__BlockServicesX2C.c:171
    44de:	9d 88       	LD.B      R3, [R5 + #2]
    44e0:	98 7a       	LSL       R3, #8
..\X2Csrc\__BlockServicesX2C.c:172
    44e2:	e5 88       	LD.B      R4, [R5 + #3]
    44e4:	20 7b       	LSL       R4, #16
..\X2Csrc\__BlockServicesX2C.c:170
    44e6:	23 c3       	ADD       R4, R3, R4
    44e8:	5d 88       	LD.B      R3, [R5 + #1]
..\X2Csrc\__BlockServicesX2C.c:171
    44ea:	e4 c2       	ADD       R4, R4, R3
..\X2Csrc\__BlockServicesX2C.c:173
    44ec:	1d 89       	LD.B      R3, [R5 + #4]
    44ee:	98 7b       	LSL       R3, #24
..\X2Csrc\__BlockServicesX2C.c:172
    44f0:	e4 c2       	ADD       R4, R4, R3
..\X2Csrc\__BlockServicesX2C.c:178
    44f2:	22 38       	CMP       R2, #2
    44f4:	10 f0       	JZ        $+16                  ;->0x4514
    44f6:	24 38       	CMP       R2, #4
    44f8:	3a f0       	JZ        $+58                  ;->0x456c
    44fa:	21 38       	CMP       R2, #1
    44fc:	27 f0       	JZ        $+39                  ;->0x454a
    44fe:	14 11       	MOV       R1, #20
    4500:	02 04       	SJMP      $+2                   ;->0x4504
..\X2Csrc\__BlockServicesX2C.c:158
    4502:	15 11       	MOV       R1, #21
..\X2Csrc\__BlockServicesX2C.c:225
    4504:	03 45       	LD        R5, [PC + #3]         ;->0x4510  :=0x5104
    4506:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:227
    4508:	06 5d       	POP       R6
    450a:	0d 5d       	POP       LR
    450c:	1d 5c       	JMP       LR
    450e:	00 00       	NOP      NOP      
    4510:	04 51 00 00 	.long     0x00005104 ->000020740  [!!!@2@:JB        [R0], #20	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:192
    4514:	20 10       	MOV       R2, #0
    4516:	10 38       	CMP       R1, #0
    4518:	03 f1       	JNZ       $+3                   ;->0x451e
    451a:	0f 04       	SJMP      $+15                  ;->0x4538
    451c:	e8 98       	LD.W      R5, [R0 + #3]
..\X2Csrc\__BlockServicesX2C.c:194
    451e:	ad c2       	ADD       R5, R5, R2
    4520:	34 81       	LD.H      R3, [R4]
    4522:	ab 90       	ST.B      [R5 + #2], R3
..\X2Csrc\__BlockServicesX2C.c:195
    4524:	f0 98       	LD.W      R6, [R0 + #3]
    4526:	ae c2       	ADD       R5, R6, R2
    4528:	34 74       	LD.H      R3, [R4++]
    452a:	98 7c       	LSR       R3, #8
    452c:	eb 90       	ST.B      [R5 + #3], R3
..\X2Csrc\__BlockServicesX2C.c:192
    452e:	92 c0       	ADD       R2, R2, #2
    4530:	22 d0       	ZXT.H     R2, R2
    4532:	12 70       	CMP       R1, R2
    4534:	f4 f8       	JHI       $-12                  ;->0x451c
    4536:	f0 98       	LD.W      R6, [R0 + #3]
..\X2Csrc\__BlockServicesX2C.c:219
    4538:	89 c0       	ADD       R1, R1, #2
    453a:	01 92       	ST.B      [R0 + #8], R1
..\X2Csrc\__BlockServicesX2C.c:220
    453c:	50 10       	MOV       R5, #0
    453e:	75 90       	ST.B      [R6 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:221
    4540:	68 98       	LD.W      R5, [R0 + #1]
    4542:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:227
    4544:	06 5d       	POP       R6
    4546:	0d 5d       	POP       LR
    4548:	1d 5c       	JMP       LR
..\X2Csrc\__BlockServicesX2C.c:183
    454a:	10 38       	CMP       R1, #0
    454c:	f6 f0       	JZ        $-10                  ;->0x4538
..\X2Csrc\__BlockServicesX2C.c:138
    454e:	71 cc       	SUB       R6, R1, #1
    4550:	66 d0       	ZXT.H     R6, R6
    4552:	76 c0       	ADD       R6, R6, #1
    4554:	36 c3       	ADD       R6, R6, R4
    4556:	22 10       	MOV       R2, #2
    4558:	12 c7       	SUB       R2, R2, R4
    455a:	02 04       	SJMP      $+2                   ;->0x455e
    455c:	e8 98       	LD.W      R5, [R0 + #3]
..\X2Csrc\__BlockServicesX2C.c:185
    455e:	34 80       	LD.B      R3, [R4]
    4560:	2d c3       	ADD       R5, R5, R4
    4562:	ab ea       	ST.B      [R5 + R2], R3
    4564:	64 c0       	ADD       R4, R4, #1
..\X2Csrc\__BlockServicesX2C.c:183
    4566:	46 70       	CMP       R4, R6
    4568:	fa f1       	JNZ       $-6                   ;->0x455c
    456a:	e6 07       	SJMP      $-26                  ;->0x4536
..\X2Csrc\__BlockServicesX2C.c:202
    456c:	10 38       	CMP       R1, #0
    456e:	e5 f0       	JZ        $-27                  ;->0x4538
    4570:	64 58       	MOV       R3, R4
    4572:	40 10       	MOV       R4, #0
    4574:	02 04       	SJMP      $+2                   ;->0x4578
    4576:	e8 98       	LD.W      R5, [R0 + #3]
..\X2Csrc\__BlockServicesX2C.c:204
    4578:	2d c3       	ADD       R5, R5, R4
    457a:	23 82       	LD.W      R2, [R3]
    457c:	aa 90       	ST.B      [R5 + #2], R2
..\X2Csrc\__BlockServicesX2C.c:205
    457e:	f0 98       	LD.W      R6, [R0 + #3]
    4580:	2e c3       	ADD       R5, R6, R4
    4582:	23 82       	LD.W      R2, [R3]
    4584:	90 7c       	LSR       R2, #8
    4586:	ea 90       	ST.B      [R5 + #3], R2
..\X2Csrc\__BlockServicesX2C.c:206
    4588:	d0 98       	LD.W      R2, [R0 + #3]
    458a:	2a c3       	ADD       R5, R2, R4
    458c:	23 82       	LD.W      R2, [R3]
    458e:	10 7d       	LSR       R2, #16
    4590:	2a 91       	ST.B      [R5 + #4], R2
..\X2Csrc\__BlockServicesX2C.c:207
    4592:	f0 98       	LD.W      R6, [R0 + #3]
    4594:	2e c3       	ADD       R5, R6, R4
    4596:	23 72       	LD.W      R2, [R3++]
    4598:	90 7d       	LSR       R2, #24
    459a:	6a 91       	ST.B      [R5 + #5], R2
..\X2Csrc\__BlockServicesX2C.c:202
    459c:	24 c1       	ADD       R4, R4, #4
    459e:	44 d0       	ZXT.H     R4, R4
    45a0:	14 70       	CMP       R1, R4
    45a2:	ea f8       	JHI       $-22                  ;->0x4576
    45a4:	c9 07       	SJMP      $-55                  ;->0x4536
	...

000045a8 <putRAMBlock>:
putRAMBlock():
..\X2Csrc\__BlockServicesX2C.c:46
    45a8:	83 5f       	PUSH      {R6-R7,LR}
    45aa:	60 58       	MOV       R3, R0
..\X2Csrc\__BlockServicesX2C.c:70
    45ac:	e8 98       	LD.W      R5, [R0 + #3]
    45ae:	c5 58       	MOV       R6, R5
..\X2Csrc\__BlockServicesX2C.c:71
    45b0:	95 88       	LD.B      R2, [R5 + #2]
    45b2:	90 7a       	LSL       R2, #8
..\X2Csrc\__BlockServicesX2C.c:72
    45b4:	e5 88       	LD.B      R4, [R5 + #3]
    45b6:	20 7b       	LSL       R4, #16
..\X2Csrc\__BlockServicesX2C.c:70
    45b8:	22 c3       	ADD       R4, R2, R4
    45ba:	55 88       	LD.B      R2, [R5 + #1]
..\X2Csrc\__BlockServicesX2C.c:71
    45bc:	a4 c2       	ADD       R4, R4, R2
..\X2Csrc\__BlockServicesX2C.c:73
    45be:	15 89       	LD.B      R2, [R5 + #4]
    45c0:	90 7b       	LSL       R2, #24
..\X2Csrc\__BlockServicesX2C.c:72
    45c2:	a4 c2       	ADD       R4, R4, R2
..\X2Csrc\__BlockServicesX2C.c:78
    45c4:	08 8a       	LD.B      R1, [R0 + #8]
    45c6:	89 cd       	SUB       R1, R1, #6
    45c8:	11 d1       	ZXT.B     R1, R1
..\X2Csrc\__BlockServicesX2C.c:79
    45ca:	55 89       	LD.B      R2, [R5 + #5]
..\X2Csrc\__BlockServicesX2C.c:81
    45cc:	b9 d2       	DIVU      R7, R1, R2
    45ce:	bf ca       	MULS      R7, R7, R2
    45d0:	00 00       	NOP      NOP      
    45d2:	f9 c7       	SUB       R7, R1, R7
    45d4:	77 d1       	ZXT.B     R7, R7
    45d6:	70 38       	CMP       R7, #0
    45d8:	07 f1       	JNZ       $+7                   ;->0x45e6
..\X2Csrc\__BlockServicesX2C.c:87
    45da:	22 38       	CMP       R2, #2
    45dc:	47 f0       	JZ        $+71                  ;->0x466a
    45de:	24 38       	CMP       R2, #4
    45e0:	0c f0       	JZ        $+12                  ;->0x45f8
    45e2:	21 38       	CMP       R2, #1
    45e4:	2b f0       	JZ        $+43                  ;->0x463a
..\X2Csrc\__BlockServicesX2C.c:122
    45e6:	14 11       	MOV       R1, #20
    45e8:	03 45       	LD        R5, [PC + #3]         ;->0x45f4  :=0x5104
    45ea:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:130
    45ec:	03 5e       	POP       {R6-R7}
    45ee:	0d 5d       	POP       LR
    45f0:	1d 5c       	JMP       LR
    45f2:	00 00       	NOP      NOP      
    45f4:	04 51 00 00 	.long     0x00005104 ->000020740  [!!!@2@:JB        [R0], #20	@@: NOP      
..\X2Csrc\__BlockServicesX2C.c:111
    45f8:	0a 7c       	LSR       R1, #2
    45fa:	10 38       	CMP       R1, #0
    45fc:	15 f0       	JZ        $+21                  ;->0x4626
..\X2Csrc\__BlockServicesX2C.c:45
    45fe:	ad c1       	ADD       R5, R5, #6
    4600:	49 cc       	SUB       R1, R1, #1
    4602:	01 d0       	ZXT.H     R0, R1
    4604:	02 7a       	LSL       R0, #2
    4606:	04 c2       	ADD       R0, R4, R0
    4608:	00 c1       	ADD       R0, R0, #4
..\X2Csrc\__BlockServicesX2C.c:114
    460a:	4d 88       	LD.B      R1, [R5 + #1]
    460c:	88 7a       	LSL       R1, #8
..\X2Csrc\__BlockServicesX2C.c:115
    460e:	95 88       	LD.B      R2, [R5 + #2]
    4610:	10 7b       	LSL       R2, #16
..\X2Csrc\__BlockServicesX2C.c:113
    4612:	91 c2       	ADD       R2, R1, R2
    4614:	15 80       	LD.B      R1, [R5]
..\X2Csrc\__BlockServicesX2C.c:114
    4616:	52 c2       	ADD       R2, R2, R1
..\X2Csrc\__BlockServicesX2C.c:116
    4618:	cd 88       	LD.B      R1, [R5 + #3]
    461a:	88 7b       	LSL       R1, #24
..\X2Csrc\__BlockServicesX2C.c:115
    461c:	52 c2       	ADD       R2, R2, R1
..\X2Csrc\__BlockServicesX2C.c:113
    461e:	42 73       	ST.W      [R4++], R2
    4620:	2d c1       	ADD       R5, R5, #4
..\X2Csrc\__BlockServicesX2C.c:111
    4622:	40 70       	CMP       R4, R0
    4624:	f3 f1       	JNZ       $-13                  ;->0x460a
..\X2Csrc\__BlockServicesX2C.c:127
    4626:	52 10       	MOV       R5, #2
    4628:	1d 92       	ST.B      [R3 + #8], R5
..\X2Csrc\__BlockServicesX2C.c:128
    462a:	50 10       	MOV       R5, #0
    462c:	75 90       	ST.B      [R6 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:129
    462e:	6b 98       	LD.W      R5, [R3 + #1]
    4630:	03 58       	MOV       R0, R3
    4632:	05 5c       	LJMP      R5
..\X2Csrc\__BlockServicesX2C.c:130
    4634:	03 5e       	POP       {R6-R7}
    4636:	0d 5d       	POP       LR
    4638:	1d 5c       	JMP       LR
..\X2Csrc\__BlockServicesX2C.c:92
    463a:	10 38       	CMP       R1, #0
    463c:	f5 f0       	JZ        $-11                  ;->0x4626
..\X2Csrc\__BlockServicesX2C.c:45
    463e:	41 cc       	SUB       R0, R1, #1
    4640:	00 d0       	ZXT.H     R0, R0
    4642:	40 c0       	ADD       R0, R0, #1
    4644:	00 c3       	ADD       R0, R0, R4
    4646:	16 10       	MOV       R1, #6
    4648:	09 c7       	SUB       R1, R1, R4
    464a:	02 04       	SJMP      $+2                   ;->0x464e
    464c:	eb 98       	LD.W      R5, [R3 + #3]
..\X2Csrc\__BlockServicesX2C.c:94
    464e:	54 c2       	ADD       R2, R4, R1
    4650:	ad e4       	LD.B      R5, [R5 + R2]
    4652:	45 77       	ST.B      [R4++], R5
..\X2Csrc\__BlockServicesX2C.c:92
    4654:	40 70       	CMP       R4, R0
    4656:	fb f1       	JNZ       $-5                   ;->0x464c
    4658:	f3 98       	LD.W      R6, [R3 + #3]
..\X2Csrc\__BlockServicesX2C.c:127
    465a:	52 10       	MOV       R5, #2
    465c:	1d 92       	ST.B      [R3 + #8], R5
..\X2Csrc\__BlockServicesX2C.c:128
    465e:	50 10       	MOV       R5, #0
    4660:	75 90       	ST.B      [R6 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:129
    4662:	6b 98       	LD.W      R5, [R3 + #1]
    4664:	03 58       	MOV       R0, R3
    4666:	05 5c       	LJMP      R5
    4668:	e6 07       	SJMP      $-26                  ;->0x4634
..\X2Csrc\__BlockServicesX2C.c:101
    466a:	09 7c       	LSR       R1, #1
    466c:	10 38       	CMP       R1, #0
    466e:	dc f0       	JZ        $-36                  ;->0x4626
..\X2Csrc\__BlockServicesX2C.c:45
    4670:	ad c1       	ADD       R5, R5, #6
    4672:	49 cc       	SUB       R1, R1, #1
    4674:	11 d0       	ZXT.H     R1, R1
    4676:	49 c2       	ADD       R1, R1, R1
    4678:	44 c2       	ADD       R0, R4, R1
    467a:	80 c0       	ADD       R0, R0, #2
..\X2Csrc\__BlockServicesX2C.c:103
    467c:	55 88       	LD.B      R2, [R5 + #1]
    467e:	90 7a       	LSL       R2, #8
    4680:	15 80       	LD.B      R1, [R5]
    4682:	52 c2       	ADD       R2, R2, R1
    4684:	42 75       	ST.H      [R4++], R2
    4686:	ad c0       	ADD       R5, R5, #2
..\X2Csrc\__BlockServicesX2C.c:101
    4688:	40 70       	CMP       R4, R0
    468a:	f9 f1       	JNZ       $-7                   ;->0x467c
..\X2Csrc\__BlockServicesX2C.c:127
    468c:	52 10       	MOV       R5, #2
    468e:	1d 92       	ST.B      [R3 + #8], R5
..\X2Csrc\__BlockServicesX2C.c:128
    4690:	50 10       	MOV       R5, #0
    4692:	75 90       	ST.B      [R6 + #1], R5
..\X2Csrc\__BlockServicesX2C.c:129
    4694:	6b 98       	LD.W      R5, [R3 + #1]
    4696:	03 58       	MOV       R0, R3
    4698:	05 5c       	LJMP      R5
    469a:	cd 07       	SJMP      $-51                  ;->0x4634

0000469c <addBlockServices>:
addBlockServices():
..\X2Csrc\__BlockServicesX2C.c:23
    469c:	28 99       	LD.W      R5, [R0 + #4]
..\X2Csrc\__BlockServicesX2C.c:25
    469e:	04 44       	LD        R4, [PC + #4]         ;->0x46ac  :=0x44cc
    46a0:	6c a2       	ST.W      [R5 + #9], R4
..\X2Csrc\__BlockServicesX2C.c:26
    46a2:	04 44       	LD        R4, [PC + #4]         ;->0x46b0  :=0x4368
    46a4:	ec a1       	ST.W      [R5 + #7], R4
..\X2Csrc\__BlockServicesX2C.c:27
    46a6:	04 44       	LD        R4, [PC + #4]         ;->0x46b4  :=0x440c
    46a8:	2c a2       	ST.W      [R5 + #8], R4
..\X2Csrc\__BlockServicesX2C.c:28
    46aa:	1d 5c       	JMP       LR
    46ac:	cc 44 00 00 	.long     0x000044cc ->000017612  [!!!@2@:LD        R4, [PC + #204]       ;->0x49dc  :=0x9a7e5c05	@@: NOP      
    46b0:	68 43 00 00 	.long     0x00004368 ->000017256  [!!!@2@:LD        R3, [PC + #104]       ;->0x4850  :=0x5806f0f0	@@: NOP      
    46b4:	0c 44 00 00 	.long     0x0000440c ->000017420  [!!!@2@:LD        R4, [PC + #12]        ;->0x46e4  :=0x59854519	@@: NOP      

000046b8 <addExtendedBlockServices>:
addExtendedBlockServices():
..\X2Csrc\__BlockServicesX2C.c:37
    46b8:	28 99       	LD.W      R5, [R0 + #4]
..\X2Csrc\__BlockServicesX2C.c:38
    46ba:	02 44       	LD        R4, [PC + #2]         ;->0x46c0  :=0x45a8
    46bc:	ac a2       	ST.W      [R5 + #10], R4
..\X2Csrc\__BlockServicesX2C.c:39
    46be:	1d 5c       	JMP       LR
    46c0:	a8 45 00 00 	.long     0x000045a8 ->000017832  [!!!@2@:LD        R5, [PC + #168]       ;->0x4960  :=0xf04f3d45	@@: NOP      

000046c4 <enableSend>:
enableSend():
    46c4:	51 10       	MOV       R5, #1
    46c6:	45 a2       	ST.W      [R0 + #9], R5
..\X2Csrc\__LNet.c:40
    46c8:	50 10       	MOV       R5, #0
    46ca:	05 a2       	ST.W      [R0 + #8], R5
..\X2Csrc\__LNet.c:41
    46cc:	1d 5c       	JMP       LR
	...

000046d0 <communicate>:
communicate():
..\X2Csrc\__LNet.c:51
    46d0:	ff 5f       	PUSH      {R6-R12,LR}
    46d2:	c0 58       	MOV       R6, R0
    46d4:	78 9a       	LD.W      R7, [R0 + #9]
..\X2Csrc\__LNet.c:60
    46d6:	1b 42       	LD        R2, [PC + #27]        ;->0x4740  :=0x4874
    46d8:	22 59       	MOV       R9, R2
..\X2Csrc\__LNet.c:105
    46da:	1b 43       	LD        R3, [PC + #27]        ;->0x4744  :=0x10001cc8
    46dc:	43 59       	MOV       R10, R3
..\X2Csrc\__LNet.c:84
    46de:	80 58       	MOV       R4, R0
    46e0:	49 2a       	ADD       R4, #41
    46e2:	04 59       	MOV       R8, R4
..\X2Csrc\__LNet.c:255
    46e4:	19 45       	LD        R5, [PC + #25]        ;->0x4748  :=0x10001cc4
    46e6:	85 59       	MOV       R12, R5
..\X2Csrc\__LNet.c:256
    46e8:	b3 10       	MOV       R11, #3
..\X2Csrc\__LNet.c:58
    46ea:	71 38       	CMP       R7, #1
    46ec:	1a f1       	JNZ       $+26                  ;->0x4720
    46ee:	46 99       	LD.W      R0, [R6 + #5]
    46f0:	e8 98       	LD.W      R5, [R0 + #3]
    46f2:	05 5c       	LJMP      R5
    46f4:	00 38       	CMP       R0, #0
    46f6:	14 f0       	JZ        $+20                  ;->0x471e
..\X2Csrc\__LNet.c:60
    46f8:	2e 9a       	LD.W      R5, [R6 + #8]
    46fa:	55 38       	CMP       R5, #5
    46fc:	02 f8       	JHI       $+2                   ;->0x4700
    46fe:	b0 04       	SJMP      $+176                 ;->0x485e
..\X2Csrc\__LNet.c:46
    4700:	70 10       	MOV       R7, #0
    4702:	77 a2       	ST.W      [R6 + #9], R7
..\X2Csrc\__LNet.c:47
    4704:	f7 a1       	ST.W      [R6 + #7], R7
..\X2Csrc\__LNet.c:130
    4706:	46 99       	LD.W      R0, [R6 + #5]
    4708:	a8 98       	LD.W      R5, [R0 + #2]
    470a:	05 5c       	LJMP      R5
    470c:	00 38       	CMP       R0, #0
    470e:	0b f0       	JZ        $+11                  ;->0x4724
..\X2Csrc\__LNet.c:133
    4710:	46 99       	LD.W      R0, [R6 + #5]
    4712:	68 98       	LD.W      R5, [R0 + #1]
    4714:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:135
    4716:	ee 99       	LD.W      R5, [R6 + #7]
    4718:	55 38       	CMP       R5, #5
    471a:	1b f9       	JLS       $+27                  ;->0x4750
..\X2Csrc\__LNet.c:239
    471c:	f7 a1       	ST.W      [R6 + #7], R7
    471e:	7e 9a       	LD.W      R7, [R6 + #9]
..\X2Csrc\__LNet.c:130
    4720:	70 38       	CMP       R7, #0
    4722:	f2 f0       	JZ        $-14                  ;->0x4706
..\X2Csrc\__LNet.c:276
    4724:	0a 43       	LD        R3, [PC + #10]        ;->0x474c  :=0x10001b6c
    4726:	43 59       	MOV       R10, R3
    4728:	53 82       	LD.W      R5, [R3]
    472a:	e5 9a       	LD.W      R4, [R5 + #11]
    472c:	40 38       	CMP       R4, #0
    472e:	06 f0       	JZ        $+6                   ;->0x473a
    4730:	e5 9a       	LD.W      R4, [R5 + #11]
    4732:	64 98       	LD.W      R4, [R4 + #1]
    4734:	44 38       	CMP       R4, #4
    4736:	02 f1       	JNZ       $+2                   ;->0x473a
    4738:	7e 05       	SJMP      $+382                 ;->0x4a34
..\X2Csrc\__LNet.c:247
    473a:	7f 5e       	POP       {R6-R12}
    473c:	0d 5d       	POP       LR
    473e:	1d 5c       	JMP       LR
    4740:	74 48 00 00 	.long     0x00004874 ->000018548  [!!!@2@:SET       SP, #4	@@: NOP      
    4744:	c8 1c 00 10 	.long     0x10001cc8 ->268442824  [!!!@2@:MOV       R12, #200	@@: MOV       R0, #0
    4748:	c4 1c 00 10 	.long     0x10001cc4 ->268442820  [!!!@2@:MOV       R12, #196	@@: MOV       R0, #0
    474c:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__LNet.c:135
    4750:	2a 7a       	LSL       R5, #2
    4752:	02 44       	LD        R4, [PC + #2]         ;->0x4758  :=0x475c
    4754:	6c e9       	LD.W      R5, [R4 + R5]
    4756:	15 5c       	JMP       R5
    4758:	5c 47 00 00 	.long     0x0000475c ->000018268  [!!!@2@:LD        R7, [PC + #92]        ;->0x48c8  :=0x3842048d	@@: NOP      

0000475c <.text$communicate$sdata_local_1>:
    475c:	0c 48 00 00 cc 47 00 00 bc 47 00 00 84 47 00 00     .H...G...G...G..
    476c:	74 47 00 00 1e 48 00 00                             tG...H..

00004774 <.text$communicate$scode_loacal_3>:
..\X2Csrc\__LNet.c:189
    4774:	00 38       	CMP       R0, #0
    4776:	02 f0       	JZ        $+2                   ;->0x477a
    4778:	fd 04       	SJMP      $+253                 ;->0x4972
..\X2Csrc\__LNet.c:191
    477a:	3c 45       	LD        R5, [PC + #60]        ;->0x4868  :=0x10001cc8
    477c:	35 82       	LD.W      R3, [R5]
    477e:	f3 a1       	ST.W      [R6 + #7], R3
    4780:	7e 9a       	LD.W      R7, [R6 + #9]
    4782:	cf 07       	SJMP      $-49                  ;->0x4720
..\X2Csrc\__LNet.c:171
    4784:	38 12       	MOV       R3, #40
    4786:	ee c2       	ADD       R5, R6, R3
    4788:	45 80       	LD.B      R4, [R5]
    478a:	20 c3       	ADD       R4, R0, R4
    478c:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:172
    478e:	49 12       	MOV       R4, #41
    4790:	2e c3       	ADD       R5, R6, R4
    4792:	45 80       	LD.B      R4, [R5]
    4794:	d6 98       	LD.W      R2, [R6 + #3]
    4796:	10 eb       	ST.B      [R2 + R4], R0
..\X2Csrc\__LNet.c:173
    4798:	45 80       	LD.B      R4, [R5]
    479a:	64 c0       	ADD       R4, R4, #1
    479c:	44 d1       	ZXT.B     R4, R4
    479e:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:175
    47a0:	2e 8a       	LD.B      R5, [R6 + #8]
    47a2:	54 70       	CMP       R5, R4
    47a4:	02 f9       	JLS       $+2                   ;->0x47a8
    47a6:	fc 04       	SJMP      $+252                 ;->0x499e
..\X2Csrc\__LNet.c:253
    47a8:	05 3d       	CMP       R0, #85
    47aa:	02 f1       	JNZ       $+2                   ;->0x47ae
    47ac:	21 05       	SJMP      $+289                 ;->0x49ee
    47ae:	02 38       	CMP       R0, #2
    47b0:	02 f1       	JNZ       $+2                   ;->0x47b4
    47b2:	1e 05       	SJMP      $+286                 ;->0x49ee
..\X2Csrc\__LNet.c:262
    47b4:	55 10       	MOV       R5, #5
    47b6:	f5 a1       	ST.W      [R6 + #7], R5
    47b8:	7e 9a       	LD.W      R7, [R6 + #9]
    47ba:	b3 07       	SJMP      $-77                  ;->0x4720
..\X2Csrc\__LNet.c:158
    47bc:	2e 8e       	LD.B      R5, [R6 + #24]
    47be:	50 70       	CMP       R5, R0
    47c0:	02 f1       	JNZ       $+2                   ;->0x47c4
    47c2:	2d 05       	SJMP      $+301                 ;->0x4a1c
..\X2Csrc\__LNet.c:201
    47c4:	50 10       	MOV       R5, #0
    47c6:	f5 a1       	ST.W      [R6 + #7], R5
    47c8:	7e 9a       	LD.W      R7, [R6 + #9]
    47ca:	ab 07       	SJMP      $-85                  ;->0x4720
..\X2Csrc\__LNet.c:378
    47cc:	00 38       	CMP       R0, #0
    47ce:	02 f1       	JNZ       $+2                   ;->0x47d2
    47d0:	ef 04       	SJMP      $+239                 ;->0x49ae
..\X2Csrc\__LNet.c:380
    47d2:	6e 8a       	LD.B      R5, [R6 + #9]
    47d4:	05 70       	CMP       R0, R5
    47d6:	02 f9       	JLS       $+2                   ;->0x47da
    47d8:	46 05       	SJMP      $+326                 ;->0x4a64
..\X2Csrc\__LNet.c:388
    47da:	48 12       	MOV       R4, #40
    47dc:	2e c3       	ADD       R5, R6, R4
    47de:	25 15       	MOV       R2, #85
    47e0:	a0 c2       	ADD       R4, R0, R2
    47e2:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:389
    47e4:	30 92       	ST.B      [R6 + #8], R0
..\X2Csrc\__LNet.c:390
    47e6:	39 12       	MOV       R3, #41
    47e8:	ee c2       	ADD       R5, R6, R3
    47ea:	40 10       	MOV       R4, #0
    47ec:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:391
    47ee:	52 10       	MOV       R5, #2
    47f0:	f5 a1       	ST.W      [R6 + #7], R5
..\X2Csrc\__LNet.c:253
    47f2:	02 70       	CMP       R0, R2
    47f4:	03 f0       	JZ        $+3                   ;->0x47fa
    47f6:	02 38       	CMP       R0, #2
    47f8:	93 f1       	JNZ       $-109                 ;->0x471e
..\X2Csrc\__LNet.c:255
    47fa:	1d 45       	LD        R5, [PC + #29]        ;->0x486c  :=0x10001cc4
    47fc:	50 83       	ST.B      [R5], R0
..\X2Csrc\__LNet.c:256
    47fe:	42 10       	MOV       R4, #2
    4800:	1a 45       	LD        R5, [PC + #26]        ;->0x4868  :=0x10001cc8
    4802:	54 85       	ST.W      [R5], R4
..\X2Csrc\__LNet.c:257
    4804:	54 10       	MOV       R5, #4
    4806:	f5 a1       	ST.W      [R6 + #7], R5
    4808:	7e 9a       	LD.W      R7, [R6 + #9]
    480a:	8b 07       	SJMP      $-117                 ;->0x4720
..\X2Csrc\__LNet.c:140
    480c:	05 3d       	CMP       R0, #85
    480e:	88 f1       	JNZ       $-120                 ;->0x471e
..\X2Csrc\__LNet.c:142
    4810:	38 12       	MOV       R3, #40
    4812:	ee c2       	ADD       R5, R6, R3
    4814:	50 83       	ST.B      [R5], R0
..\X2Csrc\__LNet.c:143
    4816:	51 10       	MOV       R5, #1
    4818:	f5 a1       	ST.W      [R6 + #7], R5
    481a:	7e 9a       	LD.W      R7, [R6 + #9]
    481c:	82 07       	SJMP      $-126                 ;->0x4720
..\X2Csrc\__LNet.c:209
    481e:	58 12       	MOV       R5, #40
    4820:	66 c3       	ADD       R4, R6, R5
    4822:	54 80       	LD.B      R5, [R4]
..\X2Csrc\__LNet.c:211
    4824:	55 3d       	CMP       R5, #85
    4826:	11 f0       	JZ        $+17                  ;->0x4848
    4828:	52 38       	CMP       R5, #2
    482a:	0f f0       	JZ        $+15                  ;->0x4848
..\X2Csrc\__LNet.c:216
    482c:	05 70       	CMP       R0, R5
    482e:	12 f1       	JNZ       $+18                  ;->0x4852
..\X2Csrc\__LNet.c:219
    4830:	ee 98       	LD.W      R5, [R6 + #3]
    4832:	55 80       	LD.B      R5, [R5]
    4834:	5a 39       	CMP       R5, #26
    4836:	02 f9       	JLS       $+2                   ;->0x483a
    4838:	cf 04       	SJMP      $+207                 ;->0x49d6
..\X2Csrc\__LNet.c:223
    483a:	2a 7a       	LSL       R5, #2
    483c:	16 99       	LD.W      R2, [R6 + #4]
    483e:	6a e9       	LD.W      R5, [R2 + R5]
    4840:	06 58       	MOV       R0, R6
    4842:	05 5c       	LJMP      R5
    4844:	7e 9a       	LD.W      R7, [R6 + #9]
    4846:	6d 07       	SJMP      $-147                 ;->0x4720
..\X2Csrc\__LNet.c:213
    4848:	55 68       	NOT       R5, R5
    484a:	55 d1       	ZXT.B     R5, R5
    484c:	45 83       	ST.B      [R4], R5
..\X2Csrc\__LNet.c:216
    484e:	05 70       	CMP       R0, R5
    4850:	f0 f0       	JZ        $-16                  ;->0x4830
..\X2Csrc\__LNet.c:234
    4852:	06 58       	MOV       R0, R6
    4854:	13 11       	MOV       R1, #19
    4856:	07 45       	LD        R5, [PC + #7]         ;->0x4870  :=0x5104
    4858:	05 5c       	LJMP      R5
    485a:	7e 9a       	LD.W      R7, [R6 + #9]
    485c:	62 07       	SJMP      $-158                 ;->0x4720
..\X2Csrc\__LNet.c:60
    485e:	2a 7a       	LSL       R5, #2
    4860:	49 58       	MOV       R2, R9
    4862:	6a e9       	LD.W      R5, [R2 + R5]
    4864:	15 5c       	JMP       R5
    4866:	00 00       	NOP      NOP      
    4868:	c8 1c 00 10 	.long     0x10001cc8 ->268442824  [!!!@2@:MOV       R12, #200	@@: MOV       R0, #0
    486c:	c4 1c 00 10 	.long     0x10001cc4 ->268442820  [!!!@2@:MOV       R12, #196	@@: MOV       R0, #0
    4870:	04 51 00 00 	.long     0x00005104 ->000020740  [!!!@2@:JB        [R0], #20	@@: NOP      

00004874 <.text$communicate$sdata_local_2>:
    4874:	fa 48 00 00 14 49 00 00 d6 48 00 00 9c 48 00 00     .H...I...H...H..
    4884:	8c 48 00 00 38 49 00 00                             .H..8I..

0000488c <.text$communicate$scode_loacal_4>:
..\X2Csrc\__LNet.c:104
    488c:	46 99       	LD.W      R0, [R6 + #5]
    488e:	50 82       	LD.W      R5, [R0]
    4890:	10 10       	MOV       R1, #0
    4892:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:105
    4894:	5a 82       	LD.W      R5, [R10]
    4896:	35 a2       	ST.W      [R6 + #8], R5
    4898:	7e 9a       	LD.W      R7, [R6 + #9]
..\X2Csrc\__LNet.c:106
    489a:	28 07       	SJMP      $-216                 ;->0x46ea
..\X2Csrc\__LNet.c:84
    489c:	48 80       	LD.B      R4, [R8]
    489e:	ee 98       	LD.W      R5, [R6 + #3]
..\X2Csrc\__LNet.c:85
    48a0:	28 12       	MOV       R2, #40
    48a2:	9e c2       	ADD       R3, R6, R2
    48a4:	0d e5       	LD.B      R1, [R5 + R4]
    48a6:	23 80       	LD.B      R2, [R3]
    48a8:	91 c2       	ADD       R2, R1, R2
    48aa:	32 83       	ST.B      [R3], R2
..\X2Csrc\__LNet.c:87
    48ac:	46 99       	LD.W      R0, [R6 + #5]
    48ae:	30 82       	LD.W      R3, [R0]
    48b0:	0d e5       	LD.B      R1, [R5 + R4]
    48b2:	03 5c       	LJMP      R3
..\X2Csrc\__LNet.c:90
    48b4:	48 80       	LD.B      R4, [R8]
    48b6:	6c c0       	ADD       R5, R4, #1
    48b8:	1e 8a       	LD.B      R3, [R6 + #8]
    48ba:	53 70       	CMP       R5, R3
    48bc:	4f fb       	JLT       $+79                  ;->0x495a
..\X2Csrc\__LNet.c:92
    48be:	de 98       	LD.W      R3, [R6 + #3]
    48c0:	23 e5       	LD.B      R4, [R3 + R4]
    48c2:	44 d1       	ZXT.B     R4, R4
..\X2Csrc\__LNet.c:253
    48c4:	45 3d       	CMP       R4, #85
    48c6:	02 f1       	JNZ       $+2                   ;->0x48ca
    48c8:	8d 04       	SJMP      $+141                 ;->0x49e2
    48ca:	42 38       	CMP       R4, #2
    48cc:	02 f1       	JNZ       $+2                   ;->0x48d0
    48ce:	8a 04       	SJMP      $+138                 ;->0x49e2
..\X2Csrc\__LNet.c:262
    48d0:	45 10       	MOV       R4, #5
    48d2:	34 a2       	ST.W      [R6 + #8], R4
    48d4:	4c 04       	SJMP      $+76                  ;->0x496c
..\X2Csrc\__LNet.c:78
    48d6:	0e 8e       	LD.B      R1, [R6 + #24]
    48d8:	28 12       	MOV       R2, #40
    48da:	ae c2       	ADD       R5, R6, R2
    48dc:	45 80       	LD.B      R4, [R5]
    48de:	21 c3       	ADD       R4, R1, R4
    48e0:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:79
    48e2:	46 99       	LD.W      R0, [R6 + #5]
    48e4:	50 82       	LD.W      R5, [R0]
    48e6:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:80
    48e8:	2e 8e       	LD.B      R5, [R6 + #24]
..\X2Csrc\__LNet.c:253
    48ea:	55 3d       	CMP       R5, #85
    48ec:	68 f0       	JZ        $+104                 ;->0x49bc
    48ee:	52 38       	CMP       R5, #2
    48f0:	66 f0       	JZ        $+102                 ;->0x49bc
..\X2Csrc\__LNet.c:262
    48f2:	8b 58       	MOV       R4, R11
    48f4:	34 a2       	ST.W      [R6 + #8], R4
    48f6:	7e 9a       	LD.W      R7, [R6 + #9]
    48f8:	f9 06       	SJMP      $-263                 ;->0x46ea
..\X2Csrc\__LNet.c:65
    48fa:	38 12       	MOV       R3, #40
    48fc:	ee c2       	ADD       R5, R6, R3
    48fe:	15 15       	MOV       R1, #85
    4900:	51 83       	ST.B      [R5], R1
..\X2Csrc\__LNet.c:66
    4902:	50 10       	MOV       R5, #0
    4904:	85 83       	ST.B      [R8], R5
..\X2Csrc\__LNet.c:67
    4906:	46 99       	LD.W      R0, [R6 + #5]
    4908:	50 82       	LD.W      R5, [R0]
    490a:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:68
    490c:	51 10       	MOV       R5, #1
    490e:	35 a2       	ST.W      [R6 + #8], R5
    4910:	7e 9a       	LD.W      R7, [R6 + #9]
..\X2Csrc\__LNet.c:69
    4912:	ec 06       	SJMP      $-276                 ;->0x46ea
..\X2Csrc\__LNet.c:72
    4914:	0e 8a       	LD.B      R1, [R6 + #8]
    4916:	48 12       	MOV       R4, #40
    4918:	2e c3       	ADD       R5, R6, R4
    491a:	45 80       	LD.B      R4, [R5]
    491c:	21 c3       	ADD       R4, R1, R4
    491e:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:73
    4920:	46 99       	LD.W      R0, [R6 + #5]
    4922:	50 82       	LD.W      R5, [R0]
    4924:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:74
    4926:	2e 8a       	LD.B      R5, [R6 + #8]
..\X2Csrc\__LNet.c:253
    4928:	55 3d       	CMP       R5, #85
    492a:	4f f0       	JZ        $+79                  ;->0x49c8
    492c:	52 38       	CMP       R5, #2
    492e:	4d f0       	JZ        $+77                  ;->0x49c8
..\X2Csrc\__LNet.c:262
    4930:	52 10       	MOV       R5, #2
    4932:	35 a2       	ST.W      [R6 + #8], R5
    4934:	7e 9a       	LD.W      R7, [R6 + #9]
    4936:	da 06       	SJMP      $-294                 ;->0x46ea
..\X2Csrc\__LNet.c:109
    4938:	28 12       	MOV       R2, #40
    493a:	a6 c2       	ADD       R4, R6, R2
    493c:	14 80       	LD.B      R1, [R4]
..\X2Csrc\__LNet.c:110
    493e:	15 3d       	CMP       R1, #85
    4940:	3a f0       	JZ        $+58                  ;->0x49b4
    4942:	12 38       	CMP       R1, #2
    4944:	38 f0       	JZ        $+56                  ;->0x49b4
..\X2Csrc\__LNet.c:114
    4946:	46 99       	LD.W      R0, [R6 + #5]
    4948:	50 82       	LD.W      R5, [R0]
    494a:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:117
    494c:	46 99       	LD.W      R0, [R6 + #5]
    494e:	68 99       	LD.W      R5, [R0 + #5]
    4950:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:46
    4952:	70 10       	MOV       R7, #0
    4954:	77 a2       	ST.W      [R6 + #9], R7
..\X2Csrc\__LNet.c:47
    4956:	f7 a1       	ST.W      [R6 + #7], R7
    4958:	d7 06       	SJMP      $-297                 ;->0x4706
..\X2Csrc\__LNet.c:97
    495a:	d6 98       	LD.W      R2, [R6 + #3]
    495c:	22 e5       	LD.B      R4, [R2 + R4]
    495e:	44 d1       	ZXT.B     R4, R4
..\X2Csrc\__LNet.c:253
    4960:	45 3d       	CMP       R4, #85
    4962:	4f f0       	JZ        $+79                  ;->0x4a00
    4964:	42 38       	CMP       R4, #2
    4966:	4d f0       	JZ        $+77                  ;->0x4a00
..\X2Csrc\__LNet.c:262
    4968:	8b 58       	MOV       R4, R11
    496a:	34 a2       	ST.W      [R6 + #8], R4
..\X2Csrc\__LNet.c:100
    496c:	85 83       	ST.B      [R8], R5
    496e:	7e 9a       	LD.W      R7, [R6 + #9]
..\X2Csrc\__LNet.c:101
    4970:	bd 06       	SJMP      $-323                 ;->0x46ea
..\X2Csrc\__LNet.c:195
    4972:	39 45       	LD        R5, [PC + #57]        ;->0x4a54  :=0x10001cc4
    4974:	55 80       	LD.B      R5, [R5]
    4976:	55 3d       	CMP       R5, #85
    4978:	02 f0       	JZ        $+2                   ;->0x497c
    497a:	25 07       	SJMP      $-219                 ;->0x47c4
..\X2Csrc\__LNet.c:380
    497c:	6e 8a       	LD.B      R5, [R6 + #9]
    497e:	05 70       	CMP       R0, R5
    4980:	72 f8       	JHI       $+114                 ;->0x4a64
..\X2Csrc\__LNet.c:388
    4982:	28 12       	MOV       R2, #40
    4984:	ae c2       	ADD       R5, R6, R2
    4986:	35 15       	MOV       R3, #85
    4988:	e0 c2       	ADD       R4, R0, R3
    498a:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:389
    498c:	30 92       	ST.B      [R6 + #8], R0
..\X2Csrc\__LNet.c:390
    498e:	49 12       	MOV       R4, #41
    4990:	2e c3       	ADD       R5, R6, R4
    4992:	40 10       	MOV       R4, #0
    4994:	54 83       	ST.B      [R5], R4
..\X2Csrc\__LNet.c:391
    4996:	52 10       	MOV       R5, #2
    4998:	f5 a1       	ST.W      [R6 + #7], R5
    499a:	7e 9a       	LD.W      R7, [R6 + #9]
    499c:	c2 06       	SJMP      $-318                 ;->0x4720
..\X2Csrc\__LNet.c:253
    499e:	05 3d       	CMP       R0, #85
    49a0:	35 f0       	JZ        $+53                  ;->0x4a0a
    49a2:	02 38       	CMP       R0, #2
    49a4:	33 f0       	JZ        $+51                  ;->0x4a0a
..\X2Csrc\__LNet.c:262
    49a6:	53 10       	MOV       R5, #3
    49a8:	f5 a1       	ST.W      [R6 + #7], R5
    49aa:	7e 9a       	LD.W      R7, [R6 + #9]
    49ac:	ba 06       	SJMP      $-326                 ;->0x4720
..\X2Csrc\__LNet.c:398
    49ae:	f0 a1       	ST.W      [R6 + #7], R0
    49b0:	7e 9a       	LD.W      R7, [R6 + #9]
    49b2:	b7 06       	SJMP      $-329                 ;->0x4720
..\X2Csrc\__LNet.c:112
    49b4:	11 68       	NOT       R1, R1
    49b6:	11 d1       	ZXT.B     R1, R1
    49b8:	41 83       	ST.B      [R4], R1
    49ba:	c6 07       	SJMP      $-58                  ;->0x4946
..\X2Csrc\__LNet.c:255
    49bc:	c5 83       	ST.B      [R12], R5
..\X2Csrc\__LNet.c:256
    49be:	ab 85       	ST.W      [R10], R11
..\X2Csrc\__LNet.c:257
    49c0:	34 10       	MOV       R3, #4
    49c2:	33 a2       	ST.W      [R6 + #8], R3
    49c4:	7e 9a       	LD.W      R7, [R6 + #9]
    49c6:	92 06       	SJMP      $-366                 ;->0x46ea
..\X2Csrc\__LNet.c:255
    49c8:	c5 83       	ST.B      [R12], R5
..\X2Csrc\__LNet.c:256
    49ca:	52 10       	MOV       R5, #2
    49cc:	a5 85       	ST.W      [R10], R5
..\X2Csrc\__LNet.c:257
    49ce:	54 10       	MOV       R5, #4
    49d0:	35 a2       	ST.W      [R6 + #8], R5
    49d2:	7e 9a       	LD.W      R7, [R6 + #9]
    49d4:	8b 06       	SJMP      $-373                 ;->0x46ea
..\X2Csrc\__LNet.c:228
    49d6:	06 58       	MOV       R0, R6
    49d8:	11 12       	MOV       R1, #33
    49da:	20 45       	LD        R5, [PC + #32]        ;->0x4a58  :=0x5104
    49dc:	05 5c       	LJMP      R5
    49de:	7e 9a       	LD.W      R7, [R6 + #9]
    49e0:	a0 06       	SJMP      $-352                 ;->0x4720
..\X2Csrc\__LNet.c:255
    49e2:	c4 83       	ST.B      [R12], R4
..\X2Csrc\__LNet.c:256
    49e4:	45 10       	MOV       R4, #5
    49e6:	a4 85       	ST.W      [R10], R4
..\X2Csrc\__LNet.c:257
    49e8:	44 10       	MOV       R4, #4
    49ea:	34 a2       	ST.W      [R6 + #8], R4
    49ec:	c0 07       	SJMP      $-64                  ;->0x496c
..\X2Csrc\__LNet.c:255
    49ee:	1a 45       	LD        R5, [PC + #26]        ;->0x4a54  :=0x10001cc4
    49f0:	50 83       	ST.B      [R5], R0
..\X2Csrc\__LNet.c:256
    49f2:	45 10       	MOV       R4, #5
    49f4:	1a 45       	LD        R5, [PC + #26]        ;->0x4a5c  :=0x10001cc8
    49f6:	54 85       	ST.W      [R5], R4
..\X2Csrc\__LNet.c:257
    49f8:	54 10       	MOV       R5, #4
    49fa:	f5 a1       	ST.W      [R6 + #7], R5
    49fc:	7e 9a       	LD.W      R7, [R6 + #9]
    49fe:	91 06       	SJMP      $-367                 ;->0x4720
..\X2Csrc\__LNet.c:255
    4a00:	c4 83       	ST.B      [R12], R4
..\X2Csrc\__LNet.c:256
    4a02:	ab 85       	ST.W      [R10], R11
..\X2Csrc\__LNet.c:257
    4a04:	34 10       	MOV       R3, #4
    4a06:	33 a2       	ST.W      [R6 + #8], R3
    4a08:	b2 07       	SJMP      $-78                  ;->0x496c
..\X2Csrc\__LNet.c:255
    4a0a:	13 45       	LD        R5, [PC + #19]        ;->0x4a54  :=0x10001cc4
    4a0c:	50 83       	ST.B      [R5], R0
..\X2Csrc\__LNet.c:256
    4a0e:	43 10       	MOV       R4, #3
    4a10:	13 45       	LD        R5, [PC + #19]        ;->0x4a5c  :=0x10001cc8
    4a12:	54 85       	ST.W      [R5], R4
..\X2Csrc\__LNet.c:257
    4a14:	54 10       	MOV       R5, #4
    4a16:	f5 a1       	ST.W      [R6 + #7], R5
    4a18:	7e 9a       	LD.W      R7, [R6 + #9]
    4a1a:	83 06       	SJMP      $-381                 ;->0x4720
..\X2Csrc\__LNet.c:160
    4a1c:	28 12       	MOV       R2, #40
    4a1e:	a6 c2       	ADD       R4, R6, R2
    4a20:	34 80       	LD.B      R3, [R4]
    4a22:	d8 c2       	ADD       R3, R0, R3
    4a24:	43 83       	ST.B      [R4], R3
..\X2Csrc\__LNet.c:253
    4a26:	05 3d       	CMP       R0, #85
    4a28:	03 f0       	JZ        $+3                   ;->0x4a2e
    4a2a:	02 38       	CMP       R0, #2
    4a2c:	bd f1       	JNZ       $-67                  ;->0x49a6
..\X2Csrc\__LNet.c:255
    4a2e:	0a 44       	LD        R4, [PC + #10]        ;->0x4a54  :=0x10001cc4
    4a30:	45 83       	ST.B      [R4], R5
    4a32:	ee 07       	SJMP      $-18                  ;->0x4a0e
..\X2Csrc\__LNet.c:285
    4a34:	e5 9a       	LD.W      R4, [R5 + #11]
    4a36:	dd 9a       	LD.W      R3, [R5 + #11]
    4a38:	46 2c       	ADD       R4, #70
    4a3a:	34 2c       	ADD       R3, #68
..\X2Csrc\__LNet.c:284
    4a3c:	44 81       	LD.H      R4, [R4]
    4a3e:	33 81       	LD.H      R3, [R3]
    4a40:	34 70       	CMP       R3, R4
    4a42:	1b f9       	JLS       $+27                  ;->0x4a78
..\X2Csrc\__LNet.c:360
    4a44:	07 45       	LD        R5, [PC + #7]         ;->0x4a60  :=0x10001ccc
    4a46:	25 82       	LD.W      R2, [R5]
    4a48:	62 c0       	ADD       R4, R2, #1
    4a4a:	54 85       	ST.W      [R5], R4
..\X2Csrc\__LNet.c:247
    4a4c:	7f 5e       	POP       {R6-R12}
    4a4e:	0d 5d       	POP       LR
    4a50:	1d 5c       	JMP       LR
    4a52:	00 00       	NOP      NOP      
    4a54:	c4 1c 00 10 	.long     0x10001cc4 ->268442820  [!!!@2@:MOV       R12, #196	@@: MOV       R0, #0
    4a58:	04 51 00 00 	.long     0x00005104 ->000020740  [!!!@2@:JB        [R0], #20	@@: NOP      
    4a5c:	c8 1c 00 10 	.long     0x10001cc8 ->268442824  [!!!@2@:MOV       R12, #200	@@: MOV       R0, #0
    4a60:	cc 1c 00 10 	.long     0x10001ccc ->268442828  [!!!@2@:MOV       R12, #204	@@: MOV       R0, #0
..\X2Csrc\__LNet.c:382
    4a64:	50 10       	MOV       R5, #0
    4a66:	f5 a1       	ST.W      [R6 + #7], R5
..\X2Csrc\__LNet.c:406
    4a68:	e6 98       	LD.W      R4, [R6 + #3]
    4a6a:	45 83       	ST.B      [R4], R5
..\X2Csrc\__LNet.c:407
    4a6c:	06 58       	MOV       R0, R6
    4a6e:	15 11       	MOV       R1, #21
    4a70:	48 45       	LD        R5, [PC + #72]        ;->0x4b90  :=0x5104
    4a72:	05 5c       	LJMP      R5
    4a74:	7e 9a       	LD.W      R7, [R6 + #9]
    4a76:	55 06       	SJMP      $-427                 ;->0x4720
..\X2Csrc\__LNet.c:289
    4a78:	ed 9a       	LD.W      R5, [R5 + #11]
    4a7a:	56 2c       	ADD       R5, #70
    4a7c:	40 10       	MOV       R4, #0
    4a7e:	54 84       	ST.H      [R5], R4
..\X2Csrc\__LNet.c:292
    4a80:	46 99       	LD.W      R0, [R6 + #5]
    4a82:	50 82       	LD.W      R5, [R0]
    4a84:	12 10       	MOV       R1, #2
    4a86:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:293
    4a88:	46 99       	LD.W      R0, [R6 + #5]
    4a8a:	e8 98       	LD.W      R5, [R0 + #3]
    4a8c:	05 5c       	LJMP      R5
    4a8e:	00 38       	CMP       R0, #0
    4a90:	fc f0       	JZ        $-4                   ;->0x4a88
..\X2Csrc\__LNet.c:294
    4a92:	46 99       	LD.W      R0, [R6 + #5]
    4a94:	5a 82       	LD.W      R5, [R10]
    4a96:	e5 9a       	LD.W      R4, [R5 + #11]
    4a98:	50 82       	LD.W      R5, [R0]
    4a9a:	4c 8a       	LD.B      R1, [R4 + #9]
    4a9c:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:295
    4a9e:	46 99       	LD.W      R0, [R6 + #5]
    4aa0:	e8 98       	LD.W      R5, [R0 + #3]
    4aa2:	05 5c       	LJMP      R5
    4aa4:	00 38       	CMP       R0, #0
    4aa6:	fc f0       	JZ        $-4                   ;->0x4a9e
..\X2Csrc\__LNet.c:296
    4aa8:	46 99       	LD.W      R0, [R6 + #5]
    4aaa:	50 82       	LD.W      R5, [R0]
    4aac:	0e 8e       	LD.B      R1, [R6 + #24]
    4aae:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:297
    4ab0:	46 99       	LD.W      R0, [R6 + #5]
    4ab2:	e8 98       	LD.W      R5, [R0 + #3]
    4ab4:	05 5c       	LJMP      R5
    4ab6:	00 38       	CMP       R0, #0
    4ab8:	fc f0       	JZ        $-4                   ;->0x4ab0
..\X2Csrc\__LNet.c:299
    4aba:	46 99       	LD.W      R0, [R6 + #5]
    4abc:	5a 82       	LD.W      R5, [R10]
    4abe:	e5 9a       	LD.W      R4, [R5 + #11]
    4ac0:	48 2c       	ADD       R4, #72
    4ac2:	50 82       	LD.W      R5, [R0]
    4ac4:	14 80       	LD.B      R1, [R4]
    4ac6:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:300
    4ac8:	46 99       	LD.W      R0, [R6 + #5]
    4aca:	e8 98       	LD.W      R5, [R0 + #3]
    4acc:	05 5c       	LJMP      R5
    4ace:	00 38       	CMP       R0, #0
    4ad0:	fc f0       	JZ        $-4                   ;->0x4ac8
..\X2Csrc\__LNet.c:301
    4ad2:	46 99       	LD.W      R0, [R6 + #5]
    4ad4:	5a 82       	LD.W      R5, [R10]
    4ad6:	ed 9a       	LD.W      R5, [R5 + #11]
    4ad8:	58 2c       	ADD       R5, #72
    4ada:	15 81       	LD.H      R1, [R5]
    4adc:	50 82       	LD.W      R5, [R0]
    4ade:	88 7c       	LSR       R1, #8
    4ae0:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:302
    4ae2:	46 99       	LD.W      R0, [R6 + #5]
    4ae4:	e8 98       	LD.W      R5, [R0 + #3]
    4ae6:	05 5c       	LJMP      R5
    4ae8:	00 38       	CMP       R0, #0
    4aea:	fc f0       	JZ        $-4                   ;->0x4ae2
..\X2Csrc\__LNet.c:304
    4aec:	5a 82       	LD.W      R5, [R10]
    4aee:	d5 9a       	LD.W      R2, [R5 + #11]
..\X2Csrc\__LNet.c:305
    4af0:	dd 9a       	LD.W      R3, [R5 + #11]
..\X2Csrc\__LNet.c:306
    4af2:	e5 9a       	LD.W      R4, [R5 + #11]
..\X2Csrc\__LNet.c:304
    4af4:	4a 8a       	LD.B      R1, [R2 + #9]
    4af6:	16 8e       	LD.B      R2, [R6 + #24]
    4af8:	89 c2       	ADD       R1, R1, R2
    4afa:	21 59       	MOV       R9, R1
    4afc:	92 28       	ADD       R9, #2
..\X2Csrc\__LNet.c:305
    4afe:	38 2c       	ADD       R3, #72
..\X2Csrc\__LNet.c:304
    4b00:	33 80       	LD.B      R3, [R3]
    4b02:	93 64       	ADD       R9, R3
..\X2Csrc\__LNet.c:306
    4b04:	48 2c       	ADD       R4, #72
..\X2Csrc\__LNet.c:304
    4b06:	44 81       	LD.H      R4, [R4]
    4b08:	a0 7c       	LSR       R4, #8
    4b0a:	94 64       	ADD       R9, R4
    4b0c:	99 d1       	ZXT.B     R9, R9
..\X2Csrc\__LNet.c:308
    4b0e:	b0 10       	MOV       R11, #0
..\X2Csrc\__LNet.c:312
    4b10:	70 10       	MOV       R7, #0
    4b12:	4b 58       	MOV       R2, R11
    4b14:	e2 c0       	ADD       R4, R2, #3
..\X2Csrc\__LNet.c:327
    4b16:	22 7a       	LSL       R4, #2
    4b18:	84 59       	MOV       R12, R4
    4b1a:	ed 9a       	LD.W      R5, [R5 + #11]
    4b1c:	6c 58       	MOV       R3, R12
    4b1e:	ed e8       	LD.W      R5, [R5 + R3]
    4b20:	ed e5       	LD.B      R5, [R5 + R7]
    4b22:	85 d1       	ZXT.B     R8, R5
..\X2Csrc\__LNet.c:328
    4b24:	46 99       	LD.W      R0, [R6 + #5]
    4b26:	50 82       	LD.W      R5, [R0]
    4b28:	28 58       	MOV       R1, R8
    4b2a:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:329
    4b2c:	46 99       	LD.W      R0, [R6 + #5]
    4b2e:	e8 98       	LD.W      R5, [R0 + #3]
    4b30:	05 5c       	LJMP      R5
    4b32:	00 38       	CMP       R0, #0
    4b34:	fc f0       	JZ        $-4                   ;->0x4b2c
..\X2Csrc\__LNet.c:330
    4b36:	98 64       	ADD       R9, R8
    4b38:	99 d1       	ZXT.B     R9, R9
..\X2Csrc\__LNet.c:334
    4b3a:	7f c0       	ADD       R7, R7, #1
    4b3c:	77 d0       	ZXT.H     R7, R7
..\X2Csrc\__LNet.c:336
    4b3e:	5a 82       	LD.W      R5, [R10]
    4b40:	e5 9a       	LD.W      R4, [R5 + #11]
    4b42:	4b 64       	ADD       R4, R11
    4b44:	4c 2a       	ADD       R4, #44
    4b46:	44 80       	LD.B      R4, [R4]
    4b48:	47 70       	CMP       R4, R7
    4b4a:	e8 f8       	JHI       $-24                  ;->0x4b1a
..\X2Csrc\__LNet.c:338
    4b4c:	b1 28       	ADD       R11, #1
    4b4e:	bb d0       	ZXT.H     R11, R11
..\X2Csrc\__LNet.c:340
    4b50:	e5 9a       	LD.W      R4, [R5 + #11]
    4b52:	24 8a       	LD.B      R4, [R4 + #8]
    4b54:	4b 70       	CMP       R4, R11
    4b56:	dd f8       	JHI       $-35                  ;->0x4b10
..\X2Csrc\__LNet.c:343
    4b58:	1d 1f       	MOV       R1, #253
    4b5a:	92 38       	CMP       R9, #2
    4b5c:	02 f0       	JZ        $+2                   ;->0x4b60
    4b5e:	29 58       	MOV       R1, R9
..\X2Csrc\__LNet.c:347
    4b60:	46 99       	LD.W      R0, [R6 + #5]
    4b62:	50 82       	LD.W      R5, [R0]
    4b64:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:348
    4b66:	46 99       	LD.W      R0, [R6 + #5]
    4b68:	e8 98       	LD.W      R5, [R0 + #3]
    4b6a:	05 5c       	LJMP      R5
    4b6c:	00 38       	CMP       R0, #0
    4b6e:	fc f0       	JZ        $-4                   ;->0x4b66
..\X2Csrc\__LNet.c:353
    4b70:	70 10       	MOV       R7, #0
    4b72:	07 04       	SJMP      $+7                   ;->0x4b80
..\X2Csrc\__LNet.c:352
    4b74:	46 99       	LD.W      R0, [R6 + #5]
    4b76:	68 98       	LD.W      R5, [R0 + #1]
    4b78:	05 5c       	LJMP      R5
..\X2Csrc\__LNet.c:353
    4b7a:	5a 82       	LD.W      R5, [R10]
    4b7c:	ed 9a       	LD.W      R5, [R5 + #11]
    4b7e:	6f a0       	ST.W      [R5 + #1], R7
..\X2Csrc\__LNet.c:350
    4b80:	46 99       	LD.W      R0, [R6 + #5]
    4b82:	a8 98       	LD.W      R5, [R0 + #2]
    4b84:	05 5c       	LJMP      R5
    4b86:	00 38       	CMP       R0, #0
    4b88:	f6 f1       	JNZ       $-10                  ;->0x4b74
..\X2Csrc\__LNet.c:247
    4b8a:	7f 5e       	POP       {R6-R12}
    4b8c:	0d 5d       	POP       LR
    4b8e:	1d 5c       	JMP       LR
    4b90:	04 51 00 00 	.long     0x00005104 ->000020740  [!!!@2@:JB        [R0], #20	@@: NOP      

00004b94 <initLNet>:
initLNet():
..\X2Csrc\__LNet.c:420
    4b94:	c1 a0       	ST.W      [R0 + #3], R1
..\X2Csrc\__LNet.c:421
    4b96:	42 92       	ST.B      [R0 + #9], R2
..\X2Csrc\__LNet.c:422
    4b98:	03 96       	ST.B      [R0 + #24], R3
..\X2Csrc\__LNet.c:425
    4b9a:	05 45       	LD        R5, [PC + #5]         ;->0x4bac  :=0x46d0
    4b9c:	05 85       	ST.W      [R0], R5
..\X2Csrc\__LNet.c:426
    4b9e:	05 45       	LD        R5, [PC + #5]         ;->0x4bb0  :=0x46c4
    4ba0:	45 a0       	ST.W      [R0 + #1], R5
..\X2Csrc\__LNet.c:46
    4ba2:	50 10       	MOV       R5, #0
    4ba4:	45 a2       	ST.W      [R0 + #9], R5
..\X2Csrc\__LNet.c:47
    4ba6:	c5 a1       	ST.W      [R0 + #7], R5
..\X2Csrc\__LNet.c:431
    4ba8:	1d 5c       	JMP       LR
    4baa:	00 00       	NOP      NOP      
    4bac:	d0 46 00 00 	.long     0x000046d0 ->000018128  [!!!@2@:LD        R6, [PC + #208]       ;->0x4eec  :=0x5806986e	@@: NOP      
    4bb0:	c4 46 00 00 	.long     0x000046c4 ->000018116  [!!!@2@:LD        R6, [PC + #196]       ;->0x4ec0  :=0x5806986e	@@: NOP      

00004bb4 <sendSerial>:
sendSerial():
..\X2Csrc\__SerialGeneric.c:45
    4bb4:	1d 5c       	JMP       LR

00004bb6 <receiveSerial>:
receiveSerial():
..\X2Csrc\__SerialGeneric.c:50
    4bb6:	00 10       	MOV       R0, #0
    4bb8:	1d 5c       	JMP       LR

00004bba <isReceiveDataAvailable>:
isReceiveDataAvailable():
..\X2Csrc\__SerialGeneric.c:55
    4bba:	00 10       	MOV       R0, #0
    4bbc:	1d 5c       	JMP       LR

00004bbe <isSendReady>:
isSendReady():
..\X2Csrc\__SerialGeneric.c:60
    4bbe:	00 10       	MOV       R0, #0
    4bc0:	1d 5c       	JMP       LR

00004bc2 <getTxFifoFree>:
getTxFifoFree():
..\X2Csrc\__SerialGeneric.c:65
    4bc2:	00 10       	MOV       R0, #0
    4bc4:	1d 5c       	JMP       LR

00004bc6 <flush>:
flush():
..\X2Csrc\__SerialGeneric.c:70
    4bc6:	1d 5c       	JMP       LR

00004bc8 <initSerialGeneric>:
initSerialGeneric():
..\X2Csrc\__SerialGeneric.c:25
    4bc8:	07 45       	LD        R5, [PC + #7]         ;->0x4be4  :=0x4bb4
    4bca:	05 85       	ST.W      [R0], R5
..\X2Csrc\__SerialGeneric.c:26
    4bcc:	07 45       	LD        R5, [PC + #7]         ;->0x4be8  :=0x4bb6
    4bce:	45 a0       	ST.W      [R0 + #1], R5
..\X2Csrc\__SerialGeneric.c:27
    4bd0:	07 45       	LD        R5, [PC + #7]         ;->0x4bec  :=0x4bba
    4bd2:	85 a0       	ST.W      [R0 + #2], R5
..\X2Csrc\__SerialGeneric.c:28
    4bd4:	07 45       	LD        R5, [PC + #7]         ;->0x4bf0  :=0x4bbe
    4bd6:	c5 a0       	ST.W      [R0 + #3], R5
..\X2Csrc\__SerialGeneric.c:31
    4bd8:	07 45       	LD        R5, [PC + #7]         ;->0x4bf4  :=0x4bc2
    4bda:	05 a1       	ST.W      [R0 + #4], R5
..\X2Csrc\__SerialGeneric.c:32
    4bdc:	07 45       	LD        R5, [PC + #7]         ;->0x4bf8  :=0x4bc6
    4bde:	45 a1       	ST.W      [R0 + #5], R5
..\X2Csrc\__SerialGeneric.c:33
    4be0:	1d 5c       	JMP       LR
    4be2:	00 00       	NOP      NOP      
    4be4:	b4 4b 00 00 	.long     0x00004bb4 ->000019380  [!!!@2@:CLR       R6, #28	@@: NOP      
    4be8:	b6 4b 00 00 	.long     0x00004bb6 ->000019382  [!!!@2@:CLR       R6, #30	@@: NOP      
    4bec:	ba 4b 00 00 	.long     0x00004bba ->000019386  [!!!@2@:CLR       R7, #26	@@: NOP      
    4bf0:	be 4b 00 00 	.long     0x00004bbe ->000019390  [!!!@2@:CLR       R7, #30	@@: NOP      
    4bf4:	c2 4b 00 00 	.long     0x00004bc2 ->000019394  [!!!@2@:CLR       R8, #26	@@: NOP      
    4bf8:	c6 4b 00 00 	.long     0x00004bc6 ->000019398  [!!!@2@:CLR       R8, #30	@@: NOP      

00004bfc <linkSerial>:
linkSerial():
..\X2Csrc\__SerialGeneric.c:38
    4bfc:	41 a1       	ST.W      [R0 + #5], R1
..\X2Csrc\__SerialGeneric.c:39
    4bfe:	1d 5c       	JMP       LR

00004c00 <sendSvNotAvailable>:
sendSvNotAvailable():
..\X2Csrc\__Services.c:219
    4c00:	2d 5d       	PUSH      LR
..\X2Csrc\__Services.c:220
    4c02:	42 10       	MOV       R4, #2
    4c04:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:221
    4c06:	41 12       	MOV       R4, #33
    4c08:	c8 98       	LD.W      R1, [R0 + #3]
    4c0a:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:222
    4c0c:	68 98       	LD.W      R5, [R0 + #1]
    4c0e:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:223
    4c10:	0d 5d       	POP       LR
    4c12:	1d 5c       	JMP       LR

00004c14 <getDeviceInfo>:
getDeviceInfo():
..\X2Csrc\__Services.c:237
    4c14:	83 5f       	PUSH      {R6-R7,LR}
    4c16:	a0 58       	MOV       R5, R0
..\X2Csrc\__Services.c:242
    4c18:	60 8a       	LD.B      R4, [R0 + #9]
    4c1a:	4d 3a       	CMP       R4, #45
    4c1c:	02 f8       	JHI       $+2                   ;->0x4c20
    4c1e:	b5 04       	SJMP      $+181                 ;->0x4d88
..\X2Csrc\__Services.c:248
    4c20:	4e 12       	MOV       R4, #46
    4c22:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:249
    4c24:	30 10       	MOV       R3, #0
    4c26:	e0 98       	LD.W      R4, [R0 + #3]
    4c28:	63 90       	ST.B      [R4 + #1], R3
..\X2Csrc\__Services.c:252
    4c2a:	45 10       	MOV       R4, #5
    4c2c:	c0 98       	LD.W      R0, [R0 + #3]
    4c2e:	84 90       	ST.B      [R0 + #2], R4
..\X2Csrc\__Services.c:253
    4c30:	e5 98       	LD.W      R4, [R5 + #3]
    4c32:	e3 90       	ST.B      [R4 + #3], R3
..\X2Csrc\__Services.c:257
    4c34:	54 41       	LD        R1, [PC + #84]        ;->0x4d84  :=0x10001b6c
    4c36:	41 82       	LD.W      R4, [R1]
    4c38:	94 ac       	LD.H      R2, [R4 + #18]
    4c3a:	c5 98       	LD.W      R0, [R5 + #3]
    4c3c:	02 91       	ST.B      [R0 + #4], R2
..\X2Csrc\__Services.c:258
    4c3e:	94 ac       	LD.H      R2, [R4 + #18]
    4c40:	90 7c       	LSR       R2, #8
    4c42:	c5 98       	LD.W      R0, [R5 + #3]
    4c44:	42 91       	ST.B      [R0 + #5], R2
..\X2Csrc\__Services.c:261
    4c46:	55 8a       	LD.B      R2, [R5 + #9]
    4c48:	c5 98       	LD.W      R0, [R5 + #3]
    4c4a:	82 91       	ST.B      [R0 + #6], R2
..\X2Csrc\__Services.c:263
    4c4c:	c5 98       	LD.W      R0, [R5 + #3]
    4c4e:	c3 91       	ST.B      [R0 + #7], R3
..\X2Csrc\__Services.c:264
    4c50:	fd 98       	LD.W      R7, [R5 + #3]
    4c52:	3b 92       	ST.B      [R7 + #8], R3
..\X2Csrc\__Services.c:270
    4c54:	3e 14       	MOV       R3, #78
    4c56:	f5 98       	LD.W      R6, [R5 + #3]
    4c58:	73 92       	ST.B      [R6 + #9], R3
..\X2Csrc\__Services.c:271
    4c5a:	3f 16       	MOV       R3, #111
    4c5c:	d5 98       	LD.W      R2, [R5 + #3]
    4c5e:	93 92       	ST.B      [R2 + #10], R3
..\X2Csrc\__Services.c:272
    4c60:	36 17       	MOV       R3, #118
    4c62:	c5 98       	LD.W      R0, [R5 + #3]
    4c64:	c3 92       	ST.B      [R0 + #11], R3
..\X2Csrc\__Services.c:273
    4c66:	32 13       	MOV       R3, #50
    4c68:	fd 98       	LD.W      R7, [R5 + #3]
    4c6a:	3b 93       	ST.B      [R7 + #12], R3
..\X2Csrc\__Services.c:274
    4c6c:	25 13       	MOV       R2, #53
    4c6e:	f5 98       	LD.W      R6, [R5 + #3]
    4c70:	72 93       	ST.B      [R6 + #13], R2
..\X2Csrc\__Services.c:275
    4c72:	d5 98       	LD.W      R2, [R5 + #3]
    4c74:	93 93       	ST.B      [R2 + #14], R3
..\X2Csrc\__Services.c:276
    4c76:	20 13       	MOV       R2, #48
    4c78:	c5 98       	LD.W      R0, [R5 + #3]
    4c7a:	c2 93       	ST.B      [R0 + #15], R2
..\X2Csrc\__Services.c:277
    4c7c:	c5 98       	LD.W      R0, [R5 + #3]
    4c7e:	03 94       	ST.B      [R0 + #16], R3
..\X2Csrc\__Services.c:278
    4c80:	c5 98       	LD.W      R0, [R5 + #3]
    4c82:	42 94       	ST.B      [R0 + #17], R2
..\X2Csrc\__Services.c:283
    4c84:	31 13       	MOV       R3, #49
    4c86:	fd 98       	LD.W      R7, [R5 + #3]
    4c88:	bb 94       	ST.B      [R7 + #18], R3
..\X2Csrc\__Services.c:284
    4c8a:	36 13       	MOV       R3, #54
    4c8c:	f5 98       	LD.W      R6, [R5 + #3]
    4c8e:	f3 94       	ST.B      [R6 + #19], R3
..\X2Csrc\__Services.c:285
    4c90:	34 13       	MOV       R3, #52
    4c92:	d5 98       	LD.W      R2, [R5 + #3]
    4c94:	13 95       	ST.B      [R2 + #20], R3
..\X2Csrc\__Services.c:286
    4c96:	39 13       	MOV       R3, #57
    4c98:	c3 58       	MOV       R6, R3
    4c9a:	c5 98       	LD.W      R0, [R5 + #3]
    4c9c:	43 95       	ST.B      [R0 + #21], R3
..\X2Csrc\__Services.c:288
    4c9e:	9c 9a       	LD.W      R3, [R4 + #10]
    4ca0:	30 38       	CMP       R3, #0
    4ca2:	7d f0       	JZ        $+125                 ;->0x4d9c
..\X2Csrc\__Services.c:305
    4ca4:	9c 9a       	LD.W      R3, [R4 + #10]
    4ca6:	33 80       	LD.B      R3, [R3]
    4ca8:	c5 98       	LD.W      R0, [R5 + #3]
    4caa:	83 95       	ST.B      [R0 + #22], R3
..\X2Csrc\__Services.c:306
    4cac:	9c 9a       	LD.W      R3, [R4 + #10]
    4cae:	5b 88       	LD.B      R3, [R3 + #1]
    4cb0:	f5 98       	LD.W      R6, [R5 + #3]
    4cb2:	f3 95       	ST.B      [R6 + #23], R3
..\X2Csrc\__Services.c:307
    4cb4:	9c 9a       	LD.W      R3, [R4 + #10]
    4cb6:	9b 88       	LD.B      R3, [R3 + #2]
    4cb8:	cd 98       	LD.W      R1, [R5 + #3]
    4cba:	0b 96       	ST.B      [R1 + #24], R3
..\X2Csrc\__Services.c:308
    4cbc:	9c 9a       	LD.W      R3, [R4 + #10]
    4cbe:	1b 89       	LD.B      R3, [R3 + #4]
    4cc0:	fd 98       	LD.W      R7, [R5 + #3]
    4cc2:	7b 96       	ST.B      [R7 + #25], R3
..\X2Csrc\__Services.c:309
    4cc4:	9c 9a       	LD.W      R3, [R4 + #10]
    4cc6:	5b 89       	LD.B      R3, [R3 + #5]
    4cc8:	d5 98       	LD.W      R2, [R5 + #3]
    4cca:	93 96       	ST.B      [R2 + #26], R3
..\X2Csrc\__Services.c:310
    4ccc:	9c 9a       	LD.W      R3, [R4 + #10]
    4cce:	db 89       	LD.B      R3, [R3 + #7]
    4cd0:	c5 98       	LD.W      R0, [R5 + #3]
    4cd2:	c3 96       	ST.B      [R0 + #27], R3
..\X2Csrc\__Services.c:311
    4cd4:	9c 9a       	LD.W      R3, [R4 + #10]
    4cd6:	1b 8a       	LD.B      R3, [R3 + #8]
    4cd8:	f5 98       	LD.W      R6, [R5 + #3]
    4cda:	33 97       	ST.B      [R6 + #28], R3
..\X2Csrc\__Services.c:312
    4cdc:	9c 9a       	LD.W      R3, [R4 + #10]
    4cde:	5b 8a       	LD.B      R3, [R3 + #9]
    4ce0:	cd 98       	LD.W      R1, [R5 + #3]
    4ce2:	4b 97       	ST.B      [R1 + #29], R3
..\X2Csrc\__Services.c:313
    4ce4:	9c 9a       	LD.W      R3, [R4 + #10]
    4ce6:	9b 8a       	LD.B      R3, [R3 + #10]
    4ce8:	fd 98       	LD.W      R7, [R5 + #3]
    4cea:	bb 97       	ST.B      [R7 + #30], R3
..\X2Csrc\__Services.c:314
    4cec:	9c 9a       	LD.W      R3, [R4 + #10]
    4cee:	db 8a       	LD.B      R3, [R3 + #11]
    4cf0:	d5 98       	LD.W      R2, [R5 + #3]
    4cf2:	c3 58       	MOV       R6, R3
    4cf4:	d3 97       	ST.B      [R2 + #31], R3
..\X2Csrc\__Services.c:315
    4cf6:	9c 9a       	LD.W      R3, [R4 + #10]
    4cf8:	13 8b       	LD.B      R2, [R3 + #12]
    4cfa:	dd 98       	LD.W      R3, [R5 + #3]
    4cfc:	30 2a       	ADD       R3, #32
    4cfe:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:316
    4d00:	9c 9a       	LD.W      R3, [R4 + #10]
    4d02:	93 8b       	LD.B      R2, [R3 + #14]
    4d04:	dd 98       	LD.W      R3, [R5 + #3]
    4d06:	31 2a       	ADD       R3, #33
    4d08:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:317
    4d0a:	9c 9a       	LD.W      R3, [R4 + #10]
    4d0c:	d3 8b       	LD.B      R2, [R3 + #15]
    4d0e:	dd 98       	LD.W      R3, [R5 + #3]
    4d10:	32 2a       	ADD       R3, #34
    4d12:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:320
    4d14:	d4 98       	LD.W      R2, [R4 + #3]
    4d16:	dd 98       	LD.W      R3, [R5 + #3]
    4d18:	33 2a       	ADD       R3, #35
    4d1a:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:321
    4d1c:	14 aa       	LD.H      R2, [R4 + #8]
    4d1e:	dd 98       	LD.W      R3, [R5 + #3]
    4d20:	34 2a       	ADD       R3, #36
    4d22:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:322
    4d24:	14 aa       	LD.H      R2, [R4 + #8]
    4d26:	dd 98       	LD.W      R3, [R5 + #3]
    4d28:	35 2a       	ADD       R3, #37
    4d2a:	90 7c       	LSR       R2, #8
    4d2c:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:323
    4d2e:	54 99       	LD.W      R2, [R4 + #5]
    4d30:	dd 98       	LD.W      R3, [R5 + #3]
    4d32:	36 2a       	ADD       R3, #38
    4d34:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:324
    4d36:	54 99       	LD.W      R2, [R4 + #5]
    4d38:	dd 98       	LD.W      R3, [R5 + #3]
    4d3a:	37 2a       	ADD       R3, #39
    4d3c:	90 7c       	LSR       R2, #8
    4d3e:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:325
    4d40:	54 99       	LD.W      R2, [R4 + #5]
    4d42:	dd 98       	LD.W      R3, [R5 + #3]
    4d44:	38 2a       	ADD       R3, #40
    4d46:	10 7d       	LSR       R2, #16
    4d48:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:326
    4d4a:	54 99       	LD.W      R2, [R4 + #5]
    4d4c:	dd 98       	LD.W      R3, [R5 + #3]
    4d4e:	39 2a       	ADD       R3, #41
    4d50:	90 7d       	LSR       R2, #24
    4d52:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:329
    4d54:	dd 98       	LD.W      R3, [R5 + #3]
    4d56:	3a 2a       	ADD       R3, #42
    4d58:	34 83       	ST.B      [R3], R4
..\X2Csrc\__Services.c:330
    4d5a:	dd 98       	LD.W      R3, [R5 + #3]
    4d5c:	3b 2a       	ADD       R3, #43
    4d5e:	08 10       	MOV       R0, #8
    4d60:	14 dc       	LSR       R2, R4, R0
    4d62:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:331
    4d64:	dd 98       	LD.W      R3, [R5 + #3]
    4d66:	3c 2a       	ADD       R3, #44
    4d68:	10 11       	MOV       R1, #16
    4d6a:	54 dc       	LSR       R2, R4, R1
    4d6c:	32 83       	ST.B      [R3], R2
..\X2Csrc\__Services.c:332
    4d6e:	dd 98       	LD.W      R3, [R5 + #3]
    4d70:	3d 2a       	ADD       R3, #45
    4d72:	a0 7d       	LSR       R4, #24
    4d74:	34 83       	ST.B      [R3], R4
..\X2Csrc\__Services.c:334
    4d76:	65 98       	LD.W      R4, [R5 + #1]
    4d78:	05 58       	MOV       R0, R5
    4d7a:	04 5c       	LJMP      R4
..\X2Csrc\__Services.c:335
    4d7c:	03 5e       	POP       {R6-R7}
    4d7e:	0d 5d       	POP       LR
    4d80:	1d 5c       	JMP       LR
    4d82:	00 00       	NOP      NOP      
    4d84:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__Services.c:228
    4d88:	42 10       	MOV       R4, #2
    4d8a:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:229
    4d8c:	45 11       	MOV       R4, #21
    4d8e:	c8 98       	LD.W      R1, [R0 + #3]
    4d90:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:230
    4d92:	68 98       	LD.W      R5, [R0 + #1]
    4d94:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:335
    4d96:	03 5e       	POP       {R6-R7}
    4d98:	0d 5d       	POP       LR
    4d9a:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:288
    4d9c:	4c 10       	MOV       R4, #12
..\X2Csrc\__Services.c:293
    4d9e:	0d 12       	MOV       R0, #45
..\X2Csrc\__Services.c:294
    4da0:	2f 1f       	MOV       R2, #255
..\X2Csrc\__Services.c:293
    4da2:	fd 98       	LD.W      R7, [R5 + #3]
    4da4:	1f c3       	ADD       R3, R7, R4
    4da6:	98 95       	ST.B      [R3 + #22], R0
..\X2Csrc\__Services.c:294
    4da8:	64 cc       	SUB       R4, R4, #1
    4daa:	44 d1       	ZXT.B     R4, R4
    4dac:	42 70       	CMP       R4, R2
    4dae:	fa f1       	JNZ       $-6                   ;->0x4da2
    4db0:	41 82       	LD.W      R4, [R1]
    4db2:	b1 07       	SJMP      $-79                  ;->0x4d14

00004db4 <saveParameter>:
saveParameter():
..\X2Csrc\__Services.c:341
    4db4:	8f 5f       	PUSH      {R6-R9,LR}
    4db6:	c0 58       	MOV       R6, R0
..\X2Csrc\__Services.c:348
    4db8:	c8 98       	LD.W      R1, [R0 + #3]
    4dba:	b9 88       	LD.B      R7, [R1 + #2]
    4dbc:	b8 7a       	LSL       R7, #8
    4dbe:	69 88       	LD.B      R5, [R1 + #1]
    4dc0:	7f c3       	ADD       R7, R7, R5
    4dc2:	77 d0       	ZXT.H     R7, R7
..\X2Csrc\__Services.c:350
    4dc4:	37 45       	LD        R5, [PC + #55]        ;->0x4ea0  :=0x10001b6c
    4dc6:	55 82       	LD.W      R5, [R5]
    4dc8:	25 82       	LD.W      R2, [R5]
..\X2Csrc\__Services.c:551
    4dca:	20 38       	CMP       R2, #0
    4dcc:	02 f1       	JNZ       $+2                   ;->0x4dd0
    4dce:	95 04       	SJMP      $+149                 ;->0x4ef8
..\X2Csrc\__Services.c:560
    4dd0:	42 81       	LD.H      R4, [R2]
    4dd2:	74 70       	CMP       R7, R4
    4dd4:	02 f1       	JNZ       $+2                   ;->0x4dd8
    4dd6:	95 04       	SJMP      $+149                 ;->0x4f00
    4dd8:	40 38       	CMP       R4, #0
    4dda:	65 f0       	JZ        $+101                 ;->0x4ea4
    4ddc:	30 10       	MOV       R3, #0
    4dde:	03 04       	SJMP      $+3                   ;->0x4de4
    4de0:	40 38       	CMP       R4, #0
    4de2:	61 f0       	JZ        $+97                  ;->0x4ea4
..\X2Csrc\__Services.c:562
    4de4:	5b c0       	ADD       R3, R3, #1
    4de6:	33 d0       	ZXT.H     R3, R3
..\X2Csrc\__Services.c:560
    4de8:	03 10       	MOV       R0, #3
    4dea:	23 da       	LSL       R4, R3, R0
    4dec:	02 c3       	ADD       R0, R2, R4
    4dee:	22 e7       	LD.H      R4, [R2 + R4]
    4df0:	74 70       	CMP       R7, R4
    4df2:	f7 f1       	JNZ       $-9                   ;->0x4de0
..\X2Csrc\__Services.c:565
    4df4:	40 38       	CMP       R4, #0
    4df6:	57 f0       	JZ        $+87                  ;->0x4ea4
..\X2Csrc\__Services.c:572
    4df8:	40 98       	LD.W      R0, [R0 + #1]
    4dfa:	20 59       	MOV       R9, R0
..\X2Csrc\__Services.c:358
    4dfc:	a5 98       	LD.W      R4, [R5 + #2]
    4dfe:	40 38       	CMP       R4, #0
    4e00:	1b f0       	JZ        $+27                  ;->0x4e36
..\X2Csrc\__Services.c:362
    4e02:	a5 98       	LD.W      R4, [R5 + #2]
    4e04:	44 81       	LD.H      R4, [R4]
    4e06:	47 70       	CMP       R4, R7
    4e08:	7e f0       	JZ        $+126                 ;->0x4f04
..\X2Csrc\__Services.c:363
    4e0a:	a5 98       	LD.W      R4, [R5 + #2]
..\X2Csrc\__Services.c:362
    4e0c:	34 81       	LD.H      R3, [R4]
    4e0e:	30 38       	CMP       R3, #0
    4e10:	0f f0       	JZ        $+15                  ;->0x4e2e
    4e12:	40 10       	MOV       R4, #0
    4e14:	05 04       	SJMP      $+5                   ;->0x4e1e
..\X2Csrc\__Services.c:363
    4e16:	95 98       	LD.W      R2, [R5 + #2]
..\X2Csrc\__Services.c:362
    4e18:	d2 e6       	LD.H      R2, [R2 + R3]
    4e1a:	20 38       	CMP       R2, #0
    4e1c:	09 f0       	JZ        $+9                   ;->0x4e2e
..\X2Csrc\__Services.c:365
    4e1e:	64 c0       	ADD       R4, R4, #1
    4e20:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Services.c:362
    4e22:	95 98       	LD.W      R2, [R5 + #2]
    4e24:	03 10       	MOV       R0, #3
    4e26:	1c da       	LSL       R3, R4, R0
    4e28:	d2 e6       	LD.H      R2, [R2 + R3]
    4e2a:	27 70       	CMP       R2, R7
    4e2c:	f5 f1       	JNZ       $-11                  ;->0x4e16
..\X2Csrc\__Services.c:368
    4e2e:	a5 98       	LD.W      R4, [R5 + #2]
    4e30:	e4 e6       	LD.H      R4, [R4 + R3]
    4e32:	40 38       	CMP       R4, #0
    4e34:	4c f1       	JNZ       $+76                  ;->0x4ecc
..\X2Csrc\__Services.c:379
    4e36:	65 98       	LD.W      R4, [R5 + #1]
    4e38:	40 38       	CMP       R4, #0
    4e3a:	67 f0       	JZ        $+103                 ;->0x4f08
..\X2Csrc\__Services.c:386
    4e3c:	79 81       	LD.H      R7, [R9]
..\X2Csrc\__Services.c:389
    4e3e:	65 98       	LD.W      R4, [R5 + #1]
    4e40:	44 81       	LD.H      R4, [R4]
    4e42:	47 70       	CMP       R4, R7
    4e44:	6a f0       	JZ        $+106                 ;->0x4f18
    4e46:	65 98       	LD.W      R4, [R5 + #1]
    4e48:	44 81       	LD.H      R4, [R4]
    4e4a:	40 38       	CMP       R4, #0
    4e4c:	11 f0       	JZ        $+17                  ;->0x4e6e
    4e4e:	30 10       	MOV       R3, #0
    4e50:	88 11       	MOV       R8, #24
    4e52:	05 04       	SJMP      $+5                   ;->0x4e5c
    4e54:	55 98       	LD.W      R2, [R5 + #1]
    4e56:	12 e7       	LD.H      R2, [R2 + R4]
    4e58:	20 38       	CMP       R2, #0
    4e5a:	0a f0       	JZ        $+10                  ;->0x4e6e
..\X2Csrc\__Services.c:391
    4e5c:	5b c0       	ADD       R3, R3, #1
    4e5e:	33 d0       	ZXT.H     R3, R3
..\X2Csrc\__Services.c:389
    4e60:	55 98       	LD.W      R2, [R5 + #1]
    4e62:	08 58       	MOV       R0, R8
    4e64:	23 ca       	MULS      R4, R3, R0
    4e66:	00 00       	NOP      NOP      
    4e68:	12 e7       	LD.H      R2, [R2 + R4]
    4e6a:	27 70       	CMP       R2, R7
    4e6c:	f4 f1       	JNZ       $-12                  ;->0x4e54
..\X2Csrc\__Services.c:394
    4e6e:	5d 98       	LD.W      R3, [R5 + #1]
    4e70:	1b e7       	LD.H      R3, [R3 + R4]
    4e72:	30 38       	CMP       R3, #0
    4e74:	22 f0       	JZ        $+34                  ;->0x4eb8
..\X2Csrc\__Services.c:401
    4e76:	6d 98       	LD.W      R5, [R5 + #1]
    4e78:	25 c3       	ADD       R4, R5, R4
    4e7a:	16 8a       	LD.B      R2, [R6 + #8]
    4e7c:	d2 cc       	SUB       R2, R2, #3
    4e7e:	2c 99       	LD.W      R5, [R4 + #4]
    4e80:	09 58       	MOV       R0, R9
    4e82:	c9 c0       	ADD       R1, R1, #3
    4e84:	22 d1       	ZXT.B     R2, R2
    4e86:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:228
    4e88:	52 10       	MOV       R5, #2
    4e8a:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:401
    4e8c:	00 38       	CMP       R0, #0
    4e8e:	37 f1       	JNZ       $+55                  ;->0x4efc
..\X2Csrc\__Services.c:408
    4e90:	ee 98       	LD.W      R5, [R6 + #3]
    4e92:	68 90       	ST.B      [R5 + #1], R0
..\X2Csrc\__Services.c:409
    4e94:	6e 98       	LD.W      R5, [R6 + #1]
    4e96:	06 58       	MOV       R0, R6
    4e98:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:410
    4e9a:	0f 5e       	POP       {R6-R9}
    4e9c:	0d 5d       	POP       LR
    4e9e:	1d 5c       	JMP       LR
    4ea0:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__Services.c:568
    4ea4:	40 14       	MOV       R4, #64
..\X2Csrc\__Services.c:228
    4ea6:	52 10       	MOV       R5, #2
    4ea8:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    4eaa:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:230
    4eac:	6e 98       	LD.W      R5, [R6 + #1]
    4eae:	06 58       	MOV       R0, R6
    4eb0:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:410
    4eb2:	0f 5e       	POP       {R6-R9}
    4eb4:	0d 5d       	POP       LR
    4eb6:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:228
    4eb8:	52 10       	MOV       R5, #2
    4eba:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    4ebc:	51 14       	MOV       R5, #65
    4ebe:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Services.c:230
    4ec0:	6e 98       	LD.W      R5, [R6 + #1]
    4ec2:	06 58       	MOV       R0, R6
    4ec4:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:410
    4ec6:	0f 5e       	POP       {R6-R9}
    4ec8:	0d 5d       	POP       LR
    4eca:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:371
    4ecc:	ad 98       	LD.W      R5, [R5 + #2]
    4ece:	dd c2       	ADD       R3, R5, R3
    4ed0:	16 8a       	LD.B      R2, [R6 + #8]
    4ed2:	d2 cc       	SUB       R2, R2, #3
    4ed4:	6b 98       	LD.W      R5, [R3 + #1]
    4ed6:	09 58       	MOV       R0, R9
    4ed8:	c9 c0       	ADD       R1, R1, #3
    4eda:	22 d1       	ZXT.B     R2, R2
    4edc:	05 5c       	LJMP      R5
    4ede:	00 38       	CMP       R0, #0
    4ee0:	dd f0       	JZ        $-35                  ;->0x4e9a
..\X2Csrc\__Services.c:228
    4ee2:	52 10       	MOV       R5, #2
    4ee4:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    4ee6:	52 14       	MOV       R5, #66
    4ee8:	d6 98       	LD.W      R2, [R6 + #3]
    4eea:	55 90       	ST.B      [R2 + #1], R5
..\X2Csrc\__Services.c:230
    4eec:	6e 98       	LD.W      R5, [R6 + #1]
    4eee:	06 58       	MOV       R0, R6
    4ef0:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:410
    4ef2:	0f 5e       	POP       {R6-R9}
    4ef4:	0d 5d       	POP       LR
    4ef6:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:554
    4ef8:	43 14       	MOV       R4, #67
    4efa:	d6 07       	SJMP      $-42                  ;->0x4ea6
..\X2Csrc\__Services.c:229
    4efc:	54 11       	MOV       R5, #20
    4efe:	f5 07       	SJMP      $-11                  ;->0x4ee8
..\X2Csrc\__Services.c:560
    4f00:	02 58       	MOV       R0, R2
    4f02:	79 07       	SJMP      $-135                 ;->0x4df4
..\X2Csrc\__Services.c:362
    4f04:	30 10       	MOV       R3, #0
    4f06:	94 07       	SJMP      $-108                 ;->0x4e2e
..\X2Csrc\__Services.c:228
    4f08:	52 10       	MOV       R5, #2
    4f0a:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    4f0c:	54 14       	MOV       R5, #68
    4f0e:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Services.c:230
    4f10:	6e 98       	LD.W      R5, [R6 + #1]
    4f12:	06 58       	MOV       R0, R6
    4f14:	05 5c       	LJMP      R5
    4f16:	c2 07       	SJMP      $-62                  ;->0x4e9a
..\X2Csrc\__Services.c:389
    4f18:	40 10       	MOV       R4, #0
    4f1a:	aa 07       	SJMP      $-86                  ;->0x4e6e

00004f1c <loadParameter>:
loadParameter():
..\X2Csrc\__Services.c:417
    4f1c:	87 5f       	PUSH      {R6-R8,LR}
    4f1e:	c0 58       	MOV       R6, R0
..\X2Csrc\__Services.c:424
    4f20:	c8 98       	LD.W      R1, [R0 + #3]
    4f22:	81 88       	LD.B      R0, [R1 + #2]
    4f24:	80 7a       	LSL       R0, #8
    4f26:	69 88       	LD.B      R5, [R1 + #1]
    4f28:	40 c3       	ADD       R0, R0, R5
    4f2a:	00 d0       	ZXT.H     R0, R0
..\X2Csrc\__Services.c:427
    4f2c:	25 45       	LD        R5, [PC + #37]        ;->0x4fc0  :=0x10001b6c
    4f2e:	25 82       	LD.W      R2, [R5]
    4f30:	32 82       	LD.W      R3, [R2]
..\X2Csrc\__Services.c:551
    4f32:	30 38       	CMP       R3, #0
    4f34:	5c f0       	JZ        $+92                  ;->0x4fec
..\X2Csrc\__Services.c:560
    4f36:	53 81       	LD.H      R5, [R3]
    4f38:	05 70       	CMP       R0, R5
    4f3a:	5b f0       	JZ        $+91                  ;->0x4ff0
    4f3c:	50 38       	CMP       R5, #0
    4f3e:	43 f0       	JZ        $+67                  ;->0x4fc4
    4f40:	40 10       	MOV       R4, #0
    4f42:	03 04       	SJMP      $+3                   ;->0x4f48
    4f44:	50 38       	CMP       R5, #0
    4f46:	3f f0       	JZ        $+63                  ;->0x4fc4
..\X2Csrc\__Services.c:562
    4f48:	64 c0       	ADD       R4, R4, #1
    4f4a:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Services.c:560
    4f4c:	73 10       	MOV       R7, #3
    4f4e:	ec db       	LSL       R5, R4, R7
    4f50:	7b c3       	ADD       R7, R3, R5
    4f52:	6b e7       	LD.H      R5, [R3 + R5]
    4f54:	05 70       	CMP       R0, R5
    4f56:	f7 f1       	JNZ       $-9                   ;->0x4f44
..\X2Csrc\__Services.c:565
    4f58:	50 38       	CMP       R5, #0
    4f5a:	35 f0       	JZ        $+53                  ;->0x4fc4
..\X2Csrc\__Services.c:572
    4f5c:	7f 98       	LD.W      R7, [R7 + #1]
    4f5e:	07 59       	MOV       R8, R7
..\X2Csrc\__Services.c:435
    4f60:	6a 98       	LD.W      R5, [R2 + #1]
    4f62:	50 38       	CMP       R5, #0
    4f64:	48 f0       	JZ        $+72                  ;->0x4ff4
..\X2Csrc\__Services.c:441
    4f66:	77 81       	LD.H      R7, [R7]
..\X2Csrc\__Services.c:444
    4f68:	6a 98       	LD.W      R5, [R2 + #1]
    4f6a:	55 81       	LD.H      R5, [R5]
    4f6c:	57 70       	CMP       R5, R7
    4f6e:	4b f0       	JZ        $+75                  ;->0x5004
    4f70:	6a 98       	LD.W      R5, [R2 + #1]
    4f72:	55 81       	LD.H      R5, [R5]
    4f74:	50 38       	CMP       R5, #0
    4f76:	10 f0       	JZ        $+16                  ;->0x4f96
    4f78:	40 10       	MOV       R4, #0
    4f7a:	08 11       	MOV       R0, #24
    4f7c:	05 04       	SJMP      $+5                   ;->0x4f86
    4f7e:	5a 98       	LD.W      R3, [R2 + #1]
    4f80:	5b e7       	LD.H      R3, [R3 + R5]
    4f82:	30 38       	CMP       R3, #0
    4f84:	09 f0       	JZ        $+9                   ;->0x4f96
..\X2Csrc\__Services.c:446
    4f86:	64 c0       	ADD       R4, R4, #1
    4f88:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Services.c:444
    4f8a:	5a 98       	LD.W      R3, [R2 + #1]
    4f8c:	2c ca       	MULS      R5, R4, R0
    4f8e:	00 00       	NOP      NOP      
    4f90:	5b e7       	LD.H      R3, [R3 + R5]
    4f92:	37 70       	CMP       R3, R7
    4f94:	f5 f1       	JNZ       $-11                  ;->0x4f7e
..\X2Csrc\__Services.c:449
    4f96:	62 98       	LD.W      R4, [R2 + #1]
    4f98:	64 e7       	LD.H      R4, [R4 + R5]
    4f9a:	40 38       	CMP       R4, #0
    4f9c:	1e f0       	JZ        $+30                  ;->0x4fd8
..\X2Csrc\__Services.c:455
    4f9e:	62 98       	LD.W      R4, [R2 + #1]
    4fa0:	6c c3       	ADD       R5, R4, R5
    4fa2:	ed 98       	LD.W      R5, [R5 + #3]
    4fa4:	08 58       	MOV       R0, R8
    4fa6:	89 c0       	ADD       R1, R1, #2
    4fa8:	05 5c       	LJMP      R5
    4faa:	80 c0       	ADD       R0, R0, #2
    4fac:	30 92       	ST.B      [R6 + #8], R0
..\X2Csrc\__Services.c:456
    4fae:	50 10       	MOV       R5, #0
    4fb0:	d6 98       	LD.W      R2, [R6 + #3]
    4fb2:	55 90       	ST.B      [R2 + #1], R5
..\X2Csrc\__Services.c:457
    4fb4:	6e 98       	LD.W      R5, [R6 + #1]
    4fb6:	06 58       	MOV       R0, R6
    4fb8:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:458
    4fba:	07 5e       	POP       {R6-R8}
    4fbc:	0d 5d       	POP       LR
    4fbe:	1d 5c       	JMP       LR
    4fc0:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__Services.c:568
    4fc4:	40 14       	MOV       R4, #64
..\X2Csrc\__Services.c:228
    4fc6:	52 10       	MOV       R5, #2
    4fc8:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    4fca:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:230
    4fcc:	6e 98       	LD.W      R5, [R6 + #1]
    4fce:	06 58       	MOV       R0, R6
    4fd0:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:458
    4fd2:	07 5e       	POP       {R6-R8}
    4fd4:	0d 5d       	POP       LR
    4fd6:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:228
    4fd8:	52 10       	MOV       R5, #2
    4fda:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    4fdc:	51 14       	MOV       R5, #65
    4fde:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Services.c:230
    4fe0:	6e 98       	LD.W      R5, [R6 + #1]
    4fe2:	06 58       	MOV       R0, R6
    4fe4:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:458
    4fe6:	07 5e       	POP       {R6-R8}
    4fe8:	0d 5d       	POP       LR
    4fea:	1d 5c       	JMP       LR
..\X2Csrc\__Services.c:554
    4fec:	43 14       	MOV       R4, #67
    4fee:	ec 07       	SJMP      $-20                  ;->0x4fc6
..\X2Csrc\__Services.c:560
    4ff0:	e3 58       	MOV       R7, R3
    4ff2:	b3 07       	SJMP      $-77                  ;->0x4f58
..\X2Csrc\__Services.c:228
    4ff4:	52 10       	MOV       R5, #2
    4ff6:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Services.c:229
    4ff8:	54 14       	MOV       R5, #68
    4ffa:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Services.c:230
    4ffc:	6e 98       	LD.W      R5, [R6 + #1]
    4ffe:	06 58       	MOV       R0, R6
    5000:	05 5c       	LJMP      R5
    5002:	dc 07       	SJMP      $-36                  ;->0x4fba
..\X2Csrc\__Services.c:444
    5004:	50 10       	MOV       R5, #0
    5006:	c8 07       	SJMP      $-56                  ;->0x4f96

00005008 <setTargetState>:
setTargetState():
..\X2Csrc\__Services.c:465
    5008:	2d 5d       	PUSH      LR
..\X2Csrc\__Services.c:468
    500a:	e8 98       	LD.W      R5, [R0 + #3]
    500c:	5d 88       	LD.B      R3, [R5 + #1]
..\X2Csrc\__Services.c:489
    500e:	42 12       	MOV       R4, #34
..\X2Csrc\__Services.c:468
    5010:	35 38       	CMP       R3, #5
    5012:	18 f8       	JHI       $+24                  ;->0x5042
    5014:	1a 7a       	LSL       R3, #2
    5016:	02 44       	LD        R4, [PC + #2]         ;->0x501c  :=0x5020
    5018:	e4 e8       	LD.W      R4, [R4 + R3]
    501a:	14 5c       	JMP       R4
    501c:	20 50 00 00 	.long     0x00005020 ->000020512  [!!!@2@:JB        [R4], #0	@@: NOP      

00005020 <.text$setTargetState$sdata_local_1>:
    5020:	70 50 00 00 8c 50 00 00 a8 50 00 00 c4 50 00 00     pP...P...P...P..
    5030:	54 50 00 00 38 50 00 00                             TP..8P..

00005038 <.text$setTargetState$scode_loacal_6>:
..\X2Csrc\__Services.c:486
    5038:	06 44       	LD        R4, [PC + #6]         ;->0x5050  :=0x10001b6c
    503a:	44 82       	LD.W      R4, [R4]
    503c:	35 10       	MOV       R3, #5
    503e:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    5040:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    5042:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    5044:	52 10       	MOV       R5, #2
    5046:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    5048:	68 98       	LD.W      R5, [R0 + #1]
    504a:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    504c:	0d 5d       	POP       LR
    504e:	1d 5c       	JMP       LR
    5050:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__Services.c:483
    5054:	06 44       	LD        R4, [PC + #6]         ;->0x506c  :=0x10001b6c
    5056:	44 82       	LD.W      R4, [R4]
    5058:	34 10       	MOV       R3, #4
    505a:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    505c:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    505e:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    5060:	52 10       	MOV       R5, #2
    5062:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    5064:	68 98       	LD.W      R5, [R0 + #1]
    5066:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    5068:	0d 5d       	POP       LR
    506a:	1d 5c       	JMP       LR
    506c:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__Services.c:471
    5070:	06 44       	LD        R4, [PC + #6]         ;->0x5088  :=0x10001b6c
    5072:	34 82       	LD.W      R3, [R4]
    5074:	40 10       	MOV       R4, #0
    5076:	dc a0       	ST.W      [R3 + #3], R4
..\X2Csrc\__Services.c:493
    5078:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    507a:	52 10       	MOV       R5, #2
    507c:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    507e:	68 98       	LD.W      R5, [R0 + #1]
    5080:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    5082:	0d 5d       	POP       LR
    5084:	1d 5c       	JMP       LR
    5086:	00 00       	NOP      NOP      
    5088:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__Services.c:474
    508c:	06 44       	LD        R4, [PC + #6]         ;->0x50a4  :=0x10001b6c
    508e:	44 82       	LD.W      R4, [R4]
    5090:	31 10       	MOV       R3, #1
    5092:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    5094:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    5096:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    5098:	52 10       	MOV       R5, #2
    509a:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    509c:	68 98       	LD.W      R5, [R0 + #1]
    509e:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    50a0:	0d 5d       	POP       LR
    50a2:	1d 5c       	JMP       LR
    50a4:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__Services.c:477
    50a8:	06 44       	LD        R4, [PC + #6]         ;->0x50c0  :=0x10001b6c
    50aa:	44 82       	LD.W      R4, [R4]
    50ac:	32 10       	MOV       R3, #2
    50ae:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    50b0:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    50b2:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    50b4:	52 10       	MOV       R5, #2
    50b6:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    50b8:	68 98       	LD.W      R5, [R0 + #1]
    50ba:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    50bc:	0d 5d       	POP       LR
    50be:	1d 5c       	JMP       LR
    50c0:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__Services.c:480
    50c4:	06 44       	LD        R4, [PC + #6]         ;->0x50dc  :=0x10001b6c
    50c6:	44 82       	LD.W      R4, [R4]
    50c8:	33 10       	MOV       R3, #3
    50ca:	e3 a0       	ST.W      [R4 + #3], R3
..\X2Csrc\__Services.c:466
    50cc:	40 10       	MOV       R4, #0
..\X2Csrc\__Services.c:493
    50ce:	6c 90       	ST.B      [R5 + #1], R4
..\X2Csrc\__Services.c:494
    50d0:	52 10       	MOV       R5, #2
    50d2:	05 92       	ST.B      [R0 + #8], R5
..\X2Csrc\__Services.c:495
    50d4:	68 98       	LD.W      R5, [R0 + #1]
    50d6:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:496
    50d8:	0d 5d       	POP       LR
    50da:	1d 5c       	JMP       LR
    50dc:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0

000050e0 <getTargetState>:
getTargetState():
..\X2Csrc\__Services.c:502
    50e0:	2d 5d       	PUSH      LR
..\X2Csrc\__Services.c:503
    50e2:	40 10       	MOV       R4, #0
    50e4:	c8 98       	LD.W      R1, [R0 + #3]
    50e6:	4c 90       	ST.B      [R1 + #1], R4
..\X2Csrc\__Services.c:504
    50e8:	06 44       	LD        R4, [PC + #6]         ;->0x5100  :=0x10001b6c
    50ea:	44 82       	LD.W      R4, [R4]
    50ec:	e4 98       	LD.W      R4, [R4 + #3]
    50ee:	c8 98       	LD.W      R1, [R0 + #3]
    50f0:	8c 90       	ST.B      [R1 + #2], R4
..\X2Csrc\__Services.c:505
    50f2:	43 10       	MOV       R4, #3
    50f4:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:506
    50f6:	68 98       	LD.W      R5, [R0 + #1]
    50f8:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:507
    50fa:	0d 5d       	POP       LR
    50fc:	1d 5c       	JMP       LR
    50fe:	00 00       	NOP      NOP      
    5100:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0

00005104 <sendError>:
sendError():
..\X2Csrc\__Services.c:227
    5104:	2d 5d       	PUSH      LR
..\X2Csrc\__Services.c:228
    5106:	42 10       	MOV       R4, #2
    5108:	04 92       	ST.B      [R0 + #8], R4
..\X2Csrc\__Services.c:229
    510a:	d0 98       	LD.W      R2, [R0 + #3]
    510c:	51 90       	ST.B      [R2 + #1], R1
..\X2Csrc\__Services.c:230
    510e:	68 98       	LD.W      R5, [R0 + #1]
    5110:	05 5c       	LJMP      R5
..\X2Csrc\__Services.c:231
    5112:	0d 5d       	POP       LR
    5114:	1d 5c       	JMP       LR
	...

00005118 <initServiceTable>:
initServiceTable():
..\X2Csrc\__Services.c:514
    5118:	05 42       	LD        R2, [PC + #5]         ;->0x512c  :=0x10001cd0
    511a:	a2 58       	MOV       R5, R2
..\X2Csrc\__Services.c:513
    511c:	05 43       	LD        R3, [PC + #5]         ;->0x5130  :=0x10001d3c
    511e:	06 44       	LD        R4, [PC + #6]         ;->0x5134  :=0x4c00
..\X2Csrc\__Services.c:519
    5120:	54 73       	ST.W      [R5++], R4
..\X2Csrc\__Services.c:517
    5122:	53 70       	CMP       R5, R3
    5124:	fe f1       	JNZ       $-2                   ;->0x5120
..\X2Csrc\__Services.c:523
    5126:	02 a1       	ST.W      [R0 + #4], R2
..\X2Csrc\__Services.c:524
    5128:	1d 5c       	JMP       LR
    512a:	00 00       	NOP      NOP      
    512c:	d0 1c 00 10 	.long     0x10001cd0 ->268442832  [!!!@2@:MOV       LR, #192	@@: MOV       R0, #0
    5130:	3c 1d 00 10 	.long     0x10001d3c ->268442940  [!!!@2@:MOV       R3, #220	@@: MOV       R0, #0
    5134:	00 4c 00 00 	.long     0x00004c00 ->000019456  [!!!@2@:SET       [R0], #0	@@: NOP      

00005138 <addCoreServices>:
addCoreServices():
..\X2Csrc\__Services.c:531
    5138:	28 99       	LD.W      R5, [R0 + #4]
..\X2Csrc\__Services.c:532
    513a:	06 44       	LD        R4, [PC + #6]         ;->0x5150  :=0x4c14
    513c:	54 85       	ST.W      [R5], R4
..\X2Csrc\__Services.c:534
    513e:	06 44       	LD        R4, [PC + #6]         ;->0x5154  :=0x50e0
    5140:	6c a0       	ST.W      [R5 + #1], R4
..\X2Csrc\__Services.c:535
    5142:	06 44       	LD        R4, [PC + #6]         ;->0x5158  :=0x5008
    5144:	ac a0       	ST.W      [R5 + #2], R4
..\X2Csrc\__Services.c:537
    5146:	06 44       	LD        R4, [PC + #6]         ;->0x515c  :=0x4db4
    5148:	ac a4       	ST.W      [R5 + #18], R4
..\X2Csrc\__Services.c:538
    514a:	06 44       	LD        R4, [PC + #6]         ;->0x5160  :=0x4f1c
    514c:	6c a4       	ST.W      [R5 + #17], R4
..\X2Csrc\__Services.c:539
    514e:	1d 5c       	JMP       LR
    5150:	14 4c 00 00 	.long     0x00004c14 ->000019476  [!!!@2@:SET       [R2], #4	@@: NOP      
    5154:	e0 50 00 00 	.long     0x000050e0 ->000020704  [!!!@2@:JB        [R12], #8	@@: NOP      
    5158:	08 50 00 00 	.long     0x00005008 ->000020488  [!!!@2@:JB        [R1], #0	@@: NOP      
    515c:	b4 4d 00 00 	.long     0x00004db4 ->000019892  [!!!@2@:SET       [R6], #28	@@: NOP      
    5160:	1c 4f 00 00 	.long     0x00004f1c ->000020252  [!!!@2@:CLR       [R3], #20	@@: NOP      

00005164 <initTableStruct>:
initTableStruct():
..\X2Csrc\__TableStruct.c:27
    5164:	09 45       	LD        R5, [PC + #9]         ;->0x5188  :=0x10001b6c
    5166:	55 82       	LD.W      R5, [R5]
    5168:	40 10       	MOV       R4, #0
    516a:	54 85       	ST.W      [R5], R4
..\X2Csrc\__TableStruct.c:29
    516c:	6c a0       	ST.W      [R5 + #1], R4
..\X2Csrc\__TableStruct.c:31
    516e:	ac a0       	ST.W      [R5 + #2], R4
..\X2Csrc\__TableStruct.c:34
    5170:	ec a0       	ST.W      [R5 + #3], R4
..\X2Csrc\__TableStruct.c:37
    5172:	2c b2       	ST.H      [R5 + #8], R4
..\X2Csrc\__TableStruct.c:38
    5174:	6c a1       	ST.W      [R5 + #5], R4
..\X2Csrc\__TableStruct.c:41
    5176:	2c b3       	ST.H      [R5 + #12], R4
..\X2Csrc\__TableStruct.c:44
    5178:	ec a1       	ST.W      [R5 + #7], R4
    517a:	2c a2       	ST.W      [R5 + #8], R4
..\X2Csrc\__TableStruct.c:48
    517c:	ac b4       	ST.H      [R5 + #18], R4
..\X2Csrc\__TableStruct.c:49
    517e:	ac a2       	ST.W      [R5 + #10], R4
..\X2Csrc\__TableStruct.c:52
    5180:	ec a2       	ST.W      [R5 + #11], R4
..\X2Csrc\__TableStruct.c:54
    5182:	2c a3       	ST.W      [R5 + #12], R4
..\X2Csrc\__TableStruct.c:55
    5184:	1d 5c       	JMP       LR
    5186:	00 00       	NOP      NOP      
    5188:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0

0000518c <addTableStructProtocol>:
addTableStructProtocol():
..\X2Csrc\__TableStruct.c:61
    518c:	04 45       	LD        R5, [PC + #4]         ;->0x519c  :=0x10001b6c
    518e:	55 82       	LD.W      R5, [R5]
    5190:	25 ab       	LD.H      R4, [R5 + #12]
    5192:	44 d0       	ZXT.H     R4, R4
    5194:	41 38       	CMP       R4, #1
    5196:	05 f9       	JLS       $+5                   ;->0x51a0
..\X2Csrc\__TableStruct.c:65
    5198:	1d 5c       	JMP       LR
    519a:	00 00       	NOP      NOP      
    519c:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
..\X2Csrc\__TableStruct.c:63
    51a0:	25 ab       	LD.H      R4, [R5 + #12]
    51a2:	44 d0       	ZXT.H     R4, R4
    51a4:	dc c1       	ADD       R3, R4, #7
    51a6:	1a 7a       	LSL       R3, #2
    51a8:	e8 ee       	ST.W      [R5 + R3], R0
    51aa:	64 c0       	ADD       R4, R4, #1
    51ac:	44 d0       	ZXT.H     R4, R4
    51ae:	2c b3       	ST.H      [R5 + #12], R4
..\X2Csrc\__TableStruct.c:65
    51b0:	1d 5c       	JMP       LR
	...

000051b4 <initVersionInfo>:
initVersionInfo():
..\X2Csrc\__VersionInfo.c:17
    51b4:	11 d0       	ZXT.H     R1, R1
..\X2Csrc\__VersionInfo.c:18
    51b6:	81 b4       	ST.H      [R0 + #18], R1
..\X2Csrc\__VersionInfo.c:19
    51b8:	02 45       	LD        R5, [PC + #2]         ;->0x51c0  :=0x6934
    51ba:	85 a2       	ST.W      [R0 + #10], R5
..\X2Csrc\__VersionInfo.c:20
    51bc:	1d 5c       	JMP       LR
    51be:	00 00       	NOP      NOP      
    51c0:	34 69 00 00 	.long     0x00006934 ->000026932  [!!!@2@:ANL       R3, R4	@@: NOP      

000051c4 <X2C_Init>:
X2C_Init():
..\X2Csrc\__X2C.c:30
    51c4:	2d 5d       	PUSH      LR
..\X2Csrc\__X2C.c:31
    51c6:	03 40       	LD        R0, [PC + #3]         ;->0x51d0  :=0x10001d80
    51c8:	03 45       	LD        R5, [PC + #3]         ;->0x51d4  :=0x5554
    51ca:	05 5c       	LJMP      R5
..\X2Csrc\__X2C.c:32
    51cc:	0d 5d       	POP       LR
    51ce:	1d 5c       	JMP       LR
    51d0:	80 1d 00 10 	.long     0x10001d80 ->268443008  [!!!@2@:MOV       R8, #208	@@: MOV       R0, #0
    51d4:	54 55 00 00 	.long     0x00005554 ->000021844  [!!!@2@:JB        R10, #20	@@: NOP      

000051d8 <X2C_Update>:
X2C_Update():
..\X2Csrc\__X2C.c:35
    51d8:	2d 5d       	PUSH      LR
..\X2Csrc\__X2C.c:36
    51da:	03 40       	LD        R0, [PC + #3]         ;->0x51e4  :=0x10001d80
    51dc:	03 45       	LD        R5, [PC + #3]         ;->0x51e8  :=0x55d4
    51de:	05 5c       	LJMP      R5
..\X2Csrc\__X2C.c:37
    51e0:	0d 5d       	POP       LR
    51e2:	1d 5c       	JMP       LR
    51e4:	80 1d 00 10 	.long     0x10001d80 ->268443008  [!!!@2@:MOV       R8, #208	@@: MOV       R0, #0
    51e8:	d4 55 00 00 	.long     0x000055d4 ->000021972  [!!!@2@:JB        R10, #28	@@: NOP      

000051ec <isTriggerEvent>:
isTriggerEvent():
..\X2Csrc\__Scope_Main.c:605
    51ec:	8f 5f       	PUSH      {R6-R9,LR}
    51ee:	e8 30       	SUB       SP, #8
    51f0:	e1 85       	ST.W      [SP], R1
    51f2:	01 22       	ST.W      [SP + #1], R2
..\X2Csrc\__Scope_Main.c:606
    51f4:	44 16       	MOV       R4, #100
    51f6:	28 c3       	ADD       R5, R0, R4
    51f8:	55 80       	LD.B      R5, [R5]
    51fa:	4f 10       	MOV       R4, #15
    51fc:	25 d5       	ANL       R4, R5, R4
..\X2Csrc\__Scope_Main.c:612
    51fe:	30 14       	MOV       R3, #64
    5200:	dd d4       	ANL       R3, R5, R3
    5202:	0a f0       	JZ        $+10                  ;->0x5216
..\X2Csrc\__Scope_Main.c:614
    5204:	44 38       	CMP       R4, #4
    5206:	42 f0       	JZ        $+66                  ;->0x528a
    5208:	48 38       	CMP       R4, #8
    520a:	55 f0       	JZ        $+85                  ;->0x52b4
..\X2Csrc\__Scope_Main.c:631
    520c:	00 10       	MOV       R0, #0
..\X2Csrc\__Scope_Main.c:921
    520e:	e8 28       	ADD       SP, #8
    5210:	0f 5e       	POP       {R6-R9}
    5212:	0d 5d       	POP       LR
    5214:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:684
    5216:	20 12       	MOV       R2, #32
    5218:	ad d4       	ANL       R5, R5, R2
    521a:	20 f0       	JZ        $+32                  ;->0x525a
..\X2Csrc\__Scope_Main.c:686
    521c:	42 38       	CMP       R4, #2
    521e:	69 f0       	JZ        $+105                 ;->0x52f0
    5220:	42 38       	CMP       R4, #2
    5222:	02 f9       	JLS       $+2                   ;->0x5226
    5224:	8f 04       	SJMP      $+143                 ;->0x5342
    5226:	41 38       	CMP       R4, #1
    5228:	f2 f1       	JNZ       $-14                  ;->0x520c
..\X2Csrc\__Scope_Main.c:690
    522a:	48 15       	MOV       R4, #88
    522c:	28 c3       	ADD       R5, R0, R4
    522e:	45 80       	LD.B      R4, [R5]
..\X2Csrc\__Scope_Main.c:691
    5230:	20 15       	MOV       R2, #80
    5232:	a8 c2       	ADD       R5, R0, R2
    5234:	55 80       	LD.B      R5, [R5]
..\X2Csrc\__Scope_Main.c:692
    5236:	1e 80       	LD.B      R1, [SP]
..\X2Csrc\__Scope_Main.c:693
    5238:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:694
    523a:	44 62       	SXT.B     R4, R4
    523c:	55 62       	SXT.B     R5, R5
..\X2Csrc\__Scope_Main.c:631
    523e:	03 58       	MOV       R0, R3
..\X2Csrc\__Scope_Main.c:693
    5240:	21 38       	CMP       R2, #1
    5242:	02 f1       	JNZ       $+2                   ;->0x5246
    5244:	fa 04       	SJMP      $+250                 ;->0x5438
..\X2Csrc\__Scope_Main.c:702
    5246:	45 70       	CMP       R4, R5
    5248:	e3 fd       	JLE       $-29                  ;->0x520e
    524a:	11 62       	SXT.B     R1, R1
    524c:	51 70       	CMP       R5, R1
    524e:	e0 fb       	JLT       $-32                  ;->0x520e
..\X2Csrc\__Scope_Main.c:627
    5250:	01 10       	MOV       R0, #1
..\X2Csrc\__Scope_Main.c:921
    5252:	e8 28       	ADD       SP, #8
    5254:	0f 5e       	POP       {R6-R9}
    5256:	0d 5d       	POP       LR
    5258:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:797
    525a:	42 38       	CMP       R4, #2
    525c:	60 f0       	JZ        $+96                  ;->0x531c
    525e:	42 38       	CMP       R4, #2
    5260:	02 f9       	JLS       $+2                   ;->0x5264
    5262:	8b 04       	SJMP      $+139                 ;->0x5378
    5264:	41 38       	CMP       R4, #1
    5266:	d3 f1       	JNZ       $-45                  ;->0x520c
..\X2Csrc\__Scope_Main.c:801
    5268:	38 15       	MOV       R3, #88
    526a:	e0 c2       	ADD       R4, R0, R3
    526c:	34 80       	LD.B      R3, [R4]
..\X2Csrc\__Scope_Main.c:802
    526e:	20 15       	MOV       R2, #80
    5270:	a0 c2       	ADD       R4, R0, R2
    5272:	44 80       	LD.B      R4, [R4]
..\X2Csrc\__Scope_Main.c:803
    5274:	1e 80       	LD.B      R1, [SP]
..\X2Csrc\__Scope_Main.c:804
    5276:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:631
    5278:	05 58       	MOV       R0, R5
..\X2Csrc\__Scope_Main.c:804
    527a:	21 38       	CMP       R2, #1
    527c:	5b f0       	JZ        $+91                  ;->0x5332
..\X2Csrc\__Scope_Main.c:875
    527e:	34 70       	CMP       R3, R4
    5280:	c7 f9       	JLS       $-57                  ;->0x520e
    5282:	14 70       	CMP       R1, R4
    5284:	c5 f8       	JHI       $-59                  ;->0x520e
..\X2Csrc\__Scope_Main.c:627
    5286:	01 10       	MOV       R0, #1
    5288:	e5 07       	SJMP      $-27                  ;->0x5252
..\X2Csrc\__Scope_Main.c:619
    528a:	a8 9d       	LD.W      R5, [R0 + #22]
..\X2Csrc\__Scope_Main.c:620
    528c:	30 9d       	LD.W      R6, [R0 + #20]
..\X2Csrc\__Scope_Main.c:621
    528e:	7e 82       	LD.W      R7, [SP]
..\X2Csrc\__Scope_Main.c:623
    5290:	e0 9c       	LD.W      R4, [R0 + #19]
..\X2Csrc\__Scope_Main.c:625
    5292:	05 58       	MOV       R0, R5
    5294:	26 58       	MOV       R1, R6
..\X2Csrc\__Scope_Main.c:623
    5296:	41 38       	CMP       R4, #1
    5298:	02 f1       	JNZ       $+2                   ;->0x529c
    529a:	fe 04       	SJMP      $+254                 ;->0x5496
..\X2Csrc\__Scope_Main.c:636
    529c:	86 45       	LD        R5, [PC + #134]       ;->0x54b4  :=0x65cc
    529e:	05 5c       	LJMP      R5
    52a0:	00 38       	CMP       R0, #0
    52a2:	b5 fd       	JLE       $-75                  ;->0x520c
    52a4:	06 58       	MOV       R0, R6
    52a6:	27 58       	MOV       R1, R7
    52a8:	84 45       	LD        R5, [PC + #132]       ;->0x54b8  :=0x65cc
    52aa:	05 5c       	LJMP      R5
    52ac:	00 38       	CMP       R0, #0
    52ae:	af f4       	JMI       $-81                  ;->0x520c
..\X2Csrc\__Scope_Main.c:627
    52b0:	01 10       	MOV       R0, #1
    52b2:	d0 07       	SJMP      $-48                  ;->0x5252
..\X2Csrc\__Scope_Main.c:649
    52b4:	a0 9d       	LD.W      R4, [R0 + #22]
    52b6:	e8 9d       	LD.W      R5, [R0 + #23]
..\X2Csrc\__Scope_Main.c:650
    52b8:	30 9d       	LD.W      R6, [R0 + #20]
    52ba:	78 9d       	LD.W      R7, [R0 + #21]
..\X2Csrc\__Scope_Main.c:651
    52bc:	2e 82       	LD.W      R2, [SP]
    52be:	01 0b       	LD.W      R3, [SP + #1]
    52c0:	02 59       	MOV       R8, R2
    52c2:	23 59       	MOV       R9, R3
..\X2Csrc\__Scope_Main.c:652
    52c4:	d8 9c       	LD.W      R3, [R0 + #19]
..\X2Csrc\__Scope_Main.c:654
    52c6:	04 58       	MOV       R0, R4
    52c8:	25 58       	MOV       R1, R5
..\X2Csrc\__Scope_Main.c:652
    52ca:	31 38       	CMP       R3, #1
    52cc:	02 f1       	JNZ       $+2                   ;->0x52d0
    52ce:	d2 04       	SJMP      $+210                 ;->0x5472
..\X2Csrc\__Scope_Main.c:665
    52d0:	46 58       	MOV       R2, R6
    52d2:	67 58       	MOV       R3, R7
    52d4:	7a 45       	LD        R5, [PC + #122]       ;->0x54bc  :=0x64e8
    52d6:	05 5c       	LJMP      R5
    52d8:	00 38       	CMP       R0, #0
    52da:	99 fd       	JLE       $-103                 ;->0x520c
    52dc:	06 58       	MOV       R0, R6
    52de:	27 58       	MOV       R1, R7
    52e0:	48 58       	MOV       R2, R8
    52e2:	69 58       	MOV       R3, R9
    52e4:	77 45       	LD        R5, [PC + #119]       ;->0x54c0  :=0x64e8
    52e6:	05 5c       	LJMP      R5
    52e8:	00 38       	CMP       R0, #0
    52ea:	91 f4       	JMI       $-111                 ;->0x520c
..\X2Csrc\__Scope_Main.c:627
    52ec:	01 10       	MOV       R0, #1
    52ee:	b2 07       	SJMP      $-78                  ;->0x5252
..\X2Csrc\__Scope_Main.c:713
    52f0:	48 15       	MOV       R4, #88
    52f2:	28 c3       	ADD       R5, R0, R4
    52f4:	45 81       	LD.H      R4, [R5]
..\X2Csrc\__Scope_Main.c:714
    52f6:	20 15       	MOV       R2, #80
    52f8:	a8 c2       	ADD       R5, R0, R2
    52fa:	55 81       	LD.H      R5, [R5]
..\X2Csrc\__Scope_Main.c:715
    52fc:	1e 81       	LD.H      R1, [SP]
..\X2Csrc\__Scope_Main.c:716
    52fe:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:717
    5300:	44 61       	SXT.H     R4, R4
    5302:	55 61       	SXT.H     R5, R5
..\X2Csrc\__Scope_Main.c:631
    5304:	03 58       	MOV       R0, R3
..\X2Csrc\__Scope_Main.c:716
    5306:	21 38       	CMP       R2, #1
    5308:	02 f1       	JNZ       $+2                   ;->0x530c
    530a:	84 04       	SJMP      $+132                 ;->0x5412
..\X2Csrc\__Scope_Main.c:725
    530c:	45 70       	CMP       R4, R5
    530e:	80 fd       	JLE       $-128                 ;->0x520e
    5310:	11 61       	SXT.H     R1, R1
    5312:	51 70       	CMP       R5, R1
    5314:	02 fa       	JGE       $+2                   ;->0x5318
    5316:	7c 07       	SJMP      $-132                 ;->0x520e
..\X2Csrc\__Scope_Main.c:627
    5318:	01 10       	MOV       R0, #1
    531a:	9c 07       	SJMP      $-100                 ;->0x5252
..\X2Csrc\__Scope_Main.c:830
    531c:	38 15       	MOV       R3, #88
    531e:	e0 c2       	ADD       R4, R0, R3
    5320:	34 81       	LD.H      R3, [R4]
..\X2Csrc\__Scope_Main.c:831
    5322:	20 15       	MOV       R2, #80
    5324:	a0 c2       	ADD       R4, R0, R2
    5326:	44 81       	LD.H      R4, [R4]
..\X2Csrc\__Scope_Main.c:832
    5328:	1e 81       	LD.H      R1, [SP]
..\X2Csrc\__Scope_Main.c:833
    532a:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:631
    532c:	05 58       	MOV       R0, R5
..\X2Csrc\__Scope_Main.c:833
    532e:	21 38       	CMP       R2, #1
    5330:	a7 f1       	JNZ       $-89                  ;->0x527e
..\X2Csrc\__Scope_Main.c:864
    5332:	43 70       	CMP       R4, R3
    5334:	02 f8       	JHI       $+2                   ;->0x5338
    5336:	6c 07       	SJMP      $-148                 ;->0x520e
    5338:	41 70       	CMP       R4, R1
    533a:	02 f9       	JLS       $+2                   ;->0x533e
    533c:	69 07       	SJMP      $-151                 ;->0x520e
..\X2Csrc\__Scope_Main.c:627
    533e:	01 10       	MOV       R0, #1
    5340:	89 07       	SJMP      $-119                 ;->0x5252
..\X2Csrc\__Scope_Main.c:686
    5342:	44 38       	CMP       R4, #4
    5344:	3d f0       	JZ        $+61                  ;->0x53be
    5346:	48 38       	CMP       R4, #8
    5348:	02 f0       	JZ        $+2                   ;->0x534c
    534a:	61 07       	SJMP      $-159                 ;->0x520c
..\X2Csrc\__Scope_Main.c:765
    534c:	b0 9d       	LD.W      R6, [R0 + #22]
    534e:	e0 9d       	LD.W      R4, [R0 + #23]
..\X2Csrc\__Scope_Main.c:766
    5350:	08 9d       	LD.W      R1, [R0 + #20]
    5352:	68 9d       	LD.W      R5, [R0 + #21]
..\X2Csrc\__Scope_Main.c:767
    5354:	7e 82       	LD.W      R7, [SP]
    5356:	01 0a       	LD.W      R2, [SP + #1]
..\X2Csrc\__Scope_Main.c:768
    5358:	d8 9c       	LD.W      R3, [R0 + #19]
    535a:	31 38       	CMP       R3, #1
    535c:	55 f0       	JZ        $+85                  ;->0x5406
..\X2Csrc\__Scope_Main.c:781
    535e:	45 70       	CMP       R4, R5
    5360:	62 fd       	JLE       $+98                  ;->0x5424
    5362:	25 70       	CMP       R2, R5
    5364:	02 fd       	JLE       $+2                   ;->0x5368
    5366:	53 07       	SJMP      $-173                 ;->0x520c
..\X2Csrc\__Scope_Main.c:904
    5368:	25 70       	CMP       R2, R5
    536a:	02 f0       	JZ        $+2                   ;->0x536e
    536c:	72 07       	SJMP      $-142                 ;->0x5250
    536e:	71 70       	CMP       R7, R1
    5370:	02 f9       	JLS       $+2                   ;->0x5374
    5372:	4d 07       	SJMP      $-179                 ;->0x520c
..\X2Csrc\__Scope_Main.c:627
    5374:	01 10       	MOV       R0, #1
    5376:	6e 07       	SJMP      $-146                 ;->0x5252
..\X2Csrc\__Scope_Main.c:797
    5378:	44 38       	CMP       R4, #4
    537a:	19 f0       	JZ        $+25                  ;->0x53ac
    537c:	48 38       	CMP       R4, #8
    537e:	02 f0       	JZ        $+2                   ;->0x5382
    5380:	46 07       	SJMP      $-186                 ;->0x520c
..\X2Csrc\__Scope_Main.c:888
    5382:	b0 9d       	LD.W      R6, [R0 + #22]
    5384:	e0 9d       	LD.W      R4, [R0 + #23]
..\X2Csrc\__Scope_Main.c:889
    5386:	08 9d       	LD.W      R1, [R0 + #20]
    5388:	68 9d       	LD.W      R5, [R0 + #21]
..\X2Csrc\__Scope_Main.c:890
    538a:	7e 82       	LD.W      R7, [SP]
    538c:	01 0a       	LD.W      R2, [SP + #1]
..\X2Csrc\__Scope_Main.c:891
    538e:	d8 9c       	LD.W      R3, [R0 + #19]
    5390:	31 38       	CMP       R3, #1
    5392:	25 f0       	JZ        $+37                  ;->0x53dc
..\X2Csrc\__Scope_Main.c:904
    5394:	45 70       	CMP       R4, R5
    5396:	07 f8       	JHI       $+7                   ;->0x53a4
    5398:	45 70       	CMP       R4, R5
    539a:	02 f0       	JZ        $+2                   ;->0x539e
    539c:	38 07       	SJMP      $-200                 ;->0x520c
    539e:	61 70       	CMP       R6, R1
    53a0:	02 f8       	JHI       $+2                   ;->0x53a4
    53a2:	35 07       	SJMP      $-203                 ;->0x520c
    53a4:	25 70       	CMP       R2, R5
    53a6:	02 f9       	JLS       $+2                   ;->0x53aa
    53a8:	32 07       	SJMP      $-206                 ;->0x520c
    53aa:	df 07       	SJMP      $-33                  ;->0x5368
..\X2Csrc\__Scope_Main.c:859
    53ac:	98 9d       	LD.W      R3, [R0 + #22]
..\X2Csrc\__Scope_Main.c:860
    53ae:	20 9d       	LD.W      R4, [R0 + #20]
..\X2Csrc\__Scope_Main.c:861
    53b0:	1e 82       	LD.W      R1, [SP]
..\X2Csrc\__Scope_Main.c:862
    53b2:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:631
    53b4:	05 58       	MOV       R0, R5
..\X2Csrc\__Scope_Main.c:862
    53b6:	21 38       	CMP       R2, #1
    53b8:	02 f0       	JZ        $+2                   ;->0x53bc
    53ba:	62 07       	SJMP      $-158                 ;->0x527e
    53bc:	bb 07       	SJMP      $-69                  ;->0x5332
..\X2Csrc\__Scope_Main.c:736
    53be:	a0 9d       	LD.W      R4, [R0 + #22]
..\X2Csrc\__Scope_Main.c:737
    53c0:	28 9d       	LD.W      R5, [R0 + #20]
..\X2Csrc\__Scope_Main.c:738
    53c2:	1e 82       	LD.W      R1, [SP]
..\X2Csrc\__Scope_Main.c:739
    53c4:	d0 9c       	LD.W      R2, [R0 + #19]
..\X2Csrc\__Scope_Main.c:631
    53c6:	03 58       	MOV       R0, R3
..\X2Csrc\__Scope_Main.c:739
    53c8:	21 38       	CMP       R2, #1
    53ca:	16 f0       	JZ        $+22                  ;->0x53f6
..\X2Csrc\__Scope_Main.c:752
    53cc:	45 70       	CMP       R4, R5
    53ce:	02 fc       	JGT       $+2                   ;->0x53d2
    53d0:	1f 07       	SJMP      $-225                 ;->0x520e
    53d2:	51 70       	CMP       R5, R1
    53d4:	02 fa       	JGE       $+2                   ;->0x53d8
    53d6:	1c 07       	SJMP      $-228                 ;->0x520e
..\X2Csrc\__Scope_Main.c:627
    53d8:	01 10       	MOV       R0, #1
    53da:	3c 07       	SJMP      $-196                 ;->0x5252
..\X2Csrc\__Scope_Main.c:893
    53dc:	54 70       	CMP       R5, R4
    53de:	40 f9       	JLS       $+64                  ;->0x545e
    53e0:	52 70       	CMP       R5, R2
    53e2:	02 f9       	JLS       $+2                   ;->0x53e6
    53e4:	14 07       	SJMP      $-236                 ;->0x520c
    53e6:	52 70       	CMP       R5, R2
    53e8:	02 f0       	JZ        $+2                   ;->0x53ec
    53ea:	33 07       	SJMP      $-205                 ;->0x5250
    53ec:	17 70       	CMP       R1, R7
    53ee:	02 f9       	JLS       $+2                   ;->0x53f2
    53f0:	0e 07       	SJMP      $-242                 ;->0x520c
..\X2Csrc\__Scope_Main.c:627
    53f2:	01 10       	MOV       R0, #1
    53f4:	2f 07       	SJMP      $-209                 ;->0x5252
..\X2Csrc\__Scope_Main.c:741
    53f6:	45 70       	CMP       R4, R5
    53f8:	02 fb       	JLT       $+2                   ;->0x53fc
    53fa:	0a 07       	SJMP      $-246                 ;->0x520e
    53fc:	51 70       	CMP       R5, R1
    53fe:	02 fd       	JLE       $+2                   ;->0x5402
    5400:	07 07       	SJMP      $-249                 ;->0x520e
..\X2Csrc\__Scope_Main.c:627
    5402:	01 10       	MOV       R0, #1
    5404:	27 07       	SJMP      $-217                 ;->0x5252
..\X2Csrc\__Scope_Main.c:770
    5406:	54 70       	CMP       R5, R4
    5408:	21 fd       	JLE       $+33                  ;->0x544a
    540a:	52 70       	CMP       R5, R2
    540c:	02 fd       	JLE       $+2                   ;->0x5410
    540e:	ff 06       	SJMP      $-257                 ;->0x520c
    5410:	eb 07       	SJMP      $-21                  ;->0x53e6
..\X2Csrc\__Scope_Main.c:717
    5412:	45 70       	CMP       R4, R5
    5414:	02 fb       	JLT       $+2                   ;->0x5418
    5416:	fc 06       	SJMP      $-260                 ;->0x520e
    5418:	11 61       	SXT.H     R1, R1
    541a:	51 70       	CMP       R5, R1
    541c:	02 fd       	JLE       $+2                   ;->0x5420
    541e:	f8 06       	SJMP      $-264                 ;->0x520e
..\X2Csrc\__Scope_Main.c:627
    5420:	01 10       	MOV       R0, #1
    5422:	18 07       	SJMP      $-232                 ;->0x5252
..\X2Csrc\__Scope_Main.c:781
    5424:	45 70       	CMP       R4, R5
    5426:	02 f0       	JZ        $+2                   ;->0x542a
    5428:	f2 06       	SJMP      $-270                 ;->0x520c
    542a:	61 70       	CMP       R6, R1
    542c:	02 f8       	JHI       $+2                   ;->0x5430
    542e:	ef 06       	SJMP      $-273                 ;->0x520c
    5430:	25 70       	CMP       R2, R5
    5432:	02 fd       	JLE       $+2                   ;->0x5436
    5434:	ec 06       	SJMP      $-276                 ;->0x520c
    5436:	99 07       	SJMP      $-103                 ;->0x5368
..\X2Csrc\__Scope_Main.c:694
    5438:	45 70       	CMP       R4, R5
    543a:	02 fb       	JLT       $+2                   ;->0x543e
    543c:	e9 06       	SJMP      $-279                 ;->0x520e
    543e:	11 62       	SXT.B     R1, R1
    5440:	51 70       	CMP       R5, R1
    5442:	02 fd       	JLE       $+2                   ;->0x5446
    5444:	e5 06       	SJMP      $-283                 ;->0x520e
..\X2Csrc\__Scope_Main.c:627
    5446:	01 10       	MOV       R0, #1
    5448:	05 07       	SJMP      $-251                 ;->0x5252
..\X2Csrc\__Scope_Main.c:770
    544a:	54 70       	CMP       R5, R4
    544c:	02 f0       	JZ        $+2                   ;->0x5450
    544e:	df 06       	SJMP      $-289                 ;->0x520c
    5450:	16 70       	CMP       R1, R6
    5452:	02 f8       	JHI       $+2                   ;->0x5456
    5454:	dc 06       	SJMP      $-292                 ;->0x520c
    5456:	52 70       	CMP       R5, R2
    5458:	02 fd       	JLE       $+2                   ;->0x545c
    545a:	d9 06       	SJMP      $-295                 ;->0x520c
    545c:	c5 07       	SJMP      $-59                  ;->0x53e6
..\X2Csrc\__Scope_Main.c:893
    545e:	54 70       	CMP       R5, R4
    5460:	02 f0       	JZ        $+2                   ;->0x5464
    5462:	d5 06       	SJMP      $-299                 ;->0x520c
    5464:	16 70       	CMP       R1, R6
    5466:	02 f8       	JHI       $+2                   ;->0x546a
    5468:	d2 06       	SJMP      $-302                 ;->0x520c
    546a:	52 70       	CMP       R5, R2
    546c:	02 f9       	JLS       $+2                   ;->0x5470
    546e:	cf 06       	SJMP      $-305                 ;->0x520c
    5470:	bb 07       	SJMP      $-69                  ;->0x53e6
..\X2Csrc\__Scope_Main.c:654
    5472:	46 58       	MOV       R2, R6
    5474:	67 58       	MOV       R3, R7
    5476:	14 45       	LD        R5, [PC + #20]        ;->0x54c4  :=0x6680
    5478:	05 5c       	LJMP      R5
    547a:	00 38       	CMP       R0, #0
    547c:	02 f4       	JMI       $+2                   ;->0x5480
    547e:	c7 06       	SJMP      $-313                 ;->0x520c
    5480:	06 58       	MOV       R0, R6
    5482:	27 58       	MOV       R1, R7
    5484:	48 58       	MOV       R2, R8
    5486:	69 58       	MOV       R3, R9
    5488:	10 45       	LD        R5, [PC + #16]        ;->0x54c8  :=0x6680
    548a:	05 5c       	LJMP      R5
    548c:	00 38       	CMP       R0, #0
    548e:	02 fd       	JLE       $+2                   ;->0x5492
    5490:	be 06       	SJMP      $-322                 ;->0x520c
..\X2Csrc\__Scope_Main.c:627
    5492:	01 10       	MOV       R0, #1
    5494:	df 06       	SJMP      $-289                 ;->0x5252
..\X2Csrc\__Scope_Main.c:625
    5496:	0e 45       	LD        R5, [PC + #14]        ;->0x54cc  :=0x6760
    5498:	05 5c       	LJMP      R5
    549a:	00 38       	CMP       R0, #0
    549c:	02 f4       	JMI       $+2                   ;->0x54a0
    549e:	b7 06       	SJMP      $-329                 ;->0x520c
    54a0:	06 58       	MOV       R0, R6
    54a2:	27 58       	MOV       R1, R7
    54a4:	0b 45       	LD        R5, [PC + #11]        ;->0x54d0  :=0x6760
    54a6:	05 5c       	LJMP      R5
    54a8:	00 38       	CMP       R0, #0
    54aa:	02 fd       	JLE       $+2                   ;->0x54ae
    54ac:	b0 06       	SJMP      $-336                 ;->0x520c
..\X2Csrc\__Scope_Main.c:627
    54ae:	01 10       	MOV       R0, #1
    54b0:	d1 06       	SJMP      $-303                 ;->0x5252
    54b2:	00 00       	NOP      NOP      
    54b4:	cc 65 00 00 	.long     0x000065cc ->000026060  [!!!@2@:ADDC      R12, R12	@@: NOP      
    54b8:	cc 65 00 00 	.long     0x000065cc ->000026060  [!!!@2@:ADDC      R12, R12	@@: NOP      
    54bc:	e8 64 00 00 	.long     0x000064e8 ->000025832  [!!!@2@:ADD       SP, R8	@@: NOP      
    54c0:	e8 64 00 00 	.long     0x000064e8 ->000025832  [!!!@2@:ADD       SP, R8	@@: NOP      
    54c4:	80 66 00 00 	.long     0x00006680 ->000026240  [!!!@2@:SUB       R8, R0	@@: NOP      
    54c8:	80 66 00 00 	.long     0x00006680 ->000026240  [!!!@2@:SUB       R8, R0	@@: NOP      
    54cc:	60 67 00 00 	.long     0x00006760 ->000026464  [!!!@2@:SUBC      R6, R0	@@: NOP      
    54d0:	60 67 00 00 	.long     0x00006760 ->000026464  [!!!@2@:SUBC      R6, R0	@@: NOP      

000054d4 <getTriggerValue>:
getTriggerValue():
..\X2Csrc\__Scope_Main.c:927
    54d4:	44 16       	MOV       R4, #100
    54d6:	28 c3       	ADD       R5, R0, R4
    54d8:	35 80       	LD.B      R3, [R5]
..\X2Csrc\__Scope_Main.c:928
    54da:	5f 10       	MOV       R5, #15
    54dc:	6b d5       	ANL       R5, R3, R5
    54de:	52 38       	CMP       R5, #2
    54e0:	18 f0       	JZ        $+24                  ;->0x5510
    54e2:	52 38       	CMP       R5, #2
    54e4:	08 f8       	JHI       $+8                   ;->0x54f4
    54e6:	51 38       	CMP       R5, #1
    54e8:	04 f1       	JNZ       $+4                   ;->0x54f0
..\X2Csrc\__Scope_Main.c:931
    54ea:	28 9e       	LD.W      R5, [R0 + #24]
    54ec:	25 80       	LD.B      R2, [R5]
    54ee:	10 10       	MOV       R1, #0
..\X2Csrc\__Scope_Main.c:947
    54f0:	02 58       	MOV       R0, R2
    54f2:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:928
    54f4:	54 38       	CMP       R5, #4
    54f6:	08 f0       	JZ        $+8                   ;->0x5506
    54f8:	58 38       	CMP       R5, #8
    54fa:	fb f1       	JNZ       $-5                   ;->0x54f0
..\X2Csrc\__Scope_Main.c:940
    54fc:	28 9e       	LD.W      R5, [R0 + #24]
    54fe:	25 82       	LD.W      R2, [R5]
    5500:	4d 98       	LD.W      R1, [R5 + #1]
..\X2Csrc\__Scope_Main.c:947
    5502:	02 58       	MOV       R0, R2
    5504:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:937
    5506:	28 9e       	LD.W      R5, [R0 + #24]
    5508:	25 82       	LD.W      R2, [R5]
    550a:	10 10       	MOV       R1, #0
..\X2Csrc\__Scope_Main.c:947
    550c:	02 58       	MOV       R0, R2
    550e:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:934
    5510:	28 9e       	LD.W      R5, [R0 + #24]
    5512:	25 81       	LD.H      R2, [R5]
    5514:	10 10       	MOV       R1, #0
..\X2Csrc\__Scope_Main.c:947
    5516:	02 58       	MOV       R0, R2
    5518:	1d 5c       	JMP       LR

0000551a <sampleData>:
sampleData():
..\X2Csrc\__Scope_Main.c:951
    551a:	03 5f       	PUSH      {R6-R7}
    551c:	a0 9e       	LD.W      R4, [R0 + #26]
..\X2Csrc\__Scope_Main.c:954
    551e:	60 10       	MOV       R6, #0
..\X2Csrc\__Scope_Main.c:958
    5520:	50 10       	MOV       R5, #0
    5522:	d6 c0       	ADD       R2, R6, #3
    5524:	88 c3       	ADD       R1, R0, R6
..\X2Csrc\__Scope_Main.c:962
    5526:	12 7a       	LSL       R2, #2
    5528:	b8 e8       	LD.W      R7, [R0 + R2]
    552a:	7f e5       	LD.B      R7, [R7 + R5]
    552c:	37 d1       	ZXT.B     R3, R7
..\X2Csrc\__Scope_Main.c:961
    552e:	f8 9b       	LD.W      R7, [R0 + #15]
    5530:	3b eb       	ST.B      [R7 + R4], R3
    5532:	64 c0       	ADD       R4, R4, #1
    5534:	84 a6       	ST.W      [R0 + #26], R4
..\X2Csrc\__Scope_Main.c:963
    5536:	6d c0       	ADD       R5, R5, #1
    5538:	55 d1       	ZXT.B     R5, R5
..\X2Csrc\__Scope_Main.c:965
    553a:	7c 12       	MOV       R7, #44
    553c:	d9 c3       	ADD       R3, R1, R7
    553e:	33 80       	LD.B      R3, [R3]
    5540:	35 70       	CMP       R3, R5
    5542:	f3 f8       	JHI       $-13                  ;->0x5528
..\X2Csrc\__Scope_Main.c:967
    5544:	76 c0       	ADD       R6, R6, #1
    5546:	66 d1       	ZXT.B     R6, R6
..\X2Csrc\__Scope_Main.c:969
    5548:	28 8a       	LD.B      R5, [R0 + #8]
    554a:	56 70       	CMP       R5, R6
    554c:	ea f8       	JHI       $-22                  ;->0x5520
..\X2Csrc\__Scope_Main.c:971
    554e:	03 5e       	POP       {R6-R7}
    5550:	1d 5c       	JMP       LR
	...

00005554 <Scope_Main_Init>:
Scope_Main_Init():
..\X2Csrc\__Scope_Main.c:52
    5554:	50 10       	MOV       R5, #0
    5556:	55 68       	NOT       R5, R5
    5558:	05 84       	ST.H      [R0], R5
..\X2Csrc\__Scope_Main.c:48
    555a:	2c 10       	MOV       R2, #12
    555c:	88 c2       	ADD       R1, R0, R2
    555e:	4c 12       	MOV       R4, #44
    5560:	10 c3       	ADD       R2, R0, R4
..\X2Csrc\__Scope_Main.c:53
    5562:	50 10       	MOV       R5, #0
..\X2Csrc\__Scope_Main.c:55
    5564:	85 58       	MOV       R4, R5
    5566:	30 10       	MOV       R3, #0
    5568:	14 73       	ST.W      [R1++], R4
..\X2Csrc\__Scope_Main.c:56
    556a:	24 77       	ST.B      [R2++], R4
..\X2Csrc\__Scope_Main.c:53
    556c:	6d c0       	ADD       R5, R5, #1
    556e:	55 d1       	ZXT.B     R5, R5
    5570:	58 38       	CMP       R5, #8
    5572:	fa f1       	JNZ       $-6                   ;->0x5566
..\X2Csrc\__Scope_Main.c:59
    5574:	16 45       	LD        R5, [PC + #22]        ;->0x55cc  :=0x10001e00
    5576:	c5 a3       	ST.W      [R0 + #15], R5
..\X2Csrc\__Scope_Main.c:60
    5578:	40 10       	MOV       R4, #0
    557a:	50 10       	MOV       R5, #0
    557c:	04 a5       	ST.W      [R0 + #20], R4
    557e:	45 a5       	ST.W      [R0 + #21], R5
..\X2Csrc\__Scope_Main.c:61
    5580:	84 a5       	ST.W      [R0 + #22], R4
    5582:	c5 a5       	ST.W      [R0 + #23], R5
..\X2Csrc\__Scope_Main.c:62
    5584:	03 a6       	ST.W      [R0 + #24], R3
..\X2Csrc\__Scope_Main.c:63
    5586:	24 16       	MOV       R2, #100
    5588:	a8 c2       	ADD       R5, R0, R2
    558a:	53 83       	ST.B      [R5], R3
..\X2Csrc\__Scope_Main.c:64
    558c:	43 a0       	ST.W      [R0 + #1], R3
..\X2Csrc\__Scope_Main.c:65
    558e:	83 a6       	ST.W      [R0 + #26], R3
..\X2Csrc\__Scope_Main.c:66
    5590:	44 13       	MOV       R4, #52
    5592:	28 c3       	ADD       R5, R0, R4
    5594:	53 83       	ST.B      [R5], R3
..\X2Csrc\__Scope_Main.c:67
    5596:	03 92       	ST.B      [R0 + #8], R3
..\X2Csrc\__Scope_Main.c:68
    5598:	54 14       	MOV       R5, #68
    559a:	60 c3       	ADD       R4, R0, R5
    559c:	43 84       	ST.H      [R4], R3
..\X2Csrc\__Scope_Main.c:69
    559e:	26 14       	MOV       R2, #70
    55a0:	a0 c2       	ADD       R4, R0, R2
    55a2:	43 84       	ST.H      [R4], R3
..\X2Csrc\__Scope_Main.c:70
    55a4:	28 14       	MOV       R2, #72
    55a6:	a0 c2       	ADD       R4, R0, R2
    55a8:	43 84       	ST.H      [R4], R3
..\X2Csrc\__Scope_Main.c:71
    55aa:	43 92       	ST.B      [R0 + #9], R3
..\X2Csrc\__Scope_Main.c:72
    55ac:	c3 a6       	ST.W      [R0 + #27], R3
..\X2Csrc\__Scope_Main.c:73
    55ae:	43 a7       	ST.W      [R0 + #29], R3
..\X2Csrc\__Scope_Main.c:74
    55b0:	28 17       	MOV       R2, #120
    55b2:	a0 c2       	ADD       R4, R0, R2
    55b4:	43 83       	ST.B      [R4], R3
..\X2Csrc\__Scope_Main.c:75
    55b6:	03 a7       	ST.W      [R0 + #28], R3
..\X2Csrc\__Scope_Main.c:76
    55b8:	51 10       	MOV       R5, #1
    55ba:	ad 7a       	LSL       R5, #13
    55bc:	85 a3       	ST.W      [R0 + #14], R5
..\X2Csrc\__Scope_Main.c:77
    55be:	41 10       	MOV       R4, #1
    55c0:	c4 a4       	ST.W      [R0 + #19], R4
..\X2Csrc\__Scope_Main.c:78
    55c2:	05 a4       	ST.W      [R0 + #16], R5
..\X2Csrc\__Scope_Main.c:80
    55c4:	03 45       	LD        R5, [PC + #3]         ;->0x55d0  :=0x10001b6c
    55c6:	55 82       	LD.W      R5, [R5]
    55c8:	e8 a2       	ST.W      [R5 + #11], R0
..\X2Csrc\__Scope_Main.c:81
    55ca:	1d 5c       	JMP       LR
    55cc:	00 1e 00 10 	.long     0x10001e00 ->268443136  [!!!@2@:MOV       R0, #224	@@: MOV       R0, #0
    55d0:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0

000055d4 <Scope_Main_Update>:
Scope_Main_Update():
..\X2Csrc\__Scope_Main.c:89
    55d4:	8f 5f       	PUSH      {R6-R9,LR}
    55d6:	c0 58       	MOV       R6, R0
..\X2Csrc\__Scope_Main.c:92
    55d8:	68 98       	LD.W      R5, [R0 + #1]
    55da:	58 38       	CMP       R5, #8
    55dc:	77 f8       	JHI       $+119                 ;->0x56ca
    55de:	2a 7a       	LSL       R5, #2
    55e0:	02 44       	LD        R4, [PC + #2]         ;->0x55e8  :=0x55ec
    55e2:	6c e9       	LD.W      R5, [R4 + R5]
    55e4:	15 5c       	JMP       R5
    55e6:	00 00       	NOP      NOP      
    55e8:	ec 55 00 00 	.long     0x000055ec ->000021996  [!!!@2@:JB        LR, #28	@@: NOP      

000055ec <.text$Scope_Main_Update$sdata_local_1>:
    55ec:	ca 56 00 00 10 56 00 00 4c 57 00 00 ca 56 00 00     .V...V..LW...V..
    55fc:	74 57 00 00 8c 57 00 00 8c 57 00 00 d8 56 00 00     tW...W...W...V..
    560c:	1e 57 00 00                                         .W..

00005610 <.text$Scope_Main_Update$scode_loacal_6>:
..\X2Csrc\__Scope_Main.c:143
    5610:	60 58       	MOV       R3, R0
    5612:	36 2c       	ADD       R3, #70
    5614:	23 59       	MOV       R9, R3
    5616:	53 81       	LD.H      R5, [R3]
    5618:	74 14       	MOV       R7, #68
    561a:	e0 c3       	ADD       R4, R0, R7
    561c:	44 81       	LD.H      R4, [R4]
    561e:	5d c0       	ADD       R3, R5, #1
    5620:	93 84       	ST.H      [R9], R3
    5622:	45 70       	CMP       R4, R5
    5624:	2d f8       	JHI       $+45                  ;->0x567e
..\X2Csrc\__Scope_Main.c:145
    5626:	50 10       	MOV       R5, #0
    5628:	95 84       	ST.H      [R9], R5
..\X2Csrc\__Scope_Main.c:147
    562a:	a0 9e       	LD.W      R4, [R0 + #26]
    562c:	24 13       	MOV       R2, #52
    562e:	a8 c2       	ADD       R5, R0, R2
    5630:	35 80       	LD.B      R3, [R5]
    5632:	1b c3       	ADD       R3, R3, R4
    5634:	51 10       	MOV       R5, #1
    5636:	ad 7a       	LSL       R5, #13
    5638:	35 70       	CMP       R3, R5
    563a:	03 f9       	JLS       $+3                   ;->0x5640
..\X2Csrc\__Scope_Main.c:149
    563c:	40 10       	MOV       R4, #0
    563e:	84 a6       	ST.W      [R0 + #26], R4
    5640:	00 10       	MOV       R0, #0
..\X2Csrc\__Scope_Main.c:155
    5642:	50 10       	MOV       R5, #0
    5644:	d0 c0       	ADD       R2, R0, #3
    5646:	0e c2       	ADD       R1, R6, R0
..\X2Csrc\__Scope_Main.c:159
    5648:	12 7a       	LSL       R2, #2
    564a:	be e8       	LD.W      R7, [R6 + R2]
    564c:	7f e5       	LD.B      R7, [R7 + R5]
    564e:	37 d1       	ZXT.B     R3, R7
..\X2Csrc\__Scope_Main.c:158
    5650:	fe 9b       	LD.W      R7, [R6 + #15]
    5652:	3b eb       	ST.B      [R7 + R4], R3
    5654:	64 c0       	ADD       R4, R4, #1
    5656:	b4 a6       	ST.W      [R6 + #26], R4
..\X2Csrc\__Scope_Main.c:160
    5658:	6d c0       	ADD       R5, R5, #1
    565a:	55 d1       	ZXT.B     R5, R5
..\X2Csrc\__Scope_Main.c:162
    565c:	7c 12       	MOV       R7, #44
    565e:	d9 c3       	ADD       R3, R1, R7
    5660:	33 80       	LD.B      R3, [R3]
    5662:	35 70       	CMP       R3, R5
    5664:	f3 f8       	JHI       $-13                  ;->0x564a
..\X2Csrc\__Scope_Main.c:163
    5666:	40 c0       	ADD       R0, R0, #1
    5668:	00 d1       	ZXT.B     R0, R0
..\X2Csrc\__Scope_Main.c:165
    566a:	2e 8a       	LD.B      R5, [R6 + #8]
    566c:	50 70       	CMP       R5, R0
    566e:	ea f8       	JHI       $-22                  ;->0x5642
..\X2Csrc\__Scope_Main.c:167
    5670:	2e 9f       	LD.W      R5, [R6 + #28]
    5672:	54 70       	CMP       R5, R4
    5674:	05 f8       	JHI       $+5                   ;->0x567e
..\X2Csrc\__Scope_Main.c:169
    5676:	28 17       	MOV       R2, #120
    5678:	ae c2       	ADD       R5, R6, R2
    567a:	41 10       	MOV       R4, #1
    567c:	54 83       	ST.B      [R5], R4
..\X2Csrc\__Scope_Main.c:174
    567e:	06 58       	MOV       R0, R6
    5680:	14 45       	LD        R5, [PC + #20]        ;->0x56d0  :=0x54d4
    5682:	05 5c       	LJMP      R5
    5684:	e0 58       	MOV       R7, R0
    5686:	01 59       	MOV       R8, R1
..\X2Csrc\__Scope_Main.c:175
    5688:	06 58       	MOV       R0, R6
    568a:	27 58       	MOV       R1, R7
    568c:	48 58       	MOV       R2, R8
    568e:	12 45       	LD        R5, [PC + #18]        ;->0x56d4  :=0x51ec
    5690:	05 5c       	LJMP      R5
    5692:	00 38       	CMP       R0, #0
    5694:	02 f1       	JNZ       $+2                   ;->0x5698
    5696:	89 04       	SJMP      $+137                 ;->0x57a8
    5698:	38 17       	MOV       R3, #120
    569a:	ee c2       	ADD       R5, R6, R3
    569c:	55 80       	LD.B      R5, [R5]
    569e:	50 38       	CMP       R5, #0
    56a0:	02 f1       	JNZ       $+2                   ;->0x56a4
    56a2:	83 04       	SJMP      $+131                 ;->0x57a8
..\X2Csrc\__Scope_Main.c:177
    56a4:	ee 9e       	LD.W      R5, [R6 + #27]
    56a6:	50 38       	CMP       R5, #0
    56a8:	02 f5       	JPL       $+2                   ;->0x56ac
    56aa:	9e 04       	SJMP      $+158                 ;->0x57e6
..\X2Csrc\__Scope_Main.c:187
    56ac:	ae 9e       	LD.W      R5, [R6 + #26]
    56ae:	50 38       	CMP       R5, #0
    56b0:	02 f1       	JNZ       $+2                   ;->0x56b4
    56b2:	a0 04       	SJMP      $+160                 ;->0x57f2
..\X2Csrc\__Scope_Main.c:197
    56b4:	49 81       	LD.H      R4, [R9]
    56b6:	40 38       	CMP       R4, #0
    56b8:	02 f0       	JZ        $+2                   ;->0x56bc
    56ba:	a1 04       	SJMP      $+161                 ;->0x57fc
..\X2Csrc\__Scope_Main.c:201
    56bc:	74 13       	MOV       R7, #52
    56be:	e6 c3       	ADD       R4, R6, R7
    56c0:	44 80       	LD.B      R4, [R4]
    56c2:	2d c7       	SUB       R5, R5, R4
    56c4:	75 a7       	ST.W      [R6 + #29], R5
..\X2Csrc\__Scope_Main.c:209
    56c6:	57 10       	MOV       R5, #7
    56c8:	75 a0       	ST.W      [R6 + #1], R5
..\X2Csrc\__Scope_Main.c:260
    56ca:	0f 5e       	POP       {R6-R9}
    56cc:	0d 5d       	POP       LR
    56ce:	1d 5c       	JMP       LR
    56d0:	d4 54 00 00 	.long     0x000054d4 ->000021716  [!!!@2@:JB        R10, #12	@@: NOP      
    56d4:	ec 51 00 00 	.long     0x000051ec ->000020972  [!!!@2@:JB        [LR], #28	@@: NOP      
..\X2Csrc\__Scope_Main.c:238
    56d8:	76 14       	MOV       R7, #70
    56da:	e8 c3       	ADD       R5, R0, R7
    56dc:	45 81       	LD.H      R4, [R5]
    56de:	24 14       	MOV       R2, #68
    56e0:	98 c2       	ADD       R3, R0, R2
    56e2:	33 81       	LD.H      R3, [R3]
    56e4:	54 c0       	ADD       R2, R4, #1
    56e6:	52 84       	ST.H      [R5], R2
    56e8:	34 70       	CMP       R3, R4
    56ea:	f0 f8       	JHI       $-16                  ;->0x56ca
..\X2Csrc\__Scope_Main.c:240
    56ec:	40 10       	MOV       R4, #0
    56ee:	54 84       	ST.H      [R5], R4
..\X2Csrc\__Scope_Main.c:242
    56f0:	34 13       	MOV       R3, #52
    56f2:	e8 c2       	ADD       R5, R0, R3
    56f4:	45 80       	LD.B      R4, [R5]
    56f6:	a8 9e       	LD.W      R5, [R0 + #26]
    56f8:	64 c3       	ADD       R4, R4, R5
    56fa:	51 10       	MOV       R5, #1
    56fc:	ad 7a       	LSL       R5, #13
    56fe:	45 70       	CMP       R4, R5
    5700:	03 f9       	JLS       $+3                   ;->0x5706
..\X2Csrc\__Scope_Main.c:244
    5702:	50 10       	MOV       R5, #0
    5704:	85 a6       	ST.W      [R0 + #26], R5
..\X2Csrc\__Scope_Main.c:247
    5706:	06 58       	MOV       R0, R6
    5708:	1a 45       	LD        R5, [PC + #26]        ;->0x5770  :=0x551a
    570a:	05 5c       	LJMP      R5
..\X2Csrc\__Scope_Main.c:250
    570c:	7e 9f       	LD.W      R7, [R6 + #29]
    570e:	96 9e       	LD.W      R2, [R6 + #26]
    5710:	a7 c6       	SUB       R4, R7, R2
    5712:	ee 9e       	LD.W      R5, [R6 + #27]
..\X2Csrc\__Scope_Main.c:249
    5714:	45 70       	CMP       R4, R5
    5716:	63 f8       	JHI       $+99                  ;->0x57dc
..\X2Csrc\__Scope_Main.c:254
    5718:	50 10       	MOV       R5, #0
    571a:	75 a0       	ST.W      [R6 + #1], R5
    571c:	d7 07       	SJMP      $-41                  ;->0x56ca
..\X2Csrc\__Scope_Main.c:222
    571e:	76 14       	MOV       R7, #70
    5720:	e8 c3       	ADD       R5, R0, R7
    5722:	45 81       	LD.H      R4, [R5]
    5724:	24 14       	MOV       R2, #68
    5726:	98 c2       	ADD       R3, R0, R2
    5728:	33 81       	LD.H      R3, [R3]
    572a:	54 c0       	ADD       R2, R4, #1
    572c:	52 84       	ST.H      [R5], R2
    572e:	34 70       	CMP       R3, R4
    5730:	cd f8       	JHI       $-51                  ;->0x56ca
..\X2Csrc\__Scope_Main.c:224
    5732:	40 10       	MOV       R4, #0
    5734:	54 84       	ST.H      [R5], R4
..\X2Csrc\__Scope_Main.c:226
    5736:	34 13       	MOV       R3, #52
    5738:	e8 c2       	ADD       R5, R0, R3
    573a:	55 80       	LD.B      R5, [R5]
    573c:	60 9f       	LD.W      R4, [R0 + #29]
    573e:	2d c3       	ADD       R5, R5, R4
    5740:	45 a7       	ST.W      [R0 + #29], R5
..\X2Csrc\__Scope_Main.c:229
    5742:	50 38       	CMP       R5, #0
    5744:	c3 f4       	JMI       $-61                  ;->0x56ca
..\X2Csrc\__Scope_Main.c:231
    5746:	52 10       	MOV       R5, #2
    5748:	45 a0       	ST.W      [R0 + #1], R5
    574a:	c0 07       	SJMP      $-64                  ;->0x56ca
..\X2Csrc\__Scope_Main.c:108
    574c:	76 14       	MOV       R7, #70
    574e:	e8 c3       	ADD       R5, R0, R7
    5750:	45 81       	LD.H      R4, [R5]
    5752:	24 14       	MOV       R2, #68
    5754:	98 c2       	ADD       R3, R0, R2
    5756:	33 81       	LD.H      R3, [R3]
    5758:	54 c0       	ADD       R2, R4, #1
    575a:	52 84       	ST.H      [R5], R2
    575c:	34 70       	CMP       R3, R4
    575e:	2f f9       	JLS       $+47                  ;->0x57bc
..\X2Csrc\__Scope_Main.c:121
    5760:	68 2c       	ADD       R6, #72
    5762:	76 81       	LD.H      R7, [R6]
    5764:	6f c0       	ADD       R5, R7, #1
    5766:	65 84       	ST.H      [R6], R5
..\X2Csrc\__Scope_Main.c:260
    5768:	0f 5e       	POP       {R6-R9}
    576a:	0d 5d       	POP       LR
    576c:	1d 5c       	JMP       LR
    576e:	00 00       	NOP      NOP      
    5770:	1a 55 00 00 	.long     0x0000551a ->000021786  [!!!@2@:JB        R3, #18	@@: NOP      
..\X2Csrc\__Scope_Main.c:101
    5774:	28 14       	MOV       R2, #72
    5776:	a8 c2       	ADD       R5, R0, R2
    5778:	35 81       	LD.H      R3, [R5]
    577a:	63 c0       	ADD       R4, R3, #1
    577c:	54 84       	ST.H      [R5], R4
..\X2Csrc\__Scope_Main.c:102
    577e:	66 2c       	ADD       R6, #70
    5780:	46 81       	LD.H      R4, [R6]
    5782:	6c c0       	ADD       R5, R4, #1
    5784:	65 84       	ST.H      [R6], R5
..\X2Csrc\__Scope_Main.c:260
    5786:	0f 5e       	POP       {R6-R9}
    5788:	0d 5d       	POP       LR
    578a:	1d 5c       	JMP       LR
..\X2Csrc\__Scope_Main.c:128
    578c:	1d 45       	LD        R5, [PC + #29]        ;->0x5800  :=0x54d4
    578e:	05 5c       	LJMP      R5
    5790:	00 59       	MOV       R8, R0
    5792:	21 59       	MOV       R9, R1
..\X2Csrc\__Scope_Main.c:129
    5794:	06 58       	MOV       R0, R6
    5796:	28 58       	MOV       R1, R8
    5798:	49 58       	MOV       R2, R9
    579a:	1b 45       	LD        R5, [PC + #27]        ;->0x5804  :=0x51ec
    579c:	05 5c       	LJMP      R5
    579e:	00 38       	CMP       R0, #0
    57a0:	09 f0       	JZ        $+9                   ;->0x57b2
..\X2Csrc\__Scope_Main.c:131
    57a2:	54 10       	MOV       R5, #4
    57a4:	75 a0       	ST.W      [R6 + #1], R5
    57a6:	92 07       	SJMP      $-110                 ;->0x56ca
..\X2Csrc\__Scope_Main.c:215
    57a8:	87 58       	MOV       R4, R7
    57aa:	a8 58       	MOV       R5, R8
    57ac:	b4 a5       	ST.W      [R6 + #22], R4
    57ae:	f5 a5       	ST.W      [R6 + #23], R5
    57b0:	8d 07       	SJMP      $-115                 ;->0x56ca
..\X2Csrc\__Scope_Main.c:135
    57b2:	48 58       	MOV       R2, R8
    57b4:	69 58       	MOV       R3, R9
    57b6:	b2 a5       	ST.W      [R6 + #22], R2
    57b8:	f3 a5       	ST.W      [R6 + #23], R3
    57ba:	88 07       	SJMP      $-120                 ;->0x56ca
..\X2Csrc\__Scope_Main.c:110
    57bc:	40 10       	MOV       R4, #0
    57be:	54 84       	ST.H      [R5], R4
..\X2Csrc\__Scope_Main.c:112
    57c0:	12 45       	LD        R5, [PC + #18]        ;->0x5808  :=0x551a
    57c2:	05 5c       	LJMP      R5
..\X2Csrc\__Scope_Main.c:116
    57c4:	34 13       	MOV       R3, #52
    57c6:	ee c2       	ADD       R5, R6, R3
    57c8:	45 80       	LD.B      R4, [R5]
    57ca:	ae 9e       	LD.W      R5, [R6 + #26]
    57cc:	64 c3       	ADD       R4, R4, R5
    57ce:	51 10       	MOV       R5, #1
    57d0:	ad 7a       	LSL       R5, #13
    57d2:	45 70       	CMP       R4, R5
    57d4:	c6 f9       	JLS       $-58                  ;->0x5760
..\X2Csrc\__Scope_Main.c:118
    57d6:	50 10       	MOV       R5, #0
    57d8:	75 a0       	ST.W      [R6 + #1], R5
    57da:	c3 07       	SJMP      $-61                  ;->0x5760
..\X2Csrc\__Scope_Main.c:251
    57dc:	9e 9b       	LD.W      R3, [R6 + #14]
    57de:	e4 c2       	ADD       R4, R4, R3
..\X2Csrc\__Scope_Main.c:250
    57e0:	45 70       	CMP       R4, R5
    57e2:	9b f9       	JLS       $-101                 ;->0x5718
    57e4:	73 07       	SJMP      $-141                 ;->0x56ca
..\X2Csrc\__Scope_Main.c:180
    57e6:	75 a7       	ST.W      [R6 + #29], R5
..\X2Csrc\__Scope_Main.c:181
    57e8:	50 10       	MOV       R5, #0
    57ea:	b5 a6       	ST.W      [R6 + #26], R5
..\X2Csrc\__Scope_Main.c:182
    57ec:	58 10       	MOV       R5, #8
    57ee:	75 a0       	ST.W      [R6 + #1], R5
    57f0:	6d 07       	SJMP      $-147                 ;->0x56ca
..\X2Csrc\__Scope_Main.c:206
    57f2:	24 13       	MOV       R2, #52
    57f4:	ae c2       	ADD       R5, R6, R2
    57f6:	55 80       	LD.B      R5, [R5]
    57f8:	9e 9b       	LD.W      R3, [R6 + #14]
    57fa:	6b c7       	SUB       R5, R3, R5
    57fc:	75 a7       	ST.W      [R6 + #29], R5
    57fe:	64 07       	SJMP      $-156                 ;->0x56c6
    5800:	d4 54 00 00 	.long     0x000054d4 ->000021716  [!!!@2@:JB        R10, #12	@@: NOP      
    5804:	ec 51 00 00 	.long     0x000051ec ->000020972  [!!!@2@:JB        [LR], #28	@@: NOP      
    5808:	1a 55 00 00 	.long     0x0000551a ->000021786  [!!!@2@:JB        R3, #18	@@: NOP      

0000580c <Scope_Main_Load>:
Scope_Main_Load():
..\X2Csrc\__Scope_Main.c:267
    580c:	68 98       	LD.W      R5, [R0 + #1]
    580e:	15 83       	ST.B      [R1], R5
..\X2Csrc\__Scope_Main.c:268
    5810:	28 8a       	LD.B      R5, [R0 + #8]
    5812:	4d 90       	ST.B      [R1 + #1], R5
..\X2Csrc\__Scope_Main.c:269
    5814:	34 14       	MOV       R3, #68
    5816:	e8 c2       	ADD       R5, R0, R3
    5818:	45 81       	LD.H      R4, [R5]
    581a:	8c 90       	ST.B      [R1 + #2], R4
..\X2Csrc\__Scope_Main.c:270
    581c:	55 81       	LD.H      R5, [R5]
    581e:	a8 7c       	LSR       R5, #8
    5820:	cd 90       	ST.B      [R1 + #3], R5
..\X2Csrc\__Scope_Main.c:272
    5822:	58 16       	MOV       R5, #104
    5824:	2d e4       	LD.B      R5, [R5 + R0]
    5826:	0d 91       	ST.B      [R1 + #4], R5
..\X2Csrc\__Scope_Main.c:273
    5828:	a8 9e       	LD.W      R5, [R0 + #26]
    582a:	a8 7c       	LSR       R5, #8
    582c:	4d 91       	ST.B      [R1 + #5], R5
..\X2Csrc\__Scope_Main.c:274
    582e:	a8 9e       	LD.W      R5, [R0 + #26]
    5830:	28 7d       	LSR       R5, #16
    5832:	8d 91       	ST.B      [R1 + #6], R5
..\X2Csrc\__Scope_Main.c:275
    5834:	a8 9e       	LD.W      R5, [R0 + #26]
    5836:	a8 7d       	LSR       R5, #24
    5838:	cd 91       	ST.B      [R1 + #7], R5
..\X2Csrc\__Scope_Main.c:277
    583a:	3c 13       	MOV       R3, #60
    583c:	1b e4       	LD.B      R3, [R3 + R0]
    583e:	0b 92       	ST.B      [R1 + #8], R3
..\X2Csrc\__Scope_Main.c:278
    5840:	e8 9b       	LD.W      R5, [R0 + #15]
    5842:	a8 7c       	LSR       R5, #8
    5844:	4d 92       	ST.B      [R1 + #9], R5
..\X2Csrc\__Scope_Main.c:279
    5846:	e8 af       	LD.H      R5, [R0 + #31]
    5848:	8d 92       	ST.B      [R1 + #10], R5
..\X2Csrc\__Scope_Main.c:280
    584a:	e8 9b       	LD.W      R5, [R0 + #15]
    584c:	a8 7d       	LSR       R5, #24
    584e:	cd 92       	ST.B      [R1 + #11], R5
..\X2Csrc\__Scope_Main.c:282
    5850:	4c 16       	MOV       R4, #108
    5852:	24 e4       	LD.B      R4, [R4 + R0]
    5854:	0c 93       	ST.B      [R1 + #12], R4
..\X2Csrc\__Scope_Main.c:283
    5856:	e8 9e       	LD.W      R5, [R0 + #27]
    5858:	a8 78       	ASR       R5, #8
    585a:	4d 93       	ST.B      [R1 + #13], R5
..\X2Csrc\__Scope_Main.c:284
    585c:	e8 9e       	LD.W      R5, [R0 + #27]
    585e:	28 79       	ASR       R5, #16
    5860:	8d 93       	ST.B      [R1 + #14], R5
..\X2Csrc\__Scope_Main.c:285
    5862:	e8 9e       	LD.W      R5, [R0 + #27]
    5864:	a8 79       	ASR       R5, #24
    5866:	cd 93       	ST.B      [R1 + #15], R5
..\X2Csrc\__Scope_Main.c:287
    5868:	54 17       	MOV       R5, #116
    586a:	2d e4       	LD.B      R5, [R5 + R0]
    586c:	0d 94       	ST.B      [R1 + #16], R5
..\X2Csrc\__Scope_Main.c:288
    586e:	68 9f       	LD.W      R5, [R0 + #29]
    5870:	a8 78       	ASR       R5, #8
    5872:	4d 94       	ST.B      [R1 + #17], R5
..\X2Csrc\__Scope_Main.c:289
    5874:	68 9f       	LD.W      R5, [R0 + #29]
    5876:	28 79       	ASR       R5, #16
    5878:	8d 94       	ST.B      [R1 + #18], R5
..\X2Csrc\__Scope_Main.c:290
    587a:	68 9f       	LD.W      R5, [R0 + #29]
    587c:	a8 79       	ASR       R5, #24
    587e:	cd 94       	ST.B      [R1 + #19], R5
..\X2Csrc\__Scope_Main.c:292
    5880:	38 13       	MOV       R3, #56
    5882:	1b e4       	LD.B      R3, [R3 + R0]
    5884:	0b 95       	ST.B      [R1 + #20], R3
..\X2Csrc\__Scope_Main.c:293
    5886:	a8 9b       	LD.W      R5, [R0 + #14]
    5888:	a8 7c       	LSR       R5, #8
    588a:	4d 95       	ST.B      [R1 + #21], R5
..\X2Csrc\__Scope_Main.c:294
    588c:	68 af       	LD.H      R5, [R0 + #29]
    588e:	8d 95       	ST.B      [R1 + #22], R5
..\X2Csrc\__Scope_Main.c:295
    5890:	a8 9b       	LD.W      R5, [R0 + #14]
    5892:	a8 7d       	LSR       R5, #24
    5894:	cd 95       	ST.B      [R1 + #23], R5
..\X2Csrc\__Scope_Main.c:297
    5896:	40 14       	MOV       R4, #64
    5898:	24 e4       	LD.B      R4, [R4 + R0]
    589a:	0c 96       	ST.B      [R1 + #24], R4
..\X2Csrc\__Scope_Main.c:298
    589c:	28 9c       	LD.W      R5, [R0 + #16]
    589e:	a8 7c       	LSR       R5, #8
    58a0:	4d 96       	ST.B      [R1 + #25], R5
..\X2Csrc\__Scope_Main.c:299
    58a2:	28 9c       	LD.W      R5, [R0 + #16]
    58a4:	28 7d       	LSR       R5, #16
    58a6:	8d 96       	ST.B      [R1 + #26], R5
..\X2Csrc\__Scope_Main.c:300
    58a8:	28 9c       	LD.W      R5, [R0 + #16]
    58aa:	a8 7d       	LSR       R5, #24
    58ac:	cd 96       	ST.B      [R1 + #27], R5
..\X2Csrc\__Scope_Main.c:302
    58ae:	52 18       	MOV       R5, #130
    58b0:	0d 97       	ST.B      [R1 + #28], R5
..\X2Csrc\__Scope_Main.c:305
    58b2:	0d 11       	MOV       R0, #29
    58b4:	1d 5c       	JMP       LR
	...

000058b8 <Scope_Main_Save>:
Scope_Main_Save():
..\X2Csrc\__Scope_Main.c:311
    58b8:	ff 5f       	PUSH      {R6-R12,LR}
    58ba:	e0 31       	SUB       SP, #16
    58bc:	c0 58       	MOV       R6, R0
    58be:	61 59       	MOV       R11, R1
    58c0:	a2 d1       	ZXT.B     R10, R2
..\X2Csrc\__Scope_Main.c:322
    58c2:	a3 38       	CMP       R10, #3
    58c4:	02 f8       	JHI       $+2                   ;->0x58c8
    58c6:	e7 04       	SJMP      $+231                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:328
    58c8:	41 88       	LD.B      R0, [R1 + #1]
    58ca:	50 d1       	ZXT.B     R5, R0
    58cc:	58 38       	CMP       R5, #8
    58ce:	02 f9       	JLS       $+2                   ;->0x58d2
    58d0:	e2 04       	SJMP      $+226                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:333
    58d2:	50 38       	CMP       R5, #0
    58d4:	02 f1       	JNZ       $+2                   ;->0x58d8
    58d6:	df 04       	SJMP      $+223                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:344
    58d8:	70 10       	MOV       R7, #0
    58da:	77 a0       	ST.W      [R6 + #1], R7
..\X2Csrc\__Scope_Main.c:345
    58dc:	37 92       	ST.B      [R6 + #8], R7
..\X2Csrc\__Scope_Main.c:365
    58de:	18 14       	MOV       R1, #72
    58e0:	6e c2       	ADD       R5, R6, R1
    58e2:	57 84       	ST.H      [R5], R7
..\X2Csrc\__Scope_Main.c:366
    58e4:	b7 a6       	ST.W      [R6 + #26], R7
..\X2Csrc\__Scope_Main.c:367
    58e6:	4b 58       	MOV       R2, R11
    58e8:	d2 88       	LD.B      R2, [R2 + #3]
    58ea:	52 d1       	ZXT.B     R5, R2
    58ec:	a8 7a       	LSL       R5, #8
    58ee:	6b 58       	MOV       R3, R11
    58f0:	9b 88       	LD.B      R3, [R3 + #2]
    58f2:	43 d1       	ZXT.B     R4, R3
    58f4:	2d c3       	ADD       R5, R5, R4
    58f6:	55 d0       	ZXT.H     R5, R5
    58f8:	04 14       	MOV       R0, #68
    58fa:	26 c2       	ADD       R4, R6, R0
    58fc:	45 84       	ST.H      [R4], R5
..\X2Csrc\__Scope_Main.c:368
    58fe:	16 14       	MOV       R1, #70
    5900:	66 c2       	ADD       R4, R6, R1
    5902:	45 84       	ST.H      [R4], R5
..\X2Csrc\__Scope_Main.c:369
    5904:	40 10       	MOV       R4, #0
    5906:	50 10       	MOV       R5, #0
    5908:	b4 a5       	ST.W      [R6 + #22], R4
    590a:	f5 a5       	ST.W      [R6 + #23], R5
..\X2Csrc\__Scope_Main.c:371
    590c:	46 58       	MOV       R2, R6
    590e:	24 2b       	ADD       R2, #52
    5910:	22 59       	MOV       R9, R2
    5912:	27 83       	ST.B      [R2], R7
..\X2Csrc\__Scope_Main.c:373
    5914:	52 10       	MOV       R5, #2
    5916:	75 92       	ST.B      [R6 + #9], R5
..\X2Csrc\__Scope_Main.c:375
    5918:	38 17       	MOV       R3, #120
    591a:	ee c2       	ADD       R5, R6, R3
    591c:	57 83       	ST.B      [R5], R7
..\X2Csrc\__Scope_Main.c:376
    591e:	77 a7       	ST.W      [R6 + #29], R7
..\X2Csrc\__Scope_Main.c:378
    5920:	8b 58       	MOV       R4, R11
    5922:	64 88       	LD.B      R4, [R4 + #1]
    5924:	54 d1       	ZXT.B     R5, R4
    5926:	57 70       	CMP       R5, R7
    5928:	02 f1       	JNZ       $+2                   ;->0x592c
    592a:	f1 05       	SJMP      $+497                 ;->0x5d0c
    592c:	c4 10       	MOV       R12, #4
..\X2Csrc\__Scope_Main.c:381
    592e:	ac 58       	MOV       R5, R12
    5930:	65 c0       	ADD       R4, R5, #1
    5932:	44 d1       	ZXT.B     R4, R4
..\X2Csrc\__Scope_Main.c:383
    5934:	0b 58       	MOV       R0, R11
    5936:	40 e5       	LD.B      R0, [R0 + R5]
    5938:	50 d1       	ZXT.B     R5, R0
    593a:	51 38       	CMP       R5, #1
    593c:	02 f1       	JNZ       $+2                   ;->0x5940
    593e:	02 05       	SJMP      $+258                 ;->0x5b42
    5940:	50 38       	CMP       R5, #0
    5942:	02 f0       	JZ        $+2                   ;->0x5946
    5944:	a4 04       	SJMP      $+164                 ;->0x5a8c
..\X2Csrc\__Scope_Main.c:425
    5946:	ef c0       	ADD       R5, R7, #3
    5948:	2a 7a       	LSL       R5, #2
    594a:	2b 58       	MOV       R1, R11
    594c:	09 c3       	ADD       R1, R1, R4
    594e:	01 59       	MOV       R8, R1
    5950:	59 88       	LD.B      R3, [R1 + #1]
    5952:	23 d1       	ZXT.B     R2, R3
    5954:	90 7a       	LSL       R2, #8
..\X2Csrc\__Scope_Main.c:426
    5956:	81 88       	LD.B      R0, [R1 + #2]
    5958:	30 d1       	ZXT.B     R3, R0
    595a:	18 7b       	LSL       R3, #16
..\X2Csrc\__Scope_Main.c:425
    595c:	d2 c2       	ADD       R2, R2, R3
    595e:	2b 58       	MOV       R1, R11
    5960:	21 e5       	LD.B      R4, [R1 + R4]
    5962:	34 d1       	ZXT.B     R3, R4
    5964:	e2 c2       	ADD       R4, R2, R3
..\X2Csrc\__Scope_Main.c:426
    5966:	48 58       	MOV       R2, R8
    5968:	d2 88       	LD.B      R2, [R2 + #3]
    596a:	32 d1       	ZXT.B     R3, R2
    596c:	98 7b       	LSL       R3, #24
    596e:	e4 c2       	ADD       R4, R4, R3
..\X2Csrc\__Scope_Main.c:425
    5970:	74 ef       	ST.W      [R6 + R5], R4
..\X2Csrc\__Scope_Main.c:432
    5972:	68 58       	MOV       R3, R8
    5974:	1b 89       	LD.B      R3, [R3 + #4]
    5976:	43 d1       	ZXT.B     R4, R3
    5978:	ee c3       	ADD       R5, R6, R7
    597a:	5c 2a       	ADD       R5, #44
    597c:	54 83       	ST.B      [R5], R4
..\X2Csrc\__Scope_Main.c:433
    597e:	59 80       	LD.B      R5, [R9]
    5980:	6c c3       	ADD       R5, R4, R5
    5982:	55 d1       	ZXT.B     R5, R5
    5984:	95 83       	ST.B      [R9], R5
..\X2Csrc\__Scope_Main.c:438
    5986:	5e 8a       	LD.B      R3, [R6 + #9]
    5988:	e4 c2       	ADD       R4, R4, R3
    598a:	74 92       	ST.B      [R6 + #9], R4
..\X2Csrc\__Scope_Main.c:443
    598c:	01 10       	MOV       R0, #1
    598e:	85 7a       	LSL       R0, #13
    5990:	60 cf       	DIVS      R4, R0, R5
    5992:	00 00       	NOP      NOP      
    5994:	6c cb       	MULS      R5, R4, R5
    5996:	00 00       	NOP      NOP      
    5998:	b5 a3       	ST.W      [R6 + #14], R5
..\X2Csrc\__Scope_Main.c:445
    599a:	c6 28       	ADD       R12, #6
    599c:	cc d1       	ZXT.B     R12, R12
..\X2Csrc\__Scope_Main.c:446
    599e:	7f c0       	ADD       R7, R7, #1
    59a0:	77 d1       	ZXT.B     R7, R7
..\X2Csrc\__Scope_Main.c:378
    59a2:	2b 58       	MOV       R1, R11
    59a4:	49 88       	LD.B      R1, [R1 + #1]
    59a6:	51 d1       	ZXT.B     R5, R1
    59a8:	57 70       	CMP       R5, R7
    59aa:	c2 f8       	JHI       $-62                  ;->0x592e
    59ac:	ac 58       	MOV       R5, R12
    59ae:	65 c0       	ADD       R4, R5, #1
    59b0:	44 d1       	ZXT.B     R4, R4
    59b2:	9d c0       	ADD       R3, R5, #2
    59b4:	33 d1       	ZXT.B     R3, R3
..\X2Csrc\__Scope_Main.c:460
    59b6:	4b 58       	MOV       R2, R11
    59b8:	6a e5       	LD.B      R5, [R2 + R5]
    59ba:	85 d1       	ZXT.B     R8, R5
    59bc:	54 16       	MOV       R5, #100
    59be:	7e c3       	ADD       R7, R6, R5
    59c0:	78 83       	ST.B      [R7], R8
..\X2Csrc\__Scope_Main.c:464
    59c2:	22 e5       	LD.B      R4, [R2 + R4]
    59c4:	54 d1       	ZXT.B     R5, R4
    59c6:	51 38       	CMP       R5, #1
    59c8:	02 f1       	JNZ       $+2                   ;->0x59cc
    59ca:	ce 05       	SJMP      $+462                 ;->0x5d66
    59cc:	50 38       	CMP       R5, #0
    59ce:	02 f0       	JZ        $+2                   ;->0x59d2
    59d0:	16 05       	SJMP      $+278                 ;->0x5bfc
..\X2Csrc\__Scope_Main.c:506
    59d2:	ea c2       	ADD       R5, R2, R3
    59d4:	55 88       	LD.B      R2, [R5 + #1]
    59d6:	90 7a       	LSL       R2, #8
..\X2Csrc\__Scope_Main.c:507
    59d8:	a5 88       	LD.B      R4, [R5 + #2]
    59da:	20 7b       	LSL       R4, #16
..\X2Csrc\__Scope_Main.c:506
    59dc:	12 c3       	ADD       R2, R2, R4
    59de:	0b 58       	MOV       R0, R11
    59e0:	d8 e4       	LD.B      R3, [R0 + R3]
    59e2:	43 d1       	ZXT.B     R4, R3
    59e4:	22 c3       	ADD       R4, R2, R4
..\X2Csrc\__Scope_Main.c:507
    59e6:	ed 88       	LD.B      R5, [R5 + #3]
    59e8:	a8 7b       	LSL       R5, #24
    59ea:	6c c3       	ADD       R5, R4, R5
..\X2Csrc\__Scope_Main.c:506
    59ec:	35 a6       	ST.W      [R6 + #24], R5
..\X2Csrc\__Scope_Main.c:513
    59ee:	2c 58       	MOV       R1, R12
    59f0:	a9 c1       	ADD       R5, R1, #6
    59f2:	d5 d1       	ZXT.B     LR, R5
..\X2Csrc\__Scope_Main.c:516
    59f4:	5f 10       	MOV       R5, #15
    59f6:	48 58       	MOV       R2, R8
    59f8:	52 d5       	ANL       R2, R2, R5
    59fa:	22 59       	MOV       R9, R2
..\X2Csrc\__Scope_Main.c:517
    59fc:	5f 17       	MOV       R5, #127
    59fe:	55 68       	NOT       R5, R5
    5a00:	68 58       	MOV       R3, R8
    5a02:	5b d5       	ANL       R3, R3, R5
    5a04:	e3 85       	ST.W      [SP], R3
..\X2Csrc\__Scope_Main.c:519
    5a06:	22 38       	CMP       R2, #2
    5a08:	03 f1       	JNZ       $+3                   ;->0x5a0e
    5a0a:	00 03 1a 02 	JMP       $+538                 ;->0x5e3e
    5a0e:	22 38       	CMP       R2, #2
    5a10:	02 f9       	JLS       $+2                   ;->0x5a14
    5a12:	2f 05       	SJMP      $+303                 ;->0x5c70
    5a14:	21 38       	CMP       R2, #1
    5a16:	3f f1       	JNZ       $+63                  ;->0x5a94
..\X2Csrc\__Scope_Main.c:522
    5a18:	8b 58       	MOV       R4, R11
    5a1a:	0d 58       	MOV       R0, LR
    5a1c:	24 e4       	LD.B      R4, [R4 + R0]
    5a1e:	54 d1       	ZXT.B     R5, R4
    5a20:	35 a5       	ST.W      [R6 + #20], R5
    5a22:	50 10       	MOV       R5, #0
    5a24:	75 a5       	ST.W      [R6 + #21], R5
..\X2Csrc\__Scope_Main.c:542
    5a26:	5e 82       	LD.W      R5, [SP]
    5a28:	50 38       	CMP       R5, #0
    5a2a:	02 f0       	JZ        $+2                   ;->0x5a2e
    5a2c:	1e 05       	SJMP      $+286                 ;->0x5c68
..\X2Csrc\__Scope_Main.c:544
    5a2e:	45 48       	SET       R8, #5
    5a30:	78 83       	ST.B      [R7], R8
..\X2Csrc\__Scope_Main.c:545
    5a32:	ec 58       	MOV       R7, R12
    5a34:	7a 28       	ADD       R7, #10
    5a36:	77 d1       	ZXT.B     R7, R7
..\X2Csrc\__Scope_Main.c:553
    5a38:	2b 58       	MOV       R1, R11
    5a3a:	c9 e5       	LD.B      R1, [R1 + R7]
    5a3c:	01 d1       	ZXT.B     R0, R1
    5a3e:	4b 58       	MOV       R2, R11
    5a40:	ea c3       	ADD       R5, R2, R7
    5a42:	65 88       	LD.B      R4, [R5 + #1]
    5a44:	a0 7a       	LSL       R4, #8
    5a46:	00 c3       	ADD       R0, R0, R4
    5a48:	a5 88       	LD.B      R4, [R5 + #2]
    5a4a:	20 7b       	LSL       R4, #16
    5a4c:	00 c3       	ADD       R0, R0, R4
..\X2Csrc\__Scope_Main.c:554
    5a4e:	ed 88       	LD.B      R5, [R5 + #3]
    5a50:	a8 7b       	LSL       R5, #24
..\X2Csrc\__Scope_Main.c:553
    5a52:	40 c3       	ADD       R0, R0, R5
    5a54:	f0 a6       	ST.W      [R6 + #27], R0
..\X2Csrc\__Scope_Main.c:555
    5a56:	13 45       	LD        R5, [PC + #19]        ;->0x5aa0  :=0x5e70
    5a58:	05 5c       	LJMP      R5
    5a5a:	30 a7       	ST.W      [R6 + #28], R0
..\X2Csrc\__Scope_Main.c:556
    5a5c:	2f c1       	ADD       R5, R7, #4
..\X2Csrc\__Scope_Main.c:558
    5a5e:	55 d1       	ZXT.B     R5, R5
    5a60:	6b 58       	MOV       R3, R11
    5a62:	6b e5       	LD.B      R5, [R3 + R5]
    5a64:	55 d1       	ZXT.B     R5, R5
    5a66:	f5 a4       	ST.W      [R6 + #19], R5
..\X2Csrc\__Scope_Main.c:559
    5a68:	7f c1       	ADD       R7, R7, #5
    5a6a:	77 d1       	ZXT.B     R7, R7
..\X2Csrc\__Scope_Main.c:562
    5a6c:	a7 70       	CMP       R10, R7
    5a6e:	02 f8       	JHI       $+2                   ;->0x5a72
    5a70:	f6 04       	SJMP      $+246                 ;->0x5c5c
..\X2Csrc\__Scope_Main.c:565
    5a72:	fb e5       	LD.B      R7, [R3 + R7]
    5a74:	57 d1       	ZXT.B     R5, R7
    5a76:	51 38       	CMP       R5, #1
    5a78:	02 f1       	JNZ       $+2                   ;->0x5a7c
    5a7a:	f1 04       	SJMP      $+241                 ;->0x5c5c
..\X2Csrc\__Scope_Main.c:584
    5a7c:	8b 58       	MOV       R4, R11
    5a7e:	64 88       	LD.B      R4, [R4 + #1]
    5a80:	54 d1       	ZXT.B     R5, R4
    5a82:	35 92       	ST.B      [R6 + #8], R5
..\X2Csrc\__Scope_Main.c:585
    5a84:	5b 80       	LD.B      R5, [R11]
    5a86:	75 a0       	ST.W      [R6 + #1], R5
..\X2Csrc\__Scope_Main.c:587
    5a88:	00 10       	MOV       R0, #0
    5a8a:	06 04       	SJMP      $+6                   ;->0x5a96
..\X2Csrc\__Scope_Main.c:383
    5a8c:	52 38       	CMP       R5, #2
    5a8e:	35 f0       	JZ        $+53                  ;->0x5af8
    5a90:	53 38       	CMP       R5, #3
    5a92:	09 f0       	JZ        $+9                   ;->0x5aa4
..\X2Csrc\__Scope_Main.c:539
    5a94:	01 10       	MOV       R0, #1
..\X2Csrc\__Scope_Main.c:589
    5a96:	e0 29       	ADD       SP, #16
    5a98:	7f 5e       	POP       {R6-R12}
    5a9a:	0d 5d       	POP       LR
    5a9c:	1d 5c       	JMP       LR
    5a9e:	00 00       	NOP      NOP      
    5aa0:	70 5e 00 00 	.long     0x00005e70 ->000024176  [!!!@2@:POP       {R10-R12}	@@: NOP      
..\X2Csrc\__Scope_Main.c:416
    5aa4:	4b 64       	ADD       R4, R11
    5aa6:	04 59       	MOV       R8, R4
    5aa8:	cc 88       	LD.B      R1, [R4 + #3]
    5aaa:	21 d1       	ZXT.B     R2, R1
    5aac:	90 7a       	LSL       R2, #8
    5aae:	9c 88       	LD.B      R3, [R4 + #2]
    5ab0:	53 d1       	ZXT.B     R5, R3
    5ab2:	52 c3       	ADD       R2, R2, R5
    5ab4:	22 d0       	ZXT.H     R2, R2
..\X2Csrc\__Scope_Main.c:417
    5ab6:	ca 44       	LD        R4, [PC + #202]       ;->0x5ddc  :=0x10001b6c
    5ab8:	54 82       	LD.W      R5, [R4]
    5aba:	35 82       	LD.W      R3, [R5]
..\X2Csrc\__Scope_Main.c:1006
    5abc:	30 38       	CMP       R3, #0
    5abe:	eb f0       	JZ        $-21                  ;->0x5a94
..\X2Csrc\__Scope_Main.c:1013
    5ac0:	53 81       	LD.H      R5, [R3]
    5ac2:	25 70       	CMP       R2, R5
    5ac4:	02 f1       	JNZ       $+2                   ;->0x5ac8
    5ac6:	95 04       	SJMP      $+149                 ;->0x5bf0
    5ac8:	50 38       	CMP       R5, #0
    5aca:	e5 f0       	JZ        $-27                  ;->0x5a94
    5acc:	40 10       	MOV       R4, #0
    5ace:	03 04       	SJMP      $+3                   ;->0x5ad4
    5ad0:	50 38       	CMP       R5, #0
    5ad2:	e1 f0       	JZ        $-31                  ;->0x5a94
..\X2Csrc\__Scope_Main.c:1015
    5ad4:	64 c0       	ADD       R4, R4, #1
    5ad6:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    5ad8:	03 10       	MOV       R0, #3
    5ada:	2c da       	LSL       R5, R4, R0
    5adc:	4b c3       	ADD       R1, R3, R5
    5ade:	6b e7       	LD.H      R5, [R3 + R5]
    5ae0:	25 70       	CMP       R2, R5
    5ae2:	f7 f1       	JNZ       $-9                   ;->0x5ad0
..\X2Csrc\__Scope_Main.c:1018
    5ae4:	50 38       	CMP       R5, #0
    5ae6:	d7 f0       	JZ        $-41                  ;->0x5a94
..\X2Csrc\__Scope_Main.c:1024
    5ae8:	69 98       	LD.W      R5, [R1 + #1]
..\X2Csrc\__Scope_Main.c:418
    5aea:	50 38       	CMP       R5, #0
    5aec:	d4 f0       	JZ        $-44                  ;->0x5a94
..\X2Csrc\__Scope_Main.c:422
    5aee:	45 82       	LD.W      R4, [R5]
    5af0:	ef c0       	ADD       R5, R7, #3
    5af2:	2a 7a       	LSL       R5, #2
    5af4:	74 ef       	ST.W      [R6 + R5], R4
..\X2Csrc\__Scope_Main.c:423
    5af6:	3e 07       	SJMP      $-194                 ;->0x5972
..\X2Csrc\__Scope_Main.c:407
    5af8:	4b 64       	ADD       R4, R11
    5afa:	04 59       	MOV       R8, R4
    5afc:	cc 88       	LD.B      R1, [R4 + #3]
    5afe:	21 d1       	ZXT.B     R2, R1
    5b00:	90 7a       	LSL       R2, #8
    5b02:	9c 88       	LD.B      R3, [R4 + #2]
    5b04:	53 d1       	ZXT.B     R5, R3
    5b06:	52 c3       	ADD       R2, R2, R5
    5b08:	22 d0       	ZXT.H     R2, R2
..\X2Csrc\__Scope_Main.c:408
    5b0a:	b5 44       	LD        R4, [PC + #181]       ;->0x5ddc  :=0x10001b6c
    5b0c:	54 82       	LD.W      R5, [R4]
    5b0e:	35 82       	LD.W      R3, [R5]
..\X2Csrc\__Scope_Main.c:1006
    5b10:	30 38       	CMP       R3, #0
    5b12:	c1 f0       	JZ        $-63                  ;->0x5a94
..\X2Csrc\__Scope_Main.c:1013
    5b14:	53 81       	LD.H      R5, [R3]
    5b16:	25 70       	CMP       R2, R5
    5b18:	70 f0       	JZ        $+112                 ;->0x5bf8
    5b1a:	50 38       	CMP       R5, #0
    5b1c:	bc f0       	JZ        $-68                  ;->0x5a94
    5b1e:	40 10       	MOV       R4, #0
    5b20:	03 04       	SJMP      $+3                   ;->0x5b26
    5b22:	50 38       	CMP       R5, #0
    5b24:	b8 f0       	JZ        $-72                  ;->0x5a94
..\X2Csrc\__Scope_Main.c:1015
    5b26:	64 c0       	ADD       R4, R4, #1
    5b28:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    5b2a:	03 10       	MOV       R0, #3
    5b2c:	2c da       	LSL       R5, R4, R0
    5b2e:	4b c3       	ADD       R1, R3, R5
    5b30:	6b e7       	LD.H      R5, [R3 + R5]
    5b32:	25 70       	CMP       R2, R5
    5b34:	f7 f1       	JNZ       $-9                   ;->0x5b22
..\X2Csrc\__Scope_Main.c:1018
    5b36:	50 38       	CMP       R5, #0
    5b38:	ae f0       	JZ        $-82                  ;->0x5a94
..\X2Csrc\__Scope_Main.c:1024
    5b3a:	61 98       	LD.W      R4, [R1 + #1]
..\X2Csrc\__Scope_Main.c:409
    5b3c:	40 38       	CMP       R4, #0
    5b3e:	d9 f1       	JNZ       $-39                  ;->0x5af0
    5b40:	aa 07       	SJMP      $-86                  ;->0x5a94
..\X2Csrc\__Scope_Main.c:386
    5b42:	2b 58       	MOV       R1, R11
    5b44:	09 e5       	LD.B      R1, [R1 + R4]
    5b46:	11 d1       	ZXT.B     R1, R1
    5b48:	e1 85       	ST.W      [SP], R1
    5b4a:	4b 64       	ADD       R4, R11
    5b4c:	04 59       	MOV       R8, R4
    5b4e:	54 88       	LD.B      R2, [R4 + #1]
    5b50:	22 d1       	ZXT.B     R2, R2
    5b52:	01 22       	ST.W      [SP + #1], R2
..\X2Csrc\__Scope_Main.c:387
    5b54:	dc 88       	LD.B      R3, [R4 + #3]
    5b56:	23 d1       	ZXT.B     R2, R3
    5b58:	90 7a       	LSL       R2, #8
    5b5a:	a4 88       	LD.B      R4, [R4 + #2]
    5b5c:	54 d1       	ZXT.B     R5, R4
    5b5e:	52 c3       	ADD       R2, R2, R5
    5b60:	22 d0       	ZXT.H     R2, R2
..\X2Csrc\__Scope_Main.c:389
    5b62:	9f 45       	LD        R5, [PC + #159]       ;->0x5ddc  :=0x10001b6c
    5b64:	15 82       	LD.W      R1, [R5]
    5b66:	31 82       	LD.W      R3, [R1]
..\X2Csrc\__Scope_Main.c:1006
    5b68:	30 38       	CMP       R3, #0
    5b6a:	95 f0       	JZ        $-107                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1013
    5b6c:	53 81       	LD.H      R5, [R3]
    5b6e:	25 70       	CMP       R2, R5
    5b70:	42 f0       	JZ        $+66                  ;->0x5bf4
    5b72:	50 38       	CMP       R5, #0
    5b74:	90 f0       	JZ        $-112                 ;->0x5a94
    5b76:	40 10       	MOV       R4, #0
    5b78:	03 04       	SJMP      $+3                   ;->0x5b7e
    5b7a:	50 38       	CMP       R5, #0
    5b7c:	8c f0       	JZ        $-116                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1015
    5b7e:	64 c0       	ADD       R4, R4, #1
    5b80:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    5b82:	03 10       	MOV       R0, #3
    5b84:	2c da       	LSL       R5, R4, R0
    5b86:	43 c3       	ADD       R0, R3, R5
    5b88:	6b e7       	LD.H      R5, [R3 + R5]
    5b8a:	25 70       	CMP       R2, R5
    5b8c:	f7 f1       	JNZ       $-9                   ;->0x5b7a
..\X2Csrc\__Scope_Main.c:1018
    5b8e:	50 38       	CMP       R5, #0
    5b90:	82 f0       	JZ        $-126                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1024
    5b92:	40 98       	LD.W      R0, [R0 + #1]
    5b94:	a0 59       	MOV       LR, R0
..\X2Csrc\__Scope_Main.c:390
    5b96:	00 38       	CMP       R0, #0
    5b98:	02 f1       	JNZ       $+2                   ;->0x5b9c
    5b9a:	7d 07       	SJMP      $-131                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:394
    5b9c:	20 81       	LD.H      R2, [R0]
..\X2Csrc\__Scope_Main.c:395
    5b9e:	59 98       	LD.W      R3, [R1 + #1]
..\X2Csrc\__Scope_Main.c:981
    5ba0:	53 81       	LD.H      R5, [R3]
    5ba2:	25 70       	CMP       R2, R5
    5ba4:	24 f0       	JZ        $+36                  ;->0x5bec
    5ba6:	50 38       	CMP       R5, #0
    5ba8:	02 f1       	JNZ       $+2                   ;->0x5bac
    5baa:	75 07       	SJMP      $-139                 ;->0x5a94
    5bac:	40 10       	MOV       R4, #0
    5bae:	18 11       	MOV       R1, #24
    5bb0:	04 04       	SJMP      $+4                   ;->0x5bb8
    5bb2:	50 38       	CMP       R5, #0
    5bb4:	02 f1       	JNZ       $+2                   ;->0x5bb8
    5bb6:	6f 07       	SJMP      $-145                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:983
    5bb8:	64 c0       	ADD       R4, R4, #1
    5bba:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:981
    5bbc:	6c ca       	MULS      R5, R4, R1
    5bbe:	00 00       	NOP      NOP      
    5bc0:	43 c3       	ADD       R0, R3, R5
    5bc2:	6b e7       	LD.H      R5, [R3 + R5]
    5bc4:	25 70       	CMP       R2, R5
    5bc6:	f6 f1       	JNZ       $-10                  ;->0x5bb2
..\X2Csrc\__Scope_Main.c:986
    5bc8:	50 38       	CMP       R5, #0
    5bca:	02 f1       	JNZ       $+2                   ;->0x5bce
    5bcc:	64 07       	SJMP      $-156                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:386
    5bce:	01 09       	LD.W      R1, [SP + #1]
    5bd0:	88 7a       	LSL       R1, #8
    5bd2:	5e 82       	LD.W      R5, [SP]
    5bd4:	4d c2       	ADD       R1, R5, R1
..\X2Csrc\__Scope_Main.c:400
    5bd6:	68 99       	LD.W      R5, [R0 + #5]
    5bd8:	0d 58       	MOV       R0, LR
    5bda:	11 d0       	ZXT.H     R1, R1
    5bdc:	05 5c       	LJMP      R5
    5bde:	ef c0       	ADD       R5, R7, #3
    5be0:	2a 7a       	LSL       R5, #2
    5be2:	70 ef       	ST.W      [R6 + R5], R0
..\X2Csrc\__Scope_Main.c:401
    5be4:	00 38       	CMP       R0, #0
    5be6:	02 f0       	JZ        $+2                   ;->0x5bea
    5be8:	c5 06       	SJMP      $-315                 ;->0x5972
    5bea:	55 07       	SJMP      $-171                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:981
    5bec:	03 58       	MOV       R0, R3
    5bee:	ed 07       	SJMP      $-19                  ;->0x5bc8
..\X2Csrc\__Scope_Main.c:1013
    5bf0:	23 58       	MOV       R1, R3
    5bf2:	79 07       	SJMP      $-135                 ;->0x5ae4
    5bf4:	03 58       	MOV       R0, R3
    5bf6:	cc 07       	SJMP      $-52                  ;->0x5b8e
    5bf8:	23 58       	MOV       R1, R3
    5bfa:	9e 07       	SJMP      $-98                  ;->0x5b36
..\X2Csrc\__Scope_Main.c:464
    5bfc:	52 38       	CMP       R5, #2
    5bfe:	02 f1       	JNZ       $+2                   ;->0x5c02
    5c00:	8b 04       	SJMP      $+139                 ;->0x5d16
    5c02:	53 38       	CMP       R5, #3
    5c04:	02 f0       	JZ        $+2                   ;->0x5c08
    5c06:	47 07       	SJMP      $-185                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:497
    5c08:	3b 64       	ADD       R3, R11
    5c0a:	cb 88       	LD.B      R1, [R3 + #3]
    5c0c:	88 7a       	LSL       R1, #8
    5c0e:	ab 88       	LD.B      R5, [R3 + #2]
    5c10:	49 c3       	ADD       R1, R1, R5
    5c12:	11 d0       	ZXT.H     R1, R1
..\X2Csrc\__Scope_Main.c:498
    5c14:	72 45       	LD        R5, [PC + #114]       ;->0x5ddc  :=0x10001b6c
    5c16:	55 82       	LD.W      R5, [R5]
    5c18:	35 82       	LD.W      R3, [R5]
..\X2Csrc\__Scope_Main.c:1006
    5c1a:	30 38       	CMP       R3, #0
    5c1c:	02 f1       	JNZ       $+2                   ;->0x5c20
    5c1e:	3b 07       	SJMP      $-197                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1013
    5c20:	53 81       	LD.H      R5, [R3]
    5c22:	15 70       	CMP       R1, R5
    5c24:	02 f1       	JNZ       $+2                   ;->0x5c28
    5c26:	1c 05       	SJMP      $+284                 ;->0x5e5e
    5c28:	50 38       	CMP       R5, #0
    5c2a:	02 f1       	JNZ       $+2                   ;->0x5c2e
    5c2c:	34 07       	SJMP      $-204                 ;->0x5a94
    5c2e:	40 10       	MOV       R4, #0
    5c30:	04 04       	SJMP      $+4                   ;->0x5c38
    5c32:	50 38       	CMP       R5, #0
    5c34:	02 f1       	JNZ       $+2                   ;->0x5c38
    5c36:	2f 07       	SJMP      $-209                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1015
    5c38:	64 c0       	ADD       R4, R4, #1
    5c3a:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    5c3c:	03 10       	MOV       R0, #3
    5c3e:	2c da       	LSL       R5, R4, R0
    5c40:	53 c3       	ADD       R2, R3, R5
    5c42:	6b e7       	LD.H      R5, [R3 + R5]
    5c44:	15 70       	CMP       R1, R5
    5c46:	f6 f1       	JNZ       $-10                  ;->0x5c32
..\X2Csrc\__Scope_Main.c:1018
    5c48:	50 38       	CMP       R5, #0
    5c4a:	02 f1       	JNZ       $+2                   ;->0x5c4e
    5c4c:	24 07       	SJMP      $-220                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1024
    5c4e:	6a 98       	LD.W      R5, [R2 + #1]
..\X2Csrc\__Scope_Main.c:499
    5c50:	50 38       	CMP       R5, #0
    5c52:	02 f1       	JNZ       $+2                   ;->0x5c56
    5c54:	20 07       	SJMP      $-224                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:503
    5c56:	15 82       	LD.W      R1, [R5]
    5c58:	31 a6       	ST.W      [R6 + #24], R1
..\X2Csrc\__Scope_Main.c:504
    5c5a:	ca 06       	SJMP      $-310                 ;->0x59ee
..\X2Csrc\__Scope_Main.c:575
    5c5c:	06 58       	MOV       R0, R6
    5c5e:	61 45       	LD        R5, [PC + #97]        ;->0x5de0  :=0x54d4
    5c60:	05 5c       	LJMP      R5
    5c62:	b0 a5       	ST.W      [R6 + #22], R0
    5c64:	f1 a5       	ST.W      [R6 + #23], R1
    5c66:	0b 07       	SJMP      $-245                 ;->0x5a7c
..\X2Csrc\__Scope_Main.c:549
    5c68:	e9 58       	MOV       R7, R9
    5c6a:	7d 64       	ADD       R7, LR
    5c6c:	77 d1       	ZXT.B     R7, R7
    5c6e:	e5 06       	SJMP      $-283                 ;->0x5a38
..\X2Csrc\__Scope_Main.c:519
    5c70:	24 38       	CMP       R2, #4
    5c72:	02 f1       	JNZ       $+2                   ;->0x5c76
    5c74:	d1 04       	SJMP      $+209                 ;->0x5e16
    5c76:	28 38       	CMP       R2, #8
    5c78:	02 f0       	JZ        $+2                   ;->0x5c7c
    5c7a:	0d 07       	SJMP      $-243                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:532
    5c7c:	2b 58       	MOV       R1, R11
    5c7e:	1d 64       	ADD       R1, LR
    5c80:	01 21       	ST.W      [SP + #1], R1
    5c82:	51 88       	LD.B      R2, [R1 + #1]
    5c84:	52 d1       	ZXT.B     R5, R2
    5c86:	30 10       	MOV       R3, #0
    5c88:	48 10       	MOV       R4, #8
    5c8a:	15 db       	LSL       R2, R5, R4
..\X2Csrc\__Scope_Main.c:533
    5c8c:	a9 88       	LD.B      R5, [R1 + #2]
    5c8e:	15 d1       	ZXT.B     R1, R5
    5c90:	50 10       	MOV       R5, #0
    5c92:	00 11       	MOV       R0, #16
    5c94:	21 da       	LSL       R4, R1, R0
..\X2Csrc\__Scope_Main.c:532
    5c96:	12 c3       	ADD       R2, R2, R4
    5c98:	5b c5       	ADDC      R3, R3, R5
    5c9a:	2b 58       	MOV       R1, R11
    5c9c:	8d 58       	MOV       R4, LR
    5c9e:	21 e5       	LD.B      R4, [R1 + R4]
    5ca0:	44 d1       	ZXT.B     R4, R4
    5ca2:	02 24       	ST.W      [SP + #2], R4
    5ca4:	00 10       	MOV       R0, #0
    5ca6:	03 20       	ST.W      [SP + #3], R0
    5ca8:	02 0c       	LD.W      R4, [SP + #2]
    5caa:	03 0d       	LD.W      R5, [SP + #3]
    5cac:	02 c3       	ADD       R0, R2, R4
    5cae:	4b c5       	ADDC      R1, R3, R5
..\X2Csrc\__Scope_Main.c:533
    5cb0:	01 0a       	LD.W      R2, [SP + #1]
    5cb2:	d2 88       	LD.B      R2, [R2 + #3]
    5cb4:	52 d1       	ZXT.B     R5, R2
    5cb6:	40 10       	MOV       R4, #0
    5cb8:	64 58       	MOV       R3, R4
    5cba:	48 11       	MOV       R4, #24
    5cbc:	15 db       	LSL       R2, R5, R4
    5cbe:	90 c2       	ADD       R2, R0, R2
    5cc0:	d9 c4       	ADDC      R3, R1, R3
..\X2Csrc\__Scope_Main.c:534
    5cc2:	01 0d       	LD.W      R5, [SP + #1]
    5cc4:	2d 89       	LD.B      R5, [R5 + #4]
    5cc6:	15 d1       	ZXT.B     R1, R5
    5cc8:	40 10       	MOV       R4, #0
    5cca:	04 58       	MOV       R0, R4
..\X2Csrc\__Scope_Main.c:533
    5ccc:	12 c2       	ADD       R2, R2, R0
    5cce:	5b c4       	ADDC      R3, R3, R1
..\X2Csrc\__Scope_Main.c:534
    5cd0:	01 0d       	LD.W      R5, [SP + #1]
    5cd2:	6d 89       	LD.B      R5, [R5 + #5]
    5cd4:	45 d1       	ZXT.B     R4, R5
    5cd6:	58 10       	MOV       R5, #8
    5cd8:	4c db       	LSL       R1, R4, R5
    5cda:	40 10       	MOV       R4, #0
    5cdc:	04 58       	MOV       R0, R4
    5cde:	02 c2       	ADD       R0, R2, R0
    5ce0:	4b c4       	ADDC      R1, R3, R1
..\X2Csrc\__Scope_Main.c:535
    5ce2:	01 0d       	LD.W      R5, [SP + #1]
    5ce4:	ad 89       	LD.B      R5, [R5 + #6]
    5ce6:	45 d1       	ZXT.B     R4, R5
    5ce8:	50 11       	MOV       R5, #16
    5cea:	5c db       	LSL       R3, R4, R5
    5cec:	40 10       	MOV       R4, #0
    5cee:	44 58       	MOV       R2, R4
..\X2Csrc\__Scope_Main.c:534
    5cf0:	80 c2       	ADD       R0, R0, R2
    5cf2:	c9 c4       	ADDC      R1, R1, R3
..\X2Csrc\__Scope_Main.c:535
    5cf4:	01 0d       	LD.W      R5, [SP + #1]
    5cf6:	ed 89       	LD.B      R5, [R5 + #7]
    5cf8:	45 d1       	ZXT.B     R4, R5
    5cfa:	58 11       	MOV       R5, #24
    5cfc:	5c db       	LSL       R3, R4, R5
    5cfe:	40 10       	MOV       R4, #0
    5d00:	44 58       	MOV       R2, R4
    5d02:	90 c2       	ADD       R2, R0, R2
    5d04:	d9 c4       	ADDC      R3, R1, R3
..\X2Csrc\__Scope_Main.c:532
    5d06:	32 a5       	ST.W      [R6 + #20], R2
    5d08:	73 a5       	ST.W      [R6 + #21], R3
..\X2Csrc\__Scope_Main.c:536
    5d0a:	8e 06       	SJMP      $-370                 ;->0x5a26
..\X2Csrc\__Scope_Main.c:378
    5d0c:	36 10       	MOV       R3, #6
    5d0e:	45 10       	MOV       R4, #5
    5d10:	54 10       	MOV       R5, #4
..\X2Csrc\__Scope_Main.c:314
    5d12:	85 59       	MOV       R12, R5
    5d14:	51 06       	SJMP      $-431                 ;->0x59b6
..\X2Csrc\__Scope_Main.c:488
    5d16:	3b 64       	ADD       R3, R11
    5d18:	cb 88       	LD.B      R1, [R3 + #3]
    5d1a:	88 7a       	LSL       R1, #8
    5d1c:	ab 88       	LD.B      R5, [R3 + #2]
    5d1e:	49 c3       	ADD       R1, R1, R5
    5d20:	11 d0       	ZXT.H     R1, R1
..\X2Csrc\__Scope_Main.c:489
    5d22:	2f 45       	LD        R5, [PC + #47]        ;->0x5ddc  :=0x10001b6c
    5d24:	55 82       	LD.W      R5, [R5]
    5d26:	35 82       	LD.W      R3, [R5]
..\X2Csrc\__Scope_Main.c:1006
    5d28:	30 38       	CMP       R3, #0
    5d2a:	02 f1       	JNZ       $+2                   ;->0x5d2e
    5d2c:	b4 06       	SJMP      $-332                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1013
    5d2e:	53 81       	LD.H      R5, [R3]
    5d30:	15 70       	CMP       R1, R5
    5d32:	02 f1       	JNZ       $+2                   ;->0x5d36
    5d34:	93 04       	SJMP      $+147                 ;->0x5e5a
    5d36:	50 38       	CMP       R5, #0
    5d38:	02 f1       	JNZ       $+2                   ;->0x5d3c
    5d3a:	ad 06       	SJMP      $-339                 ;->0x5a94
    5d3c:	40 10       	MOV       R4, #0
    5d3e:	04 04       	SJMP      $+4                   ;->0x5d46
    5d40:	50 38       	CMP       R5, #0
    5d42:	02 f1       	JNZ       $+2                   ;->0x5d46
    5d44:	a8 06       	SJMP      $-344                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1015
    5d46:	64 c0       	ADD       R4, R4, #1
    5d48:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    5d4a:	23 10       	MOV       R2, #3
    5d4c:	ac da       	LSL       R5, R4, R2
    5d4e:	53 c3       	ADD       R2, R3, R5
    5d50:	6b e7       	LD.H      R5, [R3 + R5]
    5d52:	15 70       	CMP       R1, R5
    5d54:	f6 f1       	JNZ       $-10                  ;->0x5d40
..\X2Csrc\__Scope_Main.c:1018
    5d56:	50 38       	CMP       R5, #0
    5d58:	02 f1       	JNZ       $+2                   ;->0x5d5c
    5d5a:	9d 06       	SJMP      $-355                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1024
    5d5c:	6a 98       	LD.W      R5, [R2 + #1]
..\X2Csrc\__Scope_Main.c:490
    5d5e:	50 38       	CMP       R5, #0
    5d60:	02 f0       	JZ        $+2                   ;->0x5d64
    5d62:	45 06       	SJMP      $-443                 ;->0x59ec
    5d64:	98 06       	SJMP      $-360                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:467
    5d66:	c2 e4       	LD.B      R0, [R2 + R3]
    5d68:	80 d1       	ZXT.B     R8, R0
    5d6a:	3b 64       	ADD       R3, R11
    5d6c:	4b 88       	LD.B      R1, [R3 + #1]
    5d6e:	91 d1       	ZXT.B     R9, R1
..\X2Csrc\__Scope_Main.c:468
    5d70:	cb 88       	LD.B      R1, [R3 + #3]
    5d72:	88 7a       	LSL       R1, #8
    5d74:	ab 88       	LD.B      R5, [R3 + #2]
    5d76:	49 c3       	ADD       R1, R1, R5
    5d78:	11 d0       	ZXT.H     R1, R1
..\X2Csrc\__Scope_Main.c:470
    5d7a:	19 45       	LD        R5, [PC + #25]        ;->0x5ddc  :=0x10001b6c
    5d7c:	25 82       	LD.W      R2, [R5]
    5d7e:	32 82       	LD.W      R3, [R2]
..\X2Csrc\__Scope_Main.c:1006
    5d80:	30 38       	CMP       R3, #0
    5d82:	02 f1       	JNZ       $+2                   ;->0x5d86
    5d84:	88 06       	SJMP      $-376                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1013
    5d86:	53 81       	LD.H      R5, [R3]
    5d88:	15 70       	CMP       R1, R5
    5d8a:	6e f0       	JZ        $+110                 ;->0x5e66
    5d8c:	50 38       	CMP       R5, #0
    5d8e:	02 f1       	JNZ       $+2                   ;->0x5d92
    5d90:	82 06       	SJMP      $-382                 ;->0x5a94
    5d92:	40 10       	MOV       R4, #0
    5d94:	04 04       	SJMP      $+4                   ;->0x5d9c
    5d96:	50 38       	CMP       R5, #0
    5d98:	02 f1       	JNZ       $+2                   ;->0x5d9c
    5d9a:	7d 06       	SJMP      $-387                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1015
    5d9c:	64 c0       	ADD       R4, R4, #1
    5d9e:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:1013
    5da0:	03 10       	MOV       R0, #3
    5da2:	2c da       	LSL       R5, R4, R0
    5da4:	43 c3       	ADD       R0, R3, R5
    5da6:	6b e7       	LD.H      R5, [R3 + R5]
    5da8:	15 70       	CMP       R1, R5
    5daa:	f6 f1       	JNZ       $-10                  ;->0x5d96
..\X2Csrc\__Scope_Main.c:1018
    5dac:	50 38       	CMP       R5, #0
    5dae:	02 f1       	JNZ       $+2                   ;->0x5db2
    5db0:	72 06       	SJMP      $-398                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:1024
    5db2:	40 98       	LD.W      R0, [R0 + #1]
    5db4:	a0 59       	MOV       LR, R0
..\X2Csrc\__Scope_Main.c:471
    5db6:	00 38       	CMP       R0, #0
    5db8:	02 f1       	JNZ       $+2                   ;->0x5dbc
    5dba:	6d 06       	SJMP      $-403                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:475
    5dbc:	10 81       	LD.H      R1, [R0]
..\X2Csrc\__Scope_Main.c:476
    5dbe:	5a 98       	LD.W      R3, [R2 + #1]
..\X2Csrc\__Scope_Main.c:981
    5dc0:	53 81       	LD.H      R5, [R3]
    5dc2:	15 70       	CMP       R1, R5
    5dc4:	4f f0       	JZ        $+79                  ;->0x5e62
    5dc6:	50 38       	CMP       R5, #0
    5dc8:	02 f1       	JNZ       $+2                   ;->0x5dcc
    5dca:	65 06       	SJMP      $-411                 ;->0x5a94
    5dcc:	40 10       	MOV       R4, #0
    5dce:	08 11       	MOV       R0, #24
    5dd0:	0a 04       	SJMP      $+10                  ;->0x5de4
    5dd2:	50 38       	CMP       R5, #0
    5dd4:	02 f1       	JNZ       $+2                   ;->0x5dd8
    5dd6:	5f 06       	SJMP      $-417                 ;->0x5a94
    5dd8:	06 04       	SJMP      $+6                   ;->0x5de4
    5dda:	00 00       	NOP      NOP      
    5ddc:	6c 1b 00 10 	.long     0x10001b6c ->268442476  [!!!@2@:MOV       R6, #188	@@: MOV       R0, #0
    5de0:	d4 54 00 00 	.long     0x000054d4 ->000021716  [!!!@2@:JB        R10, #12	@@: NOP      
..\X2Csrc\__Scope_Main.c:983
    5de4:	64 c0       	ADD       R4, R4, #1
    5de6:	44 d0       	ZXT.H     R4, R4
..\X2Csrc\__Scope_Main.c:981
    5de8:	2c ca       	MULS      R5, R4, R0
    5dea:	00 00       	NOP      NOP      
    5dec:	53 c3       	ADD       R2, R3, R5
    5dee:	6b e7       	LD.H      R5, [R3 + R5]
    5df0:	15 70       	CMP       R1, R5
    5df2:	f0 f1       	JNZ       $-16                  ;->0x5dd2
..\X2Csrc\__Scope_Main.c:986
    5df4:	50 38       	CMP       R5, #0
    5df6:	02 f1       	JNZ       $+2                   ;->0x5dfa
    5df8:	4e 06       	SJMP      $-434                 ;->0x5a94
..\X2Csrc\__Scope_Main.c:467
    5dfa:	29 58       	MOV       R1, R9
    5dfc:	88 7a       	LSL       R1, #8
    5dfe:	18 64       	ADD       R1, R8
..\X2Csrc\__Scope_Main.c:481
    5e00:	6a 99       	LD.W      R5, [R2 + #5]
    5e02:	0d 58       	MOV       R0, LR
    5e04:	11 d0       	ZXT.H     R1, R1
    5e06:	05 5c       	LJMP      R5
    5e08:	30 a6       	ST.W      [R6 + #24], R0
..\X2Csrc\__Scope_Main.c:482
    5e0a:	00 38       	CMP       R0, #0
    5e0c:	02 f1       	JNZ       $+2                   ;->0x5e10
    5e0e:	43 06       	SJMP      $-445                 ;->0x5a94
    5e10:	87 80       	LD.B      R8, [R7]
    5e12:	ff 03 ee fd 	JMP       $-530                 ;->0x59ee
..\X2Csrc\__Scope_Main.c:528
    5e16:	ab 58       	MOV       R5, R11
    5e18:	5d 64       	ADD       R5, LR
    5e1a:	5d 88       	LD.B      R3, [R5 + #1]
    5e1c:	98 7a       	LSL       R3, #8
..\X2Csrc\__Scope_Main.c:529
    5e1e:	a5 88       	LD.B      R4, [R5 + #2]
    5e20:	20 7b       	LSL       R4, #16
..\X2Csrc\__Scope_Main.c:528
    5e22:	1b c3       	ADD       R3, R3, R4
    5e24:	0b 58       	MOV       R0, R11
    5e26:	2d 58       	MOV       R1, LR
    5e28:	40 e4       	LD.B      R0, [R0 + R1]
    5e2a:	40 d1       	ZXT.B     R4, R0
    5e2c:	23 c3       	ADD       R4, R3, R4
..\X2Csrc\__Scope_Main.c:529
    5e2e:	ed 88       	LD.B      R5, [R5 + #3]
    5e30:	a8 7b       	LSL       R5, #24
    5e32:	6c c3       	ADD       R5, R4, R5
..\X2Csrc\__Scope_Main.c:528
    5e34:	35 a5       	ST.W      [R6 + #20], R5
    5e36:	50 10       	MOV       R5, #0
    5e38:	75 a5       	ST.W      [R6 + #21], R5
..\X2Csrc\__Scope_Main.c:530
    5e3a:	ff 03 f6 fd 	JMP       $-522                 ;->0x5a26
..\X2Csrc\__Scope_Main.c:525
    5e3e:	ab 58       	MOV       R5, R11
    5e40:	0d 58       	MOV       R0, LR
    5e42:	2d e4       	LD.B      R5, [R5 + R0]
    5e44:	45 d1       	ZXT.B     R4, R5
    5e46:	ab 58       	MOV       R5, R11
    5e48:	5d 64       	ADD       R5, LR
    5e4a:	6d 88       	LD.B      R5, [R5 + #1]
    5e4c:	a8 7a       	LSL       R5, #8
    5e4e:	6c c3       	ADD       R5, R4, R5
    5e50:	35 a5       	ST.W      [R6 + #20], R5
    5e52:	af 79       	ASR       R5, #31
    5e54:	75 a5       	ST.W      [R6 + #21], R5
..\X2Csrc\__Scope_Main.c:526
    5e56:	ff 03 e8 fd 	JMP       $-536                 ;->0x5a26
..\X2Csrc\__Scope_Main.c:1013
    5e5a:	43 58       	MOV       R2, R3
    5e5c:	7d 07       	SJMP      $-131                 ;->0x5d56
    5e5e:	43 58       	MOV       R2, R3
    5e60:	f4 06       	SJMP      $-268                 ;->0x5c48
..\X2Csrc\__Scope_Main.c:981
    5e62:	43 58       	MOV       R2, R3
    5e64:	c8 07       	SJMP      $-56                  ;->0x5df4
..\X2Csrc\__Scope_Main.c:1013
    5e66:	03 58       	MOV       R0, R3
    5e68:	a2 07       	SJMP      $-94                  ;->0x5dac

00005e6a <Scope_Main_GetAddress>:
Scope_Main_GetAddress():
..\X2Csrc\__Scope_Main.c:599
    5e6a:	00 10       	MOV       R0, #0
    5e6c:	1d 5c       	JMP       LR
	...

00005e70 <getAbsValI32>:
getAbsValI32():
    5e70:	51 10       	MOV       R5, #1
    5e72:	af 7b       	LSL       R5, #31
    5e74:	05 70       	CMP       R0, R5
    5e76:	04 f0       	JZ        $+4                   ;->0x5e7e
    5e78:	00 38       	CMP       R0, #0
    5e7a:	07 f4       	JMI       $+7                   ;->0x5e88
    5e7c:	1d 5c       	JMP       LR
    5e7e:	02 40       	LD        R0, [PC + #2]         ;->0x5e84  :=0x7fffffff
    5e80:	1d 5c       	JMP       LR
    5e82:	00 00       	NOP      NOP      
    5e84:	ff ff ff 7f 	.long     0x7fffffff ->2147483647 
    5e88:	50 10       	MOV       R5, #0
    5e8a:	05 c6       	SUB       R0, R5, R0
    5e8c:	1d 5c       	JMP       LR
	...

00005e90 <printf>:
    5e90:	24 5d       	PUSH      R4
    5e92:	23 5d       	PUSH      R3
    5e94:	22 5d       	PUSH      R2
    5e96:	21 5d       	PUSH      R1
    5e98:	20 5d       	PUSH      R0
    5e9a:	2d 5d       	PUSH      LR
    5e9c:	05 40       	LD        R0, [PC + #5]         ;->0x5eb0  :=0x40000980
    5e9e:	01 09       	LD.W      R1, [SP + #1]
    5ea0:	4e 58       	MOV       R2, SP
    5ea2:	28 28       	ADD       R2, #8
    5ea4:	04 45       	LD        R5, [PC + #4]         ;->0x5eb4  :=0x5eb8
    5ea6:	05 5c       	LJMP      R5
    5ea8:	0d 5d       	POP       LR
    5eaa:	e4 29       	ADD       SP, #20
    5eac:	1d 5c       	JMP       LR
    5eae:	00 00       	NOP      NOP      
    5eb0:	80 09 00 40 	.long     0x40000980 ->1073744256  [!!!@2@:LD.W      R1, [SP + #128]	@@: LD        R0, [PC + #0]         ;->0x5eb0  :=0x40000980
    5eb4:	b8 5e 00 00 	.long     0x00005eb8 ->000024248  [!!!@2@:POP       {R9-R11,PC}	@@: NOP      

00005eb8 <vfprintf>:
    5eb8:	ff 5f       	PUSH      {R6-R12,LR}
    5eba:	ec 33       	SUB       SP, #60
    5ebc:	0b 20       	ST.W      [SP + #11], R0
    5ebe:	42 59       	MOV       R10, R2
    5ec0:	e1 58       	MOV       R7, R1
    5ec2:	00 10       	MOV       R0, #0
    5ec4:	0a 20       	ST.W      [SP + #10], R0
    5ec6:	14 05       	SJMP      $+276                 ;->0x60ee
    5ec8:	05 3a       	CMP       R0, #37
    5eca:	02 f0       	JZ        $+2                   ;->0x5ece
    5ecc:	08 05       	SJMP      $+264                 ;->0x60dc
    5ece:	47 88       	LD.B      R0, [R7 + #1]
    5ed0:	05 3a       	CMP       R0, #37
    5ed2:	09 f1       	JNZ       $+9                   ;->0x5ee4
    5ed4:	0b 09       	LD.W      R1, [SP + #11]
    5ed6:	a1 43       	LD        R3, [PC + #161]       ;->0x6158  :=0x6170
    5ed8:	03 5c       	LJMP      R3
    5eda:	0a 0c       	LD.W      R4, [SP + #10]
    5edc:	64 c0       	ADD       R4, R4, #1
    5ede:	0a 24       	ST.W      [SP + #10], R4
    5ee0:	bf c0       	ADD       R7, R7, #2
    5ee2:	06 05       	SJMP      $+262                 ;->0x60ee
    5ee4:	00 3b       	CMP       R0, #48
    5ee6:	05 f0       	JZ        $+5                   ;->0x5ef0
    5ee8:	7f c0       	ADD       R7, R7, #1
    5eea:	00 12       	MOV       R0, #32
    5eec:	0d 20       	ST.W      [SP + #13], R0
    5eee:	03 04       	SJMP      $+3                   ;->0x5ef4
    5ef0:	bf c0       	ADD       R7, R7, #2
    5ef2:	0d 20       	ST.W      [SP + #13], R0
    5ef4:	57 80       	LD.B      R5, [R7]
    5ef6:	00 10       	MOV       R0, #0
    5ef8:	0c 20       	ST.W      [SP + #12], R0
    5efa:	5d 3a       	CMP       R5, #45
    5efc:	04 f1       	JNZ       $+4                   ;->0x5f04
    5efe:	7f c0       	ADD       R7, R7, #1
    5f00:	31 10       	MOV       R3, #1
    5f02:	0c 23       	ST.W      [SP + #12], R3
    5f04:	57 80       	LD.B      R5, [R7]
    5f06:	cb 12       	MOV       R12, #43
    5f08:	60 10       	MOV       R6, #0
    5f0a:	50 3a       	CMP       R5, #32
    5f0c:	04 f1       	JNZ       $+4                   ;->0x5f14
    5f0e:	7f c0       	ADD       R7, R7, #1
    5f10:	85 59       	MOV       R12, R5
    5f12:	61 10       	MOV       R6, #1
    5f14:	57 80       	LD.B      R5, [R7]
    5f16:	5b 3a       	CMP       R5, #43
    5f18:	03 f1       	JNZ       $+3                   ;->0x5f1e
    5f1a:	7f c0       	ADD       R7, R7, #1
    5f1c:	61 10       	MOV       R6, #1
    5f1e:	57 80       	LD.B      R5, [R7]
    5f20:	51 33       	SUB       R5, #49
    5f22:	55 d1       	ZXT.B     R5, R5
    5f24:	80 10       	MOV       R8, #0
    5f26:	58 38       	CMP       R5, #8
    5f28:	12 f8       	JHI       $+18                  ;->0x5f4c
    5f2a:	a7 58       	MOV       R5, R7
    5f2c:	2a 10       	MOV       R2, #10
    5f2e:	08 04       	SJMP      $+8                   ;->0x5f3e
    5f30:	08 58       	MOV       R0, R8
    5f32:	98 ca       	MULS      R3, R0, R2
    5f34:	00 00       	NOP      NOP      
    5f36:	30 33       	SUB       R3, #48
    5f38:	03 59       	MOV       R8, R3
    5f3a:	84 64       	ADD       R8, R4
    5f3c:	88 d1       	ZXT.B     R8, R8
    5f3e:	e5 58       	MOV       R7, R5
    5f40:	45 76       	LD.B      R4, [R5++]
    5f42:	10 13       	MOV       R1, #48
    5f44:	5c c6       	SUB       R3, R4, R1
    5f46:	33 d1       	ZXT.B     R3, R3
    5f48:	39 38       	CMP       R3, #9
    5f4a:	f3 f9       	JLS       $-13                  ;->0x5f30
    5f4c:	57 80       	LD.B      R5, [R7]
    5f4e:	9f 1f       	MOV       R9, #255
    5f50:	5e 3a       	CMP       R5, #46
    5f52:	13 f1       	JNZ       $+19                  ;->0x5f78
    5f54:	6f c0       	ADD       R5, R7, #1
    5f56:	90 10       	MOV       R9, #0
    5f58:	2a 10       	MOV       R2, #10
    5f5a:	08 04       	SJMP      $+8                   ;->0x5f6a
    5f5c:	09 58       	MOV       R0, R9
    5f5e:	98 ca       	MULS      R3, R0, R2
    5f60:	00 00       	NOP      NOP      
    5f62:	30 33       	SUB       R3, #48
    5f64:	23 59       	MOV       R9, R3
    5f66:	94 64       	ADD       R9, R4
    5f68:	99 d1       	ZXT.B     R9, R9
    5f6a:	e5 58       	MOV       R7, R5
    5f6c:	45 76       	LD.B      R4, [R5++]
    5f6e:	10 13       	MOV       R1, #48
    5f70:	5c c6       	SUB       R3, R4, R1
    5f72:	33 d1       	ZXT.B     R3, R3
    5f74:	39 38       	CMP       R3, #9
    5f76:	f3 f9       	JLS       $-13                  ;->0x5f5c
    5f78:	57 80       	LD.B      R5, [R7]
    5f7a:	5c 3e       	CMP       R5, #108
    5f7c:	05 f1       	JNZ       $+5                   ;->0x5f86
    5f7e:	7f c0       	ADD       R7, R7, #1
    5f80:	50 10       	MOV       R5, #0
    5f82:	11 10       	MOV       R1, #1
    5f84:	09 04       	SJMP      $+9                   ;->0x5f96
    5f86:	58 3e       	CMP       R5, #104
    5f88:	05 f1       	JNZ       $+5                   ;->0x5f92
    5f8a:	7f c0       	ADD       R7, R7, #1
    5f8c:	51 10       	MOV       R5, #1
    5f8e:	10 10       	MOV       R1, #0
    5f90:	03 04       	SJMP      $+3                   ;->0x5f96
    5f92:	50 10       	MOV       R5, #0
    5f94:	25 58       	MOV       R1, R5
    5f96:	37 80       	LD.B      R3, [R7]
    5f98:	40 10       	MOV       R4, #0
    5f9a:	35 3f       	CMP       R3, #117
    5f9c:	03 f1       	JNZ       $+3                   ;->0x5fa2
    5f9e:	7f c0       	ADD       R7, R7, #1
    5fa0:	41 10       	MOV       R4, #1
    5fa2:	07 80       	LD.B      R0, [R7]
    5fa4:	03 3f       	CMP       R0, #115
    5fa6:	02 f1       	JNZ       $+2                   ;->0x5faa
    5fa8:	cd 04       	SJMP      $+205                 ;->0x6142
    5faa:	08 3f       	CMP       R0, #120
    5fac:	02 f1       	JNZ       $+2                   ;->0x5fb0
    5fae:	b4 04       	SJMP      $+180                 ;->0x6116
    5fb0:	08 3d       	CMP       R0, #88
    5fb2:	02 f1       	JNZ       $+2                   ;->0x5fb6
    5fb4:	b3 04       	SJMP      $+179                 ;->0x611a
    5fb6:	03 3e       	CMP       R0, #99
    5fb8:	02 f1       	JNZ       $+2                   ;->0x5fbc
    5fba:	b3 04       	SJMP      $+179                 ;->0x6120
    5fbc:	0f 3e       	CMP       R0, #111
    5fbe:	02 f1       	JNZ       $+2                   ;->0x5fc2
    5fc0:	b3 04       	SJMP      $+179                 ;->0x6126
    5fc2:	02 3e       	CMP       R0, #98
    5fc4:	02 f1       	JNZ       $+2                   ;->0x5fc8
    5fc6:	b3 04       	SJMP      $+179                 ;->0x612c
    5fc8:	06 3e       	CMP       R0, #102
    5fca:	02 f1       	JNZ       $+2                   ;->0x5fce
    5fcc:	96 04       	SJMP      $+150                 ;->0x60f8
    5fce:	04 3e       	CMP       R0, #100
    5fd0:	02 f1       	JNZ       $+2                   ;->0x5fd4
    5fd2:	b0 04       	SJMP      $+176                 ;->0x6132
    5fd4:	09 3e       	CMP       R0, #105
    5fd6:	02 f1       	JNZ       $+2                   ;->0x5fda
    5fd8:	ad 04       	SJMP      $+173                 ;->0x6132
    5fda:	40 38       	CMP       R4, #0
    5fdc:	03 f0       	JZ        $+3                   ;->0x5fe2
    5fde:	7f cc       	SUB       R7, R7, #1
    5fe0:	a9 04       	SJMP      $+169                 ;->0x6132
    5fe2:	0b 09       	LD.W      R1, [SP + #11]
    5fe4:	5d 43       	LD        R3, [PC + #93]        ;->0x6158  :=0x6170
    5fe6:	03 5c       	LJMP      R3
    5fe8:	0a 0c       	LD.W      R4, [SP + #10]
    5fea:	64 c0       	ADD       R4, R4, #1
    5fec:	0a 24       	ST.W      [SP + #10], R4
    5fee:	7f c0       	ADD       R7, R7, #1
    5ff0:	7f 04       	SJMP      $+127                 ;->0x60ee
    5ff2:	0a 82       	LD.W      R0, [R10]
    5ff4:	05 04       	SJMP      $+5                   ;->0x5ffe
    5ff6:	0a 82       	LD.W      R0, [R10]
    5ff8:	50 38       	CMP       R5, #0
    5ffa:	02 f0       	JZ        $+2                   ;->0x5ffe
    5ffc:	00 d1       	ZXT.B     R0, R0
    5ffe:	43 59       	MOV       R10, R3
    6000:	20 38       	CMP       R2, #0
    6002:	12 f0       	JZ        $+18                  ;->0x6026
    6004:	40 38       	CMP       R4, #0
    6006:	05 f0       	JZ        $+5                   ;->0x6010
    6008:	ae 58       	MOV       R5, SP
    600a:	4d c0       	ADD       R1, R5, #1
    600c:	54 45       	LD        R5, [PC + #84]        ;->0x615c  :=0x6480
    600e:	04 04       	SJMP      $+4                   ;->0x6016
    6010:	6e 58       	MOV       R3, SP
    6012:	4b c0       	ADD       R1, R3, #1
    6014:	53 45       	LD        R5, [PC + #83]        ;->0x6160  :=0x64c8
    6016:	05 5c       	LJMP      R5
    6018:	60 38       	CMP       R6, #0
    601a:	0b f0       	JZ        $+11                  ;->0x6030
    601c:	a1 e1       	LD.B      R5, [SP + #1]
    601e:	5d 3a       	CMP       R5, #45
    6020:	0b f0       	JZ        $+11                  ;->0x6036
    6022:	ec 83       	ST.B      [SP], R12
    6024:	77 04       	SJMP      $+119                 ;->0x6112
    6026:	01 e3       	ST.B      [SP + #1], R0
    6028:	42 e3       	ST.B      [SP + #2], R2
    602a:	8e 58       	MOV       R4, SP
    602c:	74 c0       	ADD       R6, R4, #1
    602e:	06 04       	SJMP      $+6                   ;->0x603a
    6030:	ae 58       	MOV       R5, SP
    6032:	75 c0       	ADD       R6, R5, #1
    6034:	03 04       	SJMP      $+3                   ;->0x603a
    6036:	0e 58       	MOV       R0, SP
    6038:	70 c0       	ADD       R6, R0, #1
    603a:	9f 1f       	MOV       R9, #255
    603c:	a6 58       	MOV       R5, R6
    603e:	03 04       	SJMP      $+3                   ;->0x6044
    6040:	81 30       	SUB       R8, #1
    6042:	88 d1       	ZXT.B     R8, R8
    6044:	80 38       	CMP       R8, #0
    6046:	04 f0       	JZ        $+4                   ;->0x604e
    6048:	45 76       	LD.B      R4, [R5++]
    604a:	40 38       	CMP       R4, #0
    604c:	fa f1       	JNZ       $-6                   ;->0x6040
    604e:	0c 09       	LD.W      R1, [SP + #12]
    6050:	10 38       	CMP       R1, #0
    6052:	03 f1       	JNZ       $+3                   ;->0x6058
    6054:	88 59       	MOV       R12, R8
    6056:	0b 04       	SJMP      $+11                  ;->0x606c
    6058:	0a 0b       	LD.W      R3, [SP + #10]
    605a:	83 59       	MOV       R12, R3
    605c:	f6 c6       	SUB       R6, R6, R3
    605e:	23 04       	SJMP      $+35                  ;->0x60a4
    6060:	0d 08       	LD.W      R0, [SP + #13]
    6062:	0b 09       	LD.W      R1, [SP + #11]
    6064:	3d 44       	LD        R4, [PC + #61]        ;->0x6158  :=0x6170
    6066:	04 5c       	LJMP      R4
    6068:	c1 30       	SUB       R12, #1
    606a:	cc d1       	ZXT.B     R12, R12
    606c:	c0 38       	CMP       R12, #0
    606e:	f9 f1       	JNZ       $-7                   ;->0x6060
    6070:	0a 0d       	LD.W      R5, [SP + #10]
    6072:	58 64       	ADD       R5, R8
    6074:	0a 25       	ST.W      [SP + #10], R5
    6076:	0c 59       	MOV       R8, R12
    6078:	f0 07       	SJMP      $-16                  ;->0x6058
    607a:	25 59       	MOV       R9, R5
    607c:	b0 38       	CMP       R11, #0
    607e:	0b f0       	JZ        $+11                  ;->0x6094
    6080:	39 41       	LD        R1, [PC + #57]        ;->0x6164  :=0x10001d3c
    6082:	31 82       	LD.W      R3, [R1]
    6084:	0e 23       	ST.W      [SP + #14], R3
    6086:	2b e4       	LD.B      R5, [R3 + R0]
    6088:	45 d1       	ZXT.B     R4, R5
    608a:	50 11       	MOV       R5, #16
    608c:	6c d5       	ANL       R5, R4, R5
    608e:	03 f0       	JZ        $+3                   ;->0x6094
    6090:	00 32       	SUB       R0, #32
    6092:	00 d1       	ZXT.B     R0, R0
    6094:	0b 09       	LD.W      R1, [SP + #11]
    6096:	31 43       	LD        R3, [PC + #49]        ;->0x6158  :=0x6170
    6098:	03 5c       	LJMP      R3
    609a:	c1 28       	ADD       R12, #1
    609c:	80 38       	CMP       R8, #0
    609e:	03 f0       	JZ        $+3                   ;->0x60a4
    60a0:	81 30       	SUB       R8, #1
    60a2:	88 d1       	ZXT.B     R8, R8
    60a4:	8c 58       	MOV       R4, R12
    60a6:	26 e5       	LD.B      R4, [R6 + R4]
    60a8:	04 d1       	ZXT.B     R0, R4
    60aa:	00 38       	CMP       R0, #0
    60ac:	06 f1       	JNZ       $+6                   ;->0x60b8
    60ae:	c8 58       	MOV       R6, R8
    60b0:	0c 0d       	LD.W      R5, [SP + #12]
    60b2:	50 38       	CMP       R5, #0
    60b4:	1a f0       	JZ        $+26                  ;->0x60e8
    60b6:	0f 04       	SJMP      $+15                  ;->0x60d4
    60b8:	99 39       	CMP       R9, #25
    60ba:	e1 f0       	JZ        $-31                  ;->0x607c
    60bc:	29 58       	MOV       R1, R9
    60be:	69 cc       	SUB       R5, R1, #1
    60c0:	55 d1       	ZXT.B     R5, R5
    60c2:	90 38       	CMP       R9, #0
    60c4:	db f1       	JNZ       $-37                  ;->0x607a
    60c6:	f4 07       	SJMP      $-12                  ;->0x60ae
    60c8:	00 12       	MOV       R0, #32
    60ca:	0b 09       	LD.W      R1, [SP + #11]
    60cc:	23 43       	LD        R3, [PC + #35]        ;->0x6158  :=0x6170
    60ce:	03 5c       	LJMP      R3
    60d0:	81 30       	SUB       R8, #1
    60d2:	88 d1       	ZXT.B     R8, R8
    60d4:	80 38       	CMP       R8, #0
    60d6:	f9 f1       	JNZ       $-7                   ;->0x60c8
    60d8:	c6 64       	ADD       R12, R6
    60da:	07 04       	SJMP      $+7                   ;->0x60e8
    60dc:	0b 09       	LD.W      R1, [SP + #11]
    60de:	1f 44       	LD        R4, [PC + #31]        ;->0x6158  :=0x6170
    60e0:	04 5c       	LJMP      R4
    60e2:	0a 0d       	LD.W      R5, [SP + #10]
    60e4:	6d c0       	ADD       R5, R5, #1
    60e6:	85 59       	MOV       R12, R5
    60e8:	7f c0       	ADD       R7, R7, #1
    60ea:	2c 58       	MOV       R1, R12
    60ec:	0a 21       	ST.W      [SP + #10], R1
    60ee:	07 80       	LD.B      R0, [R7]
    60f0:	00 38       	CMP       R0, #0
    60f2:	02 f0       	JZ        $+2                   ;->0x60f6
    60f4:	ea 06       	SJMP      $-278                 ;->0x5ec8
    60f6:	2c 04       	SJMP      $+44                  ;->0x614e
    60f8:	ca 58       	MOV       R6, R10
    60fa:	68 28       	ADD       R6, #8
    60fc:	6a 58       	MOV       R3, R10
    60fe:	03 82       	LD.W      R0, [R3]
    6100:	4b 98       	LD.W      R1, [R3 + #1]
    6102:	1a 45       	LD        R5, [PC + #26]        ;->0x6168  :=0x6808
    6104:	05 5c       	LJMP      R5
    6106:	2e 58       	MOV       R1, SP
    6108:	49 58       	MOV       R2, R9
    610a:	19 45       	LD        R5, [PC + #25]        ;->0x616c  :=0x6214
    610c:	05 5c       	LJMP      R5
    610e:	46 59       	MOV       R10, R6
    6110:	b0 10       	MOV       R11, #0
    6112:	ce 58       	MOV       R6, SP
    6114:	93 07       	SJMP      $-109                 ;->0x603a
    6116:	b0 10       	MOV       R11, #0
    6118:	02 04       	SJMP      $+2                   ;->0x611c
    611a:	b1 10       	MOV       R11, #1
    611c:	20 11       	MOV       R2, #16
    611e:	0c 04       	SJMP      $+12                  ;->0x6136
    6120:	b0 10       	MOV       R11, #0
    6122:	4b 58       	MOV       R2, R11
    6124:	09 04       	SJMP      $+9                   ;->0x6136
    6126:	b0 10       	MOV       R11, #0
    6128:	28 10       	MOV       R2, #8
    612a:	06 04       	SJMP      $+6                   ;->0x6136
    612c:	b0 10       	MOV       R11, #0
    612e:	22 10       	MOV       R2, #2
    6130:	03 04       	SJMP      $+3                   ;->0x6136
    6132:	b0 10       	MOV       R11, #0
    6134:	2a 10       	MOV       R2, #10
    6136:	0a 58       	MOV       R0, R10
    6138:	18 c1       	ADD       R3, R0, #4
    613a:	10 38       	CMP       R1, #0
    613c:	02 f0       	JZ        $+2                   ;->0x6140
    613e:	5a 07       	SJMP      $-166                 ;->0x5ff2
    6140:	5b 07       	SJMP      $-165                 ;->0x5ff6
    6142:	6a 82       	LD.W      R6, [R10]
    6144:	a4 28       	ADD       R10, #4
    6146:	30 12       	MOV       R3, #32
    6148:	0d 23       	ST.W      [SP + #13], R3
    614a:	b0 10       	MOV       R11, #0
    614c:	78 07       	SJMP      $-136                 ;->0x603c
    614e:	0a 08       	LD.W      R0, [SP + #10]
    6150:	ec 2b       	ADD       SP, #60
    6152:	7f 5e       	POP       {R6-R12}
    6154:	0d 5d       	POP       LR
    6156:	1d 5c       	JMP       LR
    6158:	70 61 00 00 	.long     0x00006170 ->000024944  [!!!@2@:SXT.H     R7, R0	@@: NOP      
    615c:	80 64 00 00 	.long     0x00006480 ->000025728  [!!!@2@:ADD       R8, R0	@@: NOP      
    6160:	c8 64 00 00 	.long     0x000064c8 ->000025800  [!!!@2@:ADD       R12, R8	@@: NOP      
    6164:	3c 1d 00 10 	.long     0x10001d3c ->268442940  [!!!@2@:MOV       R3, #220	@@: MOV       R0, #0
    6168:	08 68 00 00 	.long     0x00006808 ->000026632  [!!!@2@:NOT       R0, R8	@@: NOP      
    616c:	14 62 00 00 	.long     0x00006214 ->000025108  [!!!@2@:SXT.B     R1, R4	@@: NOP      

00006170 <fputchar>:
    6170:	c8 a0       	ST.W      [R1 + #3], R0
    6172:	41 10       	MOV       R4, #1
    6174:	a5 7a       	LSL       R4, #13
    6176:	a9 98       	LD.W      R5, [R1 + #2]
    6178:	2d d5       	ANL       R5, R5, R4
    617a:	fe f1       	JNZ       $-2                   ;->0x6176
    617c:	41 10       	MOV       R4, #1
    617e:	a5 7a       	LSL       R4, #13
    6180:	a9 98       	LD.W      R5, [R1 + #2]
    6182:	2d d5       	ANL       R5, R5, R4
    6184:	fe f0       	JZ        $-2                   ;->0x6180
    6186:	04 10       	MOV       R0, #4
    6188:	01 30       	SUB       R0, #1
    618a:	ff f1       	JNZ       $-1                   ;->0x6188
    618c:	1d 5c       	JMP       LR
	...

00006190 <_ftoa_put_char>:
    6190:	03 44       	LD        R4, [PC + #3]         ;->0x619c  :=0x10003fcc
    6192:	54 82       	LD.W      R5, [R4]
    6194:	50 77       	ST.B      [R5++], R0
    6196:	45 85       	ST.W      [R4], R5
    6198:	1d 5c       	JMP       LR
    619a:	00 00       	NOP      NOP      
    619c:	cc 3f 00 10 	.long     0x10003fcc ->268451788  [!!!@2@:CMP       R12, #124	@@: MOV       R0, #0

000061a0 <_ftoa_put_digit>:
    61a0:	81 5f       	PUSH      {R6,LR}
    61a2:	09 46       	LD        R6, [PC + #9]         ;->0x61c4  :=0x10003fc8
    61a4:	06 82       	LD.W      R0, [R6]
    61a6:	84 7d       	LSR       R0, #28
    61a8:	00 2b       	ADD       R0, #48
    61aa:	08 45       	LD        R5, [PC + #8]         ;->0x61c8  :=0x6190
    61ac:	05 5c       	LJMP      R5
    61ae:	08 45       	LD        R5, [PC + #8]         ;->0x61cc  :=0xfffffff
    61b0:	36 82       	LD.W      R3, [R6]
    61b2:	6b d5       	ANL       R5, R3, R5
    61b4:	32 10       	MOV       R3, #2
    61b6:	e5 da       	LSL       R4, R5, R3
    61b8:	6c c3       	ADD       R5, R4, R5
    61ba:	6d c3       	ADD       R5, R5, R5
    61bc:	65 85       	ST.W      [R6], R5
    61be:	06 5d       	POP       R6
    61c0:	0d 5d       	POP       LR
    61c2:	1d 5c       	JMP       LR
    61c4:	c8 3f 00 10 	.long     0x10003fc8 ->268451784  [!!!@2@:CMP       R12, #120	@@: MOV       R0, #0
    61c8:	90 61 00 00 	.long     0x00006190 ->000024976  [!!!@2@:SXT.H     R9, R0	@@: NOP      
    61cc:	ff ff ff 0f 	.long     0x0fffffff ->268435455 

000061d0 <_ftoa_round>:
    61d0:	00 38       	CMP       R0, #0
    61d2:	1a f4       	JMI       $+26                  ;->0x6206
    61d4:	0d 45       	LD        R5, [PC + #13]        ;->0x6208  :=0x10003fc8
    61d6:	45 82       	LD.W      R4, [R5]
    61d8:	51 10       	MOV       R5, #1
    61da:	ab 7b       	LSL       R5, #27
    61dc:	3a 10       	MOV       R3, #10
    61de:	04 04       	SJMP      $+4                   ;->0x61e6
    61e0:	6d c1       	ADD       R5, R5, #5
    61e2:	ed d2       	DIVU      R5, R5, R3
    61e4:	40 cc       	SUB       R0, R0, #1
    61e6:	00 38       	CMP       R0, #0
    61e8:	fc f1       	JNZ       $-4                   ;->0x61e0
    61ea:	2d c3       	ADD       R5, R5, R4
    61ec:	07 44       	LD        R4, [PC + #7]         ;->0x6208  :=0x10003fc8
    61ee:	45 85       	ST.W      [R4], R5
    61f0:	07 43       	LD        R3, [PC + #7]         ;->0x620c  :=0x9fffffff
    61f2:	53 70       	CMP       R5, R3
    61f4:	09 f9       	JLS       $+9                   ;->0x6206
    61f6:	6d c1       	ADD       R5, R5, #5
    61f8:	3a 10       	MOV       R3, #10
    61fa:	ed d2       	DIVU      R5, R5, R3
    61fc:	45 85       	ST.W      [R4], R5
    61fe:	05 45       	LD        R5, [PC + #5]         ;->0x6210  :=0x10003fc0
    6200:	35 82       	LD.W      R3, [R5]
    6202:	63 c0       	ADD       R4, R3, #1
    6204:	54 85       	ST.W      [R5], R4
    6206:	1d 5c       	JMP       LR
    6208:	c8 3f 00 10 	.long     0x10003fc8 ->268451784  [!!!@2@:CMP       R12, #120	@@: MOV       R0, #0
    620c:	ff ff ff 9f 	.long     0x9fffffff ->-1610612737 
    6210:	c0 3f 00 10 	.long     0x10003fc0 ->268451776  [!!!@2@:CMP       R12, #112	@@: MOV       R0, #0

00006214 <ftoa>:
    6214:	87 5f       	PUSH      {R6-R8,LR}
    6216:	62 d1       	ZXT.B     R6, R2
    6218:	8a 47       	LD        R7, [PC + #138]       ;->0x6440  :=0x10003fc8
    621a:	70 85       	ST.W      [R7], R0
    621c:	8a 45       	LD        R5, [PC + #138]       ;->0x6444  :=0x10003fcc
    621e:	51 85       	ST.W      [R5], R1
    6220:	00 38       	CMP       R0, #0
    6222:	04 f5       	JPL       $+4                   ;->0x622a
    6224:	0d 12       	MOV       R0, #45
    6226:	89 45       	LD        R5, [PC + #137]       ;->0x6448  :=0x6190
    6228:	05 5c       	LJMP      R5
    622a:	57 82       	LD.W      R5, [R7]
    622c:	07 11       	MOV       R0, #23
    622e:	1d dc       	LSR       R3, R5, R0
    6230:	1f 1f       	MOV       R1, #255
    6232:	5b d4       	ANL       R3, R3, R1
    6234:	86 44       	LD        R4, [PC + #134]       ;->0x644c  :=0x10003fc4
    6236:	43 85       	ST.W      [R4], R3
    6238:	86 42       	LD        R2, [PC + #134]       ;->0x6450  :=0x7fffff
    623a:	ad d4       	ANL       R5, R5, R2
    623c:	01 10       	MOV       R0, #1
    623e:	07 7b       	LSL       R0, #23
    6240:	25 d6       	ORL       R4, R5, R0
    6242:	74 85       	ST.W      [R7], R4
    6244:	31 70       	CMP       R3, R1
    6246:	16 f1       	JNZ       $+22                  ;->0x6272
    6248:	80 46       	LD        R6, [PC + #128]       ;->0x6448  :=0x6190
    624a:	51 10       	MOV       R5, #1
    624c:	2f 7b       	LSL       R5, #23
    624e:	45 70       	CMP       R4, R5
    6250:	07 f1       	JNZ       $+7                   ;->0x625e
    6252:	09 16       	MOV       R0, #105
    6254:	06 5c       	LJMP      R6
    6256:	0e 16       	MOV       R0, #110
    6258:	06 5c       	LJMP      R6
    625a:	06 14       	MOV       R0, #70
    625c:	06 04       	SJMP      $+6                   ;->0x6268
    625e:	0e 16       	MOV       R0, #110
    6260:	06 5c       	LJMP      R6
    6262:	01 16       	MOV       R0, #97
    6264:	06 5c       	LJMP      R6
    6266:	0e 16       	MOV       R0, #110
    6268:	06 5c       	LJMP      R6
    626a:	00 10       	MOV       R0, #0
    626c:	77 45       	LD        R5, [PC + #119]       ;->0x6448  :=0x6190
    626e:	05 5c       	LJMP      R5
    6270:	e4 04       	SJMP      $+228                 ;->0x6438
    6272:	30 38       	CMP       R3, #0
    6274:	0c f0       	JZ        $+12                  ;->0x628c
    6276:	73 45       	LD        R5, [PC + #115]       ;->0x6440  :=0x10003fc8
    6278:	55 82       	LD.W      R5, [R5]
    627a:	75 44       	LD        R4, [PC + #117]       ;->0x644c  :=0x10003fc4
    627c:	44 82       	LD.W      R4, [R4]
    627e:	4f 37       	SUB       R4, #127
    6280:	2d 7a       	LSL       R5, #5
    6282:	44 58       	MOV       R2, R4
    6284:	30 10       	MOV       R3, #0
    6286:	74 41       	LD        R1, [PC + #116]       ;->0x6454  :=0x4fffffff
    6288:	05 10       	MOV       R0, #5
    628a:	3a 04       	SJMP      $+58                  ;->0x62fe
    628c:	31 10       	MOV       R3, #1
    628e:	1f 7b       	LSL       R3, #23
    6290:	43 70       	CMP       R4, R3
    6292:	22 f1       	JNZ       $+34                  ;->0x62d6
    6294:	00 13       	MOV       R0, #48
    6296:	6d 47       	LD        R7, [PC + #109]       ;->0x6448  :=0x6190
    6298:	07 5c       	LJMP      R7
    629a:	5f 11       	MOV       R5, #31
    629c:	6e d5       	ANL       R5, R6, R5
    629e:	6f 41       	LD        R1, [PC + #111]       ;->0x6458  :=0x10003fc0
    62a0:	01 59       	MOV       R8, R1
    62a2:	15 85       	ST.W      [R1], R5
    62a4:	50 38       	CMP       R5, #0
    62a6:	05 f1       	JNZ       $+5                   ;->0x62b0
    62a8:	50 14       	MOV       R5, #64
    62aa:	76 d5       	ANL       R6, R6, R5
    62ac:	df f0       	JZ        $-33                  ;->0x626a
    62ae:	0b 04       	SJMP      $+11                  ;->0x62c4
    62b0:	0e 12       	MOV       R0, #46
    62b2:	02 04       	SJMP      $+2                   ;->0x62b6
    62b4:	00 13       	MOV       R0, #48
    62b6:	07 5c       	LJMP      R7
    62b8:	58 82       	LD.W      R5, [R8]
    62ba:	65 cc       	SUB       R4, R5, #1
    62bc:	84 85       	ST.W      [R8], R4
    62be:	50 38       	CMP       R5, #0
    62c0:	fa f1       	JNZ       $-6                   ;->0x62b4
    62c2:	f3 07       	SJMP      $-13                  ;->0x62a8
    62c4:	05 14       	MOV       R0, #69
    62c6:	61 46       	LD        R6, [PC + #97]        ;->0x6448  :=0x6190
    62c8:	06 5c       	LJMP      R6
    62ca:	0b 12       	MOV       R0, #43
    62cc:	06 5c       	LJMP      R6
    62ce:	00 13       	MOV       R0, #48
    62d0:	06 5c       	LJMP      R6
    62d2:	00 13       	MOV       R0, #48
    62d4:	ca 07       	SJMP      $-54                  ;->0x6268
    62d6:	41 10       	MOV       R4, #1
    62d8:	02 04       	SJMP      $+2                   ;->0x62dc
    62da:	6d c3       	ADD       R5, R5, R5
    62dc:	64 58       	MOV       R3, R4
    62de:	64 cc       	SUB       R4, R4, #1
    62e0:	52 70       	CMP       R5, R2
    62e2:	fc f9       	JLS       $-4                   ;->0x62da
    62e4:	57 44       	LD        R4, [PC + #87]        ;->0x6440  :=0x10003fc8
    62e6:	45 85       	ST.W      [R4], R5
    62e8:	59 45       	LD        R5, [PC + #89]        ;->0x644c  :=0x10003fc4
    62ea:	53 85       	ST.W      [R5], R3
    62ec:	c5 07       	SJMP      $-59                  ;->0x6276
    62ee:	51 70       	CMP       R5, R1
    62f0:	03 f8       	JHI       $+3                   ;->0x62f6
    62f2:	6d c3       	ADD       R5, R5, R5
    62f4:	04 04       	SJMP      $+4                   ;->0x62fc
    62f6:	ad c0       	ADD       R5, R5, #2
    62f8:	2d d2       	DIVU      R5, R5, R0
    62fa:	5b c0       	ADD       R3, R3, #1
    62fc:	52 cc       	SUB       R2, R2, #1
    62fe:	20 38       	CMP       R2, #0
    6300:	f7 fc       	JGT       $-9                   ;->0x62ee
    6302:	44 58       	MOV       R2, R4
    6304:	40 38       	CMP       R4, #0
    6306:	02 f5       	JPL       $+2                   ;->0x630a
    6308:	20 10       	MOV       R2, #0
    630a:	a4 c6       	SUB       R4, R4, R2
    630c:	54 42       	LD        R2, [PC + #84]        ;->0x645c  :=0x1fffffff
    630e:	0b 04       	SJMP      $+11                  ;->0x6324
    6310:	52 70       	CMP       R5, R2
    6312:	06 f8       	JHI       $+6                   ;->0x631e
    6314:	02 10       	MOV       R0, #2
    6316:	0d da       	LSL       R1, R5, R0
    6318:	6d c2       	ADD       R5, R5, R1
    631a:	5b cc       	SUB       R3, R3, #1
    631c:	03 04       	SJMP      $+3                   ;->0x6322
    631e:	6d c0       	ADD       R5, R5, #1
    6320:	29 7c       	LSR       R5, #1
    6322:	64 c0       	ADD       R4, R4, #1
    6324:	40 38       	CMP       R4, #0
    6326:	f5 f4       	JMI       $-11                  ;->0x6310
    6328:	49 42       	LD        R2, [PC + #73]        ;->0x644c  :=0x10003fc4
    632a:	24 85       	ST.W      [R2], R4
    632c:	4d 42       	LD        R2, [PC + #77]        ;->0x6460  :=0xfffffff
    632e:	05 04       	SJMP      $+5                   ;->0x6338
    6330:	12 10       	MOV       R1, #2
    6332:	65 da       	LSL       R4, R5, R1
    6334:	6c c3       	ADD       R5, R4, R5
    6336:	6d c3       	ADD       R5, R5, R5
    6338:	83 58       	MOV       R4, R3
    633a:	5b cc       	SUB       R3, R3, #1
    633c:	52 70       	CMP       R5, R2
    633e:	f9 f9       	JLS       $-7                   ;->0x6330
    6340:	46 43       	LD        R3, [PC + #70]        ;->0x6458  :=0x10003fc0
    6342:	34 85       	ST.W      [R3], R4
    6344:	3f 43       	LD        R3, [PC + #63]        ;->0x6440  :=0x10003fc8
    6346:	35 85       	ST.W      [R3], R5
    6348:	50 16       	MOV       R5, #96
    634a:	6e d5       	ANL       R5, R6, R5
    634c:	0a f1       	JNZ       $+10                  ;->0x6360
    634e:	53 10       	MOV       R5, #3
    6350:	55 68       	NOT       R5, R5
    6352:	45 70       	CMP       R4, R5
    6354:	03 fb       	JLT       $+3                   ;->0x635a
    6356:	46 70       	CMP       R4, R6
    6358:	03 fb       	JLT       $+3                   ;->0x635e
    635a:	36 48       	SET       R6, #6
    635c:	02 04       	SJMP      $+2                   ;->0x6360
    635e:	35 48       	SET       R6, #5
    6360:	50 14       	MOV       R5, #64
    6362:	6e d5       	ANL       R5, R6, R5
    6364:	7f 11       	MOV       R7, #31
    6366:	fe d5       	ANL       R7, R6, R7
    6368:	50 38       	CMP       R5, #0
    636a:	30 f0       	JZ        $+48                  ;->0x63ca
    636c:	07 58       	MOV       R0, R7
    636e:	3e 45       	LD        R5, [PC + #62]        ;->0x6464  :=0x61d0
    6370:	05 5c       	LJMP      R5
    6372:	3e 44       	LD        R4, [PC + #62]        ;->0x6468  :=0x61a0
    6374:	04 59       	MOV       R8, R4
    6376:	04 5c       	LJMP      R4
    6378:	35 46       	LD        R6, [PC + #53]        ;->0x644c  :=0x10003fc4
    637a:	67 85       	ST.W      [R6], R7
    637c:	70 38       	CMP       R7, #0
    637e:	09 f1       	JNZ       $+9                   ;->0x6390
    6380:	05 14       	MOV       R0, #69
    6382:	32 46       	LD        R6, [PC + #50]        ;->0x6448  :=0x6190
    6384:	06 5c       	LJMP      R6
    6386:	35 47       	LD        R7, [PC + #53]        ;->0x6458  :=0x10003fc0
    6388:	57 82       	LD.W      R5, [R7]
    638a:	50 38       	CMP       R5, #0
    638c:	15 f5       	JPL       $+21                  ;->0x63b6
    638e:	0d 04       	SJMP      $+13                  ;->0x63a8
    6390:	0e 12       	MOV       R0, #46
    6392:	2e 45       	LD        R5, [PC + #46]        ;->0x6448  :=0x6190
    6394:	05 5c       	LJMP      R5
    6396:	05 04       	SJMP      $+5                   ;->0x63a0
    6398:	08 5c       	LJMP      R8
    639a:	06 82       	LD.W      R0, [R6]
    639c:	68 cc       	SUB       R5, R0, #1
    639e:	65 85       	ST.W      [R6], R5
    63a0:	56 82       	LD.W      R5, [R6]
    63a2:	50 38       	CMP       R5, #0
    63a4:	fa fc       	JGT       $-6                   ;->0x6398
    63a6:	ed 07       	SJMP      $-19                  ;->0x6380
    63a8:	0d 12       	MOV       R0, #45
    63aa:	06 5c       	LJMP      R6
    63ac:	50 10       	MOV       R5, #0
    63ae:	17 82       	LD.W      R1, [R7]
    63b0:	6d c6       	SUB       R5, R5, R1
    63b2:	75 85       	ST.W      [R7], R5
    63b4:	03 04       	SJMP      $+3                   ;->0x63ba
    63b6:	0b 12       	MOV       R0, #43
    63b8:	06 5c       	LJMP      R6
    63ba:	28 45       	LD        R5, [PC + #40]        ;->0x6458  :=0x10003fc0
    63bc:	05 82       	LD.W      R0, [R5]
    63be:	22 45       	LD        R5, [PC + #34]        ;->0x6444  :=0x10003fcc
    63c0:	15 82       	LD.W      R1, [R5]
    63c2:	2a 10       	MOV       R2, #10
    63c4:	2a 45       	LD        R5, [PC + #42]        ;->0x646c  :=0x6470
    63c6:	05 5c       	LJMP      R5
    63c8:	38 04       	SJMP      $+56                  ;->0x6438
    63ca:	24 46       	LD        R6, [PC + #36]        ;->0x6458  :=0x10003fc0
    63cc:	46 82       	LD.W      R4, [R6]
    63ce:	07 c3       	ADD       R0, R7, R4
    63d0:	25 45       	LD        R5, [PC + #37]        ;->0x6464  :=0x61d0
    63d2:	05 5c       	LJMP      R5
    63d4:	56 82       	LD.W      R5, [R6]
    63d6:	50 38       	CMP       R5, #0
    63d8:	07 f5       	JPL       $+7                   ;->0x63e6
    63da:	0c 04       	SJMP      $+12                  ;->0x63f2
    63dc:	08 5c       	LJMP      R8
    63de:	06 82       	LD.W      R0, [R6]
    63e0:	68 cc       	SUB       R5, R0, #1
    63e2:	65 85       	ST.W      [R6], R5
    63e4:	03 04       	SJMP      $+3                   ;->0x63ea
    63e6:	21 41       	LD        R1, [PC + #33]        ;->0x6468  :=0x61a0
    63e8:	01 59       	MOV       R8, R1
    63ea:	56 82       	LD.W      R5, [R6]
    63ec:	50 38       	CMP       R5, #0
    63ee:	f7 f5       	JPL       $-9                   ;->0x63dc
    63f0:	04 04       	SJMP      $+4                   ;->0x63f8
    63f2:	00 13       	MOV       R0, #48
    63f4:	15 45       	LD        R5, [PC + #21]        ;->0x6448  :=0x6190
    63f6:	05 5c       	LJMP      R5
    63f8:	15 46       	LD        R6, [PC + #21]        ;->0x644c  :=0x10003fc4
    63fa:	67 85       	ST.W      [R6], R7
    63fc:	70 38       	CMP       R7, #0
    63fe:	02 f1       	JNZ       $+2                   ;->0x6402
    6400:	35 07       	SJMP      $-203                 ;->0x626a
    6402:	0e 12       	MOV       R0, #46
    6404:	11 45       	LD        R5, [PC + #17]        ;->0x6448  :=0x6190
    6406:	05 5c       	LJMP      R5
    6408:	14 47       	LD        R7, [PC + #20]        ;->0x6458  :=0x10003fc0
    640a:	40 10       	MOV       R4, #0
    640c:	44 68       	NOT       R4, R4
    640e:	04 59       	MOV       R8, R4
    6410:	10 04       	SJMP      $+16                  ;->0x6430
    6412:	57 82       	LD.W      R5, [R7]
    6414:	58 70       	CMP       R5, R8
    6416:	08 fa       	JGE       $+8                   ;->0x6426
    6418:	00 13       	MOV       R0, #48
    641a:	0c 45       	LD        R5, [PC + #12]        ;->0x6448  :=0x6190
    641c:	05 5c       	LJMP      R5
    641e:	07 82       	LD.W      R0, [R7]
    6420:	68 c0       	ADD       R5, R0, #1
    6422:	75 85       	ST.W      [R7], R5
    6424:	03 04       	SJMP      $+3                   ;->0x642a
    6426:	11 45       	LD        R5, [PC + #17]        ;->0x6468  :=0x61a0
    6428:	05 5c       	LJMP      R5
    642a:	16 82       	LD.W      R1, [R6]
    642c:	69 cc       	SUB       R5, R1, #1
    642e:	65 85       	ST.W      [R6], R5
    6430:	56 82       	LD.W      R5, [R6]
    6432:	50 38       	CMP       R5, #0
    6434:	ef fc       	JGT       $-17                  ;->0x6412
    6436:	1a 07       	SJMP      $-230                 ;->0x626a
    6438:	07 5e       	POP       {R6-R8}
    643a:	0d 5d       	POP       LR
    643c:	1d 5c       	JMP       LR
    643e:	00 00       	NOP      NOP      
    6440:	c8 3f 00 10 	.long     0x10003fc8 ->268451784  [!!!@2@:CMP       R12, #120	@@: MOV       R0, #0
    6444:	cc 3f 00 10 	.long     0x10003fcc ->268451788  [!!!@2@:CMP       R12, #124	@@: MOV       R0, #0
    6448:	90 61 00 00 	.long     0x00006190 ->000024976  [!!!@2@:SXT.H     R9, R0	@@: NOP      
    644c:	c4 3f 00 10 	.long     0x10003fc4 ->268451780  [!!!@2@:CMP       R12, #116	@@: MOV       R0, #0
    6450:	ff ff 7f 00 	.long     0x007fffff ->008388607 
    6454:	ff ff ff 4f 	.long     0x4fffffff ->1342177279 
    6458:	c0 3f 00 10 	.long     0x10003fc0 ->268451776  [!!!@2@:CMP       R12, #112	@@: MOV       R0, #0
    645c:	ff ff ff 1f 	.long     0x1fffffff ->536870911 
    6460:	ff ff ff 0f 	.long     0x0fffffff ->268435455 
    6464:	d0 61 00 00 	.long     0x000061d0 ->000025040  [!!!@2@:SXT.H     LR, R0	@@: NOP      
    6468:	a0 61 00 00 	.long     0x000061a0 ->000024992  [!!!@2@:SXT.H     R10, R0	@@: NOP      
    646c:	70 64 00 00 	.long     0x00006470 ->000025712  [!!!@2@:ADD       R7, R0	@@: NOP      

00006470 <uitoa>:
    6470:	2d 5d       	PUSH      LR
    6472:	22 d1       	ZXT.B     R2, R2
    6474:	02 45       	LD        R5, [PC + #2]         ;->0x647c  :=0x6480
    6476:	05 5c       	LJMP      R5
    6478:	0d 5d       	POP       LR
    647a:	1d 5c       	JMP       LR
    647c:	80 64 00 00 	.long     0x00006480 ->000025728  [!!!@2@:ADD       R8, R0	@@: NOP      

00006480 <ultoa>:
    6480:	03 5f       	PUSH      {R6-R7}
    6482:	e0 32       	SUB       SP, #32
    6484:	22 d1       	ZXT.B     R2, R2
    6486:	50 12       	MOV       R5, #32
    6488:	98 d2       	DIVU      R3, R0, R2
    648a:	a3 ca       	MULS      R4, R3, R2
    648c:	00 00       	NOP      NOP      
    648e:	00 c7       	SUB       R0, R0, R4
    6490:	00 d1       	ZXT.B     R0, R0
    6492:	60 13       	MOV       R6, #48
    6494:	a0 c3       	ADD       R4, R0, R6
    6496:	44 d1       	ZXT.B     R4, R4
    6498:	49 3b       	CMP       R4, #57
    649a:	03 f9       	JLS       $+3                   ;->0x64a0
    649c:	07 2d       	ADD       R0, #87
    649e:	40 d1       	ZXT.B     R4, R0
    64a0:	6d cc       	SUB       R5, R5, #1
    64a2:	ee 58       	MOV       R7, SP
    64a4:	47 c3       	ADD       R0, R7, R5
    64a6:	04 83       	ST.B      [R0], R4
    64a8:	03 58       	MOV       R0, R3
    64aa:	30 38       	CMP       R3, #0
    64ac:	ee f1       	JNZ       $-18                  ;->0x6488
    64ae:	6e 58       	MOV       R3, SP
    64b0:	63 c3       	ADD       R4, R3, R5
    64b2:	44 80       	LD.B      R4, [R4]
    64b4:	14 77       	ST.B      [R1++], R4
    64b6:	6d c0       	ADD       R5, R5, #1
    64b8:	5f 39       	CMP       R5, #31
    64ba:	fa f9       	JLS       $-6                   ;->0x64ae
    64bc:	50 10       	MOV       R5, #0
    64be:	15 83       	ST.B      [R1], R5
    64c0:	e0 2a       	ADD       SP, #32
    64c2:	03 5e       	POP       {R6-R7}
    64c4:	1d 5c       	JMP       LR
	...

000064c8 <ltoa>:
    64c8:	2d 5d       	PUSH      LR
    64ca:	22 d1       	ZXT.B     R2, R2
    64cc:	00 38       	CMP       R0, #0
    64ce:	07 f5       	JPL       $+7                   ;->0x64dc
    64d0:	2a 38       	CMP       R2, #10
    64d2:	05 f1       	JNZ       $+5                   ;->0x64dc
    64d4:	5d 12       	MOV       R5, #45
    64d6:	15 77       	ST.B      [R1++], R5
    64d8:	50 10       	MOV       R5, #0
    64da:	05 c6       	SUB       R0, R5, R0
    64dc:	02 45       	LD        R5, [PC + #2]         ;->0x64e4  :=0x6480
    64de:	05 5c       	LJMP      R5
    64e0:	0d 5d       	POP       LR
    64e2:	1d 5c       	JMP       LR
    64e4:	80 64 00 00 	.long     0x00006480 ->000025728  [!!!@2@:ADD       R8, R0	@@: NOP      

000064e8 <__gedf2>:
    64e8:	1f 5f       	PUSH      {R6-R10}
    64ea:	e0 31       	SUB       SP, #16
    64ec:	02 20       	ST.W      [SP + #2], R0
    64ee:	03 21       	ST.W      [SP + #3], R1
    64f0:	02 0e       	LD.W      R6, [SP + #2]
    64f2:	03 0d       	LD.W      R5, [SP + #3]
    64f4:	34 44       	LD        R4, [PC + #52]        ;->0x65c4  :=0xfffff
    64f6:	24 59       	MOV       R9, R4
    64f8:	0d d5       	ANL       R1, R5, R4
    64fa:	74 11       	MOV       R7, #20
    64fc:	c5 dd       	LSR       R0, R5, R7
    64fe:	33 47       	LD        R7, [PC + #51]        ;->0x65c8  :=0x7ff
    6500:	c0 d5       	ANL       R0, R0, R7
    6502:	af 7d       	LSR       R5, #31
    6504:	e2 85       	ST.W      [SP], R2
    6506:	01 23       	ST.W      [SP + #1], R3
    6508:	2e 82       	LD.W      R2, [SP]
    650a:	01 0c       	LD.W      R4, [SP + #1]
    650c:	04 59       	MOV       R8, R4
    650e:	64 58       	MOV       R3, R4
    6510:	39 69       	ANL       R3, R9
    6512:	24 7d       	LSR       R4, #20
    6514:	e4 d5       	ANL       R4, R4, R7
    6516:	c7 7d       	LSR       R8, #31
    6518:	47 59       	MOV       R10, R7
    651a:	07 70       	CMP       R0, R7
    651c:	04 f1       	JNZ       $+4                   ;->0x6524
    651e:	b9 d7       	ORL       R7, R1, R6
    6520:	70 38       	CMP       R7, #0
    6522:	43 f1       	JNZ       $+67                  ;->0x65a8
    6524:	4a 70       	CMP       R4, R10
    6526:	03 f1       	JNZ       $+3                   ;->0x652c
    6528:	bb d6       	ORL       R7, R3, R2
    652a:	3f f1       	JNZ       $+63                  ;->0x65a8
    652c:	00 38       	CMP       R0, #0
    652e:	45 f1       	JNZ       $+69                  ;->0x65b8
    6530:	b9 d7       	ORL       R7, R1, R6
    6532:	27 59       	MOV       R9, R7
    6534:	71 10       	MOV       R7, #1
    6536:	90 38       	CMP       R9, #0
    6538:	02 f0       	JZ        $+2                   ;->0x653c
    653a:	e0 58       	MOV       R7, R0
    653c:	27 59       	MOV       R9, R7
    653e:	40 38       	CMP       R4, #0
    6540:	39 f1       	JNZ       $+57                  ;->0x65b2
    6542:	02 04       	SJMP      $+2                   ;->0x6546
    6544:	24 59       	MOV       R9, R4
    6546:	bb d6       	ORL       R7, R3, R2
    6548:	47 59       	MOV       R10, R7
    654a:	71 10       	MOV       R7, #1
    654c:	a0 38       	CMP       R10, #0
    654e:	02 f0       	JZ        $+2                   ;->0x6552
    6550:	70 10       	MOV       R7, #0
    6552:	90 38       	CMP       R9, #0
    6554:	07 f0       	JZ        $+7                   ;->0x6562
    6556:	00 10       	MOV       R0, #0
    6558:	70 70       	CMP       R7, R0
    655a:	32 f1       	JNZ       $+50                  ;->0x65be
    655c:	80 38       	CMP       R8, #0
    655e:	27 f0       	JZ        $+39                  ;->0x65ac
    6560:	18 04       	SJMP      $+24                  ;->0x6590
    6562:	70 38       	CMP       R7, #0
    6564:	05 f0       	JZ        $+5                   ;->0x656e
    6566:	01 10       	MOV       R0, #1
    6568:	50 38       	CMP       R5, #0
    656a:	2a f0       	JZ        $+42                  ;->0x65be
    656c:	20 04       	SJMP      $+32                  ;->0x65ac
    656e:	58 70       	CMP       R5, R8
    6570:	02 f0       	JZ        $+2                   ;->0x6574
    6572:	0d 04       	SJMP      $+13                  ;->0x658c
    6574:	04 70       	CMP       R0, R4
    6576:	02 fd       	JLE       $+2                   ;->0x657a
    6578:	0a 04       	SJMP      $+10                  ;->0x658c
    657a:	04 70       	CMP       R0, R4
    657c:	02 fa       	JGE       $+2                   ;->0x6580
    657e:	12 04       	SJMP      $+18                  ;->0x65a2
    6580:	13 70       	CMP       R1, R3
    6582:	05 f8       	JHI       $+5                   ;->0x658c
    6584:	13 70       	CMP       R1, R3
    6586:	07 f1       	JNZ       $+7                   ;->0x6594
    6588:	62 70       	CMP       R6, R2
    658a:	09 f9       	JLS       $+9                   ;->0x659c
    658c:	50 38       	CMP       R5, #0
    658e:	0f f1       	JNZ       $+15                  ;->0x65ac
    6590:	01 10       	MOV       R0, #1
    6592:	16 04       	SJMP      $+22                  ;->0x65be
    6594:	00 10       	MOV       R0, #0
    6596:	31 70       	CMP       R3, R1
    6598:	13 f9       	JLS       $+19                  ;->0x65be
    659a:	04 04       	SJMP      $+4                   ;->0x65a2
    659c:	00 10       	MOV       R0, #0
    659e:	26 70       	CMP       R2, R6
    65a0:	0f f9       	JLS       $+15                  ;->0x65be
    65a2:	50 38       	CMP       R5, #0
    65a4:	f6 f1       	JNZ       $-10                  ;->0x6590
    65a6:	03 04       	SJMP      $+3                   ;->0x65ac
    65a8:	01 10       	MOV       R0, #1
    65aa:	02 04       	SJMP      $+2                   ;->0x65ae
    65ac:	00 10       	MOV       R0, #0
    65ae:	00 68       	NOT       R0, R0
    65b0:	07 04       	SJMP      $+7                   ;->0x65be
    65b2:	70 38       	CMP       R7, #0
    65b4:	d4 f1       	JNZ       $-44                  ;->0x655c
    65b6:	dc 07       	SJMP      $-36                  ;->0x656e
    65b8:	40 38       	CMP       R4, #0
    65ba:	c5 f0       	JZ        $-59                  ;->0x6544
    65bc:	d9 07       	SJMP      $-39                  ;->0x656e
    65be:	e0 29       	ADD       SP, #16
    65c0:	1f 5e       	POP       {R6-R10}
    65c2:	1d 5c       	JMP       LR
    65c4:	ff ff 0f 00 	.long     0x000fffff ->001048575 
    65c8:	ff 07 00 00 	.long     0x000007ff ->000002047  [!!!@2@:SJMP      $-1                   ;->0x65c6	@@: NOP      

000065cc <__gesf2>:
    65cc:	07 5f       	PUSH      {R6-R8}
    65ce:	2c 46       	LD        R6, [PC + #44]        ;->0x667c  :=0x7fffff
    65d0:	90 d5       	ANL       R2, R0, R6
    65d2:	47 11       	MOV       R4, #23
    65d4:	18 dd       	LSR       R3, R0, R4
    65d6:	33 d1       	ZXT.B     R3, R3
    65d8:	4f 11       	MOV       R4, #31
    65da:	28 dd       	LSR       R5, R0, R4
    65dc:	b1 d5       	ANL       R6, R1, R6
    65de:	07 11       	MOV       R0, #23
    65e0:	21 dc       	LSR       R4, R1, R0
    65e2:	44 d1       	ZXT.B     R4, R4
    65e4:	8f 7d       	LSR       R1, #31
    65e6:	0f 1f       	MOV       R0, #255
    65e8:	30 70       	CMP       R3, R0
    65ea:	03 f1       	JNZ       $+3                   ;->0x65f0
    65ec:	20 38       	CMP       R2, #0
    65ee:	3a f1       	JNZ       $+58                  ;->0x6662
    65f0:	0f 1f       	MOV       R0, #255
    65f2:	40 70       	CMP       R4, R0
    65f4:	03 f1       	JNZ       $+3                   ;->0x65fa
    65f6:	60 38       	CMP       R6, #0
    65f8:	35 f1       	JNZ       $+53                  ;->0x6662
    65fa:	30 38       	CMP       R3, #0
    65fc:	3b f1       	JNZ       $+59                  ;->0x6672
    65fe:	01 10       	MOV       R0, #1
    6600:	20 38       	CMP       R2, #0
    6602:	02 f0       	JZ        $+2                   ;->0x6606
    6604:	03 58       	MOV       R0, R3
    6606:	00 59       	MOV       R8, R0
    6608:	40 38       	CMP       R4, #0
    660a:	31 f1       	JNZ       $+49                  ;->0x666c
    660c:	02 04       	SJMP      $+2                   ;->0x6610
    660e:	04 59       	MOV       R8, R4
    6610:	71 10       	MOV       R7, #1
    6612:	60 38       	CMP       R6, #0
    6614:	02 f0       	JZ        $+2                   ;->0x6618
    6616:	70 10       	MOV       R7, #0
    6618:	80 38       	CMP       R8, #0
    661a:	07 f0       	JZ        $+7                   ;->0x6628
    661c:	00 10       	MOV       R0, #0
    661e:	70 70       	CMP       R7, R0
    6620:	2c f1       	JNZ       $+44                  ;->0x6678
    6622:	10 38       	CMP       R1, #0
    6624:	21 f0       	JZ        $+33                  ;->0x6666
    6626:	16 04       	SJMP      $+22                  ;->0x6652
    6628:	70 38       	CMP       R7, #0
    662a:	05 f0       	JZ        $+5                   ;->0x6634
    662c:	01 10       	MOV       R0, #1
    662e:	50 38       	CMP       R5, #0
    6630:	24 f0       	JZ        $+36                  ;->0x6678
    6632:	1a 04       	SJMP      $+26                  ;->0x6666
    6634:	51 70       	CMP       R5, R1
    6636:	02 f0       	JZ        $+2                   ;->0x663a
    6638:	0b 04       	SJMP      $+11                  ;->0x664e
    663a:	34 70       	CMP       R3, R4
    663c:	02 fd       	JLE       $+2                   ;->0x6640
    663e:	08 04       	SJMP      $+8                   ;->0x664e
    6640:	34 70       	CMP       R3, R4
    6642:	04 fa       	JGE       $+4                   ;->0x664a
    6644:	50 38       	CMP       R5, #0
    6646:	06 f1       	JNZ       $+6                   ;->0x6652
    6648:	0f 04       	SJMP      $+15                  ;->0x6666
    664a:	26 70       	CMP       R2, R6
    664c:	05 f9       	JLS       $+5                   ;->0x6656
    664e:	50 38       	CMP       R5, #0
    6650:	0b f1       	JNZ       $+11                  ;->0x6666
    6652:	01 10       	MOV       R0, #1
    6654:	12 04       	SJMP      $+18                  ;->0x6678
    6656:	00 10       	MOV       R0, #0
    6658:	62 70       	CMP       R6, R2
    665a:	0f f9       	JLS       $+15                  ;->0x6678
    665c:	50 70       	CMP       R5, R0
    665e:	fa f1       	JNZ       $-6                   ;->0x6652
    6660:	03 04       	SJMP      $+3                   ;->0x6666
    6662:	01 10       	MOV       R0, #1
    6664:	02 04       	SJMP      $+2                   ;->0x6668
    6666:	00 10       	MOV       R0, #0
    6668:	00 68       	NOT       R0, R0
    666a:	07 04       	SJMP      $+7                   ;->0x6678
    666c:	00 38       	CMP       R0, #0
    666e:	da f1       	JNZ       $-38                  ;->0x6622
    6670:	e2 07       	SJMP      $-30                  ;->0x6634
    6672:	40 38       	CMP       R4, #0
    6674:	cd f0       	JZ        $-51                  ;->0x660e
    6676:	df 07       	SJMP      $-33                  ;->0x6634
    6678:	07 5e       	POP       {R6-R8}
    667a:	1d 5c       	JMP       LR
    667c:	ff ff 7f 00 	.long     0x007fffff ->008388607 

00006680 <__ledf2>:
    6680:	3f 5f       	PUSH      {R6-R11}
    6682:	e0 31       	SUB       SP, #16
    6684:	02 20       	ST.W      [SP + #2], R0
    6686:	03 21       	ST.W      [SP + #3], R1
    6688:	02 08       	LD.W      R0, [SP + #2]
    668a:	60 59       	MOV       R11, R0
    668c:	03 0d       	LD.W      R5, [SP + #3]
    668e:	33 41       	LD        R1, [PC + #51]        ;->0x6758  :=0xfffff
    6690:	21 59       	MOV       R9, R1
    6692:	65 d4       	ANL       R4, R5, R1
    6694:	64 11       	MOV       R6, #20
    6696:	8d dd       	LSR       R1, R5, R6
    6698:	31 46       	LD        R6, [PC + #49]        ;->0x675c  :=0x7ff
    669a:	89 d5       	ANL       R1, R1, R6
    669c:	af 7d       	LSR       R5, #31
    669e:	e2 85       	ST.W      [SP], R2
    66a0:	01 23       	ST.W      [SP + #1], R3
    66a2:	7e 82       	LD.W      R7, [SP]
    66a4:	01 08       	LD.W      R0, [SP + #1]
    66a6:	60 58       	MOV       R3, R0
    66a8:	39 69       	ANL       R3, R9
    66aa:	40 58       	MOV       R2, R0
    66ac:	14 7d       	LSR       R2, #20
    66ae:	92 d5       	ANL       R2, R2, R6
    66b0:	87 7d       	LSR       R0, #31
    66b2:	20 59       	MOV       R9, R0
    66b4:	06 59       	MOV       R8, R6
    66b6:	16 70       	CMP       R1, R6
    66b8:	06 f1       	JNZ       $+6                   ;->0x66c4
    66ba:	c4 58       	MOV       R6, R4
    66bc:	6b 6a       	ORL       R6, R11
    66be:	02 10       	MOV       R0, #2
    66c0:	60 38       	CMP       R6, #0
    66c2:	48 f1       	JNZ       $+72                  ;->0x6752
    66c4:	28 70       	CMP       R2, R8
    66c6:	06 f1       	JNZ       $+6                   ;->0x66d2
    66c8:	c3 d7       	ORL       R0, R3, R7
    66ca:	00 59       	MOV       R8, R0
    66cc:	02 10       	MOV       R0, #2
    66ce:	80 38       	CMP       R8, #0
    66d0:	41 f1       	JNZ       $+65                  ;->0x6752
    66d2:	00 10       	MOV       R0, #0
    66d4:	10 70       	CMP       R1, R0
    66d6:	07 f1       	JNZ       $+7                   ;->0x66e4
    66d8:	c4 58       	MOV       R6, R4
    66da:	6b 6a       	ORL       R6, R11
    66dc:	01 10       	MOV       R0, #1
    66de:	60 38       	CMP       R6, #0
    66e0:	02 f0       	JZ        $+2                   ;->0x66e4
    66e2:	01 58       	MOV       R0, R1
    66e4:	20 38       	CMP       R2, #0
    66e6:	33 f1       	JNZ       $+51                  ;->0x674c
    66e8:	f3 d7       	ORL       R6, R3, R7
    66ea:	81 10       	MOV       R8, #1
    66ec:	60 38       	CMP       R6, #0
    66ee:	02 f0       	JZ        $+2                   ;->0x66f2
    66f0:	02 59       	MOV       R8, R2
    66f2:	00 38       	CMP       R0, #0
    66f4:	07 f0       	JZ        $+7                   ;->0x6702
    66f6:	00 10       	MOV       R0, #0
    66f8:	80 70       	CMP       R8, R0
    66fa:	2c f1       	JNZ       $+44                  ;->0x6752
    66fc:	90 38       	CMP       R9, #0
    66fe:	24 f0       	JZ        $+36                  ;->0x6746
    6700:	18 04       	SJMP      $+24                  ;->0x6730
    6702:	80 38       	CMP       R8, #0
    6704:	05 f0       	JZ        $+5                   ;->0x670e
    6706:	01 10       	MOV       R0, #1
    6708:	50 38       	CMP       R5, #0
    670a:	24 f0       	JZ        $+36                  ;->0x6752
    670c:	1d 04       	SJMP      $+29                  ;->0x6746
    670e:	59 70       	CMP       R5, R9
    6710:	02 f0       	JZ        $+2                   ;->0x6714
    6712:	0d 04       	SJMP      $+13                  ;->0x672c
    6714:	12 70       	CMP       R1, R2
    6716:	02 fd       	JLE       $+2                   ;->0x671a
    6718:	0a 04       	SJMP      $+10                  ;->0x672c
    671a:	12 70       	CMP       R1, R2
    671c:	02 fa       	JGE       $+2                   ;->0x6720
    671e:	12 04       	SJMP      $+18                  ;->0x6742
    6720:	43 70       	CMP       R4, R3
    6722:	05 f8       	JHI       $+5                   ;->0x672c
    6724:	43 70       	CMP       R4, R3
    6726:	07 f1       	JNZ       $+7                   ;->0x6734
    6728:	b7 70       	CMP       R11, R7
    672a:	09 f9       	JLS       $+9                   ;->0x673c
    672c:	50 38       	CMP       R5, #0
    672e:	0c f1       	JNZ       $+12                  ;->0x6746
    6730:	01 10       	MOV       R0, #1
    6732:	10 04       	SJMP      $+16                  ;->0x6752
    6734:	00 10       	MOV       R0, #0
    6736:	34 70       	CMP       R3, R4
    6738:	0d f9       	JLS       $+13                  ;->0x6752
    673a:	04 04       	SJMP      $+4                   ;->0x6742
    673c:	00 10       	MOV       R0, #0
    673e:	7b 70       	CMP       R7, R11
    6740:	09 f9       	JLS       $+9                   ;->0x6752
    6742:	50 38       	CMP       R5, #0
    6744:	f6 f1       	JNZ       $-10                  ;->0x6730
    6746:	00 10       	MOV       R0, #0
    6748:	00 68       	NOT       R0, R0
    674a:	04 04       	SJMP      $+4                   ;->0x6752
    674c:	00 38       	CMP       R0, #0
    674e:	d7 f1       	JNZ       $-41                  ;->0x66fc
    6750:	df 07       	SJMP      $-33                  ;->0x670e
    6752:	e0 29       	ADD       SP, #16
    6754:	3f 5e       	POP       {R6-R11}
    6756:	1d 5c       	JMP       LR
    6758:	ff ff 0f 00 	.long     0x000fffff ->001048575 
    675c:	ff 07 00 00 	.long     0x000007ff ->000002047  [!!!@2@:SJMP      $-1                   ;->0x675a	@@: NOP      

00006760 <__lesf2>:
    6760:	03 5f       	PUSH      {R6-R7}
    6762:	29 46       	LD        R6, [PC + #41]        ;->0x6804  :=0x7fffff
    6764:	90 d5       	ANL       R2, R0, R6
    6766:	37 11       	MOV       R3, #23
    6768:	e0 dc       	LSR       R4, R0, R3
    676a:	44 d1       	ZXT.B     R4, R4
    676c:	3f 11       	MOV       R3, #31
    676e:	e8 dc       	LSR       R5, R0, R3
    6770:	b1 d5       	ANL       R6, R1, R6
    6772:	07 11       	MOV       R0, #23
    6774:	19 dc       	LSR       R3, R1, R0
    6776:	33 d1       	ZXT.B     R3, R3
    6778:	8f 7d       	LSR       R1, #31
    677a:	0f 1f       	MOV       R0, #255
    677c:	40 70       	CMP       R4, R0
    677e:	04 f1       	JNZ       $+4                   ;->0x6786
    6780:	02 10       	MOV       R0, #2
    6782:	20 38       	CMP       R2, #0
    6784:	3e f1       	JNZ       $+62                  ;->0x6800
    6786:	0f 1f       	MOV       R0, #255
    6788:	30 70       	CMP       R3, R0
    678a:	04 f1       	JNZ       $+4                   ;->0x6792
    678c:	02 10       	MOV       R0, #2
    678e:	60 38       	CMP       R6, #0
    6790:	38 f1       	JNZ       $+56                  ;->0x6800
    6792:	00 10       	MOV       R0, #0
    6794:	40 70       	CMP       R4, R0
    6796:	05 f1       	JNZ       $+5                   ;->0x67a0
    6798:	01 10       	MOV       R0, #1
    679a:	20 38       	CMP       R2, #0
    679c:	02 f0       	JZ        $+2                   ;->0x67a0
    679e:	04 58       	MOV       R0, R4
    67a0:	30 38       	CMP       R3, #0
    67a2:	2c f1       	JNZ       $+44                  ;->0x67fa
    67a4:	71 10       	MOV       R7, #1
    67a6:	60 38       	CMP       R6, #0
    67a8:	02 f0       	JZ        $+2                   ;->0x67ac
    67aa:	e3 58       	MOV       R7, R3
    67ac:	00 38       	CMP       R0, #0
    67ae:	07 f0       	JZ        $+7                   ;->0x67bc
    67b0:	00 10       	MOV       R0, #0
    67b2:	70 70       	CMP       R7, R0
    67b4:	26 f1       	JNZ       $+38                  ;->0x6800
    67b6:	10 38       	CMP       R1, #0
    67b8:	1e f0       	JZ        $+30                  ;->0x67f4
    67ba:	16 04       	SJMP      $+22                  ;->0x67e6
    67bc:	70 38       	CMP       R7, #0
    67be:	05 f0       	JZ        $+5                   ;->0x67c8
    67c0:	01 10       	MOV       R0, #1
    67c2:	50 38       	CMP       R5, #0
    67c4:	1e f0       	JZ        $+30                  ;->0x6800
    67c6:	17 04       	SJMP      $+23                  ;->0x67f4
    67c8:	51 70       	CMP       R5, R1
    67ca:	02 f0       	JZ        $+2                   ;->0x67ce
    67cc:	0b 04       	SJMP      $+11                  ;->0x67e2
    67ce:	43 70       	CMP       R4, R3
    67d0:	02 fd       	JLE       $+2                   ;->0x67d4
    67d2:	08 04       	SJMP      $+8                   ;->0x67e2
    67d4:	43 70       	CMP       R4, R3
    67d6:	04 fa       	JGE       $+4                   ;->0x67de
    67d8:	50 38       	CMP       R5, #0
    67da:	06 f1       	JNZ       $+6                   ;->0x67e6
    67dc:	0c 04       	SJMP      $+12                  ;->0x67f4
    67de:	26 70       	CMP       R2, R6
    67e0:	05 f9       	JLS       $+5                   ;->0x67ea
    67e2:	50 38       	CMP       R5, #0
    67e4:	08 f1       	JNZ       $+8                   ;->0x67f4
    67e6:	01 10       	MOV       R0, #1
    67e8:	0c 04       	SJMP      $+12                  ;->0x6800
    67ea:	00 10       	MOV       R0, #0
    67ec:	62 70       	CMP       R6, R2
    67ee:	09 f9       	JLS       $+9                   ;->0x6800
    67f0:	50 70       	CMP       R5, R0
    67f2:	fa f1       	JNZ       $-6                   ;->0x67e6
    67f4:	00 10       	MOV       R0, #0
    67f6:	00 68       	NOT       R0, R0
    67f8:	04 04       	SJMP      $+4                   ;->0x6800
    67fa:	00 38       	CMP       R0, #0
    67fc:	dd f1       	JNZ       $-35                  ;->0x67b6
    67fe:	e5 07       	SJMP      $-27                  ;->0x67c8
    6800:	03 5e       	POP       {R6-R7}
    6802:	1d 5c       	JMP       LR
    6804:	ff ff 7f 00 	.long     0x007fffff ->008388607 

00006808 <__truncdfsf2>:
    6808:	03 5f       	PUSH      {R6-R7}
    680a:	e8 30       	SUB       SP, #8
    680c:	e0 85       	ST.W      [SP], R0
    680e:	01 21       	ST.W      [SP + #1], R1
    6810:	0e 82       	LD.W      R0, [SP]
    6812:	01 0c       	LD.W      R4, [SP + #1]
    6814:	41 41       	LD        R1, [PC + #65]        ;->0x6918  :=0xfffff
    6816:	4c d4       	ANL       R1, R4, R1
    6818:	54 11       	MOV       R5, #20
    681a:	5c dd       	LSR       R3, R4, R5
    681c:	40 47       	LD        R7, [PC + #64]        ;->0x691c  :=0x7ff
    681e:	db d5       	ANL       R3, R3, R7
    6820:	5f 11       	MOV       R5, #31
    6822:	74 dd       	LSR       R6, R4, R5
    6824:	0b 7a       	LSL       R1, #3
    6826:	5d 11       	MOV       R5, #29
    6828:	60 dd       	LSR       R4, R0, R5
    682a:	09 d7       	ORL       R1, R1, R4
    682c:	53 10       	MOV       R5, #3
    682e:	50 db       	LSL       R2, R0, R5
    6830:	6b c0       	ADD       R5, R3, #1
    6832:	fd d5       	ANL       R7, R5, R7
    6834:	71 38       	CMP       R7, #1
    6836:	37 fd       	JLE       $+55                  ;->0x68a4
    6838:	3a 44       	LD        R4, [PC + #58]        ;->0x6920  :=0x380
    683a:	23 c7       	SUB       R4, R3, R4
    683c:	5e 1f       	MOV       R5, #254
    683e:	45 70       	CMP       R4, R5
    6840:	43 fc       	JGT       $+67                  ;->0x68c6
    6842:	40 38       	CMP       R4, #0
    6844:	26 fc       	JGT       $+38                  ;->0x6890
    6846:	56 11       	MOV       R5, #22
    6848:	55 68       	NOT       R5, R5
    684a:	45 70       	CMP       R4, R5
    684c:	40 fb       	JLT       $+64                  ;->0x68cc
    684e:	0f 49       	SET       R1, #23
    6850:	35 44       	LD        R4, [PC + #53]        ;->0x6924  :=0x39e
    6852:	e4 c6       	SUB       R4, R4, R3
    6854:	35 45       	LD        R5, [PC + #53]        ;->0x6928  :=0x37e
    6856:	4f 39       	CMP       R4, #31
    6858:	0c fc       	JGT       $+12                  ;->0x6870
    685a:	5b c7       	SUB       R3, R3, R5
    685c:	02 dd       	LSR       R0, R2, R4
    685e:	c9 da       	LSL       R1, R1, R3
    6860:	d2 da       	LSL       R2, R2, R3
    6862:	40 10       	MOV       R4, #0
    6864:	ac c6       	SUB       R5, R4, R2
    6866:	95 d6       	ORL       R2, R5, R2
    6868:	97 7d       	LSR       R2, #31
    686a:	a9 d6       	ORL       R5, R1, R2
    686c:	2d d6       	ORL       R5, R5, R0
    686e:	31 04       	SJMP      $+49                  ;->0x68d0
    6870:	ed c6       	SUB       R5, R5, R3
    6872:	79 dd       	LSR       R7, R1, R5
    6874:	00 10       	MOV       R0, #0
    6876:	40 3a       	CMP       R4, #32
    6878:	04 f0       	JZ        $+4                   ;->0x6880
    687a:	2d 40       	LD        R0, [PC + #45]        ;->0x692c  :=0x35e
    687c:	1b c6       	SUB       R3, R3, R0
    687e:	c1 da       	LSL       R0, R1, R3
    6880:	90 d6       	ORL       R2, R0, R2
    6882:	40 10       	MOV       R4, #0
    6884:	ac c6       	SUB       R5, R4, R2
    6886:	95 d6       	ORL       R2, R5, R2
    6888:	3f 11       	MOV       R3, #31
    688a:	ea dc       	LSR       R5, R2, R3
    688c:	ed d7       	ORL       R5, R5, R7
    688e:	21 04       	SJMP      $+33                  ;->0x68d0
    6890:	95 7d       	LSR       R2, #29
    6892:	0b 7a       	LSL       R1, #3
    6894:	06 7a       	LSL       R0, #6
    6896:	50 10       	MOV       R5, #0
    6898:	2d c6       	SUB       R5, R5, R0
    689a:	05 d6       	ORL       R0, R5, R0
    689c:	87 7d       	LSR       R0, #31
    689e:	29 d6       	ORL       R5, R1, R0
    68a0:	ad d6       	ORL       R5, R5, R2
    68a2:	17 04       	SJMP      $+23                  ;->0x68d0
    68a4:	91 d6       	ORL       R2, R1, R2
    68a6:	30 38       	CMP       R3, #0
    68a8:	07 f1       	JNZ       $+7                   ;->0x68b6
    68aa:	51 10       	MOV       R5, #1
    68ac:	83 58       	MOV       R4, R3
    68ae:	20 38       	CMP       R2, #0
    68b0:	10 f1       	JNZ       $+16                  ;->0x68d0
    68b2:	a3 58       	MOV       R5, R3
    68b4:	0e 04       	SJMP      $+14                  ;->0x68d0
    68b6:	50 10       	MOV       R5, #0
    68b8:	4f 1f       	MOV       R4, #255
    68ba:	25 70       	CMP       R2, R5
    68bc:	0a f0       	JZ        $+10                  ;->0x68d0
    68be:	33 10       	MOV       R3, #3
    68c0:	e9 da       	LSL       R5, R1, R3
    68c2:	a9 49       	SET       R5, #25
    68c4:	06 04       	SJMP      $+6                   ;->0x68d0
    68c6:	50 10       	MOV       R5, #0
    68c8:	4f 1f       	MOV       R4, #255
    68ca:	03 04       	SJMP      $+3                   ;->0x68d0
    68cc:	51 10       	MOV       R5, #1
    68ce:	40 10       	MOV       R4, #0
    68d0:	37 10       	MOV       R3, #7
    68d2:	dd d4       	ANL       R3, R5, R3
    68d4:	06 f0       	JZ        $+6                   ;->0x68e0
    68d6:	3f 10       	MOV       R3, #15
    68d8:	dd d4       	ANL       R3, R5, R3
    68da:	34 38       	CMP       R3, #4
    68dc:	02 f0       	JZ        $+2                   ;->0x68e0
    68de:	2d c1       	ADD       R5, R5, #4
    68e0:	31 10       	MOV       R3, #1
    68e2:	9a 7b       	LSL       R3, #26
    68e4:	dd d4       	ANL       R3, R5, R3
    68e6:	08 f0       	JZ        $+8                   ;->0x68f6
    68e8:	64 c0       	ADD       R4, R4, #1
    68ea:	3f 1f       	MOV       R3, #255
    68ec:	43 70       	CMP       R4, R3
    68ee:	03 f0       	JZ        $+3                   ;->0x68f4
    68f0:	aa 4b       	CLR       R5, #26
    68f2:	02 04       	SJMP      $+2                   ;->0x68f6
    68f4:	50 10       	MOV       R5, #0
    68f6:	2b 7c       	LSR       R5, #3
    68f8:	3f 1f       	MOV       R3, #255
    68fa:	43 70       	CMP       R4, R3
    68fc:	04 f1       	JNZ       $+4                   ;->0x6904
    68fe:	50 38       	CMP       R5, #0
    6900:	02 f0       	JZ        $+2                   ;->0x6904
    6902:	2e 49       	SET       R5, #22
    6904:	44 d1       	ZXT.B     R4, R4
    6906:	27 7b       	LSL       R4, #23
    6908:	0a 40       	LD        R0, [PC + #10]        ;->0x6930  :=0x7fffff
    690a:	2d d4       	ANL       R5, R5, R0
    690c:	b7 7b       	LSL       R6, #31
    690e:	05 d7       	ORL       R0, R5, R4
    6910:	80 d7       	ORL       R0, R0, R6
    6912:	e8 28       	ADD       SP, #8
    6914:	03 5e       	POP       {R6-R7}
    6916:	1d 5c       	JMP       LR
    6918:	ff ff 0f 00 	.long     0x000fffff ->001048575 
    691c:	ff 07 00 00 	.long     0x000007ff ->000002047  [!!!@2@:SJMP      $-1                   ;->0x691a	@@: NOP      
    6920:	80 03 00 00 	.long     0x00000380 ->000000896  [!!!@4@:JMP       $-8388608             ;->0xff006920
    6924:	9e 03 00 00 	.long     0x0000039e ->000000926  [!!!@4@:JMP       $-6422528             ;->0xff3c6924
    6928:	7e 03 00 00 	.long     0x0000037e ->000000894  [!!!@4@:JMP       $+8257536             ;->0xfc6928
    692c:	5e 03 00 00 	.long     0x0000035e ->000000862  [!!!@4@:JMP       $+6160384             ;->0xbc692c
    6930:	ff ff 7f 00 	.long     0x007fffff ->008388607 

00006934 <__init_class_end>:
    6934:	4e 6f       	ROR       R4, SP
    6936:	76 20       	ST.W      [SP + #118], R0
    6938:	32 35       	SUB       R3, #82
    693a:	20 32       	SUB       R2, #32
    693c:	30 32       	SUB       R3, #32
    693e:	30 31       	SUB       R3, #16
    6940:	36 3a       	CMP       R3, #38
    6942:	34 39       	CMP       R3, #20
    6944:	3a 30       	SUB       R3, #10
    6946:	38 00       	.short    0x0038

00006948 <parameterIdTable>:
    6948:	01 00 00 00 80 1d 00 10 00 00 00 00 00 00 00 00     ................

00006958 <blockFunctionTable>:
    6958:	ff ff 00 00 d4 55 00 00 54 55 00 00 0c 58 00 00     .....U..TU...X..
    6968:	b8 58 00 00 6a 5e 00 00 00 00 00 00 00 00 00 00     .X..j^..........
	...

00006988 <ctype_tab>:
    6988:	00 80 80 80 80 80 80 80 80 80 40 40 40 40 40 80     ..........@@@@@.
    6998:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    69a8:	80 04 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    69b8:	08 21 21 21 21 21 21 21 21 21 21 08 08 08 08 08     .!!!!!!!!!!.....
    69c8:	08 08 03 03 03 03 03 03 02 02 02 02 02 02 02 02     ................
    69d8:	02 02 02 02 02 02 02 02 02 02 02 02 08 08 08 08     ................
    69e8:	08 08 11 11 11 11 11 11 10 10 10 10 10 10 10 10     ................
    69f8:	10 10 10 10 10 10 10 10 10 10 10 10 08 08 08 08     ................
    6a08:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section .data:

10000000 <adc_result_calc>:
adc_result_calc():
..\driver\driver_adc.c:187


volatile int16_t adc_buf[12];
void __attribute__((section(".indata"))) adc_result_calc(void)
{
	adc_buf[0] = ADC0_SFR->HPDATA0;  //Ia
10000000:	21 44       	LD        R4, [PC + #33]        ;->0x10000084  :=0x40000580
10000002:	5c 9a       	LD.W      R3, [R4 + #9]
10000004:	33 d0       	ZXT.H     R3, R3
10000006:	21 45       	LD        R5, [PC + #33]        ;->0x10000088  :=0x10003e00
10000008:	53 84       	ST.H      [R5], R3
..\driver\driver_adc.c:188
	adc_buf[1] = ADC0_SFR->HPDATA1;  //Vu
1000000a:	9c 9a       	LD.W      R3, [R4 + #10]
1000000c:	33 d0       	ZXT.H     R3, R3
1000000e:	6b b0       	ST.H      [R5 + #1], R3
..\driver\driver_adc.c:189
	adc_buf[2] = ADC0_SFR->HPDATA2;  //Vm
10000010:	dc 9a       	LD.W      R3, [R4 + #11]
10000012:	33 d0       	ZXT.H     R3, R3
10000014:	ab b0       	ST.H      [R5 + #2], R3
..\driver\driver_adc.c:190
	adc_buf[3] = ADC0_SFR->HPDATA3;  //Ibus
10000016:	24 9b       	LD.W      R4, [R4 + #12]
10000018:	44 d0       	ZXT.H     R4, R4
1000001a:	ec b0       	ST.H      [R5 + #3], R4
..\driver\driver_adc.c:191
    adc_buf[4] = ADC1_SFR->HPDATA0;  //Ib
1000001c:	1c 44       	LD        R4, [PC + #28]        ;->0x1000008c  :=0x40000600
1000001e:	5c 9a       	LD.W      R3, [R4 + #9]
10000020:	33 d0       	ZXT.H     R3, R3
10000022:	2b b1       	ST.H      [R5 + #4], R3
..\driver\driver_adc.c:192
	adc_buf[5] = ADC1_SFR->HPDATA1;  //Vv
10000024:	9c 9a       	LD.W      R3, [R4 + #10]
10000026:	33 d0       	ZXT.H     R3, R3
10000028:	6b b1       	ST.H      [R5 + #5], R3
..\driver\driver_adc.c:193
	adc_buf[6] = ADC1_SFR->HPDATA2;  //Vbus
1000002a:	dc 9a       	LD.W      R3, [R4 + #11]
1000002c:	33 d0       	ZXT.H     R3, R3
1000002e:	ab b1       	ST.H      [R5 + #6], R3
..\driver\driver_adc.c:194
	adc_buf[7] = ADC1_SFR->HPDATA3;  //Ibus_avg
10000030:	24 9b       	LD.W      R4, [R4 + #12]
10000032:	44 d0       	ZXT.H     R4, R4
10000034:	ec b1       	ST.H      [R5 + #7], R4
..\driver\driver_adc.c:195
    adc_buf[8] = ADC2_SFR->HPDATA0;  //Ic
10000036:	17 44       	LD        R4, [PC + #23]        ;->0x10000090  :=0x40000680
10000038:	5c 9a       	LD.W      R3, [R4 + #9]
1000003a:	33 d0       	ZXT.H     R3, R3
1000003c:	2b b2       	ST.H      [R5 + #8], R3
..\driver\driver_adc.c:196
	adc_buf[9] = ADC2_SFR->HPDATA1;  //Vw
1000003e:	9c 9a       	LD.W      R3, [R4 + #10]
10000040:	33 d0       	ZXT.H     R3, R3
10000042:	6b b2       	ST.H      [R5 + #9], R3
..\driver\driver_adc.c:197
	adc_buf[10] = ADC2_SFR->HPDATA2; //pot
10000044:	e4 9a       	LD.W      R4, [R4 + #11]
10000046:	44 d0       	ZXT.H     R4, R4
10000048:	ac b2       	ST.H      [R5 + #10], R4
..\driver\driver_adc.c:200
	//adc_buf[11] = ADC2_SFR->HPDATA3;
    //transitions
    adc_data.Ia_pu = adc_buf[0];
1000004a:	35 81       	LD.H      R3, [R5]
1000004c:	33 d0       	ZXT.H     R3, R3
1000004e:	12 44       	LD        R4, [PC + #18]        ;->0x10000094  :=0x10003e18
10000050:	a3 b1       	ST.H      [R4 + #6], R3
..\driver\driver_adc.c:201
    adc_data.Ib_pu = adc_buf[4];
10000052:	1d a9       	LD.H      R3, [R5 + #4]
10000054:	33 d0       	ZXT.H     R3, R3
10000056:	e3 b1       	ST.H      [R4 + #7], R3
..\driver\driver_adc.c:203
//    adc_data.Ic_pu = adc_buf[0];
    adc_data.Vu_pu = adc_buf[1];
10000058:	5d a8       	LD.H      R3, [R5 + #1]
1000005a:	33 d0       	ZXT.H     R3, R3
1000005c:	63 b2       	ST.H      [R4 + #9], R3
..\driver\driver_adc.c:204
    adc_data.Vv_pu = adc_buf[5];
1000005e:	5d a9       	LD.H      R3, [R5 + #5]
10000060:	33 d0       	ZXT.H     R3, R3
10000062:	a3 b2       	ST.H      [R4 + #10], R3
..\driver\driver_adc.c:205
    adc_data.Vw_pu = adc_buf[9];
10000064:	5d aa       	LD.H      R3, [R5 + #9]
10000066:	33 d0       	ZXT.H     R3, R3
10000068:	e3 b2       	ST.H      [R4 + #11], R3
..\driver\driver_adc.c:206
    adc_data.Vm_pu = adc_buf[8];
1000006a:	1d aa       	LD.H      R3, [R5 + #8]
1000006c:	33 d0       	ZXT.H     R3, R3
1000006e:	23 b3       	ST.H      [R4 + #12], R3
..\driver\driver_adc.c:207
    adc_data.Vbus_pu = adc_buf[6];
10000070:	9d a9       	LD.H      R3, [R5 + #6]
10000072:	33 d0       	ZXT.H     R3, R3
10000074:	63 b3       	ST.H      [R4 + #13], R3
..\driver\driver_adc.c:208
    adc_data.pot_pu = adc_buf[10];
10000076:	9d aa       	LD.H      R3, [R5 + #10]
10000078:	33 d0       	ZXT.H     R3, R3
1000007a:	23 b4       	ST.H      [R4 + #16], R3
..\driver\driver_adc.c:209
    adc_data.Ibus_pu = adc_buf[3];
1000007c:	ed a8       	LD.H      R5, [R5 + #3]
1000007e:	55 d0       	ZXT.H     R5, R5
10000080:	a5 b3       	ST.H      [R4 + #14], R5
..\driver\driver_adc.c:211
   // adc_data.Ibus_avg_pu = adc_buf[7];
}
10000082:	1d 5c       	JMP       LR
10000084:	80 05 00 40 	.long     0x40000580 ->1073743232  [!!!@2@:SJMP      $+384                 ;->0x10000384	@@: LD        R0, [PC + #0]         ;->0x10000084  :=0x40000580
10000088:	00 3e 00 10 	.long     0x10003e00 ->268451328  [!!!@2@:CMP       R0, #96	@@: MOV       R0, #0
1000008c:	00 06 00 40 	.long     0x40000600 ->1073743360  [!!!@2@:SJMP      $-512                 ;->0xffffc8c	@@: LD        R0, [PC + #0]         ;->0x1000008c  :=0x40000600
10000090:	80 06 00 40 	.long     0x40000680 ->1073743488  [!!!@2@:SJMP      $-384                 ;->0xffffd90	@@: LD        R0, [PC + #0]         ;->0x10000090  :=0x40000680
10000094:	18 3e 00 10 	.long     0x10003e18 ->268451352  [!!!@2@:CMP       R1, #104	@@: MOV       R0, #0

10000098 <DoControl>:
DoControl():
..\application\control.c:36
    }
}


void __attribute__((section(".indata"))) DoControl( void )
{
10000098:	87 5f       	PUSH      {R6-R8,LR}
..\application\control.c:38
    //state process
    if(sys_control.state_mode!=STATE_RUN_OPEN_DEBUG)
1000009a:	17 45       	LD        R5, [PC + #23]        ;->0x100000f4  :=0x10003eb8
1000009c:	6d 98       	LD.W      R5, [R5 + #1]
1000009e:	54 38       	CMP       R5, #4
100000a0:	26 f0       	JZ        $+38                  ;->0x100000ec
..\application\control.c:40
    {
   	   PIParmD.qErr = ParkParm.qVdRef - ParkParm.qId;//测量值
100000a2:	16 46       	LD        R6, [PC + #22]        ;->0x100000f8  :=0x10003f4c
100000a4:	26 ac       	LD.H      R4, [R6 + #16]
100000a6:	ee a9       	LD.H      R5, [R6 + #7]
100000a8:	44 61       	SXT.H     R4, R4
100000aa:	55 61       	SXT.H     R5, R5
100000ac:	6c c7       	SUB       R5, R4, R5
100000ae:	14 47       	LD        R7, [PC + #20]        ;->0x100000fc  :=0x10003f30
100000b0:	75 85       	ST.W      [R7], R5
..\application\control.c:41
       CalcPI(&PIParmD);
100000b2:	07 58       	MOV       R0, R7
100000b4:	13 45       	LD        R5, [PC + #19]        ;->0x10000100  :=0x100006c4
100000b6:	05 59       	MOV       R8, R5
100000b8:	05 5c       	LJMP      R5
..\application\control.c:42
	   ParkParm.qVd = PIParmD.qOut;
100000ba:	af 99       	LD.W      R5, [R7 + #6]
100000bc:	55 d0       	ZXT.H     R5, R5
100000be:	75 b2       	ST.H      [R6 + #9], R5
..\application\control.c:43
	   Q15SQRT_VqMax(USER_MAX_VS_MAG*USER_MAX_VS_MAG-ParkParm.qVd*ParkParm.qVd);
100000c0:	46 aa       	LD.H      R0, [R6 + #9]
100000c2:	6e aa       	LD.H      R5, [R6 + #9]
100000c4:	00 61       	SXT.H     R0, R0
100000c6:	55 61       	SXT.H     R5, R5
100000c8:	40 cb       	MULS      R0, R0, R5
100000ca:	00 00       	NOP      NOP      
100000cc:	0e 45       	LD        R5, [PC + #14]        ;->0x10000104  :=0x3220a440
100000ce:	05 c6       	SUB       R0, R5, R0
100000d0:	0e 45       	LD        R5, [PC + #14]        ;->0x10000108  :=0x10000a7c
100000d2:	05 5c       	LJMP      R5
..\application\control.c:44
       PIParmQ.qErr = ParkParm.qVqRef - ParkParm.qIq;//测量值
100000d4:	66 ac       	LD.H      R4, [R6 + #17]
100000d6:	2e aa       	LD.H      R5, [R6 + #8]
100000d8:	44 61       	SXT.H     R4, R4
100000da:	55 61       	SXT.H     R5, R5
100000dc:	6c c7       	SUB       R5, R4, R5
100000de:	0c 47       	LD        R7, [PC + #12]        ;->0x1000010c  :=0x10003f14
100000e0:	75 85       	ST.W      [R7], R5
..\application\control.c:45
       CalcPI(&PIParmQ);
100000e2:	07 58       	MOV       R0, R7
100000e4:	08 5c       	LJMP      R8
..\application\control.c:46
       ParkParm.qVq = PIParmQ.qOut;
100000e6:	af 99       	LD.W      R5, [R7 + #6]
100000e8:	55 d0       	ZXT.H     R5, R5
100000ea:	b5 b2       	ST.H      [R6 + #10], R5
..\application\control.c:48
	}
}
100000ec:	07 5e       	POP       {R6-R8}
100000ee:	0d 5d       	POP       LR
100000f0:	1d 5c       	JMP       LR
100000f2:	00 00       	NOP      NOP      
100000f4:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
100000f8:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
100000fc:	30 3f 00 10 	.long     0x10003f30 ->268451632  [!!!@2@:CMP       R3, #112	@@: MOV       R0, #0

10000100 <__Heap_length__>:
10000100:	c4 06 00 10 	.long     0x100006c4 ->268437188  [!!!@2@:SJMP      $-316                 ;->0xffffe88	@@: MOV       R0, #0
10000104:	40 a4 20 32 	.long     0x3220a440 ->841000000  [!!!@2@:ST.W      [R0 + #17], R0	@@: SUB       R2, #32
10000108:	7c 0a 00 10 	.long     0x10000a7c ->268438140  [!!!@2@:LD.W      R2, [SP + #124]	@@: MOV       R0, #0
1000010c:	14 3f 00 10 	.long     0x10003f14 ->268451604  [!!!@2@:CMP       R1, #116	@@: MOV       R0, #0

10000110 <motor_control_isr>:
motor_control_isr():
..\application\control.c:10

volatile SYS_CONTROL_TYPE sys_control;
volatile CONTROL_PARAM_TYPE control_param;

void __attribute__((section(".indata"))) motor_control_isr(void)
{
10000110:	81 5f       	PUSH      {R6,LR}
..\application\control.c:11
	adc_result_calc();
10000112:	05 45       	LD        R5, [PC + #5]         ;->0x10000124  :=0x10000000
10000114:	05 5c       	LJMP      R5
..\application\control.c:12
	if(sys_control.sys_enable_flag==TRUE)
10000116:	05 46       	LD        R6, [PC + #5]         ;->0x10000128  :=0x10003eb8
10000118:	56 80       	LD.B      R5, [R6]
1000011a:	51 38       	CMP       R5, #1
1000011c:	08 f0       	JZ        $+8                   ;->0x1000012c
..\application\control.c:32
		     CalcSVGen();
		     break;
        default: break;
        }
    }
}
1000011e:	06 5d       	POP       R6
10000120:	0d 5d       	POP       LR
10000122:	1d 5c       	JMP       LR
10000124:	00 00 00 10 	.long     0x10000000 ->268435456  [!!!@2@:NOP      	@@: MOV       R0, #0
10000128:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
..\application\control.c:14
void __attribute__((section(".indata"))) motor_control_isr(void)
{
	adc_result_calc();
	if(sys_control.sys_enable_flag==TRUE)
    {
        ParkParm.qIa = adc_data.Ia_pu;
1000012c:	0d 44       	LD        R4, [PC + #13]        ;->0x10000160  :=0x10003e18
1000012e:	9c a9       	LD.H      R3, [R4 + #6]
10000130:	33 d0       	ZXT.H     R3, R3
10000132:	0d 45       	LD        R5, [PC + #13]        ;->0x10000164  :=0x10003f4c
10000134:	eb b0       	ST.H      [R5 + #3], R3
..\application\control.c:15
        ParkParm.qIb = adc_data.Ib_pu;
10000136:	e4 a9       	LD.H      R4, [R4 + #7]
10000138:	44 d0       	ZXT.H     R4, R4
1000013a:	2c b1       	ST.H      [R5 + #4], R4
..\application\control.c:16
        over_current_check();
1000013c:	0b 45       	LD        R5, [PC + #11]        ;->0x10000168  :=0x3768
1000013e:	05 5c       	LJMP      R5
..\application\control.c:17
        switch(sys_control.state_mode)
10000140:	6e 98       	LD.W      R5, [R6 + #1]
10000142:	2d cd       	SUB       R5, R5, #4
10000144:	53 38       	CMP       R5, #3
10000146:	ec f8       	JHI       $-20                  ;->0x1000011e
..\application\control.c:23
        {
        case STATE_RUN_OPEN_DEBUG:
        case STATE_RUN_OPEN_LOOP:
        case STATE_RUN_CURRENT_LOOP:
        case STATE_RUN_SPEED_LOOP:
		     ClarkePark();
10000148:	09 45       	LD        R5, [PC + #9]         ;->0x1000016c  :=0x10000668
1000014a:	05 5c       	LJMP      R5
..\application\control.c:24
		     CalculateParkAngle();
1000014c:	09 45       	LD        R5, [PC + #9]         ;->0x10000170  :=0x100003c8
1000014e:	05 5c       	LJMP      R5
..\application\control.c:25
		     DoControl();
10000150:	09 45       	LD        R5, [PC + #9]         ;->0x10000174  :=0x10000098
10000152:	05 5c       	LJMP      R5
..\application\control.c:26
		     SinCos();
10000154:	09 45       	LD        R5, [PC + #9]         ;->0x10000178  :=0x10000af8
10000156:	05 5c       	LJMP      R5
..\application\control.c:27
		     CalcSVGen();
10000158:	09 45       	LD        R5, [PC + #9]         ;->0x1000017c  :=0x10000514
1000015a:	05 5c       	LJMP      R5
..\application\control.c:28
		     break;
1000015c:	e1 07       	SJMP      $-31                  ;->0x1000011e
1000015e:	00 00       	NOP      NOP      
10000160:	18 3e 00 10 	.long     0x10003e18 ->268451352  [!!!@2@:CMP       R1, #104	@@: MOV       R0, #0
10000164:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
10000168:	68 37 00 00 	.long     0x00003768 ->000014184  [!!!@2@:SUB       R6, #120	@@: NOP      
1000016c:	68 06 00 10 	.long     0x10000668 ->268437096  [!!!@2@:SJMP      $-408                 ;->0xffffe3c	@@: MOV       R0, #0
10000170:	c8 03 00 10 	.long     0x100003c8 ->268436424  [!!!@4@:JMP       $-3665920             ;->0xf902170
10000174:	98 00 00 10 	.long     0x10000098 ->268435608  [!!!@4@:LJMP      $-520192              ;->0xff02174
10000178:	f8 0a 00 10 	.long     0x10000af8 ->268438264  [!!!@2@:LD.W      R2, [SP + #248]	@@: MOV       R0, #0
1000017c:	14 05 00 10 	.long     0x10000514 ->268436756  [!!!@2@:SJMP      $+276                 ;->0x100003a4	@@: MOV       R0, #0

10000180 <run_speed_process>:
run_speed_process():
..\application\speed.c:57
	PIParmW.qdSum = (int32_t)ParkParm.qVqRef<<15;
	sys_control.speed_mode = SPEED_STATE_RUN;
}

void __attribute__((section(".indata"))) run_speed_process(void)
{
10000180:	87 5f       	PUSH      {R6-R8,LR}
..\application\speed.c:59
	//speed command process
	speed_data.omega_give_ref_pu = (speed_data.speed_give*speed_data.speed_omega_q15_coef)>>10;
10000182:	1d 46       	LD        R6, [PC + #29]        ;->0x100001f4  :=0x10003f80
10000184:	26 82       	LD.W      R2, [R6]
10000186:	5e 9b       	LD.W      R3, [R6 + #13]
10000188:	e2 ca       	MULS      R4, R2, R3
1000018a:	00 00       	NOP      NOP      
1000018c:	a2 78       	ASR       R4, #10
1000018e:	f4 a0       	ST.W      [R6 + #3], R4
..\application\speed.c:61
	//speed_limit
	if(control_param.motor_direction==USER_MOTOR_RUN_CW)
10000190:	1a 45       	LD        R5, [PC + #26]        ;->0x100001f8  :=0x10003ea4
10000192:	55 80       	LD.B      R5, [R5]
10000194:	50 38       	CMP       R5, #0
10000196:	3b f1       	JNZ       $+59                  ;->0x1000020c
..\application\speed.c:63
	{
	    if(speed_data.omega_give_ref_pu>speed_data.omega_max_pu)
10000198:	ae 9a       	LD.W      R5, [R6 + #10]
1000019a:	45 70       	CMP       R4, R5
1000019c:	4c fd       	JLE       $+76                  ;->0x10000234
..\application\speed.c:76
	}
	else //CCW
	{
		if(speed_data.omega_give_ref_pu<(-speed_data.omega_max_pu))
		{
			speed_data.omega_give_ref_pu = -speed_data.omega_max_pu;
1000019e:	f5 a0       	ST.W      [R6 + #3], R5
100001a0:	85 58       	MOV       R4, R5
..\application\speed.c:84
		{
			speed_data.omega_give_ref_pu = -speed_data.omega_min_pu;
		}
	}
	//speed ACC control
	if((speed_data.omega_give_ref_pu-speed_data.omega_give_pu)>speed_data.omega_acc_pu)
100001a2:	15 41       	LD        R1, [PC + #21]        ;->0x100001f4  :=0x10003f80
100001a4:	2e 99       	LD.W      R5, [R6 + #4]
100001a6:	1e 9a       	LD.W      R3, [R6 + #8]
100001a8:	54 c7       	SUB       R2, R4, R5
100001aa:	23 70       	CMP       R2, R3
100001ac:	41 fc       	JGT       $+65                  ;->0x1000022e
..\application\speed.c:88
	{
		speed_data.omega_give_pu += speed_data.omega_acc_pu;
	}
	else if((speed_data.omega_give_pu-speed_data.omega_give_ref_pu)>speed_data.omega_acc_pu)
100001ae:	25 c7       	SUB       R4, R5, R4
100001b0:	34 70       	CMP       R3, R4
100001b2:	03 fa       	JGE       $+3                   ;->0x100001b8
..\application\speed.c:90
	{
		speed_data.omega_give_pu -= speed_data.omega_acc_pu;
100001b4:	ed c6       	SUB       R5, R5, R3
100001b6:	0d a1       	ST.W      [R1 + #4], R5
..\application\speed.c:93
	}
	//speed PI control
	speed_data.omega_fbk_pu = ((int32_t)smc1.Omega*speed_data.omega_q15_coef)>>10;
100001b8:	11 42       	LD        R2, [PC + #17]        ;->0x100001fc  :=0x10003ec4
100001ba:	02 59       	MOV       R8, R2
100001bc:	e2 ad       	LD.H      R4, [R2 + #23]
100001be:	44 61       	SXT.H     R4, R4
100001c0:	de 99       	LD.W      R3, [R6 + #7]
100001c2:	e4 ca       	MULS      R4, R4, R3
100001c4:	00 00       	NOP      NOP      
100001c6:	a2 78       	ASR       R4, #10
100001c8:	74 a1       	ST.W      [R6 + #5], R4
..\application\speed.c:94
	PIParmW.qErr = speed_data.omega_give_pu - speed_data.omega_fbk_pu;
100001ca:	2d c7       	SUB       R5, R5, R4
100001cc:	0d 47       	LD        R7, [PC + #13]        ;->0x10000200  :=0x10003ef8
100001ce:	75 85       	ST.W      [R7], R5
..\application\speed.c:95
	CalcPI(&PIParmW);
100001d0:	07 58       	MOV       R0, R7
100001d2:	0d 45       	LD        R5, [PC + #13]        ;->0x10000204  :=0x100006c4
100001d4:	05 5c       	LJMP      R5
..\application\speed.c:96
	ParkParm.qVqRef = PIParmW.qOut;
100001d6:	a7 99       	LD.W      R4, [R7 + #6]
100001d8:	44 d0       	ZXT.H     R4, R4
100001da:	0c 45       	LD        R5, [PC + #12]        ;->0x10000208  :=0x10003f4c
100001dc:	6c b4       	ST.H      [R5 + #17], R4
..\application\speed.c:98
	//speed fbk
	speed_data.speed_fbk = ((int32_t)smc1.Omega<<10)/speed_data.speed_omega_coef;
100001de:	88 58       	MOV       R4, R8
100001e0:	ec ad       	LD.H      R5, [R4 + #23]
100001e2:	55 61       	SXT.H     R5, R5
100001e4:	aa 7a       	LSL       R5, #10
100001e6:	16 9b       	LD.W      R2, [R6 + #12]
100001e8:	ad ce       	DIVS      R5, R5, R2
100001ea:	00 00       	NOP      NOP      
100001ec:	75 a0       	ST.W      [R6 + #1], R5
..\application\speed.c:99
}
100001ee:	07 5e       	POP       {R6-R8}
100001f0:	0d 5d       	POP       LR
100001f2:	1d 5c       	JMP       LR
100001f4:	80 3f 00 10 	.long     0x10003f80 ->268451712  [!!!@2@:CMP       R8, #112	@@: MOV       R0, #0
100001f8:	a4 3e 00 10 	.long     0x10003ea4 ->268451492  [!!!@2@:CMP       R10, #100	@@: MOV       R0, #0
100001fc:	c4 3e 00 10 	.long     0x10003ec4 ->268451524  [!!!@2@:CMP       R12, #100	@@: MOV       R0, #0
10000200:	f8 3e 00 10 	.long     0x10003ef8 ->268451576  [!!!@2@:CMP       PC, #104	@@: MOV       R0, #0
10000204:	c4 06 00 10 	.long     0x100006c4 ->268437188  [!!!@2@:SJMP      $-316                 ;->0xfffff8c	@@: MOV       R0, #0
10000208:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
..\application\speed.c:74
		    speed_data.omega_give_ref_pu = speed_data.omega_min_pu;
	    }
	}
	else //CCW
	{
		if(speed_data.omega_give_ref_pu<(-speed_data.omega_max_pu))
1000020c:	30 10       	MOV       R3, #0
1000020e:	96 9a       	LD.W      R2, [R6 + #10]
10000210:	ab c6       	SUB       R5, R3, R2
10000212:	45 70       	CMP       R4, R5
10000214:	c5 fb       	JLT       $-59                  ;->0x1000019e
..\application\speed.c:78
		{
			speed_data.omega_give_ref_pu = -speed_data.omega_max_pu;
		}
		else if(speed_data.omega_give_ref_pu>(-speed_data.omega_min_pu))
10000216:	6e 9a       	LD.W      R5, [R6 + #9]
10000218:	5b c7       	SUB       R3, R3, R5
1000021a:	43 70       	CMP       R4, R3
1000021c:	c3 fd       	JLE       $-61                  ;->0x100001a2
..\application\speed.c:80
		{
			speed_data.omega_give_ref_pu = -speed_data.omega_min_pu;
1000021e:	f3 a0       	ST.W      [R6 + #3], R3
10000220:	83 58       	MOV       R4, R3
..\application\speed.c:84
		}
	}
	//speed ACC control
	if((speed_data.omega_give_ref_pu-speed_data.omega_give_pu)>speed_data.omega_acc_pu)
10000222:	07 41       	LD        R1, [PC + #7]         ;->0x1000023c  :=0x10003f80
10000224:	2e 99       	LD.W      R5, [R6 + #4]
10000226:	1e 9a       	LD.W      R3, [R6 + #8]
10000228:	54 c7       	SUB       R2, R4, R5
1000022a:	23 70       	CMP       R2, R3
1000022c:	c1 fd       	JLE       $-63                  ;->0x100001ae
..\application\speed.c:86
	{
		speed_data.omega_give_pu += speed_data.omega_acc_pu;
1000022e:	ed c2       	ADD       R5, R5, R3
10000230:	0d a1       	ST.W      [R1 + #4], R5
10000232:	c3 07       	SJMP      $-61                  ;->0x100001b8
..\application\speed.c:67
	{
	    if(speed_data.omega_give_ref_pu>speed_data.omega_max_pu)
	    {
		    speed_data.omega_give_ref_pu = speed_data.omega_max_pu;
	    }
	    else if(speed_data.omega_give_ref_pu<speed_data.omega_min_pu)
10000234:	6e 9a       	LD.W      R5, [R6 + #9]
10000236:	45 70       	CMP       R4, R5
10000238:	b5 fa       	JGE       $-75                  ;->0x100001a2
1000023a:	b2 07       	SJMP      $-78                  ;->0x1000019e
1000023c:	80 3f 00 10 	.long     0x10003f80 ->268451712  [!!!@2@:CMP       R8, #112	@@: MOV       R0, #0

10000240 <SMC_Position_Estimation>:
SMC_Position_Estimation():
..\application\angle_est.c:12

#include "application_init.h"


void __attribute__((section(".indata"))) SMC_Position_Estimation(SMC *s)
{
10000240:	87 5f       	PUSH      {R6-R8,LR}
10000242:	c0 58       	MOV       R6, R0
..\application\angle_est.c:13
	CalcEstI();//估算的Ialpha、Ibeta值
10000244:	41 45       	LD        R5, [PC + #65]        ;->0x10000348  :=0x10000708
10000246:	05 5c       	LJMP      R5
..\application\angle_est.c:14
	CalcIError();//计算Ialpha、Ibeta的偏差值（估算-实际）
10000248:	41 45       	LD        R5, [PC + #65]        ;->0x1000034c  :=0x10000802
1000024a:	05 5c       	LJMP      R5
..\application\angle_est.c:15
	if (Q15abs(s->IalphaError) < s->MaxSMCError)
1000024c:	46 ab       	LD.H      R0, [R6 + #13]
1000024e:	00 61       	SXT.H     R0, R0
10000250:	40 47       	LD        R7, [PC + #64]        ;->0x10000350  :=0x100004e4
10000252:	07 5c       	LJMP      R7
10000254:	ee ab       	LD.H      R5, [R6 + #15]
10000256:	55 61       	SXT.H     R5, R5
10000258:	05 70       	CMP       R0, R5
1000025a:	02 fa       	JGE       $+2                   ;->0x1000025e
1000025c:	96 04       	SJMP      $+150                 ;->0x10000388
..\application\angle_est.c:20
	{
		//如果处于滑动控制器的线性范围，那么矫正因数Zalpha将会和偏差IalphaError成比例
		CalcZalpha();
	}
	else if (s->IalphaError > 0)
1000025e:	6e ab       	LD.H      R5, [R6 + #13]
10000260:	55 61       	SXT.H     R5, R5
10000262:	50 38       	CMP       R5, #0
10000264:	02 fc       	JGT       $+2                   ;->0x10000268
10000266:	a5 04       	SJMP      $+165                 ;->0x100003b0
..\application\angle_est.c:21
		s->Zalpha = s->Kslide;
10000268:	ae ab       	LD.H      R5, [R6 + #14]
1000026a:	55 d0       	ZXT.H     R5, R5
1000026c:	f5 b0       	ST.H      [R6 + #3], R5
..\application\angle_est.c:25
	else
		s->Zalpha = -s->Kslide;

	if(Q15abs(s->IbetaError) < s->MaxSMCError)
1000026e:	46 ac       	LD.H      R0, [R6 + #17]
10000270:	00 61       	SXT.H     R0, R0
10000272:	07 5c       	LJMP      R7
10000274:	ee ab       	LD.H      R5, [R6 + #15]
10000276:	55 61       	SXT.H     R5, R5
10000278:	05 70       	CMP       R0, R5
1000027a:	02 fa       	JGE       $+2                   ;->0x1000027e
1000027c:	90 04       	SJMP      $+144                 ;->0x1000039c
..\application\angle_est.c:30
	{
		// 如果处于滑动控制器的线性范围，那么矫正因数Zbeta将会和偏差IbetaError成比例
		CalcZbeta();// s->Zbeta = (s->Kslide * s->IbetaError) / s->MaxSMCError
	}
	else if (s->IbetaError > 0)
1000027e:	6e ac       	LD.H      R5, [R6 + #17]
10000280:	55 61       	SXT.H     R5, R5
10000282:	50 38       	CMP       R5, #0
10000284:	02 fc       	JGT       $+2                   ;->0x10000288
10000286:	8e 04       	SJMP      $+142                 ;->0x100003a2
..\application\angle_est.c:31
		s->Zbeta = s->Kslide;
10000288:	ae ab       	LD.H      R5, [R6 + #14]
1000028a:	55 d0       	ZXT.H     R5, R5
1000028c:	b5 b2       	ST.H      [R6 + #10], R5
..\application\angle_est.c:35
	else
		s->Zbeta = -s->Kslide;

	CalcBEMF();
1000028e:	32 45       	LD        R5, [PC + #50]        ;->0x10000354  :=0x100008dc
10000290:	05 5c       	LJMP      R5
..\application\angle_est.c:37

	s->Theta = atan2CORDIC(-s->EalphaFinal,s->EbetaFinal);
10000292:	86 a8       	LD.H      R0, [R6 + #2]
10000294:	00 d0       	ZXT.H     R0, R0
10000296:	4e aa       	LD.H      R1, [R6 + #9]
10000298:	80 10       	MOV       R8, #0
1000029a:	a8 58       	MOV       R5, R8
1000029c:	05 c6       	SUB       R0, R5, R0
1000029e:	00 61       	SXT.H     R0, R0
100002a0:	11 61       	SXT.H     R1, R1
100002a2:	2e 45       	LD        R5, [PC + #46]        ;->0x10000358  :=0x4144
100002a4:	05 5c       	LJMP      R5
100002a6:	00 d0       	ZXT.H     R0, R0
100002a8:	b0 b5       	ST.H      [R6 + #22], R0
..\application\angle_est.c:38
	control_param.accum_theta += (s->Theta-control_param.prev_theta);
100002aa:	2d 47       	LD        R7, [PC + #45]        ;->0x1000035c  :=0x10003e84
100002ac:	5f ad       	LD.H      R3, [R7 + #21]
100002ae:	33 d0       	ZXT.H     R3, R3
100002b0:	ae ad       	LD.H      R5, [R6 + #22]
100002b2:	55 d0       	ZXT.H     R5, R5
100002b4:	27 ad       	LD.H      R4, [R7 + #20]
100002b6:	ed c2       	ADD       R5, R5, R3
100002b8:	2d c7       	SUB       R5, R5, R4
100002ba:	55 d0       	ZXT.H     R5, R5
100002bc:	7d b5       	ST.H      [R7 + #21], R5
..\application\angle_est.c:39
	control_param.prev_theta = s->Theta;
100002be:	ae ad       	LD.H      R5, [R6 + #22]
100002c0:	55 d0       	ZXT.H     R5, R5
100002c2:	3d b5       	ST.H      [R7 + #20], R5
..\application\angle_est.c:41

	control_param.accum_theta_count++;
100002c4:	af ad       	LD.H      R5, [R7 + #22]
100002c6:	6d c0       	ADD       R5, R5, #1
100002c8:	55 d0       	ZXT.H     R5, R5
100002ca:	bd b5       	ST.H      [R7 + #22], R5
..\application\angle_est.c:42
	if (control_param.accum_theta_count >= control_param.IRP_per_calc)
100002cc:	a7 ad       	LD.H      R4, [R7 + #22]
100002ce:	25 45       	LD        R5, [PC + #37]        ;->0x10000360  :=0x10003ea7
100002d0:	55 80       	LD.B      R5, [R5]
100002d2:	44 61       	SXT.H     R4, R4
100002d4:	45 70       	CMP       R4, R5
100002d6:	07 fb       	JLT       $+7                   ;->0x100002e4
..\application\angle_est.c:44
	{
		s->Omega = control_param.accum_theta;
100002d8:	6f ad       	LD.H      R5, [R7 + #21]
100002da:	55 d0       	ZXT.H     R5, R5
100002dc:	f5 b5       	ST.H      [R6 + #23], R5
..\application\angle_est.c:45
		control_param.accum_theta_count = 0;
100002de:	a8 58       	MOV       R5, R8
100002e0:	bd b5       	ST.H      [R7 + #22], R5
..\application\angle_est.c:46
		control_param.accum_theta = 0;
100002e2:	7d b5       	ST.H      [R7 + #21], R5
..\application\angle_est.c:49
	}

	control_param.trans_count++;
100002e4:	20 45       	LD        R5, [PC + #32]        ;->0x10000364  :=0x10003ea5
100002e6:	45 80       	LD.B      R4, [R5]
100002e8:	64 c0       	ADD       R4, R4, #1
100002ea:	44 d1       	ZXT.B     R4, R4
100002ec:	54 83       	ST.B      [R5], R4
..\application\angle_est.c:50
	if( control_param.trans_count >= control_param.trans_steps)
100002ee:	45 80       	LD.B      R4, [R5]
100002f0:	1e 43       	LD        R3, [PC + #30]        ;->0x10000368  :=0x10003ea6
100002f2:	33 80       	LD.B      R3, [R3]
100002f4:	34 70       	CMP       R3, R4
100002f6:	03 f8       	JHI       $+3                   ;->0x100002fc
..\application\angle_est.c:51
		control_param.trans_count = 0;
100002f8:	40 10       	MOV       R4, #0
100002fa:	54 83       	ST.B      [R5], R4
..\application\angle_est.c:53

	CalcOmegaFltred();
100002fc:	1c 45       	LD        R5, [PC + #28]        ;->0x1000036c  :=0x10000a26
100002fe:	05 5c       	LJMP      R5
..\application\angle_est.c:58

	//计算滑动模式控制器低通滤波器的增益
	//s->Kslf = s->KslfFinal = (s->OmegaFltred * Q15(_PI / IRP_PERCALC))>>15;//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
	//s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,Q15(_PI / IRP_PERCALC));
	if(control_param.motor_direction==0)
10000300:	17 45       	LD        R5, [PC + #23]        ;->0x1000035c  :=0x10003e84
10000302:	1c 44       	LD        R4, [PC + #28]        ;->0x10000370  :=0x10003ea4
10000304:	44 80       	LD.B      R4, [R4]
..\application\angle_est.c:59
	    s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,control_param._pi_calc);//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
10000306:	06 ae       	LD.H      R0, [R6 + #24]
10000308:	cd ac       	LD.H      R1, [R5 + #19]
1000030a:	00 61       	SXT.H     R0, R0
1000030c:	11 61       	SXT.H     R1, R1
1000030e:	1a 45       	LD        R5, [PC + #26]        ;->0x10000374  :=0x100004f8
..\application\angle_est.c:58
	CalcOmegaFltred();

	//计算滑动模式控制器低通滤波器的增益
	//s->Kslf = s->KslfFinal = (s->OmegaFltred * Q15(_PI / IRP_PERCALC))>>15;//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
	//s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,Q15(_PI / IRP_PERCALC));
	if(control_param.motor_direction==0)
10000310:	40 38       	CMP       R4, #0
10000312:	33 f1       	JNZ       $+51                  ;->0x10000378
..\application\angle_est.c:59
	    s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,control_param._pi_calc);//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
10000314:	05 5c       	LJMP      R5
10000316:	00 d0       	ZXT.H     R0, R0
10000318:	f0 b4       	ST.H      [R6 + #19], R0
1000031a:	b0 b4       	ST.H      [R6 + #18], R0
..\application\angle_est.c:63
	else
		s->Kslf = s->KslfFinal = -FracMpy(s->OmegaFltred,control_param._pi_calc);

	if (s->Kslf < control_param.omega0_rad_calc)
1000031c:	9e ac       	LD.H      R3, [R6 + #18]
1000031e:	10 45       	LD        R5, [PC + #16]        ;->0x1000035c  :=0x10003e84
10000320:	a7 ac       	LD.H      R4, [R7 + #18]
10000322:	33 61       	SXT.H     R3, R3
10000324:	44 61       	SXT.H     R4, R4
10000326:	34 70       	CMP       R3, R4
10000328:	07 fa       	JGE       $+7                   ;->0x10000336
..\application\angle_est.c:65
	{
		s->Kslf = control_param.omega0_rad_calc;
1000032a:	a5 ac       	LD.H      R4, [R5 + #18]
1000032c:	44 d0       	ZXT.H     R4, R4
1000032e:	b4 b4       	ST.H      [R6 + #18], R4
..\application\angle_est.c:66
		s->KslfFinal = control_param.omega0_rad_calc;
10000330:	ad ac       	LD.H      R5, [R5 + #18]
10000332:	55 d0       	ZXT.H     R5, R5
10000334:	f5 b4       	ST.H      [R6 + #19], R5
..\application\angle_est.c:70
	}
	//为所有速度范围动态补偿theta
	//s->ThetaOffset = CONSTANT_PHASE_SHIFT;
	s->Theta = s->Theta + s->ThetaOffset;
10000336:	ae ad       	LD.H      R5, [R6 + #22]
10000338:	66 ad       	LD.H      R4, [R6 + #21]
1000033a:	6c c3       	ADD       R5, R4, R5
1000033c:	55 d0       	ZXT.H     R5, R5
1000033e:	b5 b5       	ST.H      [R6 + #22], R5
..\application\angle_est.c:71
}
10000340:	07 5e       	POP       {R6-R8}
10000342:	0d 5d       	POP       LR
10000344:	1d 5c       	JMP       LR
10000346:	00 00       	NOP      NOP      
10000348:	08 07 00 10 	.long     0x10000708 ->268437256  [!!!@2@:SJMP      $-248                 ;->0x10000158	@@: MOV       R0, #0
1000034c:	02 08 00 10 	.long     0x10000802 ->268437506  [!!!@2@:LD.W      R0, [SP + #2]	@@: MOV       R0, #0
10000350:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x10000518	@@: MOV       R0, #0
10000354:	dc 08 00 10 	.long     0x100008dc ->268437724  [!!!@2@:LD.W      R0, [SP + #220]	@@: MOV       R0, #0
10000358:	44 41 00 00 	.long     0x00004144 ->000016708  [!!!@2@:LD        R1, [PC + #68]        ;->0x10000468  :=0x4408b2ac	@@: NOP      
1000035c:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0
10000360:	a7 3e 00 10 	.long     0x10003ea7 ->268451495  [!!!@2@:CMP       R10, #103	@@: MOV       R0, #0
10000364:	a5 3e 00 10 	.long     0x10003ea5 ->268451493  [!!!@2@:CMP       R10, #101	@@: MOV       R0, #0
10000368:	a6 3e 00 10 	.long     0x10003ea6 ->268451494  [!!!@2@:CMP       R10, #102	@@: MOV       R0, #0
1000036c:	26 0a 00 10 	.long     0x10000a26 ->268438054  [!!!@2@:LD.W      R2, [SP + #38]	@@: MOV       R0, #0
10000370:	a4 3e 00 10 	.long     0x10003ea4 ->268451492  [!!!@2@:CMP       R10, #100	@@: MOV       R0, #0
10000374:	f8 04 00 10 	.long     0x100004f8 ->268436728  [!!!@2@:SJMP      $+248                 ;->0x10000564	@@: MOV       R0, #0
..\application\angle_est.c:61
	//s->Kslf = s->KslfFinal = (s->OmegaFltred * Q15(_PI / IRP_PERCALC))>>15;//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
	//s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,Q15(_PI / IRP_PERCALC));
	if(control_param.motor_direction==0)
	    s->Kslf = s->KslfFinal = FracMpy(s->OmegaFltred,control_param._pi_calc);//Kslf = KslfFinal = Q15(Omega)*_PI/diIrpPerCalc
	else
		s->Kslf = s->KslfFinal = -FracMpy(s->OmegaFltred,control_param._pi_calc);
10000378:	05 5c       	LJMP      R5
1000037a:	00 d0       	ZXT.H     R0, R0
1000037c:	50 10       	MOV       R5, #0
1000037e:	2d c6       	SUB       R5, R5, R0
10000380:	55 d0       	ZXT.H     R5, R5
10000382:	f5 b4       	ST.H      [R6 + #19], R5
10000384:	b5 b4       	ST.H      [R6 + #18], R5
10000386:	cb 07       	SJMP      $-53                  ;->0x1000031c
..\application\angle_est.c:18
	CalcEstI();//估算的Ialpha、Ibeta值
	CalcIError();//计算Ialpha、Ibeta的偏差值（估算-实际）
	if (Q15abs(s->IalphaError) < s->MaxSMCError)
	{
		//如果处于滑动控制器的线性范围，那么矫正因数Zalpha将会和偏差IalphaError成比例
		CalcZalpha();
10000388:	0e 45       	LD        R5, [PC + #14]        ;->0x100003c0  :=0x10000854
1000038a:	05 5c       	LJMP      R5
..\application\angle_est.c:25
	else if (s->IalphaError > 0)
		s->Zalpha = s->Kslide;
	else
		s->Zalpha = -s->Kslide;

	if(Q15abs(s->IbetaError) < s->MaxSMCError)
1000038c:	46 ac       	LD.H      R0, [R6 + #17]
1000038e:	00 61       	SXT.H     R0, R0
10000390:	07 5c       	LJMP      R7
10000392:	ee ab       	LD.H      R5, [R6 + #15]
10000394:	55 61       	SXT.H     R5, R5
10000396:	05 70       	CMP       R0, R5
10000398:	02 fb       	JLT       $+2                   ;->0x1000039c
1000039a:	72 07       	SJMP      $-142                 ;->0x1000027e
..\application\angle_est.c:28
	{
		// 如果处于滑动控制器的线性范围，那么矫正因数Zbeta将会和偏差IbetaError成比例
		CalcZbeta();// s->Zbeta = (s->Kslide * s->IbetaError) / s->MaxSMCError
1000039c:	0a 45       	LD        R5, [PC + #10]        ;->0x100003c4  :=0x10000898
1000039e:	05 5c       	LJMP      R5
100003a0:	77 07       	SJMP      $-137                 ;->0x1000028e
..\application\angle_est.c:33
	}
	else if (s->IbetaError > 0)
		s->Zbeta = s->Kslide;
	else
		s->Zbeta = -s->Kslide;
100003a2:	ae ab       	LD.H      R5, [R6 + #14]
100003a4:	55 d0       	ZXT.H     R5, R5
100003a6:	40 10       	MOV       R4, #0
100003a8:	6c c7       	SUB       R5, R4, R5
100003aa:	55 d0       	ZXT.H     R5, R5
100003ac:	b5 b2       	ST.H      [R6 + #10], R5
100003ae:	70 07       	SJMP      $-144                 ;->0x1000028e
..\application\angle_est.c:23
		CalcZalpha();
	}
	else if (s->IalphaError > 0)
		s->Zalpha = s->Kslide;
	else
		s->Zalpha = -s->Kslide;
100003b0:	ae ab       	LD.H      R5, [R6 + #14]
100003b2:	55 d0       	ZXT.H     R5, R5
100003b4:	40 10       	MOV       R4, #0
100003b6:	6c c7       	SUB       R5, R4, R5
100003b8:	55 d0       	ZXT.H     R5, R5
100003ba:	f5 b0       	ST.H      [R6 + #3], R5
100003bc:	59 07       	SJMP      $-167                 ;->0x1000026e
100003be:	00 00       	NOP      NOP      
100003c0:	54 08 00 10 	.long     0x10000854 ->268437588  [!!!@2@:LD.W      R0, [SP + #84]	@@: MOV       R0, #0
100003c4:	98 08 00 10 	.long     0x10000898 ->268437656  [!!!@2@:LD.W      R0, [SP + #152]	@@: MOV       R0, #0

100003c8 <CalculateParkAngle>:
CalculateParkAngle():
..\application\angle_est.c:75
	s->Theta = s->Theta + s->ThetaOffset;
}


 void __attribute__((section(".indata"))) CalculateParkAngle(void)
{
100003c8:	83 5f       	PUSH      {R6-R7,LR}
..\application\angle_est.c:76
	 smc1.Ialpha = ParkParm.qIalpha;
100003ca:	1b 46       	LD        R6, [PC + #27]        ;->0x10000434  :=0x10003f4c
100003cc:	6e a9       	LD.H      R5, [R6 + #5]
100003ce:	55 d0       	ZXT.H     R5, R5
100003d0:	1a 47       	LD        R7, [PC + #26]        ;->0x10000438  :=0x10003ec4
100003d2:	3d b3       	ST.H      [R7 + #12], R5
..\application\angle_est.c:77
	 smc1.Ibeta = ParkParm.qIbeta;
100003d4:	ae a9       	LD.H      R5, [R6 + #6]
100003d6:	55 d0       	ZXT.H     R5, R5
100003d8:	3d b4       	ST.H      [R7 + #16], R5
..\application\angle_est.c:78
	 smc1.Valpha = ParkParm.qValpha;
100003da:	ee aa       	LD.H      R5, [R6 + #11]
100003dc:	55 d0       	ZXT.H     R5, R5
100003de:	75 84       	ST.H      [R7], R5
..\application\angle_est.c:79
	 smc1.Vbeta = ParkParm.qVbeta;
100003e0:	2e ab       	LD.H      R5, [R6 + #12]
100003e2:	55 d0       	ZXT.H     R5, R5
100003e4:	fd b1       	ST.H      [R7 + #7], R5
..\application\angle_est.c:81

	SMC_Position_Estimation(&smc1);	//trans_counter++,如果等于5就清零
100003e6:	07 58       	MOV       R0, R7
100003e8:	15 45       	LD        R5, [PC + #21]        ;->0x1000043c  :=0x10000240
100003ea:	05 5c       	LJMP      R5
..\application\angle_est.c:83

	if(sys_control.state_mode==STATE_RUN_OPEN_DEBUG||sys_control.state_mode==STATE_RUN_OPEN_LOOP)
100003ec:	15 45       	LD        R5, [PC + #21]        ;->0x10000440  :=0x10003eb8
100003ee:	65 98       	LD.W      R4, [R5 + #1]
100003f0:	44 38       	CMP       R4, #4
100003f2:	2f f0       	JZ        $+47                  ;->0x10000450
100003f4:	6d 98       	LD.W      R5, [R5 + #1]
100003f6:	55 38       	CMP       R5, #5
100003f8:	2c f0       	JZ        $+44                  ;->0x10000450
..\application\angle_est.c:109
		else
			ParkParm.qAngle -= (unsigned short)(control_param.startup_ramp >> 16);
	}
	else
	{
		ParkParm.qAngle = smc1.Theta + (control_param.theta_error);
100003fa:	af ad       	LD.H      R5, [R7 + #22]
100003fc:	12 47       	LD        R7, [PC + #18]        ;->0x10000444  :=0x10003e84
100003fe:	67 aa       	LD.H      R4, [R7 + #9]
10000400:	6c c3       	ADD       R5, R4, R5
10000402:	55 d0       	ZXT.H     R5, R5
10000404:	65 84       	ST.H      [R6], R5
..\application\angle_est.c:110
		if( (Q15abs(control_param.theta_error) > _0_05DEG)&&(control_param.trans_count == 0))
10000406:	47 aa       	LD.H      R0, [R7 + #9]
10000408:	00 61       	SXT.H     R0, R0
1000040a:	10 45       	LD        R5, [PC + #16]        ;->0x10000448  :=0x100004e4
1000040c:	05 5c       	LJMP      R5
1000040e:	09 38       	CMP       R0, #9
10000410:	38 f9       	JLS       $+56                  ;->0x10000480
10000412:	0f 45       	LD        R5, [PC + #15]        ;->0x1000044c  :=0x10003ea5
10000414:	55 80       	LD.B      R5, [R5]
10000416:	50 38       	CMP       R5, #0
10000418:	34 f1       	JNZ       $+52                  ;->0x10000480
..\application\angle_est.c:112
		{
			if (control_param.theta_error < 0)
1000041a:	6f aa       	LD.H      R5, [R7 + #9]
1000041c:	55 61       	SXT.H     R5, R5
1000041e:	50 38       	CMP       R5, #0
10000420:	5d f4       	JMI       $+93                  ;->0x100004da
..\application\angle_est.c:118
			{
				control_param.theta_error += _0_05DEG;
			}
			else
			{
				control_param.theta_error -= _0_05DEG;
10000422:	6f aa       	LD.H      R5, [R7 + #9]
10000424:	55 d0       	ZXT.H     R5, R5
10000426:	59 30       	SUB       R5, #9
10000428:	55 d0       	ZXT.H     R5, R5
1000042a:	7d b2       	ST.H      [R7 + #9], R5
..\application\angle_est.c:122
			}
		}
	}
}
1000042c:	03 5e       	POP       {R6-R7}
1000042e:	0d 5d       	POP       LR
10000430:	1d 5c       	JMP       LR
10000432:	00 00       	NOP      NOP      
10000434:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
10000438:	c4 3e 00 10 	.long     0x10003ec4 ->268451524  [!!!@2@:CMP       R12, #100	@@: MOV       R0, #0
1000043c:	40 02 00 10 	.long     0x10000240 ->268436032  [!!!@2@:SVC      	@@: MOV       R0, #0
10000440:	b8 3e 00 10 	.long     0x10003eb8 ->268451512  [!!!@2@:CMP       R11, #104	@@: MOV       R0, #0
10000444:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0
10000448:	e4 04 00 10 	.long     0x100004e4 ->268436708  [!!!@2@:SJMP      $+228                 ;->0x10000610	@@: MOV       R0, #0
1000044c:	a5 3e 00 10 	.long     0x10003ea5 ->268451493  [!!!@2@:CMP       R10, #101	@@: MOV       R0, #0
..\application\angle_est.c:85

	SMC_Position_Estimation(&smc1);	//trans_counter++,如果等于5就清零

	if(sys_control.state_mode==STATE_RUN_OPEN_DEBUG||sys_control.state_mode==STATE_RUN_OPEN_LOOP)
	{
		if (control_param.startup_lock < control_param.startup_lock_time)
10000450:	0e 45       	LD        R5, [PC + #14]        ;->0x10000488  :=0x10003e84
10000452:	a5 aa       	LD.H      R4, [R5 + #10]
10000454:	44 d0       	ZXT.H     R4, R4
10000456:	dd aa       	LD.H      R3, [R5 + #11]
10000458:	33 d0       	ZXT.H     R3, R3
1000045a:	34 70       	CMP       R3, R4
1000045c:	1a f9       	JLS       $+26                  ;->0x10000490
..\application\angle_est.c:87
		{
			control_param.current_step = 0;
1000045e:	40 10       	MOV       R4, #0
10000460:	2c b2       	ST.H      [R5 + #8], R4
..\application\angle_est.c:88
			control_param.startup_lock++;	// 此变量一直递增直到条件失效，然后开环斜坡递增开始
10000462:	a5 aa       	LD.H      R4, [R5 + #10]
10000464:	64 c0       	ADD       R4, R4, #1
10000466:	44 d0       	ZXT.H     R4, R4
10000468:	ac b2       	ST.H      [R5 + #10], R4
..\application\angle_est.c:102
		else
		{
			control_param.current_step = 2;
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
		}
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
1000046a:	08 44       	LD        R4, [PC + #8]         ;->0x10000488  :=0x10003e84
1000046c:	08 45       	LD        R5, [PC + #8]         ;->0x1000048c  :=0x10003ea4
1000046e:	55 80       	LD.B      R5, [R5]
..\application\angle_est.c:103
		    ParkParm.qAngle += (unsigned short)(control_param.startup_ramp >> 16);
10000470:	36 81       	LD.H      R3, [R6]
..\application\angle_est.c:102
		else
		{
			control_param.current_step = 2;
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
		}
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
10000472:	50 38       	CMP       R5, #0
10000474:	1f f1       	JNZ       $+31                  ;->0x100004b2
..\application\angle_est.c:103
		    ParkParm.qAngle += (unsigned short)(control_param.startup_ramp >> 16);
10000476:	ac 99       	LD.W      R5, [R4 + #6]
10000478:	28 7d       	LSR       R5, #16
1000047a:	ed c2       	ADD       R5, R5, R3
1000047c:	55 d0       	ZXT.H     R5, R5
1000047e:	65 84       	ST.H      [R6], R5
..\application\angle_est.c:122
			{
				control_param.theta_error -= _0_05DEG;
			}
		}
	}
}
10000480:	03 5e       	POP       {R6-R7}
10000482:	0d 5d       	POP       LR
10000484:	1d 5c       	JMP       LR
10000486:	00 00       	NOP      NOP      
10000488:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0
1000048c:	a4 3e 00 10 	.long     0x10003ea4 ->268451492  [!!!@2@:CMP       R10, #100	@@: MOV       R0, #0
..\application\angle_est.c:90
		if (control_param.startup_lock < control_param.startup_lock_time)
		{
			control_param.current_step = 0;
			control_param.startup_lock++;	// 此变量一直递增直到条件失效，然后开环斜坡递增开始
		}
		else if(control_param.startup_ramp < control_param.end_speed)
10000490:	a5 99       	LD.W      R4, [R5 + #6]
10000492:	dd 99       	LD.W      R3, [R5 + #7]
10000494:	34 70       	CMP       R3, R4
10000496:	1b f8       	JHI       $+27                  ;->0x100004cc
..\application\angle_est.c:99
			control_param.startup_ramp += DELTA_STARTUP_RAMP;
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
		}
		else
		{
			control_param.current_step = 2;
10000498:	42 10       	MOV       R4, #2
1000049a:	2c b2       	ST.H      [R5 + #8], R4
..\application\angle_est.c:100
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
1000049c:	36 81       	LD.H      R3, [R6]
1000049e:	a7 ad       	LD.H      R4, [R7 + #22]
100004a0:	23 c7       	SUB       R4, R3, R4
100004a2:	44 d0       	ZXT.H     R4, R4
100004a4:	6c b2       	ST.H      [R5 + #9], R4
..\application\angle_est.c:102
		}
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
100004a6:	08 44       	LD        R4, [PC + #8]         ;->0x100004c4  :=0x10003e84
100004a8:	08 45       	LD        R5, [PC + #8]         ;->0x100004c8  :=0x10003ea4
100004aa:	55 80       	LD.B      R5, [R5]
..\application\angle_est.c:103
		    ParkParm.qAngle += (unsigned short)(control_param.startup_ramp >> 16);
100004ac:	36 81       	LD.H      R3, [R6]
..\application\angle_est.c:102
		else
		{
			control_param.current_step = 2;
			control_param.theta_error = ParkParm.qAngle - smc1.Theta;
		}
		if(control_param.motor_direction==USER_MOTOR_RUN_CW)
100004ae:	50 38       	CMP       R5, #0
100004b0:	e3 f0       	JZ        $-29                  ;->0x10000476
..\application\angle_est.c:105
		    ParkParm.qAngle += (unsigned short)(control_param.startup_ramp >> 16);
		else
			ParkParm.qAngle -= (unsigned short)(control_param.startup_ramp >> 16);
100004b2:	ac 99       	LD.W      R5, [R4 + #6]
100004b4:	28 7d       	LSR       R5, #16
100004b6:	6b c7       	SUB       R5, R3, R5
100004b8:	55 d0       	ZXT.H     R5, R5
100004ba:	65 84       	ST.H      [R6], R5
..\application\angle_est.c:122
			{
				control_param.theta_error -= _0_05DEG;
			}
		}
	}
}
100004bc:	03 5e       	POP       {R6-R7}
100004be:	0d 5d       	POP       LR
100004c0:	1d 5c       	JMP       LR
100004c2:	00 00       	NOP      NOP      
100004c4:	84 3e 00 10 	.long     0x10003e84 ->268451460  [!!!@2@:CMP       R8, #100	@@: MOV       R0, #0
100004c8:	a4 3e 00 10 	.long     0x10003ea4 ->268451492  [!!!@2@:CMP       R10, #100	@@: MOV       R0, #0
..\application\angle_est.c:92
			control_param.current_step = 0;
			control_param.startup_lock++;	// 此变量一直递增直到条件失效，然后开环斜坡递增开始
		}
		else if(control_param.startup_ramp < control_param.end_speed)
		{
			control_param.current_step = 1;
100004cc:	41 10       	MOV       R4, #1
100004ce:	2c b2       	ST.H      [R5 + #8], R4
..\application\angle_est.c:94
			// 斜坡启动，且线性递增至EndSpeed.
			control_param.startup_ramp += DELTA_STARTUP_RAMP;
100004d0:	9d 99       	LD.W      R3, [R5 + #6]
100004d2:	4f 18       	MOV       R4, #143
100004d4:	23 c3       	ADD       R4, R3, R4
100004d6:	ac a1       	ST.W      [R5 + #6], R4
100004d8:	e2 07       	SJMP      $-30                  ;->0x1000049c
..\application\angle_est.c:114
		ParkParm.qAngle = smc1.Theta + (control_param.theta_error);
		if( (Q15abs(control_param.theta_error) > _0_05DEG)&&(control_param.trans_count == 0))
		{
			if (control_param.theta_error < 0)
			{
				control_param.theta_error += _0_05DEG;
100004da:	6f aa       	LD.H      R5, [R7 + #9]
100004dc:	59 28       	ADD       R5, #9
100004de:	55 d0       	ZXT.H     R5, R5
100004e0:	7d b2       	ST.H      [R7 + #9], R5
100004e2:	cf 07       	SJMP      $-49                  ;->0x10000480

100004e4 <Q15abs>:
Q15abs():
..\application\libkf32foc.c:8


/******math**************************************************************************/
volatile WORD Data_ABS;
WORD __attribute__((section(".indata"))) Q15abs(SFRAC16 a)
{
100004e4:	00 d0       	ZXT.H     R0, R0
..\application\libkf32foc.c:9
	if(a < 0)
100004e6:	50 61       	SXT.H     R5, R0
100004e8:	50 38       	CMP       R5, #0
100004ea:	03 f4       	JMI       $+3                   ;->0x100004f0
..\application\libkf32foc.c:12
		return -a;
	else
		return a;
100004ec:	00 d0       	ZXT.H     R0, R0
..\application\libkf32foc.c:16
//	Data_ABS = fabs(a);
//	return	Data_ABS;

}
100004ee:	1d 5c       	JMP       LR
..\application\libkf32foc.c:10
/******math**************************************************************************/
volatile WORD Data_ABS;
WORD __attribute__((section(".indata"))) Q15abs(SFRAC16 a)
{
	if(a < 0)
		return -a;
100004f0:	50 10       	MOV       R5, #0
100004f2:	05 c6       	SUB       R0, R5, R0
100004f4:	00 d0       	ZXT.H     R0, R0
..\application\libkf32foc.c:16
	else
		return a;
//	Data_ABS = fabs(a);
//	return	Data_ABS;

}
100004f6:	1d 5c       	JMP       LR

100004f8 <FracMpy>:
FracMpy():
..\application\libkf32foc.c:26

//	Data_FracMpy = ((signed int )((mul_1 * mul_2)<<1)>>16);
//
//	return Data_FracMpy;

	asm("	MULS R4,R0,R1                     ""\n\t"         );
100004f8:	60 ca       	MULS      R4, R0, R1
..\application\libkf32foc.c:27
	asm("	LSL R4,#1                  	 ""\n\t"  );
100004fa:	21 7a       	LSL       R4, #1
..\application\libkf32foc.c:28
	asm("	ASR R4,#16                  	 ""\n\t"  );
100004fc:	20 79       	ASR       R4, #16
..\application\libkf32foc.c:29
	asm("	MOV R2,#Data_FracMpy                    ""\n\t"     );
100004fe:	22 5c bc 3f 	MOVL      R2, #16316
10000502:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:30
	asm("	ST.H [R2] , R4                          ""\n\t"     );
10000506:	24 84       	ST.H      [R2], R4
..\application\libkf32foc.c:31
	return	Data_FracMpy;
10000508:	02 45       	LD        R5, [PC + #2]         ;->0x10000510  :=0x10003fbc
1000050a:	05 81       	LD.H      R0, [R5]
..\application\libkf32foc.c:32
}
1000050c:	00 d0       	ZXT.H     R0, R0
1000050e:	1d 5c       	JMP       LR
10000510:	bc 3f 00 10 	.long     0x10003fbc ->268451772  [!!!@2@:CMP       R11, #124	@@: MOV       R0, #0

10000514 <CalcSVGen>:
CalcSVGen():
..\application\libkf32foc.c:313
 * 2.1us@48MHz
 */
void __attribute__((section(".indata"))) CalcSVGen( void )
{
	//手动压栈
	asm("	PUSH	R6                               " "\n");
10000514:	26 5d       	PUSH      R6
..\application\libkf32foc.c:314
	asm("	PUSH	R7                               " "\n");
10000516:	27 5d       	PUSH      R7
..\application\libkf32foc.c:377
	asm("	.EQU SVGen_qVr3_R6, R6                    " "\n");


	//start of InvPark(void)
	//Load数据
	asm("	LD	    VarAddress_R0,#ParkParm+#Park_qSin  " "\n");
10000518:	4f 40       	LD        R0, [PC + #79]        ;->0x10000654  :=0x10003f4e
..\application\libkf32foc.c:378
	asm("	LDS.H	Park_qSin_R1,[VarAddress_R0]        " "\n");//R1 = Park_qSin
1000051a:	10 86       	LDS.H     R1, [R0]
..\application\libkf32foc.c:380

	asm("	ADD     VarAddress_R0,#Park_qCos-#Park_qSin " "\n");//计算Park_qCos地址
1000051c:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:381
	asm("	LDS.H	Park_qCos_R2,[VarAddress_R0]        " "\n");//R2 = Park_qCos
1000051e:	20 86       	LDS.H     R2, [R0]
..\application\libkf32foc.c:383

	asm("	ADD     VarAddress_R0,#Park_qVd-#Park_qCos  " "\n");//计算Park_qVd地址
10000520:	0e 28       	ADD       R0, #14
..\application\libkf32foc.c:384
	asm("	LDS.H	Park_qVd_R3,[VarAddress_R0]         " "\n");//R3 = Park_qVd
10000522:	30 86       	LDS.H     R3, [R0]
..\application\libkf32foc.c:386

	asm("	ADD     VarAddress_R0,#Park_qVq-#Park_qVd   " "\n");//计算Park_qVq地址
10000524:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:387
	asm("	LDS.H	Park_qVq_R4,[VarAddress_R0]         " "\n");//R4 = Park_qVq
10000526:	40 86       	LDS.H     R4, [R0]
..\application\libkf32foc.c:391
	//到此VarAddress_R0指向ParkParm.qVq地址

	//Valpha =  Vd*cos(Angle) - Vq*sin(Angle)
	asm("	MULS   	VdxCos_R5,Park_qVd_R3,Park_qCos_R2    	" "\n");
10000528:	ab ca       	MULS      R5, R3, R2
..\application\libkf32foc.c:392
	asm("	MULS   	VqxSin_R6,Park_qVq_R4,Park_qSin_R1    	" "\n");
1000052a:	74 ca       	MULS      R6, R4, R1
..\application\libkf32foc.c:393
	asm("	SUB     Park_qValpha_R7,VdxCos_R5,VqxSin_R6     " "\n");
1000052c:	bd c7       	SUB       R7, R5, R6
..\application\libkf32foc.c:394
	asm("	ASR   	Park_qValpha_R7,#15			            " "\n");
1000052e:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:397

	//Vbeta  =  Vd*sin(Angle) + Vq*cos(Angle)
	asm("	MULS   	VdxSin_R5,Park_qVd_R3,Park_qSin_R1    	" "\n");
10000530:	6b ca       	MULS      R5, R3, R1
..\application\libkf32foc.c:398
	asm("	MULS   	VqxCos_R6,Park_qVq_R4,Park_qCos_R2    	" "\n");
10000532:	b4 ca       	MULS      R6, R4, R2
..\application\libkf32foc.c:399
	asm("	ADD     Park_qVbeta_R6,VdxSin_R5,VqxCos_R6      " "\n");
10000534:	b5 c3       	ADD       R6, R5, R6
..\application\libkf32foc.c:400
	asm("	ASR   	Park_qVbeta_R6,#15			            " "\n");
10000536:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:403

	//保存到SRAM, Valpha, Vbeta
	asm("	ADD     VarAddress_R0,#Park_qValpha-#Park_qVq   " "\n");//计算Park_qId地址
10000538:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:404
	asm("	ST.H    [VarAddress_R0++],Park_qValpha_R7       " "\n");
1000053a:	07 75       	ST.H      [R0++], R7
..\application\libkf32foc.c:405
	asm("	ST.H    [VarAddress_R0],  Park_qVbeta_R6        " "\n");
1000053c:	06 84       	ST.H      [R0], R6
..\application\libkf32foc.c:412


	//end of InvPark(void)

	//start of CalcRefVec( void )
	asm("   MOV		Sq3By2_R1, #Sq3By2                              " "\n");//R1 = sqrt(3)/2
1000053e:	21 5c d9 6e 	MOVL      R1, #28377
..\application\libkf32foc.c:415

	//SVGen_qVr1 = ParkParm.qVbeta;
	asm("   MOV 	SVGen_qVr1_R4, Park_qVbeta_R6                   " "\n");//R4 = SVGen_qVr1
10000542:	86 58       	MOV       R4, R6
..\application\libkf32foc.c:418

	//SVGen_qVr2 = (ParkParm.qValpha*Sq3By2>>15) - (ParkParm.qVbeta>>1)
	asm("   ASR 	Park_qVbeta_R6, #1                              " "\n");//R6 = ParkParm.qVbeta>>1
10000544:	31 78       	ASR       R6, #1
..\application\libkf32foc.c:419
	asm("	MULS 	Park_qValpha_R7,Park_qValpha_R7,Sq3By2_R1       " "\n");
10000546:	7f ca       	MULS      R7, R7, R1
..\application\libkf32foc.c:420
	asm("   ASR 	Park_qValpha_R7, #15                            " "\n");//R7 = (ParkParm.qValpha*Sq3By2)>>15
10000548:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:421
	asm("	SUB		SVGen_qVr2_R5,Park_qValpha_R7,Park_qVbeta_R6    " "\n");//R5 = SVGen_qVr2;
1000054a:	af c7       	SUB       R5, R7, R6
..\application\libkf32foc.c:424

	//SVGen_qVr3 = (-ParkParm.qVbeta>>1) - (ParkParm.qValpha*Sq3By2>>15)
	asm("   MOV		R0,#0                                           " "\n");
1000054c:	00 10       	MOV       R0, #0
..\application\libkf32foc.c:425
	asm("	SUB		Park_qVbeta_R6,R0,Park_qVbeta_R6                " "\n");//R6 = -R6;
1000054e:	b0 c7       	SUB       R6, R0, R6
..\application\libkf32foc.c:426
	asm("	SUB		SVGen_qVr3_R6,Park_qVbeta_R6,Park_qValpha_R7    " "\n");//R6 = SVGen_qVr3;
10000550:	f6 c7       	SUB       R6, R6, R7
..\application\libkf32foc.c:432
	//end of CalcRefVec( void )


	//start of CalcSVGen( void )
	//连续Load数据
	asm("	LD	    VarAddress_R0,#SVGenParm+#SVGen_iPWMPeriod " "\n");//计算SVGen_iPWMPeriod地址
10000552:	42 40       	LD        R0, [PC + #66]        ;->0x10000658  :=0x10003f70
..\application\libkf32foc.c:433
	asm("	LDS.H	SVGen_iPWMPeriod_R2,[VarAddress_R0]        " "\n");//R2 = SVGen_iPWMPeriod
10000554:	20 86       	LDS.H     R2, [R0]
..\application\libkf32foc.c:446
	//asm("	ADD		VarAddress_R0,#SVGen_qVr3-#SVGen_qVr2      " "\n");//计算SVGen_qVr3地址
	//asm("	LDS.H	SVGen_qVr3_R6,[VarAddress_R0]              " "\n");//R6 = SVGen_qVr3

	//判断Sector
	//SVGen_qVr1 < 0 ?
	asm("	CMP     SVGen_qVr1_R4,#0                  " "\n");
10000556:	40 38       	CMP       R4, #0
..\application\libkf32foc.c:447
	asm("	JLT		jSector624                        " "\n");//( SVGen_qVr1 < 0 ) goto jSector624
10000558:	3e fb       	JLT       $+62                  ;->0x100005d4

1000055a <jSector351>:
..\application\libkf32foc.c:453

asm("jSector351:                                                  " "\n");

	//判断Sector
	//SVGen_qVr2 < 0 ?
	asm("	CMP     SVGen_qVr2_R5,#0                  " "\n");
1000055a:	50 38       	CMP       R5, #0
..\application\libkf32foc.c:454
	asm("	JLT		jSector51                         " "\n");//( SVGen_qVr1 > 0 && SVGen_qVr2 < 0 ) goto jSector51
1000055c:	14 fb       	JLT       $+20                  ;->0x10000584
..\application\libkf32foc.c:459

	//SVGen_qVr1 >= 0 && SVGen_qVr2 >= 0 && SVGen_qVr3 < 0
	//@Sector3(011)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R4,SVGen_qVr1_R4,SVGen_iPWMPeriod_R2 " "\n");
1000055e:	a4 ca       	MULS      R4, R4, R2
..\application\libkf32foc.c:460
	asm("	ASR	    SVGen_T1_R4,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr1*iPWMPeriod)>>15
10000560:	a7 78       	ASR       R4, #15
..\application\libkf32foc.c:461
	asm("	MULS    SVGen_T2_R5,SVGen_qVr2_R5,SVGen_iPWMPeriod_R2 " "\n");
10000562:	ad ca       	MULS      R5, R5, R2
..\application\libkf32foc.c:462
	asm("	ASR	    SVGen_T2_R5,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr2*iPWMPeriod)>>15
10000564:	af 78       	ASR       R5, #15
..\application\libkf32foc.c:463
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R4   " "\n");
10000566:	1a c7       	SUB       R3, R2, R4
..\application\libkf32foc.c:464
	asm("	SUB     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R5           " "\n");
10000568:	5b c7       	SUB       R3, R3, R5
..\application\libkf32foc.c:465
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod - SVGen_T1 - SVGen_T2)>>1
1000056a:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:466
	asm("	ADD     SVGen_Tb_R4,SVGen_Tc_R3,SVGen_T1_R4           " "\n");//R4 = SVGen_Tb = SVGen_Tc + SVGen_T1
1000056c:	23 c3       	ADD       R4, R3, R4
..\application\libkf32foc.c:467
	asm("	ADD     SVGen_Ta_R5,SVGen_Tb_R4,SVGen_T2_R5           " "\n");//R5 = SVGen_Ta = SVGen_Tb + SVGen_T2
1000056e:	6c c3       	ADD       R5, R4, R5
..\application\libkf32foc.c:469
	//更新PWM
	asm("	SUB     SVGen_Ta_R5,SVGen_iPWMPeriod_R2,SVGen_Ta_R5   " "\n");
10000570:	6a c7       	SUB       R5, R2, R5
..\application\libkf32foc.c:470
	asm("	SUB     SVGen_Tb_R4,SVGen_iPWMPeriod_R2,SVGen_Tb_R4   " "\n");
10000572:	22 c7       	SUB       R4, R2, R4
..\application\libkf32foc.c:471
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
10000574:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:473

	asm("	LD		R1,#dPWM1                                     " "\n");
10000576:	3a 41       	LD        R1, [PC + #58]        ;->0x1000065c  :=0x40001a14
..\application\libkf32foc.c:474
	asm("	ST.H    [R1],SVGen_Ta_R5                              " "\n");//PWM1 = SVGen_Ta
10000578:	15 84       	ST.H      [R1], R5
..\application\libkf32foc.c:475
	asm("	LD		R1,#dPWM2                                     " "\n");
1000057a:	3a 41       	LD        R1, [PC + #58]        ;->0x10000660  :=0x40001314
..\application\libkf32foc.c:476
	asm("	ST.H    [R1],SVGen_Tb_R4                              " "\n");//PWM2 = SVGen_Tb
1000057c:	14 84       	ST.H      [R1], R4
..\application\libkf32foc.c:477
	asm("	LD		R1,#dPWM3                                     " "\n");
1000057e:	3a 41       	LD        R1, [PC + #58]        ;->0x10000664  :=0x40001394
..\application\libkf32foc.c:478
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM3 = SVGen_Tc
10000580:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:484

	//asm("	LD		R2,#3                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
10000582:	65 04       	SJMP      $+101                 ;->0x1000064c

10000584 <jSector51>:
..\application\libkf32foc.c:490

asm("jSector51:                                                   " "\n");

	//判断Sector
	//SVGen_qVr3 < 0 ?
	asm("	CMP     SVGen_qVr3_R6,#0                  " "\n");
10000584:	60 38       	CMP       R6, #0
..\application\libkf32foc.c:491
	asm("	JLT		jSector1                          " "\n");//( SVGen_qVr1 > 0 && SVGen_qVr2 < 0 && SVGen_qVr3 < 0 ) goto jSector1
10000586:	14 fb       	JLT       $+20                  ;->0x100005ae
..\application\libkf32foc.c:496

	//SVGen_qVr1 >= 0 && SVGen_qVr2 < 0 && SVGen_qVr3 >= 0
	//@Sector5(101)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R6,SVGen_qVr3_R6,SVGen_iPWMPeriod_R2 " "\n");
10000588:	b6 ca       	MULS      R6, R6, R2
..\application\libkf32foc.c:497
	asm("	ASR	    SVGen_T1_R6,#15                               " "\n");//R6 = SVGen_T1 = (SVGen_qVr3*iPWMPeriod)>>15
1000058a:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:498
	asm("	MULS    SVGen_T2_R4,SVGen_qVr1_R4,SVGen_iPWMPeriod_R2 " "\n");
1000058c:	a4 ca       	MULS      R4, R4, R2
..\application\libkf32foc.c:499
	asm("	ASR	    SVGen_T2_R4,#15                               " "\n");//R4 = SVGen_T2 = (SVGen_qVr1*iPWMPeriod)>>15
1000058e:	a7 78       	ASR       R4, #15
..\application\libkf32foc.c:500
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R6   " "\n");
10000590:	9a c7       	SUB       R3, R2, R6
..\application\libkf32foc.c:501
	asm("	SUB     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R4           " "\n");
10000592:	1b c7       	SUB       R3, R3, R4
..\application\libkf32foc.c:502
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod - SVGen_T1 - SVGen_T2)>>1
10000594:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:503
	asm("	ADD     SVGen_Tb_R6,SVGen_Tc_R3,SVGen_T1_R6           " "\n");//R6 = SVGen_Tb = SVGen_Tc + SVGen_T1
10000596:	b3 c3       	ADD       R6, R3, R6
..\application\libkf32foc.c:504
	asm("	ADD     SVGen_Ta_R4,SVGen_Tb_R6,SVGen_T2_R4           " "\n");//R4 = SVGen_Ta = SVGen_Tb + SVGen_T2
10000598:	26 c3       	ADD       R4, R6, R4
..\application\libkf32foc.c:506
	//更新PWM
	asm("	SUB     SVGen_Ta_R4,SVGen_iPWMPeriod_R2,SVGen_Ta_R4   " "\n");
1000059a:	22 c7       	SUB       R4, R2, R4
..\application\libkf32foc.c:507
	asm("	SUB     SVGen_Tb_R6,SVGen_iPWMPeriod_R2,SVGen_Tb_R6   " "\n");
1000059c:	b2 c7       	SUB       R6, R2, R6
..\application\libkf32foc.c:508
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
1000059e:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:510

	asm("	LD		R1,#dPWM2                                     " "\n");
100005a0:	30 41       	LD        R1, [PC + #48]        ;->0x10000660  :=0x40001314
..\application\libkf32foc.c:511
	asm("	ST.H    [R1],SVGen_Ta_R4                              " "\n");//PWM2 = SVGen_Ta
100005a2:	14 84       	ST.H      [R1], R4
..\application\libkf32foc.c:512
	asm("	LD		R1,#dPWM3                                     " "\n");
100005a4:	30 41       	LD        R1, [PC + #48]        ;->0x10000664  :=0x40001394
..\application\libkf32foc.c:513
	asm("	ST.H    [R1],SVGen_Tb_R6                              " "\n");//PWM3 = SVGen_Tb
100005a6:	16 84       	ST.H      [R1], R6
..\application\libkf32foc.c:514
	asm("	LD		R1,#dPWM1                                     " "\n");
100005a8:	2d 41       	LD        R1, [PC + #45]        ;->0x1000065c  :=0x40001a14
..\application\libkf32foc.c:515
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM1 = SVGen_Tc
100005aa:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:521

	//asm("	LD		R2,#5                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
100005ac:	50 04       	SJMP      $+80                  ;->0x1000064c

100005ae <jSector1>:
..\application\libkf32foc.c:528
asm("jSector1:                                                    " "\n");

	//SVGen_qVr1 >= 0 && SVGen_qVr2 < 0 && SVGen_qVr3 < 0
	//@Sector1(001)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R6,SVGen_qVr3_R6,SVGen_iPWMPeriod_R2 " "\n");
100005ae:	b6 ca       	MULS      R6, R6, R2
..\application\libkf32foc.c:529
	asm("	ASR	    SVGen_T1_R6,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr3*iPWMPeriod)>>15 (T1<0)
100005b0:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:530
	asm("	MULS    SVGen_T2_R5,SVGen_qVr2_R5,SVGen_iPWMPeriod_R2 " "\n");
100005b2:	ad ca       	MULS      R5, R5, R2
..\application\libkf32foc.c:531
	asm("	ASR	    SVGen_T2_R5,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr2*iPWMPeriod)>>15 (T2<0)
100005b4:	af 78       	ASR       R5, #15
..\application\libkf32foc.c:532
	asm("	ADD     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R6   " "\n");
100005b6:	9a c3       	ADD       R3, R2, R6
..\application\libkf32foc.c:533
	asm("	ADD     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R5           " "\n");
100005b8:	5b c3       	ADD       R3, R3, R5
..\application\libkf32foc.c:534
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod + SVGen_T1 + SVGen_T2)>>1 (Tc>0)
100005ba:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:535
	asm("	SUB     SVGen_Tb_R6,SVGen_Tc_R3,SVGen_T1_R6           " "\n");//R4 = SVGen_Tb = SVGen_Tc - SVGen_T1 (T1<0)
100005bc:	b3 c7       	SUB       R6, R3, R6
..\application\libkf32foc.c:536
	asm("	SUB     SVGen_Ta_R5,SVGen_Tb_R6,SVGen_T2_R5           " "\n");//R5 = SVGen_Ta = SVGen_Tb - SVGen_T2 (T2<0)
100005be:	6e c7       	SUB       R5, R6, R5
..\application\libkf32foc.c:538
	//更新PWM
	asm("	SUB     SVGen_Ta_R5,SVGen_iPWMPeriod_R2,SVGen_Ta_R5   " "\n");
100005c0:	6a c7       	SUB       R5, R2, R5
..\application\libkf32foc.c:539
	asm("	SUB     SVGen_Tb_R6,SVGen_iPWMPeriod_R2,SVGen_Tb_R6   " "\n");
100005c2:	b2 c7       	SUB       R6, R2, R6
..\application\libkf32foc.c:540
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
100005c4:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:542

	asm("	LD		R1,#dPWM2                                     " "\n");
100005c6:	27 41       	LD        R1, [PC + #39]        ;->0x10000660  :=0x40001314
..\application\libkf32foc.c:543
	asm("	ST.H    [R1],SVGen_Ta_R5                              " "\n");//PWM2 = SVGen_Ta
100005c8:	15 84       	ST.H      [R1], R5
..\application\libkf32foc.c:544
	asm("	LD		R1,#dPWM1                                     " "\n");
100005ca:	25 41       	LD        R1, [PC + #37]        ;->0x1000065c  :=0x40001a14
..\application\libkf32foc.c:545
	asm("	ST.H    [R1],SVGen_Tb_R6                              " "\n");//PWM1 = SVGen_Tb
100005cc:	16 84       	ST.H      [R1], R6
..\application\libkf32foc.c:546
	asm("	LD		R1,#dPWM3                                     " "\n");
100005ce:	26 41       	LD        R1, [PC + #38]        ;->0x10000664  :=0x40001394
..\application\libkf32foc.c:547
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM3 = SVGen_Tc
100005d0:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:553

	//asm("	LD		R2,#1                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
100005d2:	3d 04       	SJMP      $+61                  ;->0x1000064c

100005d4 <jSector624>:
..\application\libkf32foc.c:559

asm("jSector624:                                                  " "\n");

	//判断Sector
	//SVGen_qVr2 < 0 ?
	asm("	CMP     SVGen_qVr2_R5,#0                  " "\n");
100005d4:	50 38       	CMP       R5, #0
..\application\libkf32foc.c:560
	asm("	JLT		jSector4                          " "\n");//( SVGen_qVr1 < 0 && SVGen_qVr2 < 0 ) goto jSector4
100005d6:	29 fb       	JLT       $+41                  ;->0x10000628

100005d8 <jSector62>:
..\application\libkf32foc.c:566

asm("jSector62:                                                   " "\n");

	//判断Sector
	//SVGen_qVr3 < 0 ?
	asm("	CMP     SVGen_qVr3_R6,#0                  " "\n");
100005d8:	60 38       	CMP       R6, #0
..\application\libkf32foc.c:567
	asm("	JLT		jSector2                          " "\n");//( SVGen_qVr1 < 0 && SVGen_qVr2 >= 0 && SVGen_qVr3 < 0 ) goto jSector2
100005da:	14 fb       	JLT       $+20                  ;->0x10000602
..\application\libkf32foc.c:572

	//SVGen_qVr1 < 0 && SVGen_qVr2 >= 0 && SVGen_qVr3 >= 0
	//@Sector6(110)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R5,SVGen_qVr2_R5,SVGen_iPWMPeriod_R2 " "\n");
100005dc:	ad ca       	MULS      R5, R5, R2
..\application\libkf32foc.c:573
	asm("	ASR	    SVGen_T1_R5,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr2*iPWMPeriod)>>15
100005de:	af 78       	ASR       R5, #15
..\application\libkf32foc.c:574
	asm("	MULS    SVGen_T2_R6,SVGen_qVr3_R6,SVGen_iPWMPeriod_R2 " "\n");
100005e0:	b6 ca       	MULS      R6, R6, R2
..\application\libkf32foc.c:575
	asm("	ASR	    SVGen_T2_R6,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr3*iPWMPeriod)>>15
100005e2:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:576
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R5   " "\n");
100005e4:	5a c7       	SUB       R3, R2, R5
..\application\libkf32foc.c:577
	asm("	SUB     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R6           " "\n");
100005e6:	9b c7       	SUB       R3, R3, R6
..\application\libkf32foc.c:578
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod - SVGen_T1 - SVGen_T2)>>1
100005e8:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:579
	asm("	ADD     SVGen_Tb_R5,SVGen_Tc_R3,SVGen_T1_R5           " "\n");//R4 = SVGen_Tb = SVGen_Tc + SVGen_T1
100005ea:	6b c3       	ADD       R5, R3, R5
..\application\libkf32foc.c:580
	asm("	ADD     SVGen_Ta_R6,SVGen_Tb_R5,SVGen_T2_R6           " "\n");//R5 = SVGen_Ta = SVGen_Tb + SVGen_T2
100005ec:	b5 c3       	ADD       R6, R5, R6
..\application\libkf32foc.c:582
	//更新PWM
	asm("	SUB     SVGen_Ta_R6,SVGen_iPWMPeriod_R2,SVGen_Ta_R6   " "\n");
100005ee:	b2 c7       	SUB       R6, R2, R6
..\application\libkf32foc.c:583
	asm("	SUB     SVGen_Tb_R5,SVGen_iPWMPeriod_R2,SVGen_Tb_R5   " "\n");
100005f0:	6a c7       	SUB       R5, R2, R5
..\application\libkf32foc.c:584
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
100005f2:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:586

	asm("	LD		R1,#dPWM3                                     " "\n");
100005f4:	1c 41       	LD        R1, [PC + #28]        ;->0x10000664  :=0x40001394
..\application\libkf32foc.c:587
	asm("	ST.H    [R1],SVGen_Ta_R6                              " "\n");//PWM3 = SVGen_Ta
100005f6:	16 84       	ST.H      [R1], R6
..\application\libkf32foc.c:588
	asm("	LD		R1,#dPWM1                                     " "\n");
100005f8:	19 41       	LD        R1, [PC + #25]        ;->0x1000065c  :=0x40001a14
..\application\libkf32foc.c:589
	asm("	ST.H    [R1],SVGen_Tb_R5                              " "\n");//PWM1 = SVGen_Tb
100005fa:	15 84       	ST.H      [R1], R5
..\application\libkf32foc.c:590
	asm("	LD		R1,#dPWM2                                     " "\n");
100005fc:	19 41       	LD        R1, [PC + #25]        ;->0x10000660  :=0x40001314
..\application\libkf32foc.c:591
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM2 = SVGen_Tc
100005fe:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:597

	//asm("	LD		R2,#6                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
10000600:	26 04       	SJMP      $+38                  ;->0x1000064c

10000602 <jSector2>:
..\application\libkf32foc.c:604
asm("jSector2:                                                    " "\n");

	//SVGen_qVr1 < 0 && SVGen_qVr2 >= 0 && SVGen_qVr3 < 0
	//@Sector2(010)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R4,SVGen_qVr1_R4,SVGen_iPWMPeriod_R2 " "\n");
10000602:	a4 ca       	MULS      R4, R4, R2
..\application\libkf32foc.c:605
	asm("	ASR	    SVGen_T1_R4,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr1*iPWMPeriod)>>15 (T1<0)
10000604:	a7 78       	ASR       R4, #15
..\application\libkf32foc.c:606
	asm("	MULS    SVGen_T2_R6,SVGen_qVr3_R6,SVGen_iPWMPeriod_R2 " "\n");
10000606:	b6 ca       	MULS      R6, R6, R2
..\application\libkf32foc.c:607
	asm("	ASR	    SVGen_T2_R6,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr3*iPWMPeriod)>>15 (T2<0)
10000608:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:608
	asm("	ADD     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R4   " "\n");
1000060a:	1a c3       	ADD       R3, R2, R4
..\application\libkf32foc.c:609
	asm("	ADD     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R6           " "\n");
1000060c:	9b c3       	ADD       R3, R3, R6
..\application\libkf32foc.c:610
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod + SVGen_T1 + SVGen_T2)>>1 (Tc>0)
1000060e:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:611
	asm("	SUB     SVGen_Tb_R4,SVGen_Tc_R3,SVGen_T1_R4           " "\n");//R4 = SVGen_Tb = SVGen_Tc - SVGen_T1 (T1<0)
10000610:	23 c7       	SUB       R4, R3, R4
..\application\libkf32foc.c:612
	asm("	SUB     SVGen_Ta_R6,SVGen_Tb_R4,SVGen_T2_R6           " "\n");//R5 = SVGen_Ta = SVGen_Tb - SVGen_T2 (T2<0)
10000612:	b4 c7       	SUB       R6, R4, R6
..\application\libkf32foc.c:614
	//更新PWM
	asm("	SUB     SVGen_Ta_R6,SVGen_iPWMPeriod_R2,SVGen_Ta_R6   " "\n");
10000614:	b2 c7       	SUB       R6, R2, R6
..\application\libkf32foc.c:615
	asm("	SUB     SVGen_Tb_R4,SVGen_iPWMPeriod_R2,SVGen_Tb_R4   " "\n");
10000616:	22 c7       	SUB       R4, R2, R4
..\application\libkf32foc.c:616
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
10000618:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:618

	asm("	LD		R1,#dPWM1                                     " "\n");
1000061a:	11 41       	LD        R1, [PC + #17]        ;->0x1000065c  :=0x40001a14
..\application\libkf32foc.c:619
	asm("	ST.H    [R1],SVGen_Ta_R6                              " "\n");//PWM1 = SVGen_Ta
1000061c:	16 84       	ST.H      [R1], R6
..\application\libkf32foc.c:620
	asm("	LD		R1,#dPWM3                                     " "\n");
1000061e:	12 41       	LD        R1, [PC + #18]        ;->0x10000664  :=0x40001394
..\application\libkf32foc.c:621
	asm("	ST.H    [R1],SVGen_Tb_R4                              " "\n");//PWM3 = SVGen_Tb
10000620:	14 84       	ST.H      [R1], R4
..\application\libkf32foc.c:622
	asm("	LD		R1,#dPWM2                                     " "\n");
10000622:	10 41       	LD        R1, [PC + #16]        ;->0x10000660  :=0x40001314
..\application\libkf32foc.c:623
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM2 = SVGen_Tc
10000624:	13 84       	ST.H      [R1], R3
..\application\libkf32foc.c:629

	//asm("	LD		R2,#2                                         " "\n");
	//asm("	LD		R1,#PWMSector                                 " "\n");
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	asm("	JMP		jExitPWM                                         " "\n");
10000626:	13 04       	SJMP      $+19                  ;->0x1000064c

10000628 <jSector4>:
..\application\libkf32foc.c:636
asm("jSector4:                                                    " "\n");

	//SVGen_qVr1 < 0 && SVGen_qVr2 < 0 && SVGen_qVr3 >= 0
	//@Sector4(100)
	//计算Ta,Tb,Tc
	asm("	MULS    SVGen_T1_R5,SVGen_qVr2_R5,SVGen_iPWMPeriod_R2 " "\n");
10000628:	ad ca       	MULS      R5, R5, R2
..\application\libkf32foc.c:637
	asm("	ASR	    SVGen_T1_R5,#15                               " "\n");//R4 = SVGen_T1 = (SVGen_qVr2*iPWMPeriod)>>15 (T1<0)
1000062a:	af 78       	ASR       R5, #15
..\application\libkf32foc.c:638
	asm("	MULS    SVGen_T2_R4,SVGen_qVr1_R4,SVGen_iPWMPeriod_R2 " "\n");
1000062c:	a4 ca       	MULS      R4, R4, R2
..\application\libkf32foc.c:639
	asm("	ASR	    SVGen_T2_R4,#15                               " "\n");//R5 = SVGen_T2 = (SVGen_qVr1*iPWMPeriod)>>15 (T2<0)
1000062e:	a7 78       	ASR       R4, #15
..\application\libkf32foc.c:640
	asm("	ADD     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_T1_R5   " "\n");
10000630:	5a c3       	ADD       R3, R2, R5
..\application\libkf32foc.c:641
	asm("	ADD     SVGen_Tc_R3,SVGen_Tc_R3,SVGen_T2_R4           " "\n");
10000632:	1b c3       	ADD       R3, R3, R4
..\application\libkf32foc.c:642
	asm("	ASR     SVGen_Tc_R3,#1                                " "\n");//R3 = SVGen_Tc = (iPWMPeriod + SVGen_T1 + SVGen_T2)>>1 (Tc>0)
10000634:	19 78       	ASR       R3, #1
..\application\libkf32foc.c:643
	asm("	SUB     SVGen_Tb_R5,SVGen_Tc_R3,SVGen_T1_R5           " "\n");//R4 = SVGen_Tb = SVGen_Tc - SVGen_T1 (T1<0)
10000636:	6b c7       	SUB       R5, R3, R5
..\application\libkf32foc.c:644
	asm("	SUB     SVGen_Ta_R4,SVGen_Tb_R5,SVGen_T2_R4           " "\n");//R5 = SVGen_Ta = SVGen_Tb - SVGen_T2 (T2<0)
10000638:	25 c7       	SUB       R4, R5, R4
..\application\libkf32foc.c:646
	//更新PWM
	asm("	SUB     SVGen_Ta_R4,SVGen_iPWMPeriod_R2,SVGen_Ta_R4   " "\n");
1000063a:	22 c7       	SUB       R4, R2, R4
..\application\libkf32foc.c:647
	asm("	SUB     SVGen_Tb_R5,SVGen_iPWMPeriod_R2,SVGen_Tb_R5   " "\n");
1000063c:	6a c7       	SUB       R5, R2, R5
..\application\libkf32foc.c:648
	asm("	SUB     SVGen_Tc_R3,SVGen_iPWMPeriod_R2,SVGen_Tc_R3   " "\n");
1000063e:	da c6       	SUB       R3, R2, R3
..\application\libkf32foc.c:650

	asm("	LD		R1,#dPWM3                                     " "\n");
10000640:	09 41       	LD        R1, [PC + #9]         ;->0x10000664  :=0x40001394
..\application\libkf32foc.c:651
	asm("	ST.H    [R1],SVGen_Ta_R4                              " "\n");//PWM3 = SVGen_Ta
10000642:	14 84       	ST.H      [R1], R4
..\application\libkf32foc.c:652
	asm("	LD		R1,#dPWM2                                     " "\n");
10000644:	07 41       	LD        R1, [PC + #7]         ;->0x10000660  :=0x40001314
..\application\libkf32foc.c:653
	asm("	ST.H    [R1],SVGen_Tb_R5                              " "\n");//PWM2 = SVGen_Tb
10000646:	15 84       	ST.H      [R1], R5
..\application\libkf32foc.c:654
	asm("	LD		R1,#dPWM1                                     " "\n");
10000648:	05 41       	LD        R1, [PC + #5]         ;->0x1000065c  :=0x40001a14
..\application\libkf32foc.c:655
	asm("	ST.H    [R1],SVGen_Tc_R3                              " "\n");//PWM1 = SVGen_Tc
1000064a:	13 84       	ST.H      [R1], R3

1000064c <jExitPWM>:
..\application\libkf32foc.c:664
	//asm("	ST.H    [R1],R2                                       " "\n");//PWMSector
	//退出
	//asm("	JMP		jExit                                         " "\n");

asm("jExitPWM:                                      " "\n");
	asm("	POP	R7                               " "\n");
1000064c:	07 5d       	POP       R7
..\application\libkf32foc.c:665
	asm("	POP	R6                               " "\n");
1000064e:	06 5d       	POP       R6
..\application\libkf32foc.c:666
}
10000650:	1d 5c       	JMP       LR
10000652:	00 00       	NOP      NOP      
10000654:	4e 3f 00 10 	.long     0x10003f4e ->268451662  [!!!@2@:CMP       R4, #126	@@: MOV       R0, #0
10000658:	70 3f 00 10 	.long     0x10003f70 ->268451696  [!!!@2@:CMP       R7, #112	@@: MOV       R0, #0
1000065c:	14 1a 00 40 	.long     0x40001a14 ->1073748500  [!!!@2@:MOV       R1, #164	@@: LD        R0, [PC + #0]         ;->0x1000065c  :=0x40001a14
10000660:	14 13 00 40 	.long     0x40001314 ->1073746708  [!!!@2@:MOV       R1, #52	@@: LD        R0, [PC + #0]         ;->0x10000660  :=0x40001314
10000664:	94 13 00 40 	.long     0x40001394 ->1073746836  [!!!@2@:MOV       R9, #52	@@: LD        R0, [PC + #0]         ;->0x10000664  :=0x40001394

10000668 <ClarkePark>:
ClarkePark():
..\application\libkf32foc.c:673

/******park clarke**********************************************************/
void __attribute__((section(".indata"))) ClarkePark(void)
{
	//手动压栈
	asm("	PUSH	R6                               " "\n");
10000668:	26 5d       	PUSH      R6
..\application\libkf32foc.c:674
	asm("	PUSH	R7                               " "\n");
1000066a:	27 5d       	PUSH      R7
..\application\libkf32foc.c:694
	asm("   .EQU Park_qValpha, 22                     " "\n");
	asm("   .EQU Park_qVbeta, 24                      " "\n");
	asm("	.EQU Park_qIaOffset, 26                  " "\n");
	asm("	.EQU Park_qIbOffset, 28                  " "\n");

	asm("	LD	    R0,#ParkParm+#Park_qIa             " "\n");//计算Park_qIa地址
1000066c:	15 40       	LD        R0, [PC + #21]        ;->0x100006c0  :=0x10003f52
..\application\libkf32foc.c:695
	asm("	LDS.H	R1,[R0]                   " "\n");//R1 = Park_qIa
1000066e:	10 86       	LDS.H     R1, [R0]
..\application\libkf32foc.c:697

	asm("	ADD     R0,#Park_qIb-#Park_qIa             " "\n");//计算Park_qIb地址
10000670:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:698
	asm("	LDS.H	R2,[R0]                   " "\n");//R2 = Park_qIb
10000672:	20 86       	LDS.H     R2, [R0]
..\application\libkf32foc.c:700

	asm("	ADD     R0,#Park_qIaOffset-#Park_qIb       " "\n");//计算Park_qIaOffset地址
10000674:	02 29       	ADD       R0, #18
..\application\libkf32foc.c:701
	asm("	LDS.H	R3,[R0]             " "\n");//R3 = Park_qIaOffset
10000676:	30 86       	LDS.H     R3, [R0]
..\application\libkf32foc.c:703

	asm("	ADD     R0,#Park_qIbOffset-#Park_qIaOffset " "\n");//计算Park_qIbOffset地址
10000678:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:704
	asm("	LDS.H	R4,[R0]             " "\n");//R4 = Park_qIbOffset
1000067a:	40 86       	LDS.H     R4, [R0]
..\application\libkf32foc.c:706

	asm("	SUB     R1,R3,R1     " "\n");
1000067c:	4b c6       	SUB       R1, R3, R1
..\application\libkf32foc.c:707
	asm("	LSL   	R1,#4			                      " "\n");
1000067e:	0c 7a       	LSL       R1, #4
..\application\libkf32foc.c:709

	asm("	SUB     R2,R4,R2     " "\n");
10000680:	94 c6       	SUB       R2, R4, R2
..\application\libkf32foc.c:710
	asm("	LSL   	R2,#4			                      " "\n");
10000682:	14 7a       	LSL       R2, #4
..\application\libkf32foc.c:712

	asm("	SUB     R0,#Park_qIbOffset-#Park_qIa       " "\n");//计算Park_qIa地址
10000684:	06 31       	SUB       R0, #22
..\application\libkf32foc.c:713
	asm("	ST.H    [R0++],R1                 " "\n");
10000686:	01 75       	ST.H      [R0++], R1
..\application\libkf32foc.c:714
	asm("	ST.H    [R0++],R2                 " "\n");
10000688:	02 75       	ST.H      [R0++], R2
..\application\libkf32foc.c:715
	asm("	ST.H    [R0++],R1                 " "\n");//ParkParm.qIalpha = ParkParm.qIa;
1000068a:	01 75       	ST.H      [R0++], R1
..\application\libkf32foc.c:717
	//到此R0指向ParkParm.qIbeta地址
	asm("   MOV		R3, #OneBySq3                         " "\n");
1000068c:	23 5c e7 49 	MOVL      R3, #18919
..\application\libkf32foc.c:718
	asm("	ADD 	R2,R2                        " "\n");
10000690:	22 64       	ADD       R2, R2
..\application\libkf32foc.c:719
	asm("	ADD 	R6,R1,R2         " "\n");
10000692:	b1 c2       	ADD       R6, R1, R2
..\application\libkf32foc.c:720
	asm("	MULS 	R6,R6,R3      " "\n");
10000694:	f6 ca       	MULS      R6, R6, R3
..\application\libkf32foc.c:721
	asm("	ASR   	R6,#15			                   " "\n");
10000696:	b7 78       	ASR       R6, #15
..\application\libkf32foc.c:722
	asm("	ST.H    [R0++],R6               " "\n");//ParkParm.qIbeta = R6;
10000698:	06 75       	ST.H      [R0++], R6
..\application\libkf32foc.c:724
	//到此R0指向ParkParm.qId地址
	asm("	SUB     R0,#Park_qId-#Park_qSin             " "\n");//计算Park_qSin地址
1000069a:	0c 30       	SUB       R0, #12
..\application\libkf32foc.c:725
	asm("	LDS.H	R3,[R0]                   " "\n");//R3 = Park_qSin
1000069c:	30 86       	LDS.H     R3, [R0]
..\application\libkf32foc.c:727

	asm("	ADD     R0,#Park_qCos-#Park_qSin            " "\n");//计算Park_qCos地址
1000069e:	02 28       	ADD       R0, #2
..\application\libkf32foc.c:728
	asm("	LDS.H	R4,[R0]                   " "\n");//R4 = Park_qCos
100006a0:	40 86       	LDS.H     R4, [R0]
..\application\libkf32foc.c:730
	//到此R0指向ParkParm.qCos地址
	asm("	MULS   	R2,R1,R4         " "\n");
100006a2:	11 cb       	MULS      R2, R1, R4
..\application\libkf32foc.c:731
	asm("	MULS   	R5,R6,R3          " "\n");
100006a4:	ee ca       	MULS      R5, R6, R3
..\application\libkf32foc.c:732
	asm("	ADD     R7,R2,R5                " "\n");
100006a6:	7a c3       	ADD       R7, R2, R5
..\application\libkf32foc.c:733
	asm("	ASR   	R7,#15			                       " "\n");
100006a8:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:735

	asm("	ADD     R0,#Park_qId-#Park_qCos             " "\n");//计算Park_qId地址
100006aa:	0a 28       	ADD       R0, #10
..\application\libkf32foc.c:736
	asm("	ST.H    [R0++],R7                  " "\n");
100006ac:	07 75       	ST.H      [R0++], R7
..\application\libkf32foc.c:738
	//到此R0指向ParkParm.qIq地址
	asm("	MULS   	R2,R1,R3    	   " "\n");
100006ae:	d1 ca       	MULS      R2, R1, R3
..\application\libkf32foc.c:739
	asm("	MULS   	R5,R6,R4    	   " "\n");
100006b0:	2e cb       	MULS      R5, R6, R4
..\application\libkf32foc.c:740
	asm("	SUB     R7,R5,R2                " "\n");
100006b2:	bd c6       	SUB       R7, R5, R2
..\application\libkf32foc.c:741
	asm("	ASR   	R7,#15			                       " "\n");
100006b4:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:743

	asm("	ST.H    [R0],R7                    " "\n");
100006b6:	07 84       	ST.H      [R0], R7
..\application\libkf32foc.c:745

	asm("	POP		R7                                   ""\n\t");
100006b8:	07 5d       	POP       R7
..\application\libkf32foc.c:746
	asm("	POP		R6                                   ""\n\t");
100006ba:	06 5d       	POP       R6
..\application\libkf32foc.c:748

}
100006bc:	1d 5c       	JMP       LR
100006be:	00 00       	NOP      NOP      
100006c0:	52 3f 00 10 	.long     0x10003f52 ->268451666  [!!!@2@:CMP       R5, #114	@@: MOV       R0, #0

100006c4 <CalcPI>:
CalcPI():
..\application\libkf32foc.c:753

/******PI calc***************************************************************/
void __attribute__((section(".indata"))) CalcPI( tPIParm *pParm)
{
	asm("	PUSH	R6                             ""\n\t" );
100006c4:	26 5d       	PUSH      R6
..\application\libkf32foc.c:754
	asm("	PUSH	R7                             ""\n\t" );
100006c6:	27 5d       	PUSH      R7
..\application\libkf32foc.c:765
	asm("	.EQU 	PI_qOutMin, 16                 ""\n\t" );
	asm("	.EQU 	PI_qdSum, 20                   ""\n\t" );
	asm("	.EQU 	PI_qOut, 24                    ""\n\t" );

	//连续Load数据
	asm("	LD.W	R1,[R0++]        ""\n\t");//取PI_qErr变量
100006c8:	10 72       	LD.W      R1, [R0++]
..\application\libkf32foc.c:766
	asm("	LD.W	R2, [R0++]        ""\n\t");//取PI_qKp变量
100006ca:	20 72       	LD.W      R2, [R0++]
..\application\libkf32foc.c:767
	asm("	LD.W	R3, [R0++]        ""\n\t");//取PI_qKi变量
100006cc:	30 72       	LD.W      R3, [R0++]
..\application\libkf32foc.c:768
	asm("	LD.W	R4, [R0++]    ""\n\t");//取PI_qOutMax变量
100006ce:	40 72       	LD.W      R4, [R0++]
..\application\libkf32foc.c:769
	asm("	LD.W	R5, [R0++]    ""\n\t");//取PI_qOutMin变量
100006d0:	50 72       	LD.W      R5, [R0++]
..\application\libkf32foc.c:770
	asm("	LD.W	R6,   [R0]      ""\n\t");//取PI_qdSum变量
100006d2:	60 82       	LD.W      R6, [R0]
..\application\libkf32foc.c:774
	//到此R0指向PI_qdSum地址


	asm("	MULS	R7,R1,R2       ""\n\t");
100006d4:	b9 ca       	MULS      R7, R1, R2
..\application\libkf32foc.c:775
	asm("	ADD		R7,R7,R6     ""\n\t");
100006d6:	bf c3       	ADD       R7, R7, R6
..\application\libkf32foc.c:776
	asm("	ASR   	R7,#15			               " "\n");
100006d8:	bf 78       	ASR       R7, #15
..\application\libkf32foc.c:777
	asm("	CMP     R7,R4               " "\n");
100006da:	74 70       	CMP       R7, R4
..\application\libkf32foc.c:778
	asm("	JLT		jLess                                  " "\n");//( PI_qOut < PI_qOutMax ) goto jLess;
100006dc:	07 fb       	JLT       $+7                   ;->0x100006ea
..\application\libkf32foc.c:779
	asm("	MOV     R7,R4               " "\n");
100006de:	e4 58       	MOV       R7, R4
..\application\libkf32foc.c:780
	asm("	CMP     R1,#0                          " "\n");
100006e0:	10 38       	CMP       R1, #0
..\application\libkf32foc.c:781
	asm("	JGT		jExit1                                  " "\n");//( PI_qErr > 0 ) goto jExit;
100006e2:	0e fc       	JGT       $+14                  ;->0x100006fe
..\application\libkf32foc.c:782
	asm("	MULS	R1,R1,R3       ""\n\t");
100006e4:	c9 ca       	MULS      R1, R1, R3
..\application\libkf32foc.c:783
	asm("	ADD		R6,R6,R1    ""\n\t");
100006e6:	76 c2       	ADD       R6, R6, R1
..\application\libkf32foc.c:784
	asm("	JMP		jExit1                                  " "\n");
100006e8:	0b 04       	SJMP      $+11                  ;->0x100006fe

100006ea <jLess>:
..\application\libkf32foc.c:788

asm("jLess:                                                " "\n");

	asm("	CMP     R7,R5               " "\n");
100006ea:	75 70       	CMP       R7, R5
..\application\libkf32foc.c:789
	asm("	JGT		jGreat                                 " "\n");//( PI_qOut > PI_qOutMax ) goto jGreat;
100006ec:	07 fc       	JGT       $+7                   ;->0x100006fa
..\application\libkf32foc.c:790
	asm("	MOV     R7,R5               " "\n");
100006ee:	e5 58       	MOV       R7, R5
..\application\libkf32foc.c:791
	asm("	CMP     R1,#0                          " "\n");
100006f0:	10 38       	CMP       R1, #0
..\application\libkf32foc.c:792
	asm("	JLT		jExit1                                  " "\n");//( PI_qErr < 0 ) goto jExit;
100006f2:	06 fb       	JLT       $+6                   ;->0x100006fe
..\application\libkf32foc.c:793
	asm("	MULS	R1,R1,R3       ""\n\t");
100006f4:	c9 ca       	MULS      R1, R1, R3
..\application\libkf32foc.c:794
	asm("	ADD		R6,R6,R1    ""\n\t");
100006f6:	76 c2       	ADD       R6, R6, R1
..\application\libkf32foc.c:795
	asm("	JMP		jExit1                                  " "\n");
100006f8:	03 04       	SJMP      $+3                   ;->0x100006fe

100006fa <jGreat>:
..\application\libkf32foc.c:799

asm("jGreat:                                               " "\n");

	asm("	MULS	R1,R1,R3       ""\n\t");
100006fa:	c9 ca       	MULS      R1, R1, R3
..\application\libkf32foc.c:800
	asm("	ADD		R6,R6,R1    ""\n\t");
100006fc:	76 c2       	ADD       R6, R6, R1

100006fe <jExit1>:
..\application\libkf32foc.c:804

asm("jExit1:                                                " "\n");

	asm("	ST.W    [R0++],R6          " "\n");
100006fe:	06 73       	ST.W      [R0++], R6
..\application\libkf32foc.c:805
	asm("	ST.W    [R0],  R7           " "\n");
10000700:	07 85       	ST.W      [R0], R7
..\application\libkf32foc.c:807

	asm("	POP		R7					                 ""\n\t" );
10000702:	07 5d       	POP       R7
..\application\libkf32foc.c:808
	asm("	POP		R6					                 ""\n\t" );
10000704:	06 5d       	POP       R6
..\application\libkf32foc.c:809
}
10000706:	1d 5c       	JMP       LR

10000708 <CalcEstI>:
CalcEstI():
..\application\libkf32foc.c:856
	asm("	.EQU   SMC_Vbeta, 7                    ""\n\t");//
	asm("	.EQU   SMC_Ebeta, 8                    ""\n\t");//
	asm("	.EQU   SMC_Zbeta, 10                   ""\n\t");//
	asm("	.EQU   SMC_EstIbeta, 11                ""\n\t");//

	asm("	MOV R2,#smc1                            ""\n\t");
10000708:	22 5c c4 3e 	MOVL      R2, #16068
1000070c:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:857
	asm("	ADD	R2,#SMC_Gsmopos              ""\n\t");
10000710:	24 28       	ADD       R2, #4
..\application\libkf32foc.c:858
	asm("	ADD	R2,#SMC_Gsmopos              ""\n\t");
10000712:	24 28       	ADD       R2, #4
..\application\libkf32foc.c:859
	asm("	LDS.H R4,[R2]              ""\n\t");//Gsmopos大于0,正数
10000714:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:860
	asm("	MOV R2,#smc1                            ""\n\t");
10000716:	22 5c c4 3e 	MOVL      R2, #16068
1000071a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:861
	asm("	ADD	R2,#SMC_Valpha              ""\n\t");
1000071e:	20 28       	ADD       R2, #0
..\application\libkf32foc.c:862
	asm("	ADD	R2,#SMC_Valpha              ""\n\t");
10000720:	20 28       	ADD       R2, #0
..\application\libkf32foc.c:863
	asm("	LDS.H R5,[R2]               ""\n\t");
10000722:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:864
	asm("	MULS R0,R4,R5                    		""\n\t");
10000724:	44 cb       	MULS      R0, R4, R5
..\application\libkf32foc.c:865
	asm("	LSL R0,#1                    		""\n\t");
10000726:	01 7a       	LSL       R0, #1
..\application\libkf32foc.c:866
	asm("	ASR R0,#16                    		""\n\t");
10000728:	00 79       	ASR       R0, #16
..\application\libkf32foc.c:868

	asm("	MOV R2,#smc1                            ""\n\t");
1000072a:	22 5c c4 3e 	MOVL      R2, #16068
1000072e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:869
	asm("	ADD	R2,#SMC_Ealpha              ""\n\t");
10000732:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:870
	asm("	ADD	R2,#SMC_Ealpha              ""\n\t");
10000734:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:871
	asm("	LDS.H R5,[R2]               ""\n\t");
10000736:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:872
	asm("	MULS R1,R4,R5                    		""\n\t");
10000738:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:873
	asm("	LSL R1,#1                    		""\n\t");
1000073a:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:874
	asm("	ASR R1,#16                    		""\n\t");
1000073c:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:875
	asm("	SUB R0,R1                    		""\n\t");
1000073e:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:877

	asm("	MOV R2,#smc1                            ""\n\t");
10000740:	22 5c c4 3e 	MOVL      R2, #16068
10000744:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:878
	asm("	ADD	R2,#SMC_Zalpha              ""\n\t");
10000748:	23 28       	ADD       R2, #3
..\application\libkf32foc.c:879
	asm("	ADD	R2,#SMC_Zalpha              ""\n\t");
1000074a:	23 28       	ADD       R2, #3
..\application\libkf32foc.c:880
	asm("	LDS.H R5,[R2]               ""\n\t");
1000074c:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:881
	asm("	MULS R1,R4,R5                    		""\n\t");
1000074e:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:882
	asm("	LSL R1,#1                    		""\n\t");
10000750:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:883
	asm("	ASR R1,#16                    		""\n\t");
10000752:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:884
	asm("	SUB R0,R1                    		""\n\t");
10000754:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:886

	asm("	MOV R2,#smc1                            ""\n\t");
10000756:	22 5c c4 3e 	MOVL      R2, #16068
1000075a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:887
	asm("	ADD	R2,#SMC_Fsmopos              ""\n\t");
1000075e:	26 28       	ADD       R2, #6
..\application\libkf32foc.c:888
	asm("	ADD	R2,#SMC_Fsmopos              ""\n\t");
10000760:	26 28       	ADD       R2, #6
..\application\libkf32foc.c:889
	asm("	LDS.H R4,[R2]              ""\n\t");
10000762:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:890
	asm("	MOV R2,#smc1                            ""\n\t");
10000764:	22 5c c4 3e 	MOVL      R2, #16068
10000768:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:891
	asm("	ADD	R2,#SMC_EstIalpha              ""\n\t");
1000076c:	25 28       	ADD       R2, #5
..\application\libkf32foc.c:892
	asm("	ADD	R2,#SMC_EstIalpha              ""\n\t");
1000076e:	25 28       	ADD       R2, #5
..\application\libkf32foc.c:893
	asm("	LDS.H R5,[R2]            ""\n\t");
10000770:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:894
	asm("	MULS R1,R4,R5                    		""\n\t");
10000772:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:895
	asm("	LSL R1,#1                    		""\n\t");
10000774:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:896
	asm("	ASR R1,#16                    		""\n\t");
10000776:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:897
	asm("	ADD R0,R1                    		""\n\t");
10000778:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:898
	asm("	MOV R2,#smc1                            ""\n\t");
1000077a:	22 5c c4 3e 	MOVL      R2, #16068
1000077e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:899
	asm("	ST.H  [R2+#SMC_EstIalpha],R0            ""\n\t");
10000782:	50 b1       	ST.H      [R2 + #5], R0
..\application\libkf32foc.c:906
	//	s->EstIbeta = s->Gsmopos * s->Vbeta
	//				- s->Gsmopos * s->Ebeta
	//				- s->Gsmopos * s->Zbeta
	//				+ s->Fsmopos * s->EstIbeta
	//
	asm("	MOV R2,#smc1                            ""\n\t");
10000784:	22 5c c4 3e 	MOVL      R2, #16068
10000788:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:907
	asm("	ADD	R2,#SMC_Gsmopos              ""\n\t");
1000078c:	24 28       	ADD       R2, #4
..\application\libkf32foc.c:908
	asm("	ADD	R2,#SMC_Gsmopos              ""\n\t");
1000078e:	24 28       	ADD       R2, #4
..\application\libkf32foc.c:909
	asm("	LDS.H  R4,[R2]             ""\n\t" );
10000790:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:910
	asm("	MOV R2,#smc1                            ""\n\t");
10000792:	22 5c c4 3e 	MOVL      R2, #16068
10000796:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:911
	asm("	ADD	R2,#SMC_Vbeta              ""\n\t");
1000079a:	27 28       	ADD       R2, #7
..\application\libkf32foc.c:912
	asm("	ADD	R2,#SMC_Vbeta              ""\n\t");
1000079c:	27 28       	ADD       R2, #7
..\application\libkf32foc.c:913
	asm("	LDS.H  R5,[R2]               ""\n\t" );
1000079e:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:914
	asm("	MULS R0,R4,R5                    ""\n\t"      );
100007a0:	44 cb       	MULS      R0, R4, R5
..\application\libkf32foc.c:915
	asm("	LSL R0,#1                    		""\n\t");
100007a2:	01 7a       	LSL       R0, #1
..\application\libkf32foc.c:916
	asm("	ASR R0,#16                    		""\n\t");
100007a4:	00 79       	ASR       R0, #16
..\application\libkf32foc.c:917
	asm("	MOV R2,#smc1                            ""\n\t");
100007a6:	22 5c c4 3e 	MOVL      R2, #16068
100007aa:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:918
	asm("	ADD	R2,#SMC_Ebeta              ""\n\t");
100007ae:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:919
	asm("	ADD	R2,#SMC_Ebeta              ""\n\t");
100007b0:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:920
	asm("	LDS.H R5,[R2]                ""\n\t" );
100007b2:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:921
	asm("	MULS R1,R4,R5                    ""\n\t"      );
100007b4:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:922
	asm("	LSL R1,#1                    		""\n\t");
100007b6:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:923
	asm("	ASR R1,#16                    		""\n\t");
100007b8:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:924
	asm("	SUB R0,R1                    		""\n\t");
100007ba:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:926

	asm("	MOV R2,#smc1                            ""\n\t");
100007bc:	22 5c c4 3e 	MOVL      R2, #16068
100007c0:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:927
	asm("	ADD	R2,#SMC_Zbeta              ""\n\t");
100007c4:	2a 28       	ADD       R2, #10
..\application\libkf32foc.c:928
	asm("	ADD	R2,#SMC_Zbeta              ""\n\t");
100007c6:	2a 28       	ADD       R2, #10
..\application\libkf32foc.c:929
	asm("	LDS.H R5,[R2]                ""\n\t" );
100007c8:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:931

	asm("	MULS R1,R4,R5                    ""\n\t"      );
100007ca:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:932
	asm("	LSL R1,#1                    		""\n\t");
100007cc:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:933
	asm("	ASR R1,#16                    		""\n\t");
100007ce:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:934
	asm("	SUB R0,R1                    		""\n\t");
100007d0:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:936

	asm("	MOV R2,#smc1                            ""\n\t");
100007d2:	22 5c c4 3e 	MOVL      R2, #16068
100007d6:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:937
	asm("	ADD	R2,#SMC_Fsmopos              ""\n\t");
100007da:	26 28       	ADD       R2, #6
..\application\libkf32foc.c:938
	asm("	ADD	R2,#SMC_Fsmopos              ""\n\t");
100007dc:	26 28       	ADD       R2, #6
..\application\libkf32foc.c:939
	asm("	LDS.H R4,[R2]              ""\n\t" );
100007de:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:940
	asm("	MOV R2,#smc1                            ""\n\t");
100007e0:	22 5c c4 3e 	MOVL      R2, #16068
100007e4:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:941
	asm("	ADD	R2,#SMC_EstIbeta              ""\n\t");
100007e8:	2b 28       	ADD       R2, #11
..\application\libkf32foc.c:942
	asm("	ADD	R2,#SMC_EstIbeta              ""\n\t");
100007ea:	2b 28       	ADD       R2, #11
..\application\libkf32foc.c:943
	asm("	LDS.H R5,[R2]             ""\n\t" );
100007ec:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:944
	asm("	MULS R1,R4,R5                    ""\n\t"      );
100007ee:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:945
	asm("	LSL R1,#1                    		""\n\t");
100007f0:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:946
	asm("	ASR R1,#16                    		""\n\t");
100007f2:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:947
	asm("	ADD R0,R1                    		""\n\t");
100007f4:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:948
	asm("	MOV R2,#smc1                            ""\n\t");
100007f6:	22 5c c4 3e 	MOVL      R2, #16068
100007fa:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:949
	asm("	ST.H  [R2+#SMC_EstIbeta],R0            ""\n\t"  );
100007fe:	d0 b2       	ST.H      [R2 + #11], R0
..\application\libkf32foc.c:950
}
10000800:	1d 5c       	JMP       LR

10000802 <CalcIError>:
CalcIError():
..\application\libkf32foc.c:966
	asm("	.EQU   SMC_EstIbeta, 11                     ""\n\t" );
	asm("	.EQU   SMC_Ialpha, 12                       ""\n\t" );
	asm("	.EQU   SMC_IalphaError, 13                  ""\n\t" );
	asm("	.EQU   SMC_Ibeta, 16                        ""\n\t" );
	asm("	.EQU   SMC_IbetaError, 17                   ""\n\t" );
	asm("	MOV R2,#smc1                            ""\n\t"  );
10000802:	22 5c c4 3e 	MOVL      R2, #16068
10000806:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:967
	asm("	ADD R2,#SMC_EstIalpha                            ""\n\t"  );
1000080a:	25 28       	ADD       R2, #5
..\application\libkf32foc.c:968
	asm("	ADD R2,#SMC_EstIalpha                            ""\n\t"  );
1000080c:	25 28       	ADD       R2, #5
..\application\libkf32foc.c:969
	asm("	LDS.H R0,[R2]             ""\n\t" );
1000080e:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:970
	asm("	MOV R2,#smc1                            ""\n\t"  );
10000810:	22 5c c4 3e 	MOVL      R2, #16068
10000814:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:971
	asm("	ADD R2,#SMC_Ialpha                            ""\n\t"  );
10000818:	2c 28       	ADD       R2, #12
..\application\libkf32foc.c:972
	asm("	ADD R2,#SMC_Ialpha                            ""\n\t"  );
1000081a:	2c 28       	ADD       R2, #12
..\application\libkf32foc.c:973
	asm("	LDS.H R1,[R2]                ""\n\t" );
1000081c:	12 86       	LDS.H     R1, [R2]
..\application\libkf32foc.c:974
	asm("	SUB R0,R0,R1                           ""\n\t"   );
1000081e:	40 c6       	SUB       R0, R0, R1
..\application\libkf32foc.c:975
	asm("	MOV R2,#smc1                            ""\n\t"  );
10000820:	22 5c c4 3e 	MOVL      R2, #16068
10000824:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:976
	asm("	ST.H [R2+#SMC_IalphaError],R0           ""\n\t");//// s->IalphaError = s->EstIalpha - s->Ialpha;
10000828:	50 b3       	ST.H      [R2 + #13], R0
..\application\libkf32foc.c:977
	asm("	MOV R2,#smc1                            ""\n\t"  );
1000082a:	22 5c c4 3e 	MOVL      R2, #16068
1000082e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:978
	asm("	ADD R2,#SMC_EstIbeta                            ""\n\t"  );
10000832:	2b 28       	ADD       R2, #11
..\application\libkf32foc.c:979
	asm("	ADD R2,#SMC_EstIbeta                            ""\n\t"  );
10000834:	2b 28       	ADD       R2, #11
..\application\libkf32foc.c:980
	asm("	LDS.H R0,[R2]              ""\n\t");
10000836:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:981
	asm("	MOV R2,#smc1                            ""\n\t"  );
10000838:	22 5c c4 3e 	MOVL      R2, #16068
1000083c:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:982
	asm("	ADD R2,#SMC_Ibeta                            ""\n\t"  );
10000840:	20 29       	ADD       R2, #16
..\application\libkf32foc.c:983
	asm("	ADD R2,#SMC_Ibeta                            ""\n\t"  );
10000842:	20 29       	ADD       R2, #16
..\application\libkf32foc.c:984
	asm("	LDS.H R1,[R2]                 ""\n\t");
10000844:	12 86       	LDS.H     R1, [R2]
..\application\libkf32foc.c:985
	asm("	SUB R0,R0,R1                           ""\n\t"  );
10000846:	40 c6       	SUB       R0, R0, R1
..\application\libkf32foc.c:986
	asm("	MOV R2,#smc1                            ""\n\t"  );
10000848:	22 5c c4 3e 	MOVL      R2, #16068
1000084c:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:987
	asm("	ST.H [R2+#SMC_IbetaError],R0            ""\n\t");//// s->IbetaError = s->EstIbeta - s->Ibeta;
10000850:	50 b4       	ST.H      [R2 + #17], R0
..\application\libkf32foc.c:990


}
10000852:	1d 5c       	JMP       LR

10000854 <CalcZalpha>:
CalcZalpha():
..\application\libkf32foc.c:1003
		// s->Zalpha = (s->Kslide * s->IalphaError) / s->MaxSMCError
	asm("	.EQU   SMC_Zalpha, 3             " "\n"     );
	asm("	.EQU   SMC_IalphaError, 13       " "\n"     );
	asm("	.EQU   SMC_Kslide, 14            " "\n"     );
	asm("	.EQU   SMC_MaxSMCError, 15       " "\n"     );
	asm("	PUSH	R7							" "\n"  );
10000854:	27 5d       	PUSH      R7
..\application\libkf32foc.c:1004
	asm("	MOV R2,#smc1						" "\n"  );
10000856:	22 5c c4 3e 	MOVL      R2, #16068
1000085a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1005
	asm("	ADD R2,#SMC_Kslide						" "\n"  );
1000085e:	2e 28       	ADD       R2, #14
..\application\libkf32foc.c:1006
	asm("	ADD R2,#SMC_Kslide						" "\n"  );
10000860:	2e 28       	ADD       R2, #14
..\application\libkf32foc.c:1007
	asm("	LDS.H R4,[R2]			" "\n"  );
10000862:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1008
	asm("	MOV R2,#smc1						" "\n"  );
10000864:	22 5c c4 3e 	MOVL      R2, #16068
10000868:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1009
	asm("	ADD R2,#SMC_IalphaError						" "\n"  );
1000086c:	2d 28       	ADD       R2, #13
..\application\libkf32foc.c:1010
	asm("	ADD R2,#SMC_IalphaError						" "\n"  );
1000086e:	2d 28       	ADD       R2, #13
..\application\libkf32foc.c:1011
	asm("	LDS.H R5,[R2]		" "\n"  );
10000870:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1012
	asm("	MOV R2,#smc1						" "\n"  );
10000872:	22 5c c4 3e 	MOVL      R2, #16068
10000876:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1013
	asm("	ADD R2,#SMC_MaxSMCError						" "\n"  );
1000087a:	2f 28       	ADD       R2, #15
..\application\libkf32foc.c:1014
	asm("	ADD R2,#SMC_MaxSMCError						" "\n"  );
1000087c:	2f 28       	ADD       R2, #15
..\application\libkf32foc.c:1015
	asm("	LDS.H R7,[R2]		" "\n"  );
1000087e:	72 86       	LDS.H     R7, [R2]
..\application\libkf32foc.c:1017

	asm("	MULS R0,R4,R5					 " "\n"     );
10000880:	44 cb       	MULS      R0, R4, R5
..\application\libkf32foc.c:1018
	asm("	LSL R0,#1                 ""\n\t"    );
10000882:	01 7a       	LSL       R0, #1
..\application\libkf32foc.c:1019
	asm("	ASR R0,#16                 ""\n\t"    );
10000884:	00 79       	ASR       R0, #16
..\application\libkf32foc.c:1020
	asm("	LSL R0,#15                    " "\n"   );
10000886:	87 7a       	LSL       R0, #15
..\application\libkf32foc.c:1021
	asm("	DIVS R0,R0,R7                    " "\n");
10000888:	c0 cf       	DIVS      R0, R0, R7
..\application\libkf32foc.c:1022
	asm("	MOV R2,#smc1						" "\n"  );
1000088a:	22 5c c4 3e 	MOVL      R2, #16068
1000088e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1023
	asm("	ST.H  [R2+#SMC_Zalpha],R0        " "\n");
10000892:	d0 b0       	ST.H      [R2 + #3], R0
..\application\libkf32foc.c:1024
	asm("	POP		R7                       " "\n");
10000894:	07 5d       	POP       R7
..\application\libkf32foc.c:1026

}
10000896:	1d 5c       	JMP       LR

10000898 <CalcZbeta>:
CalcZbeta():
..\application\libkf32foc.c:1038
	//		s->Zbeta = (s->Kslide * s->IbetaError) / s->MaxSMCError
		asm("	.EQU   SMC_Zbeta ,10             " "\n" );
		asm("	.EQU   SMC_IbetaError, 17        " "\n" );
		asm("	.EQU   SMC_Kslide, 14            " "\n" );
		asm("	.EQU   SMC_MaxSMCError, 15       " "\n" );
		asm("	PUSH	R7                       " "\n" );
10000898:	27 5d       	PUSH      R7
..\application\libkf32foc.c:1039
		asm("	MOV R2,#smc1                     " "\n" );
1000089a:	22 5c c4 3e 	MOVL      R2, #16068
1000089e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1040
		asm("	ADD R2,#SMC_Kslide                     " "\n" );
100008a2:	2e 28       	ADD       R2, #14
..\application\libkf32foc.c:1041
		asm("	ADD R2,#SMC_Kslide                     " "\n" );
100008a4:	2e 28       	ADD       R2, #14
..\application\libkf32foc.c:1042
		asm("	LDS.H R4,[R2]         " "\n");
100008a6:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1043
		asm("	MOV R2,#smc1                     " "\n" );
100008a8:	22 5c c4 3e 	MOVL      R2, #16068
100008ac:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1044
		asm("	ADD R2,#SMC_IbetaError                     " "\n" );
100008b0:	21 29       	ADD       R2, #17
..\application\libkf32foc.c:1045
		asm("	ADD R2,#SMC_IbetaError                     " "\n" );
100008b2:	21 29       	ADD       R2, #17
..\application\libkf32foc.c:1046
		asm("	LDS.H R5,[R2]     " "\n");
100008b4:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1047
		asm("	MOV R2,#smc1                     " "\n" );
100008b6:	22 5c c4 3e 	MOVL      R2, #16068
100008ba:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1048
		asm("	ADD R2,#SMC_MaxSMCError                     " "\n" );
100008be:	2f 28       	ADD       R2, #15
..\application\libkf32foc.c:1049
		asm("	ADD R2,#SMC_MaxSMCError                     " "\n" );
100008c0:	2f 28       	ADD       R2, #15
..\application\libkf32foc.c:1050
		asm("	LDS.H R7,[R2]    " "\n");
100008c2:	72 86       	LDS.H     R7, [R2]
..\application\libkf32foc.c:1051
		asm("	MULS R0,R4,R5						 " "\n" );
100008c4:	44 cb       	MULS      R0, R4, R5
..\application\libkf32foc.c:1052
		asm("	LSL R0,#1					 " "\n" );
100008c6:	01 7a       	LSL       R0, #1
..\application\libkf32foc.c:1053
		asm("	ASR R0,#16					 " "\n" );
100008c8:	00 79       	ASR       R0, #16
..\application\libkf32foc.c:1054
		asm("	LSL R0,#15                    " "\n"   );
100008ca:	87 7a       	LSL       R0, #15
..\application\libkf32foc.c:1055
		asm("	DIVS R0,R0,R7                    " "\n");
100008cc:	c0 cf       	DIVS      R0, R0, R7
..\application\libkf32foc.c:1056
		asm("	MOV R2,#smc1                     " "\n" );
100008ce:	22 5c c4 3e 	MOVL      R2, #16068
100008d2:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1057
		asm("	ST.H  [R2+#SMC_Zbeta],R0         " "\n");
100008d6:	90 b2       	ST.H      [R2 + #10], R0
..\application\libkf32foc.c:1058
		asm("	POP		R7                       " "\n");
100008d8:	07 5d       	POP       R7
..\application\libkf32foc.c:1060

}
100008da:	1d 5c       	JMP       LR

100008dc <CalcBEMF>:
CalcBEMF():
..\application\libkf32foc.c:1106
	asm("	.EQU   SMC_Theta,22                 ""\n\t"   );
	asm("	.EQU   SMC_Omega,23                  ""\n\t"  );
	asm("	.EQU   SMC_OmegaFltred, 24           ""\n\t"  );
		// s->Ealpha = s->Ealpha + s->Kslf * s->Zalpha
		//                       - s->Kslf * s->Ealpha
	asm("	MOV R2,#smc1                         ""\n\t"  );
100008dc:	22 5c c4 3e 	MOVL      R2, #16068
100008e0:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1107
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
100008e4:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1108
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
100008e6:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1109
	asm("	LDS.H R0,[R2]             ""\n\t" );
100008e8:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1111

	asm("	MOV R2,#smc1                         ""\n\t"  );
100008ea:	22 5c c4 3e 	MOVL      R2, #16068
100008ee:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1112
	asm("	ADD R2,#SMC_Zalpha                         ""\n\t"  );
100008f2:	23 28       	ADD       R2, #3
..\application\libkf32foc.c:1113
	asm("	ADD R2,#SMC_Zalpha                         ""\n\t"  );
100008f4:	23 28       	ADD       R2, #3
..\application\libkf32foc.c:1114
	asm("	LDS.H R4,[R2]             ""\n\t" );
100008f6:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1116

	asm("	MOV R2,#smc1                         ""\n\t"  );
100008f8:	22 5c c4 3e 	MOVL      R2, #16068
100008fc:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1117
	asm("	ADD R2,#SMC_Kslf                         ""\n\t"  );
10000900:	22 29       	ADD       R2, #18
..\application\libkf32foc.c:1118
	asm("	ADD R2,#SMC_Kslf                         ""\n\t"  );
10000902:	22 29       	ADD       R2, #18
..\application\libkf32foc.c:1119
	asm("	LDS.H R5,[R2]                   ""\n\t" );
10000904:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1121

	asm("	MULS R1,R4,R5                   ""\n\t"  );
10000906:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1122
	asm("	LSL R1,#1                   	""\n\t"  );
10000908:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1123
	asm("	ASR R1,#16                   	""\n\t"  );
1000090a:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1124
	asm("	ADD R0,R1                   	""\n\t"  );
1000090c:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1126

	asm("	MOV R2,#smc1                         ""\n\t"  );
1000090e:	22 5c c4 3e 	MOVL      R2, #16068
10000912:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1127
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
10000916:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1128
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
10000918:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1129
	asm("	LDS.H R4,[R2]             ""\n\t" );
1000091a:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1130
	asm("	MULS R1,R4,R5                  	 ""\n\t"  );
1000091c:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1131
	asm("	LSL R1,#1                   	""\n\t"  );
1000091e:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1132
	asm("	ASR R1,#16                   	""\n\t"  );
10000920:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1133
	asm("	SUB R0,R1                 	 ""\n\t"  );
10000922:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1134
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000924:	22 5c c4 3e 	MOVL      R2, #16068
10000928:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1135
	asm("	ST.H [R2+#SMC_Ealpha],R0             ""\n\t"  );
1000092c:	50 b0       	ST.H      [R2 + #1], R0
..\application\libkf32foc.c:1138
		// s->Ebeta = s->Ebeta + s->Kslf * s->Zbeta
		//                     - s->Kslf * s->Ebeta
	asm("	MOV R2,#smc1                         ""\n\t"  );
1000092e:	22 5c c4 3e 	MOVL      R2, #16068
10000932:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1139
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
10000936:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1140
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
10000938:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1141
	asm("	LDS.H R0,[R2]              ""\n\t" );
1000093a:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1143

	asm("	MOV R2,#smc1                         ""\n\t"  );
1000093c:	22 5c c4 3e 	MOVL      R2, #16068
10000940:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1144
	asm("	ADD R2,#SMC_Zbeta                         ""\n\t"  );
10000944:	2a 28       	ADD       R2, #10
..\application\libkf32foc.c:1145
	asm("	ADD R2,#SMC_Zbeta                         ""\n\t"  );
10000946:	2a 28       	ADD       R2, #10
..\application\libkf32foc.c:1146
	asm("	LDS.H R4,[R2]              ""\n\t" );
10000948:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1148

	asm("	MOV R2,#smc1                         ""\n\t"  );
1000094a:	22 5c c4 3e 	MOVL      R2, #16068
1000094e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1149
	asm("	ADD R2,#SMC_Kslf                         ""\n\t"  );
10000952:	22 29       	ADD       R2, #18
..\application\libkf32foc.c:1150
	asm("	ADD R2,#SMC_Kslf                         ""\n\t"  );
10000954:	22 29       	ADD       R2, #18
..\application\libkf32foc.c:1151
	asm("	LDS.H R5,[R2]               ""\n\t" );
10000956:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1152
	asm("	MULS R1,R4,R5                  	 ""\n\t"  );
10000958:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1153
	asm("	LSL R1,#1                  	 ""\n\t"  );
1000095a:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1154
	asm("	ASR R1,#16                  	 ""\n\t"  );
1000095c:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1155
	asm("	ADD R0,R1                   	""\n\t"  );
1000095e:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1157

	asm("	MOV R2,#smc1                         ""\n\t"  );
10000960:	22 5c c4 3e 	MOVL      R2, #16068
10000964:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1158
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
10000968:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1159
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
1000096a:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1160
	asm("	LDS.H R4,[R2]              ""\n\t" );
1000096c:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1161
	asm("	MULS R1,R4,R5                  	 ""\n\t"  );
1000096e:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1162
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000970:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1163
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000972:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1164
	asm("	SUB R0,R1                 	 ""\n\t"  );
10000974:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1165
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000976:	22 5c c4 3e 	MOVL      R2, #16068
1000097a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1166
	asm("	ST.H  [R2+#SMC_Ebeta],R0             ""\n\t"  );
1000097e:	10 b2       	ST.H      [R2 + #8], R0
..\application\libkf32foc.c:1170
		// New filter used to calculate Position
		// s->EalphaFinal = s->EalphaFinal + s->KslfFinal * s->Ealpha
		//                                 - s->KslfFinal * s->EalphaFinal
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000980:	22 5c c4 3e 	MOVL      R2, #16068
10000984:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1171
	asm("	ADD R2,#SMC_EalphaFinal                         ""\n\t"  );
10000988:	22 28       	ADD       R2, #2
..\application\libkf32foc.c:1172
	asm("	ADD R2,#SMC_EalphaFinal                         ""\n\t"  );
1000098a:	22 28       	ADD       R2, #2
..\application\libkf32foc.c:1173
	asm("	LDS.H R0,[R2]        ""\n\t" );
1000098c:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1174
	asm("	MOV R2,#smc1                         ""\n\t"  );
1000098e:	22 5c c4 3e 	MOVL      R2, #16068
10000992:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1175
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
10000996:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1176
	asm("	ADD R2,#SMC_Ealpha                         ""\n\t"  );
10000998:	21 28       	ADD       R2, #1
..\application\libkf32foc.c:1177
	asm("	LDS.H R4,[R2]             ""\n\t" );
1000099a:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1178
	asm("	MOV R2,#smc1                         ""\n\t"  );
1000099c:	22 5c c4 3e 	MOVL      R2, #16068
100009a0:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1179
	asm("	ADD R2,#SMC_KslfFinal                         ""\n\t"  );
100009a4:	23 29       	ADD       R2, #19
..\application\libkf32foc.c:1180
	asm("	ADD R2,#SMC_KslfFinal                         ""\n\t"  );
100009a6:	23 29       	ADD       R2, #19
..\application\libkf32foc.c:1181
	asm("	LDS.H R5,[R2]          ""\n\t" );
100009a8:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1182
	asm("	MULS R1,R4,R5                  ""\n\t"      );
100009aa:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1183
	asm("	LSL R1,#1                  	 ""\n\t"  );
100009ac:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1184
	asm("	ASR R1,#16                  	 ""\n\t"  );
100009ae:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1185
	asm("	ADD R0,R1                 	 ""\n\t"  );
100009b0:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1187

	asm("	MOV R2,#smc1                         ""\n\t"  );
100009b2:	22 5c c4 3e 	MOVL      R2, #16068
100009b6:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1188
	asm("	ADD R2,#SMC_EalphaFinal                         ""\n\t"  );
100009ba:	22 28       	ADD       R2, #2
..\application\libkf32foc.c:1189
	asm("	ADD R2,#SMC_EalphaFinal                         ""\n\t"  );
100009bc:	22 28       	ADD       R2, #2
..\application\libkf32foc.c:1190
	asm("	LDS.H R4,[R2]        ""\n\t" );
100009be:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1191
	asm("	MULS R1,R4,R5                  ""\n\t"      );
100009c0:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1192
	asm("	LSL R1,#1                  	 ""\n\t"  );
100009c2:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1193
	asm("	ASR R1,#16                  	 ""\n\t"  );
100009c4:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1194
	asm("	SUB R0,R1                 	 ""\n\t"  );
100009c6:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1195
	asm("	MOV R2,#smc1                         ""\n\t"  );
100009c8:	22 5c c4 3e 	MOVL      R2, #16068
100009cc:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1196
	asm("	ST.H [R2+#SMC_EalphaFinal],R0        ""\n\t"  );
100009d0:	90 b0       	ST.H      [R2 + #2], R0
..\application\libkf32foc.c:1199
		// s->EbetaFinal = s->EbetaFinal + s->KslfFinal * s->Ebeta
		//                               - s->KslfFinal * s->EbetaFinal
	asm("	MOV R2,#smc1                         ""\n\t"  );
100009d2:	22 5c c4 3e 	MOVL      R2, #16068
100009d6:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1200
	asm("	ADD R2,#SMC_EbetaFinal                         ""\n\t"  );
100009da:	29 28       	ADD       R2, #9
..\application\libkf32foc.c:1201
	asm("	ADD R2,#SMC_EbetaFinal                         ""\n\t"  );
100009dc:	29 28       	ADD       R2, #9
..\application\libkf32foc.c:1202
	asm("	LDS.H R0,[R2]         ""\n\t" );
100009de:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1203
	asm("	MOV R2,#smc1                         ""\n\t"  );
100009e0:	22 5c c4 3e 	MOVL      R2, #16068
100009e4:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1204
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
100009e8:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1205
	asm("	ADD R2,#SMC_Ebeta                         ""\n\t"  );
100009ea:	28 28       	ADD       R2, #8
..\application\libkf32foc.c:1206
	asm("	LDS.H R4,[R2]              ""\n\t" );
100009ec:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1207
	asm("	MOV R2,#smc1                         ""\n\t"  );
100009ee:	22 5c c4 3e 	MOVL      R2, #16068
100009f2:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1208
	asm("	ADD R2,#SMC_KslfFinal                         ""\n\t"  );
100009f6:	23 29       	ADD       R2, #19
..\application\libkf32foc.c:1209
	asm("	ADD R2,#SMC_KslfFinal                         ""\n\t"  );
100009f8:	23 29       	ADD       R2, #19
..\application\libkf32foc.c:1210
	asm("	LDS.H R5,[R2]          ""\n\t" );
100009fa:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1211
	asm("	MULS R1,R4,R5                  ""\n\t"      );
100009fc:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1212
	asm("	LSL R1,#1                  	 ""\n\t"  );
100009fe:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1213
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000a00:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1214
	asm("	ADD R0,R1                 	 ""\n\t"  );
10000a02:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1215
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a04:	22 5c c4 3e 	MOVL      R2, #16068
10000a08:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1216
	asm("	ADD R2,#SMC_EbetaFinal                         ""\n\t"  );
10000a0c:	29 28       	ADD       R2, #9
..\application\libkf32foc.c:1217
	asm("	ADD R2,#SMC_EbetaFinal                         ""\n\t"  );
10000a0e:	29 28       	ADD       R2, #9
..\application\libkf32foc.c:1218
	asm("	LDS.H R4,[R2]         ""\n\t" );
10000a10:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1219
	asm("	MULS R1,R4,R5                  ""\n\t"      );
10000a12:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1220
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000a14:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1221
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000a16:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1222
	asm("	SUB R0,R1                 	 ""\n\t"  );
10000a18:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1223
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a1a:	22 5c c4 3e 	MOVL      R2, #16068
10000a1e:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1224
	asm("	ST.H [R2+#SMC_EbetaFinal],R0         ""\n\t"  );
10000a22:	50 b2       	ST.H      [R2 + #9], R0
..\application\libkf32foc.c:1227


}
10000a24:	1d 5c       	JMP       LR

10000a26 <CalcOmegaFltred>:
CalcOmegaFltred():
..\application\libkf32foc.c:1242
	// s->OmegaFltred = s->OmegaFltred + s->FiltOmCoef * s->Omega
	//                                 - s->FiltOmCoef * s->OmegaFltred
	asm("	.EQU   SMC_OmegaFltred, 24                ""\n\t"    );
	asm("	.EQU   SMC_Omega,23                       ""\n\t"    );
	asm("	.EQU   SMC_FiltOmCoef, 20                 ""\n\t"    );
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a26:	22 5c c4 3e 	MOVL      R2, #16068
10000a2a:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1243
	asm("	ADD R2,#SMC_OmegaFltred                         ""\n\t"  );
10000a2e:	28 29       	ADD       R2, #24
..\application\libkf32foc.c:1244
	asm("	ADD R2,#SMC_OmegaFltred                         ""\n\t"  );
10000a30:	28 29       	ADD       R2, #24
..\application\libkf32foc.c:1245
	asm("	LDS.H R0,[R2]             ""\n\t"   );
10000a32:	02 86       	LDS.H     R0, [R2]
..\application\libkf32foc.c:1246
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a34:	22 5c c4 3e 	MOVL      R2, #16068
10000a38:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1247
	asm("	ADD R2,#SMC_Omega                         ""\n\t"  );
10000a3c:	27 29       	ADD       R2, #23
..\application\libkf32foc.c:1248
	asm("	ADD R2,#SMC_Omega                         ""\n\t"  );
10000a3e:	27 29       	ADD       R2, #23
..\application\libkf32foc.c:1249
	asm("	LDS.H R4,[R2]                   ""\n\t"   );
10000a40:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1250
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a42:	22 5c c4 3e 	MOVL      R2, #16068
10000a46:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1251
	asm("	ADD R2,#SMC_FiltOmCoef                         ""\n\t"  );
10000a4a:	24 29       	ADD       R2, #20
..\application\libkf32foc.c:1252
	asm("	ADD R2,#SMC_FiltOmCoef                         ""\n\t"  );
10000a4c:	24 29       	ADD       R2, #20
..\application\libkf32foc.c:1253
	asm("	LDS.H R5,[R2]              ""\n\t"   );
10000a4e:	52 86       	LDS.H     R5, [R2]
..\application\libkf32foc.c:1254
	asm("	MULS R1,R4,R5                       ""\n\t"        );
10000a50:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1255
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000a52:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1256
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000a54:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1257
	asm("	ADD R0,R1                 	 ""\n\t"  );
10000a56:	01 64       	ADD       R0, R1
..\application\libkf32foc.c:1258
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a58:	22 5c c4 3e 	MOVL      R2, #16068
10000a5c:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1259
	asm("	ADD R2,#SMC_OmegaFltred                         ""\n\t"  );
10000a60:	28 29       	ADD       R2, #24
..\application\libkf32foc.c:1260
	asm("	ADD R2,#SMC_OmegaFltred                         ""\n\t"  );
10000a62:	28 29       	ADD       R2, #24
..\application\libkf32foc.c:1261
	asm("	LDS.H R4,[R2]             ""\n\t"   );
10000a64:	42 86       	LDS.H     R4, [R2]
..\application\libkf32foc.c:1262
	asm("	MULS R1,R4,R5                       ""\n\t"        );
10000a66:	4c cb       	MULS      R1, R4, R5
..\application\libkf32foc.c:1263
	asm("	LSL R1,#1                  	 ""\n\t"  );
10000a68:	09 7a       	LSL       R1, #1
..\application\libkf32foc.c:1264
	asm("	ASR R1,#16                  	 ""\n\t"  );
10000a6a:	08 79       	ASR       R1, #16
..\application\libkf32foc.c:1265
	asm("	SUB R0,R1                          ""\n\t"    );
10000a6c:	01 66       	SUB       R0, R1
..\application\libkf32foc.c:1266
	asm("	MOV R2,#smc1                         ""\n\t"  );
10000a6e:	22 5c c4 3e 	MOVL      R2, #16068
10000a72:	42 5c 00 10 	MOVH      R2, #4096
..\application\libkf32foc.c:1267
	asm("	ST.H [R2+#SMC_OmegaFltred],R0             ""\n\t"    );
10000a76:	10 b6       	ST.H      [R2 + #24], R0
..\application\libkf32foc.c:1268
}
10000a78:	1d 5c       	JMP       LR
	...

10000a7c <Q15SQRT_VqMax>:
Q15SQRT_VqMax():
..\application\libkf32foc.c:1287
//		if((hStag*hStag) <= BeSqrt)
//			uStag += (1<<(ToLeft-1));
//	}
//	return uStag;

	asm("	PUSH	R6                             ""\n\t" );
10000a7c:	26 5d       	PUSH      R6
..\application\libkf32foc.c:1288
	asm("	PUSH	R7                             ""\n\t" );
10000a7e:	27 5d       	PUSH      R7
..\application\libkf32foc.c:1306
	asm("	.EQU 	hStag_R2, R2                   ""\n\t" );
	asm("	.EQU 	uStag_R3, R3                   ""\n\t" );
	asm("	.EQU 	hStagxhStag_R4, R4             ""\n\t" );
	asm("	.EQU 	toLeft_1_R5, R5                ""\n\t" );

	asm("	MOV	    uStag_R3,#0                      " "\n");//uStag=0
10000a80:	30 10       	MOV       R3, #0
..\application\libkf32foc.c:1309

	//从14开始
	asm("	MOV	    toLeft_1_R1,#(1<<14)             " "\n");//toLeft_1=1<<14
10000a82:	21 5c 00 40 	MOVL      R1, #16384
..\application\libkf32foc.c:1312

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000a86:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1315

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000a88:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1318

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000a8a:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1319
	asm("	JGT		jGreat13                         " "\n");
10000a8c:	02 fc       	JGT       $+2                   ;->0x10000a90
..\application\libkf32foc.c:1322

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000a8e:	5b c2       	ADD       R3, R3, R1

10000a90 <jGreat13>:
..\application\libkf32foc.c:1326

asm("jGreat13:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<13
10000a90:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1329

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000a92:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1332

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000a94:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1335

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000a96:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1336
	asm("	JGT		jGreat12                         " "\n");
10000a98:	02 fc       	JGT       $+2                   ;->0x10000a9c
..\application\libkf32foc.c:1339

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000a9a:	5b c2       	ADD       R3, R3, R1

10000a9c <jGreat12>:
..\application\libkf32foc.c:1343

asm("jGreat12:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<12
10000a9c:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1346

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000a9e:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1349

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000aa0:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1352

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000aa2:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1353
	asm("	JGT		jGreat11                         " "\n");
10000aa4:	02 fc       	JGT       $+2                   ;->0x10000aa8
..\application\libkf32foc.c:1356

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000aa6:	5b c2       	ADD       R3, R3, R1

10000aa8 <jGreat11>:
..\application\libkf32foc.c:1360

asm("jGreat11:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<11
10000aa8:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1363

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000aaa:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1366

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000aac:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1369

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000aae:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1370
	asm("	JGT		jGreat10                         " "\n");
10000ab0:	02 fc       	JGT       $+2                   ;->0x10000ab4
..\application\libkf32foc.c:1373

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000ab2:	5b c2       	ADD       R3, R3, R1

10000ab4 <jGreat10>:
..\application\libkf32foc.c:1377

asm("jGreat10:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<10
10000ab4:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1380

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000ab6:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1383

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000ab8:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1386

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000aba:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1387
	asm("	JGT		jGreat9                          " "\n");
10000abc:	02 fc       	JGT       $+2                   ;->0x10000ac0
..\application\libkf32foc.c:1390

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000abe:	5b c2       	ADD       R3, R3, R1

10000ac0 <jGreat9>:
..\application\libkf32foc.c:1394

asm("jGreat9:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<9
10000ac0:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1397

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000ac2:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1400

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000ac4:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1403

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000ac6:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1404
	asm("	JGT		jGreat8                          " "\n");
10000ac8:	02 fc       	JGT       $+2                   ;->0x10000acc
..\application\libkf32foc.c:1407

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000aca:	5b c2       	ADD       R3, R3, R1

10000acc <jGreat8>:
..\application\libkf32foc.c:1411

asm("jGreat8:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<8
10000acc:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1414

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000ace:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1417

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000ad0:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1420

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000ad2:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1421
	asm("	JGT		jGreat7                          " "\n");
10000ad4:	02 fc       	JGT       $+2                   ;->0x10000ad8
..\application\libkf32foc.c:1424

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000ad6:	5b c2       	ADD       R3, R3, R1

10000ad8 <jGreat7>:
..\application\libkf32foc.c:1428

asm("jGreat7:                         " "\n");

	asm("	LSR	    toLeft_1_R1,#1                   " "\n");//toLeft_1=1<<7
10000ad8:	09 7c       	LSR       R1, #1
..\application\libkf32foc.c:1431

	//hStag = uStag + (1<<(ToLeft-1));
	asm("	ADD	    hStag_R2,uStag_R3,toLeft_1_R1    " "\n");
10000ada:	53 c2       	ADD       R2, R3, R1
..\application\libkf32foc.c:1434

	//(hStag*hStag)
	asm("	MULS    hStagxhStag_R4,hStag_R2,hStag_R2 " "\n");
10000adc:	a2 ca       	MULS      R4, R2, R2
..\application\libkf32foc.c:1437

	//(hStag*hStag) > BeSqrt ?
	asm("	CMP     hStagxhStag_R4,BeSqrt_R0         " "\n");
10000ade:	40 70       	CMP       R4, R0
..\application\libkf32foc.c:1439
	//asm("	JGT		jGreat6                          " "\n");
	asm("	JGT		jExit                            " "\n");//忽略低6位精度
10000ae0:	02 fc       	JGT       $+2                   ;->0x10000ae4
..\application\libkf32foc.c:1442

	//uStag += (1<<(ToLeft-1));
	asm("	ADD	    uStag_R3,uStag_R3,toLeft_1_R1    " "\n");
10000ae2:	5b c2       	ADD       R3, R3, R1

10000ae4 <jExit>:
..\application\libkf32foc.c:1447

asm("jExit:                         " "\n");

	//保存到SRAM, PIParmQ.qOutMax, PIParmQ.qOutMin
	asm("	LD		VarAddress_R6,#PIParmQ+#PI_qOutMax  ""\n\t");
10000ae4:	04 46       	LD        R6, [PC + #4]         ;->0x10000af4  :=0x10003f20
..\application\libkf32foc.c:1448
	asm("	ST.W	[VarAddress_R6++], uStag_R3         ""\n\t");
10000ae6:	63 73       	ST.W      [R6++], R3
..\application\libkf32foc.c:1450

	asm("   MOV		R0,#0                              " "\n");
10000ae8:	00 10       	MOV       R0, #0
..\application\libkf32foc.c:1451
	asm("	SUB		uStag_R3,R0,uStag_R3               " "\n");//R3 = -R3;
10000aea:	d8 c6       	SUB       R3, R0, R3
..\application\libkf32foc.c:1452
	asm("	ST.W	[VarAddress_R6], uStag_R3         ""\n\t");
10000aec:	63 85       	ST.W      [R6], R3
..\application\libkf32foc.c:1454

	asm("	POP		R7					            ""\n\t" );
10000aee:	07 5d       	POP       R7
..\application\libkf32foc.c:1455
	asm("	POP		R6					            ""\n\t" );
10000af0:	06 5d       	POP       R6
..\application\libkf32foc.c:1456
}
10000af2:	1d 5c       	JMP       LR
10000af4:	20 3f 00 10 	.long     0x10003f20 ->268451616  [!!!@2@:CMP       R2, #112	@@: MOV       R0, #0

10000af8 <SinCos>:
SinCos():
..\application\libkf32foc.c:3521
	asm("   .EQU Park_qAngle, 0                       " "\n");
	asm("   .EQU Park_qSin, 2                         " "\n");
	asm("   .EQU Park_qCos, 4                         " "\n");


	asm("	LD	    R0,#ParkParm+#Park_qAngle" "\n");//取Park_qAngle变量地址
10000af8:	0a 40       	LD        R0, [PC + #10]        ;->0x10000b20  :=0x10003f4c
..\application\libkf32foc.c:3523

	asm("	LD.H	R1,[R0++]    " "\n");//R1 = Park_qAngle，R0+=2指向Park_qSin
10000afa:	10 74       	LD.H      R1, [R0++]
..\application\libkf32foc.c:3524
	asm("	MOV	    R2,R1        " "\n");
10000afc:	41 58       	MOV       R2, R1
..\application\libkf32foc.c:3525
	asm("	MOV	    R3,R1        " "\n");
10000afe:	61 58       	MOV       R3, R1
..\application\libkf32foc.c:3527

	asm("	LSR	    R2,#4                    " "\n");
10000b00:	14 7c       	LSR       R2, #4
..\application\libkf32foc.c:3528
	asm("	MOV	    R1,#Angle90               " "\n");
10000b02:	21 5c 00 40 	MOVL      R1, #16384
..\application\libkf32foc.c:3529
	asm("	ADD	    R3,R3,R1" "\n");
10000b06:	5b c2       	ADD       R3, R3, R1
..\application\libkf32foc.c:3530
	asm("	MOVH    R3,#0                    " "\n");
10000b08:	43 5c 00 00 	MOVH      R3, #0
..\application\libkf32foc.c:3531
	asm("	LSR	    R3,#4                    " "\n");
10000b0c:	1c 7c       	LSR       R3, #4
..\application\libkf32foc.c:3533

	asm("	LD	    R1,#SinTable           " "\n");//取SinTable变量地址
10000b0e:	06 41       	LD        R1, [PC + #6]         ;->0x10000b24  :=0x10000b28
..\application\libkf32foc.c:3534
	asm("	ADD     R2,R1         " "\n");//计算SIN地址
10000b10:	21 64       	ADD       R2, R1
..\application\libkf32foc.c:3535
	asm("	LDS.H   R2,[R2]        " "\n");//读取SIN值
10000b12:	22 86       	LDS.H     R2, [R2]
..\application\libkf32foc.c:3537

	asm("	ADD     R3,R1         " "\n");//计算COS地址
10000b14:	31 64       	ADD       R3, R1
..\application\libkf32foc.c:3538
	asm("	LDS.H   R3,[R3]        " "\n");//读取COS值
10000b16:	33 86       	LDS.H     R3, [R3]
..\application\libkf32foc.c:3540

	asm("	ST.H    [R0++],R2    " "\n");
10000b18:	02 75       	ST.H      [R0++], R2
..\application\libkf32foc.c:3541
	asm("	ST.H    [R0],  R3    " "\n");
10000b1a:	03 84       	ST.H      [R0], R3
..\application\libkf32foc.c:3542
}
10000b1c:	1d 5c       	JMP       LR
10000b1e:	00 00       	NOP      NOP      
10000b20:	4c 3f 00 10 	.long     0x10003f4c ->268451660  [!!!@2@:CMP       R4, #124	@@: MOV       R0, #0
10000b24:	28 0b 00 10 	.long     0x10000b28 ->268438312  [!!!@2@:LD.W      R3, [SP + #40]	@@: MOV       R0, #0

10000b28 <SinTable>:
10000b28:	00 00 64 00 c9 00 2d 01 92 01 f6 01 5b 02 bf 02     ..d...-.....[...
10000b38:	24 03 88 03 ed 03 51 04 b6 04 1a 05 7e 05 e3 05     $.....Q.....~...
10000b48:	47 06 ac 06 10 07 74 07 d9 07 3d 08 a1 08 06 09     G.....t...=.....
10000b58:	6a 09 ce 09 32 0a 97 0a fb 0a 5f 0b c3 0b 27 0c     j...2....._...'.
10000b68:	8b 0c ef 0c 53 0d b7 0d 1b 0e 7f 0e e3 0e 47 0f     ....S.........G.
10000b78:	ab 0f 0e 10 72 10 d6 10 39 11 9d 11 00 12 64 12     ....r...9.....d.
10000b88:	c7 12 2b 13 8e 13 f2 13 55 14 b8 14 1b 15 7e 15     ..+.....U.....~.
10000b98:	e1 15 44 16 a7 16 0a 17 6d 17 d0 17 33 18 95 18     ..D.....m...3...
10000ba8:	f8 18 5b 19 bd 19 20 1a 82 1a e4 1a 46 1b a9 1b     ..[... .....F...
10000bb8:	0b 1c 6d 1c cf 1c 31 1d 93 1d f4 1d 56 1e b8 1e     ..m...1.....V...
10000bc8:	19 1f 7b 1f dc 1f 3d 20 9f 20 00 21 61 21 c2 21     ..{...= . .!a!.!
10000bd8:	23 22 84 22 e4 22 45 23 a6 23 06 24 67 24 c7 24     #"."."E#.#.$g$.$
10000be8:	27 25 87 25 e7 25 47 26 a7 26 07 27 67 27 c6 27     '%.%.%G&.&.'g'.'
10000bf8:	26 28 85 28 e5 28 44 29 a3 29 02 2a 61 2a c0 2a     &(.(.(D).).*a*.*
10000c08:	1e 2b 7d 2b db 2b 3a 2c 98 2c f6 2c 54 2d b2 2d     .+}+.+:,.,.,T-.-
10000c18:	10 2e 6e 2e cc 2e 29 2f 86 2f e4 2f 41 30 9e 30     ..n...)/././A0.0
10000c28:	fb 30 58 31 b4 31 11 32 6d 32 ca 32 26 33 82 33     .0X1.1.2m2.2&3.3
10000c38:	de 33 3a 34 96 34 f1 34 4d 35 a8 35 03 36 5e 36     .3:4.4.4M5.5.6^6
10000c48:	b9 36 14 37 6f 37 c9 37 24 38 7e 38 d8 38 32 39     .6.7o7.7$8~8.829
10000c58:	8c 39 e6 39 3f 3a 99 3a f2 3a 4b 3b a4 3b fd 3b     .9.9?:.:.:K;.;.;
10000c68:	56 3c ae 3c 07 3d 5f 3d b7 3d 0f 3e 67 3e bf 3e     V<.<.=_=.=.>g>.>
10000c78:	16 3f 6e 3f c5 3f 1c 40 73 40 ca 40 20 41 77 41     .?n?.?.@s@.@ AwA
10000c88:	cd 41 23 42 79 42 cf 42 25 43 7a 43 d0 43 25 44     .A#ByB.B%CzC.C%D
10000c98:	7a 44 cf 44 23 45 78 45 cc 45 20 46 74 46 c8 46     zD.D#ExE.E FtF.F
10000ca8:	1c 47 6f 47 c3 47 16 48 69 48 bc 48 0e 49 61 49     .GoG.G.HiH.H.IaI
10000cb8:	b3 49 05 4a 57 4a a9 4a fa 4a 4c 4b 9d 4b ee 4b     .I.JWJ.J.JLK.K.K
10000cc8:	3f 4c 8f 4c e0 4c 30 4d 80 4d d0 4d 20 4e 6f 4e     ?L.L.L0M.M.M NoN
10000cd8:	bf 4e 0e 4f 5d 4f ac 4f fa 4f 49 50 97 50 e5 50     .N.O]O.O.OIP.P.P
10000ce8:	33 51 80 51 ce 51 1b 52 68 52 b5 52 01 53 4e 53     3Q.Q.Q.RhR.R.SNS
10000cf8:	9a 53 e6 53 32 54 7d 54 c9 54 14 55 5f 55 aa 55     .S.S2T}T.T.U_U.U
10000d08:	f4 55 3f 56 89 56 d3 56 1d 57 66 57 b0 57 f9 57     .U?V.V.V.WfW.W.W
10000d18:	42 58 8a 58 d3 58 1b 59 63 59 ab 59 f3 59 3a 5a     BX.X.X.YcY.Y.Y:Z
10000d28:	81 5a c8 5a 0f 5b 56 5b 9c 5b e2 5b 28 5c 6d 5c     .Z.Z.[V[.[.[(\m\
10000d38:	b3 5c f8 5c 3d 5d 82 5d c6 5d 0b 5e 4f 5e 93 5e     .\.\=].].].^O^.^
10000d48:	d6 5e 1a 5f 5d 5f a0 5f e2 5f 25 60 67 60 a9 60     .^._]_._._%`g`.`
10000d58:	eb 60 2d 61 6e 61 af 61 f0 61 30 62 71 62 b1 62     .`-ana.a.a0bqb.b
10000d68:	f1 62 30 63 70 63 af 63 ee 63 2d 64 6b 64 a9 64     .b0cpc.c.c-dkd.d
10000d78:	e7 64 25 65 62 65 a0 65 dd 65 19 66 56 66 92 66     .d%ebe.e.e.fVf.f
10000d88:	ce 66 0a 67 45 67 81 67 bc 67 f7 67 31 68 6b 68     .f.gEg.g.g.g1hkh
10000d98:	a5 68 df 68 19 69 52 69 8b 69 c4 69 fc 69 34 6a     .h.h.iRi.i.i.i4j
10000da8:	6c 6a a4 6a db 6a 13 6b 4a 6b 80 6b b7 6b ed 6b     lj.j.j.kJk.k.k.k
10000db8:	23 6c 58 6c 8e 6c c3 6c f8 6c 2c 6d 61 6d 95 6d     #lXl.l.l.l,mam.m
10000dc8:	c9 6d fc 6d 30 6e 63 6e 95 6e c8 6e fa 6e 2c 6f     .m.m0ncn.n.n.n,o
10000dd8:	5e 6f 8f 6f c0 6f f1 6f 22 70 52 70 82 70 b2 70     ^o.o.o.o"pRp.p.p
10000de8:	e1 70 11 71 40 71 6e 71 9d 71 cb 71 f9 71 26 72     .p.q@qnq.q.q.q&r
10000df8:	54 72 81 72 ae 72 da 72 06 73 32 73 5e 73 89 73     Tr.r.r.r.s2s^s.s
10000e08:	b5 73 df 73 0a 74 34 74 5e 74 88 74 b1 74 db 74     .s.s.t4t^t.t.t.t
10000e18:	03 75 2c 75 54 75 7c 75 a4 75 cc 75 f3 75 1a 76     .u,uTu|u.u.u.u.v
10000e28:	40 76 67 76 8d 76 b2 76 d8 76 fd 76 22 77 47 77     @vgv.v.v.v.v"wGw
10000e38:	6b 77 8f 77 b3 77 d6 77 f9 77 1c 78 3f 78 61 78     kw.w.w.w.w.x?xax
10000e48:	83 78 a5 78 c6 78 e7 78 08 79 29 79 49 79 69 79     .x.x.x.x.y)yIyiy
10000e58:	89 79 a8 79 c7 79 e6 79 04 7a 23 7a 41 7a 5e 7a     .y.y.y.y.z#zAz^z
10000e68:	7c 7a 99 7a b5 7a d2 7a ee 7a 0a 7b 25 7b 41 7b     |z.z.z.z.z.{%{A{
10000e78:	5c 7b 76 7b 91 7b ab 7b c4 7b de 7b f7 7b 10 7c     \{v{.{.{.{.{.{.|
10000e88:	29 7c 41 7c 59 7c 70 7c 88 7c 9f 7c b6 7c cc 7c     )|A|Y|p|.|.|.|.|
10000e98:	e2 7c f8 7c 0e 7d 23 7d 38 7d 4d 7d 61 7d 75 7d     .|.|.}#}8}M}a}u}
10000ea8:	89 7d 9c 7d b0 7d c2 7d d5 7d e7 7d f9 7d 0b 7e     .}.}.}.}.}.}.}.~
10000eb8:	1c 7e 2d 7e 3e 7e 4e 7e 5e 7e 6e 7e 7e 7e 8d 7e     .~-~>~N~^~n~~~.~
10000ec8:	9c 7e aa 7e b9 7e c7 7e d4 7e e2 7e ef 7e fc 7e     .~.~.~.~.~.~.~.~
10000ed8:	08 7f 14 7f 20 7f 2c 7f 37 7f 42 7f 4c 7f 57 7f     .... .,.7.B.L.W.
10000ee8:	61 7f 6a 7f 74 7f 7d 7f 86 7f 8e 7f 96 7f 9e 7f     a.j.t.}.........
10000ef8:	a6 7f ad 7f b4 7f bb 7f c1 7f c7 7f cd 7f d2 7f     ................
10000f08:	d7 7f dc 7f e0 7f e4 7f e8 7f ec 7f ef 7f f2 7f     ................
10000f18:	f5 7f f7 7f f9 7f fb 7f fc 7f fd 7f fe 7f fe 7f     ................
10000f28:	ff 7f fe 7f fe 7f fd 7f fc 7f fb 7f f9 7f f7 7f     ................
10000f38:	f5 7f f2 7f ef 7f ec 7f e8 7f e4 7f e0 7f dc 7f     ................
10000f48:	d7 7f d2 7f cd 7f c7 7f c1 7f bb 7f b4 7f ad 7f     ................
10000f58:	a6 7f 9e 7f 96 7f 8e 7f 86 7f 7d 7f 74 7f 6a 7f     ..........}.t.j.
10000f68:	61 7f 57 7f 4c 7f 42 7f 37 7f 2c 7f 20 7f 14 7f     a.W.L.B.7.,. ...
10000f78:	08 7f fc 7e ef 7e e2 7e d4 7e c7 7e b9 7e aa 7e     ...~.~.~.~.~.~.~
10000f88:	9c 7e 8d 7e 7e 7e 6e 7e 5e 7e 4e 7e 3e 7e 2d 7e     .~.~~~n~^~N~>~-~
10000f98:	1c 7e 0b 7e f9 7d e7 7d d5 7d c2 7d b0 7d 9c 7d     .~.~.}.}.}.}.}.}
10000fa8:	89 7d 75 7d 61 7d 4d 7d 38 7d 23 7d 0e 7d f8 7c     .}u}a}M}8}#}.}.|
10000fb8:	e2 7c cc 7c b6 7c 9f 7c 88 7c 70 7c 59 7c 41 7c     .|.|.|.|.|p|Y|A|
10000fc8:	29 7c 10 7c f7 7b de 7b c4 7b ab 7b 91 7b 76 7b     )|.|.{.{.{.{.{v{
10000fd8:	5c 7b 41 7b 25 7b 0a 7b ee 7a d2 7a b5 7a 99 7a     \{A{%{.{.z.z.z.z
10000fe8:	7c 7a 5e 7a 41 7a 23 7a 04 7a e6 79 c7 79 a8 79     |z^zAz#z.z.y.y.y
10000ff8:	89 79 69 79 49 79 29 79 08 79 e7 78 c6 78 a5 78     .yiyIy)y.y.x.x.x
10001008:	83 78 61 78 3f 78 1c 78 f9 77 d6 77 b3 77 8f 77     .xax?x.x.w.w.w.w
10001018:	6b 77 47 77 22 77 fd 76 d8 76 b2 76 8d 76 67 76     kwGw"w.v.v.v.vgv
10001028:	40 76 1a 76 f3 75 cc 75 a4 75 7c 75 54 75 2c 75     @v.v.u.u.u|uTu,u
10001038:	03 75 db 74 b1 74 88 74 5e 74 34 74 0a 74 df 73     .u.t.t.t^t4t.t.s
10001048:	b5 73 89 73 5e 73 32 73 06 73 da 72 ae 72 81 72     .s.s^s2s.s.r.r.r
10001058:	54 72 26 72 f9 71 cb 71 9d 71 6e 71 40 71 11 71     Tr&r.q.q.qnq@q.q
10001068:	e1 70 b2 70 82 70 52 70 22 70 f1 6f c0 6f 8f 6f     .p.p.pRp"p.o.o.o
10001078:	5e 6f 2c 6f fa 6e c8 6e 95 6e 63 6e 30 6e fc 6d     ^o,o.n.n.ncn0n.m
10001088:	c9 6d 95 6d 61 6d 2c 6d f8 6c c3 6c 8e 6c 58 6c     .m.mam,m.l.l.lXl
10001098:	23 6c ed 6b b7 6b 80 6b 4a 6b 13 6b db 6a a4 6a     #l.k.k.kJk.k.j.j
100010a8:	6c 6a 34 6a fc 69 c4 69 8b 69 52 69 19 69 df 68     lj4j.i.i.iRi.i.h
100010b8:	a5 68 6b 68 31 68 f7 67 bc 67 81 67 45 67 0a 67     .hkh1h.g.g.gEg.g
100010c8:	ce 66 92 66 56 66 19 66 dd 65 a0 65 62 65 25 65     .f.fVf.f.e.ebe%e
100010d8:	e7 64 a9 64 6b 64 2d 64 ee 63 af 63 70 63 30 63     .d.dkd-d.c.cpc0c
100010e8:	f1 62 b1 62 71 62 30 62 f0 61 af 61 6e 61 2d 61     .b.bqb0b.a.ana-a
100010f8:	eb 60 a9 60 67 60 25 60 e2 5f a0 5f 5d 5f 1a 5f     .`.`g`%`._._]_._
10001108:	d6 5e 93 5e 4f 5e 0b 5e c6 5d 82 5d 3d 5d f8 5c     .^.^O^.^.].]=].\
10001118:	b3 5c 6d 5c 28 5c e2 5b 9c 5b 56 5b 0f 5b c8 5a     .\m\(\.[.[V[.[.Z
10001128:	81 5a 3a 5a f3 59 ab 59 63 59 1b 59 d3 58 8a 58     .Z:Z.Y.YcY.Y.X.X
10001138:	42 58 f9 57 b0 57 66 57 1d 57 d3 56 89 56 3f 56     BX.W.WfW.W.V.V?V
10001148:	f4 55 aa 55 5f 55 14 55 c9 54 7d 54 32 54 e6 53     .U.U_U.U.T}T2T.S
10001158:	9a 53 4e 53 01 53 b5 52 68 52 1b 52 ce 51 80 51     .SNS.S.RhR.R.Q.Q
10001168:	33 51 e5 50 97 50 49 50 fa 4f ac 4f 5d 4f 0e 4f     3Q.P.PIP.O.O]O.O
10001178:	bf 4e 6f 4e 20 4e d0 4d 80 4d 30 4d e0 4c 8f 4c     .NoN N.M.M0M.L.L
10001188:	3f 4c ee 4b 9d 4b 4c 4b fa 4a a9 4a 57 4a 05 4a     ?L.K.KLK.J.JWJ.J
10001198:	b3 49 61 49 0e 49 bc 48 69 48 16 48 c3 47 6f 47     .IaI.I.HiH.H.GoG
100011a8:	1c 47 c8 46 74 46 20 46 cc 45 78 45 23 45 cf 44     .G.FtF F.ExE#E.D
100011b8:	7a 44 25 44 d0 43 7a 43 25 43 cf 42 79 42 23 42     zD%D.CzC%C.ByB#B
100011c8:	cd 41 77 41 20 41 ca 40 73 40 1c 40 c5 3f 6e 3f     .AwA A.@s@.@.?n?
100011d8:	16 3f bf 3e 67 3e 0f 3e b7 3d 5f 3d 07 3d ae 3c     .?.>g>.>.=_=.=.<
100011e8:	56 3c fd 3b a4 3b 4b 3b f2 3a 99 3a 3f 3a e6 39     V<.;.;K;.:.:?:.9
100011f8:	8c 39 32 39 d8 38 7e 38 24 38 c9 37 6f 37 14 37     .929.8~8$8.7o7.7
10001208:	b9 36 5e 36 03 36 a8 35 4d 35 f1 34 96 34 3a 34     .6^6.6.5M5.4.4:4
10001218:	de 33 82 33 26 33 ca 32 6d 32 11 32 b4 31 58 31     .3.3&3.2m2.2.1X1
10001228:	fb 30 9e 30 41 30 e4 2f 86 2f 29 2f cc 2e 6e 2e     .0.0A0././)/..n.
10001238:	10 2e b2 2d 54 2d f6 2c 98 2c 3a 2c db 2b 7d 2b     ...-T-.,.,:,.+}+
10001248:	1e 2b c0 2a 61 2a 02 2a a3 29 44 29 e5 28 85 28     .+.*a*.*.)D).(.(
10001258:	26 28 c6 27 67 27 07 27 a7 26 47 26 e7 25 87 25     &(.'g'.'.&G&.%.%
10001268:	27 25 c7 24 67 24 06 24 a6 23 45 23 e4 22 84 22     '%.$g$.$.#E#."."
10001278:	23 22 c2 21 61 21 00 21 9f 20 3d 20 dc 1f 7b 1f     #".!a!.!. = ..{.
10001288:	19 1f b8 1e 56 1e f4 1d 93 1d 31 1d cf 1c 6d 1c     ....V.....1...m.
10001298:	0b 1c a9 1b 46 1b e4 1a 82 1a 20 1a bd 19 5b 19     ....F..... ...[.
100012a8:	f8 18 95 18 33 18 d0 17 6d 17 0a 17 a7 16 44 16     ....3...m.....D.
100012b8:	e1 15 7e 15 1b 15 b8 14 55 14 f2 13 8e 13 2b 13     ..~.....U.....+.
100012c8:	c7 12 64 12 00 12 9d 11 39 11 d6 10 72 10 0e 10     ..d.....9...r...
100012d8:	ab 0f 47 0f e3 0e 7f 0e 1b 0e b7 0d 53 0d ef 0c     ..G.........S...
100012e8:	8b 0c 27 0c c3 0b 5f 0b fb 0a 97 0a 32 0a ce 09     ..'..._.....2...
100012f8:	6a 09 06 09 a1 08 3d 08 d9 07 74 07 10 07 ac 06     j.....=...t.....
10001308:	47 06 e3 05 7e 05 1a 05 b6 04 51 04 ed 03 88 03     G...~.....Q.....
10001318:	24 03 bf 02 5b 02 f6 01 92 01 2d 01 c9 00 64 00     $...[.....-...d.
10001328:	00 00 9b ff 36 ff d2 fe 6d fe 09 fe a4 fd 40 fd     ....6...m.....@.
10001338:	db fc 77 fc 12 fc ae fb 49 fb e5 fa 81 fa 1c fa     ..w.....I.......
10001348:	b8 f9 53 f9 ef f8 8b f8 26 f8 c2 f7 5e f7 f9 f6     ..S.....&...^...
10001358:	95 f6 31 f6 cd f5 68 f5 04 f5 a0 f4 3c f4 d8 f3     ..1...h.....<...
10001368:	74 f3 10 f3 ac f2 48 f2 e4 f1 80 f1 1c f1 b8 f0     t.....H.........
10001378:	54 f0 f1 ef 8d ef 29 ef c6 ee 62 ee ff ed 9b ed     T.....)...b.....
10001388:	38 ed d4 ec 71 ec 0d ec aa eb 47 eb e4 ea 81 ea     8...q.....G.....
10001398:	1e ea bb e9 58 e9 f5 e8 92 e8 2f e8 cc e7 6a e7     ....X...../...j.
100013a8:	07 e7 a4 e6 42 e6 df e5 7d e5 1b e5 b9 e4 56 e4     ....B...}.....V.
100013b8:	f4 e3 92 e3 30 e3 ce e2 6c e2 0b e2 a9 e1 47 e1     ....0...l.....G.
100013c8:	e6 e0 84 e0 23 e0 c2 df 60 df ff de 9e de 3d de     ....#...`.....=.
100013d8:	dc dd 7b dd 1b dd ba dc 59 dc f9 db 98 db 38 db     ..{.....Y.....8.
100013e8:	d8 da 78 da 18 da b8 d9 58 d9 f8 d8 98 d8 39 d8     ..x.....X.....9.
100013f8:	d9 d7 7a d7 1a d7 bb d6 5c d6 fd d5 9e d5 3f d5     ..z.....\.....?.
10001408:	e1 d4 82 d4 24 d4 c5 d3 67 d3 09 d3 ab d2 4d d2     ....$...g.....M.
10001418:	ef d1 91 d1 33 d1 d6 d0 79 d0 1b d0 be cf 61 cf     ....3...y.....a.
10001428:	04 cf a7 ce 4b ce ee cd 92 cd 35 cd d9 cc 7d cc     ....K.....5...}.
10001438:	21 cc c5 cb 69 cb 0e cb b2 ca 57 ca fc c9 a1 c9     !...i.....W.....
10001448:	46 c9 eb c8 90 c8 36 c8 db c7 81 c7 27 c7 cd c6     F.....6.....'...
10001458:	73 c6 19 c6 c0 c5 66 c5 0d c5 b4 c4 5b c4 02 c4     s.....f.....[...
10001468:	a9 c3 51 c3 f8 c2 a0 c2 48 c2 f0 c1 98 c1 40 c1     ..Q.....H.....@.
10001478:	e9 c0 91 c0 3a c0 e3 bf 8c bf 35 bf df be 88 be     ....:.....5.....
10001488:	32 be dc bd 86 bd 30 bd da bc 85 bc 2f bc da bb     2.....0...../...
10001498:	85 bb 30 bb dc ba 87 ba 33 ba df b9 8b b9 37 b9     ..0.....3.....7.
100014a8:	e3 b8 90 b8 3c b8 e9 b7 96 b7 43 b7 f1 b6 9e b6     ....<.....C.....
100014b8:	4c b6 fa b5 a8 b5 56 b5 05 b5 b3 b4 62 b4 11 b4     L.....V.....b...
100014c8:	c0 b3 70 b3 1f b3 cf b2 7f b2 2f b2 df b1 90 b1     ..p......./.....
100014d8:	40 b1 f1 b0 a2 b0 53 b0 05 b0 b6 af 68 af 1a af     @.....S.....h...
100014e8:	cc ae 7f ae 31 ae e4 ad 97 ad 4a ad fe ac b1 ac     ....1.....J.....
100014f8:	65 ac 19 ac cd ab 82 ab 36 ab eb aa a0 aa 55 aa     e.......6.....U.
10001508:	0b aa c0 a9 76 a9 2c a9 e2 a8 99 a8 4f a8 06 a8     ....v.,.....O...
10001518:	bd a7 75 a7 2c a7 e4 a6 9c a6 54 a6 0c a6 c5 a5     ..u.,.....T.....
10001528:	7e a5 37 a5 f0 a4 a9 a4 63 a4 1d a4 d7 a3 92 a3     ~.7.....c.......
10001538:	4c a3 07 a3 c2 a2 7d a2 39 a2 f4 a1 b0 a1 6c a1     L.....}.9.....l.
10001548:	29 a1 e5 a0 a2 a0 5f a0 1d a0 da 9f 98 9f 56 9f     )....._.......V.
10001558:	14 9f d2 9e 91 9e 50 9e 0f 9e cf 9d 8e 9d 4e 9d     ......P.......N.
10001568:	0e 9d cf 9c 8f 9c 50 9c 11 9c d2 9b 94 9b 56 9b     ......P.......V.
10001578:	18 9b da 9a 9d 9a 5f 9a 22 9a e6 99 a9 99 6d 99     ......_.".....m.
10001588:	31 99 f5 98 ba 98 7e 98 43 98 08 98 ce 97 94 97     1.....~.C.......
10001598:	5a 97 20 97 e6 96 ad 96 74 96 3b 96 03 96 cb 95     Z. .....t.;.....
100015a8:	93 95 5b 95 24 95 ec 94 b5 94 7f 94 48 94 12 94     ..[.$.......H...
100015b8:	dc 93 a7 93 71 93 3c 93 07 93 d3 92 9e 92 6a 92     ....q.<.......j.
100015c8:	36 92 03 92 cf 91 9c 91 6a 91 37 91 05 91 d3 90     6.......j.7.....
100015d8:	a1 90 70 90 3f 90 0e 90 dd 8f ad 8f 7d 8f 4d 8f     ..p.?.......}.M.
100015e8:	1e 8f ee 8e bf 8e 91 8e 62 8e 34 8e 06 8e d9 8d     ........b.4.....
100015f8:	ab 8d 7e 8d 51 8d 25 8d f9 8c cd 8c a1 8c 76 8c     ..~.Q.%.......v.
10001608:	4a 8c 20 8c f5 8b cb 8b a1 8b 77 8b 4e 8b 24 8b     J. .......w.N.$.
10001618:	fc 8a d3 8a ab 8a 83 8a 5b 8a 33 8a 0c 8a e5 89     ........[.3.....
10001628:	bf 89 98 89 72 89 4d 89 27 89 02 89 dd 88 b8 88     ....r.M.'.......
10001638:	94 88 70 88 4c 88 29 88 06 88 e3 87 c0 87 9e 87     ..p.L.).........
10001648:	7c 87 5a 87 39 87 18 87 f7 86 d6 86 b6 86 96 86     |.Z.9...........
10001658:	76 86 57 86 38 86 19 86 fb 85 dc 85 be 85 a1 85     v.W.8...........
10001668:	83 85 66 85 4a 85 2d 85 11 85 f5 84 da 84 be 84     ..f.J.-.........
10001678:	a3 84 89 84 6e 84 54 84 3b 84 21 84 08 84 ef 83     ....n.T.;.!.....
10001688:	d6 83 be 83 a6 83 8f 83 77 83 60 83 49 83 33 83     ........w.`.I.3.
10001698:	1d 83 07 83 f1 82 dc 82 c7 82 b2 82 9e 82 8a 82     ................
100016a8:	76 82 63 82 4f 82 3d 82 2a 82 18 82 06 82 f4 81     v.c.O.=.*.......
100016b8:	e3 81 d2 81 c1 81 b1 81 a1 81 91 81 81 81 72 81     ..............r.
100016c8:	63 81 55 81 46 81 38 81 2b 81 1d 81 10 81 03 81     c.U.F.8.+.......
100016d8:	f7 80 eb 80 df 80 d3 80 c8 80 bd 80 b3 80 a8 80     ................
100016e8:	9e 80 95 80 8b 80 82 80 79 80 71 80 69 80 61 80     ........y.q.i.a.
100016f8:	59 80 52 80 4b 80 44 80 3e 80 38 80 32 80 2d 80     Y.R.K.D.>.8.2.-.
10001708:	28 80 23 80 1f 80 1b 80 17 80 13 80 10 80 0d 80     (.#.............
10001718:	0a 80 08 80 06 80 04 80 03 80 02 80 01 80 01 80     ................
10001728:	01 80 01 80 01 80 02 80 03 80 04 80 06 80 08 80     ................
10001738:	0a 80 0d 80 10 80 13 80 17 80 1b 80 1f 80 23 80     ..............#.
10001748:	28 80 2d 80 32 80 38 80 3e 80 44 80 4b 80 52 80     (.-.2.8.>.D.K.R.
10001758:	59 80 61 80 69 80 71 80 79 80 82 80 8b 80 95 80     Y.a.i.q.y.......
10001768:	9e 80 a8 80 b3 80 bd 80 c8 80 d3 80 df 80 eb 80     ................
10001778:	f7 80 03 81 10 81 1d 81 2b 81 38 81 46 81 55 81     ........+.8.F.U.
10001788:	63 81 72 81 81 81 91 81 a1 81 b1 81 c1 81 d2 81     c.r.............
10001798:	e3 81 f4 81 06 82 18 82 2a 82 3d 82 4f 82 63 82     ........*.=.O.c.
100017a8:	76 82 8a 82 9e 82 b2 82 c7 82 dc 82 f1 82 07 83     v...............
100017b8:	1d 83 33 83 49 83 60 83 77 83 8f 83 a6 83 be 83     ..3.I.`.w.......
100017c8:	d6 83 ef 83 08 84 21 84 3b 84 54 84 6e 84 89 84     ......!.;.T.n...
100017d8:	a3 84 be 84 da 84 f5 84 11 85 2d 85 4a 85 66 85     ..........-.J.f.
100017e8:	83 85 a1 85 be 85 dc 85 fb 85 19 86 38 86 57 86     ............8.W.
100017f8:	76 86 96 86 b6 86 d6 86 f7 86 18 87 39 87 5a 87     v...........9.Z.
10001808:	7c 87 9e 87 c0 87 e3 87 06 88 29 88 4c 88 70 88     |.........).L.p.
10001818:	94 88 b8 88 dd 88 02 89 27 89 4d 89 72 89 98 89     ........'.M.r...
10001828:	bf 89 e5 89 0c 8a 33 8a 5b 8a 83 8a ab 8a d3 8a     ......3.[.......
10001838:	fc 8a 24 8b 4e 8b 77 8b a1 8b cb 8b f5 8b 20 8c     ..$.N.w....... .
10001848:	4a 8c 76 8c a1 8c cd 8c f9 8c 25 8d 51 8d 7e 8d     J.v.......%.Q.~.
10001858:	ab 8d d9 8d 06 8e 34 8e 62 8e 91 8e bf 8e ee 8e     ......4.b.......
10001868:	1e 8f 4d 8f 7d 8f ad 8f dd 8f 0e 90 3f 90 70 90     ..M.}.......?.p.
10001878:	a1 90 d3 90 05 91 37 91 6a 91 9c 91 cf 91 03 92     ......7.j.......
10001888:	36 92 6a 92 9e 92 d3 92 07 93 3c 93 71 93 a7 93     6.j.......<.q...
10001898:	dc 93 12 94 48 94 7f 94 b5 94 ec 94 24 95 5b 95     ....H.......$.[.
100018a8:	93 95 cb 95 03 96 3b 96 74 96 ad 96 e6 96 20 97     ......;.t..... .
100018b8:	5a 97 94 97 ce 97 08 98 43 98 7e 98 ba 98 f5 98     Z.......C.~.....
100018c8:	31 99 6d 99 a9 99 e6 99 22 9a 5f 9a 9d 9a da 9a     1.m....."._.....
100018d8:	18 9b 56 9b 94 9b d2 9b 11 9c 50 9c 8f 9c cf 9c     ..V.......P.....
100018e8:	0e 9d 4e 9d 8e 9d cf 9d 0f 9e 50 9e 91 9e d2 9e     ..N.......P.....
100018f8:	14 9f 56 9f 98 9f da 9f 1d a0 5f a0 a2 a0 e5 a0     ..V......._.....
10001908:	29 a1 6c a1 b0 a1 f4 a1 39 a2 7d a2 c2 a2 07 a3     ).l.....9.}.....
10001918:	4c a3 92 a3 d7 a3 1d a4 63 a4 a9 a4 f0 a4 37 a5     L.......c.....7.
10001928:	7e a5 c5 a5 0c a6 54 a6 9c a6 e4 a6 2c a7 75 a7     ~.....T.....,.u.
10001938:	bd a7 06 a8 4f a8 99 a8 e2 a8 2c a9 76 a9 c0 a9     ....O.....,.v...
10001948:	0b aa 55 aa a0 aa eb aa 36 ab 82 ab cd ab 19 ac     ..U.....6.......
10001958:	65 ac b1 ac fe ac 4a ad 97 ad e4 ad 31 ae 7f ae     e.....J.....1...
10001968:	cc ae 1a af 68 af b6 af 05 b0 53 b0 a2 b0 f1 b0     ....h.....S.....
10001978:	40 b1 90 b1 df b1 2f b2 7f b2 cf b2 1f b3 70 b3     @...../.......p.
10001988:	c0 b3 11 b4 62 b4 b3 b4 05 b5 56 b5 a8 b5 fa b5     ....b.....V.....
10001998:	4c b6 9e b6 f1 b6 43 b7 96 b7 e9 b7 3c b8 90 b8     L.....C.....<...
100019a8:	e3 b8 37 b9 8b b9 df b9 33 ba 87 ba dc ba 30 bb     ..7.....3.....0.
100019b8:	85 bb da bb 2f bc 85 bc da bc 30 bd 86 bd dc bd     ..../.....0.....
100019c8:	32 be 88 be df be 35 bf 8c bf e3 bf 3a c0 91 c0     2.....5.....:...
100019d8:	e9 c0 40 c1 98 c1 f0 c1 48 c2 a0 c2 f8 c2 51 c3     ..@.....H.....Q.
100019e8:	a9 c3 02 c4 5b c4 b4 c4 0d c5 66 c5 c0 c5 19 c6     ....[.....f.....
100019f8:	73 c6 cd c6 27 c7 81 c7 db c7 36 c8 90 c8 eb c8     s...'.....6.....
10001a08:	46 c9 a1 c9 fc c9 57 ca b2 ca 0e cb 69 cb c5 cb     F.....W.....i...
10001a18:	21 cc 7d cc d9 cc 35 cd 92 cd ee cd 4b ce a7 ce     !.}...5.....K...
10001a28:	04 cf 61 cf be cf 1b d0 79 d0 d6 d0 33 d1 91 d1     ..a.....y...3...
10001a38:	ef d1 4d d2 ab d2 09 d3 67 d3 c5 d3 24 d4 82 d4     ..M.....g...$...
10001a48:	e1 d4 3f d5 9e d5 fd d5 5c d6 bb d6 1a d7 7a d7     ..?.....\.....z.
10001a58:	d9 d7 39 d8 98 d8 f8 d8 58 d9 b8 d9 18 da 78 da     ..9.....X.....x.
10001a68:	d8 da 38 db 98 db f9 db 59 dc ba dc 1b dd 7b dd     ..8.....Y.....{.
10001a78:	dc dd 3d de 9e de ff de 60 df c2 df 23 e0 84 e0     ..=.....`...#...
10001a88:	e6 e0 47 e1 a9 e1 0b e2 6c e2 ce e2 30 e3 92 e3     ..G.....l...0...
10001a98:	f4 e3 56 e4 b9 e4 1b e5 7d e5 df e5 42 e6 a4 e6     ..V.....}...B...
10001aa8:	07 e7 6a e7 cc e7 2f e8 92 e8 f5 e8 58 e9 bb e9     ..j.../.....X...
10001ab8:	1e ea 81 ea e4 ea 47 eb aa eb 0d ec 71 ec d4 ec     ......G.....q...
10001ac8:	38 ed 9b ed ff ed 62 ee c6 ee 29 ef 8d ef f1 ef     8.....b...).....
10001ad8:	54 f0 b8 f0 1c f1 80 f1 e4 f1 48 f2 ac f2 10 f3     T.........H.....
10001ae8:	74 f3 d8 f3 3c f4 a0 f4 04 f5 68 f5 cd f5 31 f6     t...<.....h...1.
10001af8:	95 f6 f9 f6 5e f7 c2 f7 26 f8 8b f8 ef f8 53 f9     ....^...&.....S.
10001b08:	b8 f9 1c fa 81 fa e5 fa 49 fb ae fb 12 fc 77 fc     ........I.....w.
10001b18:	db fc 40 fd a4 fd 09 fe 6d fe d2 fe 36 ff 9b ff     ..@.....m...6...

10001b28 <time_count>:
	...

10001b30 <adc2_isr_count>:
10001b30:	00 00 00 00                                         ....

10001b34 <adc1_isr_count>:
10001b34:	00 00 00 00                                         ....

10001b38 <adc0_isr_count>:
10001b38:	00 00 00 00                                         ....

10001b3c <ST_Delay_num>:
10001b3c:	78 00 00 00                                         x...

10001b40 <error_state>:
10001b40:	00 00 00 00                                         ....

10001b44 <adc_voltage_scale>:
10001b44:	00 00 00 00                                         ....

10001b48 <adc_current_scale>:
10001b48:	00 00 00 00                                         ....

10001b4c <CORDIC_DATA>:
10001b4c:	00 20 e4 12 fb 09 11 05 8b 02 46 01 a3 00 51 00     . ........F...Q.
10001b5c:	29 00 14 00 0a 00 05 00 03 00 01 00 01 00 00 00     )...............

10001b6c <TableStruct>:
10001b6c:	40 1d 00 10                                         @...

10001b70 <interface>:
	...

10001b88 <protocol>:
	...

10001bb4 <bufferLNet>:
	...

10001cb4 <sendSerialFcn>:
10001cb4:	00 00 00 00                                         ....

10001cb8 <receiveSerialFcn>:
10001cb8:	00 00 00 00                                         ....

10001cbc <isReceiveDataAvailableFcn>:
10001cbc:	00 00 00 00                                         ....

10001cc0 <isSendReadyFcn>:
10001cc0:	00 00 00 00                                         ....

10001cc4 <lastSyn>:
10001cc4:	00 00 00 00                                         ....

10001cc8 <nextGlobalState>:
10001cc8:	00 00 00 00                                         ....

10001ccc <txBufFull.1618>:
10001ccc:	00 00 00 00                                         ....

10001cd0 <serviceTable>:
	...

10001d3c <_Ctype>:
10001d3c:	89 69 00 00                                         .i..

10001d40 <TheTableStruct>:
	...

10001d80 <TScope>:
	...

10001e00 <ScopeArray>:
	...

10003e00 <adc_buf>:
	...

10003e18 <adc_data>:
	...

10003e3c <error_param>:
	...

10003e74 <sin_data>:
	...

10003e80 <commu_data>:
10003e80:	00 00 00 00                                         ....

10003e84 <control_param>:
	...

10003eb8 <sys_control>:
	...

10003ec4 <smc1>:
	...

10003ef8 <PIParmW>:
	...

10003f14 <PIParmQ>:
	...

10003f30 <PIParmD>:
	...

10003f4c <ParkParm>:
	...

10003f70 <SVGenParm>:
	...

10003f80 <speed_data>:
	...

10003fb8 <run_mode>:
	...

10003fba <DATA_atan2CORDIC>:
	...

10003fbc <Data_FracMpy>:
10003fbc:	00 00 00 00                                         ....

10003fc0 <e10>:
10003fc0:	00 00 00 00                                         ....

10003fc4 <e2>:
10003fc4:	00 00 00 00                                         ....

10003fc8 <lf>:
10003fc8:	00 00 00 00                                         ....

10003fcc <S>:
10003fcc:	00 00 00 00                                         ....

10003fd0 <__Heap_Start__>:
	...
